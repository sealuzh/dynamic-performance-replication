/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:55:22 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2105);
      Vector vector0 = compressedVector0.blankOfLength(3);
      assertEquals(3, vector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2105, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2145543735, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Locale locale0 = Locale.US;
      locale0.hasExtensions();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      compressedVector0.mkString(numberFormat0, "lQ8j-1");
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("lQ8j-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toBinary();
      compressedVector0.toCSV();
      compressedVector0.copyOfLength(8);
      // Undeclared exception!
      try { 
        compressedVector0.set(8, 618.9487864);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '8' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byte byte1 = (byte)32;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(48, 1.0, (Random) mockRandom0);
      boolean boolean0 = compressedVector0.nonZeroAt(48);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 237;
      CompressedVector compressedVector0 = CompressedVector.zero(237, 1);
      compressedVector0.norm();
      compressedVector0.setAll(237);
      compressedVector0.set(1, 1);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1999.26);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toString();
      compressedVector0.iterator();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1254, (-1570.65932));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1254' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector.zero(1144);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1144);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(428);
      Float float0 = new Float((float) 428);
      Float.isFinite((-174.68834F));
      hashMap0.put(integer0, float0);
      hashMap0.put(integer0, (Float) null);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(1729, 707.21084909, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        CompressedVector.random(2, (double) (-9), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = new Locale("oogrVpzJ+6tRsx!uWD", "oogrVpzJ+6tRsx!uWD", "oogrVpzJ+6tRsx!uWD");
      Locale.getISOCountries();
      locale0.getDisplayScript();
      locale0.hasExtensions();
      NumberFormat.getPercentInstance(locale0);
      CompressedVector compressedVector0 = CompressedVector.zero(214);
      compressedVector0.copyOfLength(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1039), vectorFunction0);
      assertEquals(214, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Float.SIZE;
      Integer integer0 = new Integer(0);
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      int int1 = Double.MIN_EXPONENT;
      Integer integer1 = new Integer(0);
      compressedVector0.setAll(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1022)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-1022), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1979, 1979);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1979, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2105);
      compressedVector0.setAll(0.0);
      compressedVector0.spliterator();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(924, 2105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1999.26);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.manhattanNorm();
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        compressedVector0.set(232, 232);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '232' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1263, 0);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(0, 1263);
      compressedVector0.swapElements(0, (-1));
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      CompressedVector compressedVector0 = CompressedVector.zero(243, 0);
      mockRandom0.nextInt();
      mockRandom0.nextFloat();
      compressedVector0.setAll((-230.06649451808798));
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.1F).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      compressedVector0.toColumnMatrix();
      MockRandom mockRandom0 = new MockRandom(0);
      compressedVector0.swapElements(222, 0);
      MockRandom mockRandom1 = new MockRandom(793L);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1172.6625822)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      compressedVector0.nonZeroIterator();
      compressedVector0.copyOfLength(1375);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = Float.SIZE;
      Integer integer0 = new Integer(0);
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      Integer integer1 = new Integer(0);
      compressedVector0.setAll((double) integer0);
      compressedVector0.swapElements(1001, 1001);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = new Locale("oogrVpzJ+6tRsx!uWD", "I7}k]Exv", "I7}k]Exv");
      DecimalFormat decimalFormat0 = new DecimalFormat("oogrVpzJ+6tRsx!uWD");
      MockRandom mockRandom0 = new MockRandom(2304L);
      CompressedVector compressedVector0 = CompressedVector.zero(2, 0);
      mockRandom0.nextInt();
      compressedVector0.swapElements(0, 8);
      // Undeclared exception!
      try { 
        CompressedVector.random(2, 1914.03746, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.zero(2, 0);
      mockRandom0.nextInt();
      compressedVector0.getOrElse(0, 0);
      Integer integer0 = new Integer(0);
      MockRandom mockRandom1 = new MockRandom(0);
      mockRandom1.nextInt();
      mockRandom1.ints();
      mockRandom0.nextFloat();
      compressedVector0.setAll(232.0);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1290;
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      byte[] byteArray0 = compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      compressedVector0.toColumnMatrix();
      byte byte0 = (byte)32;
      CompressedVector.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1636);
      Integer.toUnsignedString(1636);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1636;
      doubleArray0[1] = (double) 1636;
      doubleArray0[2] = (double) 1636;
      doubleArray0[3] = (double) 1636;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Locale locale0 = Locale.US;
      locale0.hasExtensions();
      NumberFormat.getPercentInstance(locale0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      byte[] byteArray0 = compressedVector0.toBinary();
      compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
      int int0 = 772;
      SparseVector.zero(1636, 772);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-3114), 251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale.getISOCountries();
      locale0.getDisplayScript();
      NumberFormat.getPercentInstance(locale0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 234.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.nonZeroAt((-1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.values();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(6183.542240380845, (double)7, 335.1698609570514, (-99.326169314056), (-1602.71506)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      Integer integer0 = new Integer(7);
      Integer.max(1431655765, 1431655765);
      compressedVector0.min();
      hashMap0.put(integer0, (Double) null);
      Double.min(1.0, 1431655765);
      String string0 = "HQn~ TVD%e3GnadUk9";
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("HQn~ TVD%e3GnadUk9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1636;
      Integer integer0 = new Integer(1636);
      Integer.toUnsignedString(1636);
      hashMap0.put(integer0, integer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1636;
      doubleArray0[1] = (double) 1636;
      doubleArray0[2] = 2331.0;
      doubleArray0[3] = (-2197.5391217337);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1636;
      doubleArray0[6] = (double) 1636;
      doubleArray0[7] = (double) 1636;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Locale locale0 = Locale.US;
      locale0.hasExtensions();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      compressedVector0.mkString(numberFormat0, "1636");
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("lQ8j-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 243;
      CompressedVector compressedVector0 = CompressedVector.zero(243, 0);
      compressedVector0.setAll((-230.06649451808798));
      int int2 = 236;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2659), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.zero(2, 0);
      mockRandom0.nextInt();
      mockRandom0.nextFloat();
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Locale locale0 = Locale.US;
      locale0.getDisplayScript();
      locale0.hasExtensions();
      NumberFormat.getPercentInstance(locale0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextFloat();
      compressedVector0.setAll(1.0);
      CompressedVector compressedVector1 = CompressedVector.random(1, (double) 1, (Random) mockRandom1);
      compressedVector1.swapElements(1, (-1048));
      compressedVector0.nonZeroIterator();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "oogrVpzJ+6tRsx!uWD";
      Locale locale0 = new Locale("oogrVpzJ+6tRsx!uWD", "I7}k]Exv", "I7}k]Exv");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(2304L);
      CompressedVector compressedVector0 = CompressedVector.zero(2, 0);
      mockRandom0.nextInt();
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(1979, (-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -506.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      int int0 = (-2115);
      compressedVector0.toSparseVector();
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft((-2115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-2115].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = new Locale("oogrVpzJ+6tRsx!uWD", "I7}k]Exv", "I7}k]Exv");
      locale0.getDisplayScript();
      locale0.hasExtensions();
      NumberFormat.getPercentInstance(locale0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      CompressedVector compressedVector0 = CompressedVector.zero(243, 0);
      mockRandom0.nextInt();
      mockRandom0.nextFloat();
      compressedVector0.setAll((-230.06649451808798));
      compressedVector0.swapElements(236, 236);
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      compressedVector0.getOrElse(0, 1290);
      compressedVector0.toColumnMatrix();
      compressedVector0.getOrElse(0, 0);
      compressedVector0.swapElements((-2703), 0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      Integer integer0 = new Integer((-2703));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      Byte byte0 = new Byte((byte)18);
      compressedVector0.setAll((-1335.510425));
      int int1 = 9;
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, (-2703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      compressedVector0.toColumnMatrix();
      ((CompressedVector) sparseVector0).toBinary();
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      int int1 = 42;
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap1, 42);
      compressedVector1.set(31, 42);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      double double0 = (-2266.442740912925);
      try { 
        Integer.valueOf("matrix", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(237, 1);
      compressedVector0.norm();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      compressedVector0.set(1, 1);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      OoPlaceVectorsAddition ooPlaceVectorsAddition1 = new OoPlaceVectorsAddition();
      ooPlaceVectorsAddition1.apply((SparseVector) compressedVector0, sparseVector0);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1169), (-1169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1169
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = new Locale("oogrVpzJ+6tRsx!uWD", "I7}k]Exv", "I7}k]Exv");
      locale0.getDisplayScript();
      locale0.hasExtensions();
      NumberFormat.getPercentInstance(locale0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      CompressedVector compressedVector0 = CompressedVector.zero(243, 0);
      mockRandom0.nextInt();
      mockRandom0.nextFloat();
      compressedVector0.setAll((-230.06649451808798));
      compressedVector0.swapElements(0, 16);
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(392, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 713;
      intArray0[1] = 713;
      intArray0[2] = 713;
      intArray0[3] = 1;
      intArray0[5] = 7;
      CompressedVector compressedVector0 = new CompressedVector(2979, 713);
      compressedVector0.setAll(1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-61), 224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 10);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(10, 1290);
      int int0 = 0;
      compressedVector0.getOrElse(0, 1290);
      Matrix matrix0 = compressedVector0.toColumnMatrix();
      compressedVector0.infinityNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      // Undeclared exception!
      try { 
        numberFormat0.format((Object) matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      compressedVector0.getOrElse(0, 1290);
      compressedVector0.toColumnMatrix();
      compressedVector0.swapElements(1290, 0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      MockRandom mockRandom1 = new MockRandom();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1267);
      compressedVector0.nonZeroIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector0.setAll(4683.0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1279, vectorFunction0);
      compressedVector0.nonZeroAt(1262);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 10;
      CompressedVector compressedVector0 = new CompressedVector(1290, 10);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(10, 1290);
      int int1 = 3;
      compressedVector0.set(3, 3);
      // Undeclared exception!
      try { 
        CompressedVector.zero(243, 1290);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1290.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = (-3626);
      Integer integer0 = new Integer((-3626));
      Integer.getInteger("", integer0);
      int int1 = (-1671);
      Integer.max(8, (-1671));
      Double double0 = new Double((-3626));
      Integer.max((-1671), (-1671));
      Double.min(1.0, 3948.573934);
      Double.max((-1864.2428), (-1864.2428));
      hashMap0.put(integer0, double0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      compressedVector0.getOrElse(0, 1290);
      compressedVector0.toColumnMatrix();
      compressedVector0.getOrElse(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = (-2703);
      compressedVector0.swapElements((-2703), 0);
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextFloat();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2703), vectorFunction1);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-953), 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-953' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      compressedVector0.getOrElse(0, 1290);
      compressedVector0.set(0, 1290);
      compressedVector0.swapElements(0, 1290);
      MockRandom mockRandom0 = new MockRandom(1290);
      MockRandom mockRandom1 = new MockRandom((-3376L));
      compressedVector0.toBinary();
      Float float0 = new Float((double) (-3376L));
      compressedVector0.setAll(2.0);
      int int0 = Long.SIZE;
      Integer.getInteger("maB");
      CompressedVector.zero(1243, 0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 238.8522437086503;
      doubleArray0[3] = (-1605.6338);
      doubleArray0[4] = 2336.860679;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 85.69141165769595;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1605.6338), (-856.0), 1291.00891161521, 85.69141165769595, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      Vector.zero(9);
      compressedVector0.toString();
      Vector vector0 = compressedVector0.copyOfLength(9);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1605.6338), 1291.00891161521, (-1605.6338), (-3672.4271552082), 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      vector0.update(vectorFunction1);
      vector0.toDenseVector();
      compressedVector0.nonZeroIterator();
      compressedVector0.nonZeroIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.blankOfLength(108);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1263, 0);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(0, 1263);
      compressedVector0.set(0, 0);
      compressedVector0.getOrElse(65, 0);
      compressedVector0.toColumnMatrix();
      CompressedVector compressedVector1 = new CompressedVector(219, 65);
      compressedVector1.getOrElse(0, 0.0);
      compressedVector1.swapElements(0, 1597);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector1.forEach(consumer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      // Undeclared exception!
      try { 
        SparseVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }
}
