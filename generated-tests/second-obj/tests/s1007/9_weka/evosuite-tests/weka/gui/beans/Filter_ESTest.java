/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:56:13 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Panel;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.image.ImageObserver;
import java.beans.EventSetDescriptor;
import java.util.Locale;
import javax.swing.InputVerifier;
import javax.swing.JApplet;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JToolTip;
import javax.swing.plaf.multi.MultiButtonUI;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.Element;
import javax.swing.text.PlainDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.associations.FilteredAssociator;
import weka.classifiers.CostMatrix;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckGOE;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.TestInstances;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addHierarchyListener((HierarchyListener) null);
      filter0.getFilter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addInstanceListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.connectionNotification("EC J+@M(", classifier0);
      boolean boolean0 = filter0.eventGeneratable("Passing on pending instances...");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.createVolatileImage(0, 12);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      Logger logger0 = sorter0.m_log;
      filter0.setLog((Logger) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      filter0.getFilter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Saver saver0 = new Saver();
      filter0.addTestSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.removeDataSourceListener(dataVisualizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVisual();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassAssigner classAssigner0 = new ClassAssigner();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(classAssigner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.ClassAssigner : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      filter0.useDefaultVisual();
      // Undeclared exception!
      try { 
        filter0.performRequest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeTestSetListener((TestSetListener) null);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      BeanVisual beanVisual0 = testSetMaker0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("TestSetMaker", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      filter0.setCustomName("mXL(@9oP");
      ComponentOrientation componentOrientation0 = filter0.getComponentOrientation();
      Locale locale0 = Locale.FRENCH;
      ComponentOrientation.getOrientation(locale0);
      filter0.applyComponentOrientation(componentOrientation0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.addInstanceListener(substringReplacer0);
      Saver saver0 = new Saver();
      filter0.removeInstanceListener(saver0);
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesNoClass();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(substringReplacer0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      filter0.connectionNotification("\"oSfNv6_v1QLHY$", "\"oSfNv6_v1QLHY$");
      filter0.eventGeneratable("\"oSfNv6_v1QLHY$");
      filter0.getWrappedAlgorithm();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      Panel panel0 = null;
      try {
        panel0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      AsyncBoxView asyncBoxView0 = new AsyncBoxView(element0, 478);
      asyncBoxView0.getContainer();
      filter0.checkImage((Image) null, (ImageObserver) null);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeDataSourceListener(scatterPlotMatrix0);
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      BeanVisual beanVisual0 = classifier0.m_visual;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      classifier0.getAlignmentX();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(beanVisual0, instances0, 24, (-1954840167), 0, 2141);
      filter0.acceptTestSet(testSetEvent0);
      Canvas canvas0 = new Canvas();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(canvas0, instances0, 2, (-13), 3457, 0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Instances instances1 = flowByExpression0.getConnectedFormat();
      assertNull(instances1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      CostMatrix costMatrix0 = new CostMatrix((byte)61);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.useDefaultVisual();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      filter0.addInstanceListener(sorter0);
      Discretize discretize0 = new Discretize();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      sorter0.getConnectedFormat();
      TestSetEvent testSetEvent0 = new TestSetEvent(wordTokenizer0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      Classifier classifier0 = new Classifier();
      BeanVisual beanVisual0 = classifier0.m_visual;
      filter0.setVisual(beanVisual0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      classifier0.getInsets();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classifier0, instances0, 0, 2, 3, 1);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      filter0.acceptTrainingSet(trainingSetEvent0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.useDefaultVisual();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertEquals("A simple tokenizer that is using the java.util.StringTokenizer class to tokenize the strings.", wordTokenizer0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      Classifier classifier0 = new Classifier();
      BeanVisual beanVisual0 = classifier0.m_visual;
      filter0.setVisual(beanVisual0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      classifier0.getAlignmentX();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      classifier0.getInsets();
      filter0.getVisual();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classifier0, instances0, 0, 2, 3, 1);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.acceptTrainingSet(trainingSetEvent0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.useDefaultVisual();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getBaselineResizeBehavior();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = filter0.eventGeneratable("!ATLV");
      assertFalse(boolean0);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.getFilter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptInstance((InstanceEvent) null);
      Appender appender0 = new Appender();
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesNoClass();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance((Instances) null);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(minkowskiDistance0, (Instances) null, 1, 130, 0, (-2088151438));
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      flowByExpression0.setDoubleBuffered(false);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.removeInstanceListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Associator associator0 = new Associator();
      associator0.getColorModel();
      filter0.connectionNotification("@relation", textDirectoryLoader0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.useDefaultVisual();
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.stop();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("@aJx5uQdv5vM'iT{yQ$", substringReplacer0);
      filter0.eventGeneratable("@aJx5uQdv5vM'iT{yQ$");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@aJx5uQdv5vM'iT{yQ$");
      filter0.stop();
      filter0.connectionAllowed("@aJx5uQdv5vM'iT{yQ$");
      // Undeclared exception!
      try { 
        filter0.performRequest("@aJx5uQdv5vM'iT{yQ$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @aJx5uQdv5vM'iT{yQ$ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      clusterer0.getInputMethodListeners();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance((Instances) null);
      MetaBean metaBean0 = new MetaBean();
      BeanVisual beanVisual0 = metaBean0.getVisual();
      filter0.setVisual(beanVisual0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setWrappedAlgorithm(attributeSelection0);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(clusterer0, (Instances) null, 2, 1, 2748, (-3442));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      Classifier classifier0 = new Classifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      classifier0.getInsets();
      filter0.isPaintingForPrint();
      filter0.getVisual();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.useDefaultVisual();
      filter0.enumerateRequests();
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainTestSplitMaker0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.eventGeneratable("<!DOCTYPE dataset\n[\n   <!ELEMENT dataset (header,body)>\n   <!ATTLIST dataset name CDATA #REQUIRED>\n   <!ATTLIST dataset version CDATA \"");
      filter0.useDefaultVisual();
      Random.setNextRandom((-2348));
      Saver saver0 = new Saver();
      filter0.addDataSourceListener(saver0);
      filter0.connectionAllowed("E;|CA.ooS\"c]5");
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      Sorter sorter2 = new Sorter();
      InstanceEvent instanceEvent0 = sorter2.m_ie;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      instanceEvent0.setStatus((-2348));
      instanceEvent0.setStructure((Instances) null);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.disconnectionNotification("E;|CA.oEo\"c]5", sorter0);
      filter0.removeTrainingSetListener(sorter2);
      Filter filter1 = new Filter();
      filter1.removeInstanceListener(sorter0);
      filter1.setDebugGraphicsOptions(46);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.connectionNotification("instance", fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F ");
      JToolTip jToolTip0 = filter0.createToolTip();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      FileSystemHandling.shouldAllThrowIOExceptions();
      crossValidationFoldMaker0.setAlignmentY(0.25F);
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      filter0.removeDataSourceListener(crossValidationFoldMaker0);
      Saver saver0 = new Saver();
      filter0.addInstanceListener(saver0);
      filter0.getVisual();
      filter0.removeDataSourceListener(saver0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, doubleArray0);
      InstanceEvent instanceEvent0 = new InstanceEvent(jToolTip0, binarySparseInstance0, (-263));
      filter0.notifyInstanceListeners(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.setOpaque(false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Saver saver0 = new Saver();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      filter0.connectionAllowed("E;|CA.oEoS\"c]5");
      // Undeclared exception!
      try { 
        filter0.performRequest("weka.gui.beans.DataVisualizer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka.gui.beans.DataVisualizer not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter1.getCapabilities();
      filter0.setFilter(filter1);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      TextViewer textViewer0 = new TextViewer();
      filter0.requestFocus();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(trainingSetMaker0, instances0, 1984, (-11), (-11), (-11));
      trainingSetEvent0.m_runNumber = (-11);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      sorter0.setFocusable(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MultiButtonUI multiButtonUI0 = new MultiButtonUI();
      // Undeclared exception!
      try { 
        multiButtonUI0.getMaximumSize(sorter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      Classifier classifier0 = new Classifier();
      BeanVisual beanVisual0 = classifier0.m_visual;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      classifier0.getAlignmentX();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      classifier0.getInsets();
      DenseInstance denseInstance0 = new DenseInstance(16);
      instances0.add((Instance) denseInstance0);
      Filter filter0 = new Filter();
      Insets insets0 = new Insets(0, 0, 40, 1212);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TestSetEvent testSetEvent0 = new TestSetEvent(mockThaiBuddhistDate0, instances0, 0, 3, 40, 0);
      Color color0 = Color.PINK;
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(incrementalClassifierEvaluator0, instances0);
      TrainingSetEvent trainingSetEvent1 = new TrainingSetEvent(testSetEvent0, instances0, 5429, (-1339), 480, (-848));
      filter0.acceptTrainingSet(trainingSetEvent1);
      Add add0 = new Add();
      filter0.acceptTestSet(testSetEvent0);
      filter0.isBusy();
      filter0.removeTestSetListener(trainTestSplitMaker0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.removeMouseListener((MouseListener) null);
      filter0.eventGeneratable("i94K*9C'T)<x9.");
      filter0.setCustomName("#L/5&ef^+>qWS1;g");
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      multiFilter0.getOptions();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      Associator associator0 = new Associator();
      Color color0 = Color.BLUE;
      Saver saver0 = new Saver();
      saver0.setForeground(color0);
      associator0.getStructure("Stop");
      instanceEvent0.setStructure((Instances) null);
      filter0.acceptInstance(instanceEvent0);
      filter0.connectionAllowed("@data");
      // Undeclared exception!
      try { 
        filter0.performRequest("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @relation not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.setOpaque(true);
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.acceptInstance((InstanceEvent) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      TestSetMaker testSetMaker0 = new TestSetMaker();
      JComponent.isLightweightComponent(testSetMaker0);
      Classifier classifier0 = new Classifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      filter0.getWrappedAlgorithm();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      Panel panel0 = new Panel();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setDoubleBuffered(true);
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      classifierErrorsPlotInstances0.getInstances();
      DataSetEvent dataSetEvent0 = new DataSetEvent(configurationListener0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(dataSetEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.DataSetEvent : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.acceptInstance((InstanceEvent) null);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      JComponent.isLightweightComponent(testSetMaker0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      Associator associator0 = new Associator();
      Color color0 = Color.BLUE;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1;
      floatArray0[0] = (float) 2;
      associator0.setLocation((-2090), (-2090));
      floatArray0[3] = (float) 0;
      color0.getRGBComponents(floatArray0);
      Saver saver0 = new Saver();
      saver0.setForeground(color0);
      filter0.acceptInstance(instanceEvent0);
      filter0.removeTestSetListener(filter0);
      filter0.connectionAllowed("&K/uO1Qj#p.>uc'>RHQ");
      Sorter sorter1 = new Sorter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.removeInstanceListener(sorter1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.setOpaque(true);
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      MockThread.reset();
      filter0.acceptInstance((InstanceEvent) null);
      Classifier classifier0 = new Classifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Associator associator0 = new Associator();
      Associator associator1 = new Associator();
      associator0.setInputVerifier((InputVerifier) null);
      associator1.getStructure("model");
      instanceEvent0.setStructure((Instances) null);
      filter0.acceptInstance((InstanceEvent) null);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      CheckGOE checkGOE0 = new CheckGOE();
      TestSetEvent testSetEvent0 = new TestSetEvent(checkGOE0, (Instances) null, 2, (-1118), 2, 3066);
      filter0.acceptTestSet(testSetEvent0);
      filter0.isBusy();
      filter0.stop();
      filter0.connectionAllowed("entialize");
      // Undeclared exception!
      try { 
        filter0.performRequest("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @relation not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.connectionAllowed("instance");
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getOptions();
      filter0.setFilter(multiFilter0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Saver saver0 = new Saver();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.enumerateRequests();
      Sorter sorter1 = new Sorter();
      Sorter sorter2 = new Sorter();
      InstanceEvent instanceEvent0 = sorter2.m_ie;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Associator associator0 = new Associator();
      Associator associator1 = new Associator();
      associator0.setInputVerifier((InputVerifier) null);
      associator1.getStructure("12yJfOb");
      instanceEvent0.setStructure((Instances) null);
      filter0.acceptInstance(instanceEvent0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      TestSetEvent testSetEvent0 = new TestSetEvent(integer0, (Instances) null, 1, (-47), 5, 5);
      filter0.acceptTestSet(testSetEvent0);
      filter0.isBusy();
      filter0.stop();
      filter0.connectionAllowed("instance");
      filter0.addDataSourceListener(associator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      Capabilities capabilities0 = filteredAssociator0.getCapabilities();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.enumerateRequests();
      TextViewer textViewer0 = new TextViewer();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(trainingSetMaker0, instances0, 1984, (-11), (-11), (-11));
      textDirectoryLoader0.getDirectory();
      trainingSetEvent0.m_runNumber = (-11);
      filter0.acceptTrainingSet(trainingSetEvent0);
      capabilities0.disableAllAttributeDependencies();
      trainingSetEvent0.m_runNumber = (-11);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      instanceEvent0.setStatus((-11));
      filter0.acceptInstance(instanceEvent0);
      Associator associator0 = new Associator();
      associator0.getStructure(".bsi");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      instanceEvent1.setStructure(instances0);
      // Undeclared exception!
      try { 
        filter0.performRequest(".bsi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .bsi not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      FilteredAssociator filteredAssociator1 = new FilteredAssociator();
      filteredAssociator1.getCapabilities();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      TextViewer textViewer0 = new TextViewer();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-3955), (-3955), (-11), (-1977));
      filter0.acceptTrainingSet(trainingSetEvent0);
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      instanceEvent0.setStatus((-11));
      filter0.acceptInstance(instanceEvent0);
      Associator associator0 = new Associator();
      Sorter sorter1 = new Sorter();
      Filter filter2 = new Filter();
      filter0.connectionAllowed(".bsi");
      filter0.getCustomName();
      filter0.getWrappedAlgorithm();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      // Undeclared exception!
      try { 
        filter0.add((Component) substringLabeler0, (Object) serializedModelSaver0, 533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }
}
