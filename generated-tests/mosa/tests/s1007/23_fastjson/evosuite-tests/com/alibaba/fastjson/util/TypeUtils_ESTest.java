/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:07:23 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Dimension2D;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.getClassFromMapping("n}j`YA>}N4r");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("n}j`YA>}N4r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : n}j`YA>}N4r
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(0, 0);
      TypeUtils.getClassFromMapping("Bof");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@3f58afec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException batchUpdateException0 = TypeUtils.castToJavaBean((Object) concurrentHashMap0, class0);
      assertNull(batchUpdateException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.isProxy(class0);
      Class<SecurityException> class1 = SecurityException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<HttpCookie> class0 = HttpCookie.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.isPath(class0);
      Random.setNextRandom((-656));
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      Long long0 = new Long((-656));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -656
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.keySet();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("w/La,K|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"w/La,K|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isKotlin(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      TypeUtils.getParserFeatures(class2);
      TypeUtils.getRawClass(class1);
      Class<NoSuchFieldException> class3 = NoSuchFieldException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) treeMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Class<Properties> class1 = Properties.class;
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("java.awt.Rectangle", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo(" not found", class1, class0, class2, (Field) null, 12, (-4325), 90);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      assertEquals("class java.lang.Object", class2.toString());
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("cl", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.isNumber(":>(e:b");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(":>(e:b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : :>(e:b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(0, 0);
      point0.translate(99999, 99999);
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<ChoiceFormat> arrayList0 = new ArrayList<ChoiceFormat>();
      TypeUtils typeUtils0 = new TypeUtils();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      long long0 = TypeUtils.fnv1a_64("sh");
      assertEquals(637600228986924734L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateFormatSymbols.getInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger();
      TypeUtils.castToByte(atomicInteger0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("'szDt1UH$~N");
      long long0 = TypeUtils.fnv1a_64_lower("w/La,K|");
      assertEquals((-4521553955352056185L), long0);
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("'szDt1UH$~N");
      TypeUtils.fnv1a_64_lower("w/La,K|");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("'szDt1UH$~N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'szDt1UH$~N\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.getGenericParamType((Type) null);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.isPath(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Object> class1 = Object.class;
      Object object0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<?> class0 = TypeUtils.getClassFromMapping("[Z");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Collection collection0 = TypeUtils.createCollection(class1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.castToSqlDate((Object) null);
      ArrayList<ChoiceFormat> arrayList0 = new ArrayList<ChoiceFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(";");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Long long0 = new Long(0L);
      Class<Float> class0 = Float.TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[0], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0);
      TypeUtils.castToBigInteger((Object) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("^*/");
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.toLocale("BrW%L:Z,");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "l|6";
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("l|6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : l|6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      String string0 = ParserConfig.DENY_PROPERTY;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("L}@B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : L}@B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InternalError internalError0 = new InternalError("-23&mHXc<GK");
      internalError0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.InternalError: -23&mHXc<GK
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.aliba\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.loadClass("java.time.ZoneRegion", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.loadClass("Lu`o");
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.isProxy(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long(0L);
      Class<Float> class0 = Float.TYPE;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) typeArray0[0], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Type[] typeArray0 = new Type[4];
      Class<Character> class0 = Character.TYPE;
      typeArray0[0] = (Type) class0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[1] = (Type) null;
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      typeArray0[2] = null;
      TypeUtils.getGenericParamType(type0);
      typeArray0[3] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONPDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@88aa59a4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Float> class0 = Float.TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[7]);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeSupport");
      TypeUtils.cast((Object) messageFormat0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.unwrapOptional(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      TypeUtils.castToSqlTime((Object) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.isNumber("1;jNLA1tj%");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass("1;jNLA1tj%");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("yyyy-MM-dd HH:mm:ss");
      TypeUtils.castToShort((Object) null);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.cglib.proxy.Factory");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "L";
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.clearClassMapping();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      ClassLoader.getSystemClassLoader();
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig1 = new ParserConfig();
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) collator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.text.RuleBasedCollator@289747d6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      String string0 = "an";
      decimalFormatSymbols0.setNaN("an");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.loadClass("Ugqp");
      TypeUtils.castToString("Ugqp");
      TypeUtils.loadClass((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("", classLoader0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      TypeUtils.isHibernateInitialized(noClassDefFoundError0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, false);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Class<String> class2 = String.class;
      Class<MockThaiBuddhistDate> class3 = MockThaiBuddhistDate.class;
      Class<BigInteger> class4 = BigInteger.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class4, "Ljava.awt.Color", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("Y$i", class2, class3, class3, (Field) null, 2084, (-2462), 2084);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class5, jSONType0, map0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong(2045L, toLongFunction0, 2045L, longBinaryOperator0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dimension0.setSize((Dimension2D) dimension1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("yA*~TFG^bQ2}(L`Kb;D", classLoader0);
      TypeUtils.castToBytes("Y#kKSjGs-c!r5anul");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToShort((Object) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(1904);
      Point point0 = new Point(975, 51068);
      point0.translate(51068, 51068);
      JSONObject jSONObject0 = new JSONObject(182, true);
      WeakHashMap<String, Object> weakHashMap1 = new WeakHashMap<String, Object>();
      jSONObject0.put("f9T2lqL>1]M7'sk", (Object) dateFormatSymbols0);
      weakHashMap1.put("longValueExact", point0);
      weakHashMap1.put("yyyy-MM-dd HH:mm:ss", (Object) null);
      TypeUtils.castToDouble((Object) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short short0 = new Short((short)28);
      Short.toUnsignedInt((short)28);
      Date date0 = TypeUtils.castToDate(short0);
      LinkedHashMap<String, SQLNonTransientException> linkedHashMap0 = new LinkedHashMap<String, SQLNonTransientException>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      TypeUtils.castToSqlDate(date0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) optionalCodec0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.unwrapOptional(class0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class1);
      Insets insets0 = new Insets(2147483645, 1326, 1326, 2147483645);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Insets[top=2147483645,left=1326,bottom=1326,right=2147483645]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.getClassFromMapping("n}j`YA>}N4r");
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      SQLDataException sQLDataException0 = new SQLDataException(noSuchFieldError0);
      noSuchFieldError0.initCause(sQLDataException0);
      BreakIterator.getCharacterInstance();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(noSuchFieldException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      Class<Date> class0 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SQLException> class1 = SQLException.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TreeSet<NumberFormat> treeSet0 = new TreeSet<NumberFormat>();
      TypeUtils.isHibernateInitialized((Object) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Short short0 = new Short((short)28);
      int int0 = Opcodes.INVOKESTATIC;
      TypeUtils.castToDate(short0);
      LinkedHashMap<String, SQLNonTransientException> linkedHashMap0 = new LinkedHashMap<String, SQLNonTransientException>();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>(linkedHashMap0);
      JSONObject jSONObject0 = new JSONObject((short)28, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Rectangle> class0 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap1, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DecimalFormatSymbols.getInstance();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      SQLDataException sQLDataException0 = new SQLDataException(noSuchFieldError0);
      noSuchFieldError0.initCause(sQLDataException0);
      BreakIterator.getCharacterInstance();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.castToBoolean((Object) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate((-374), 113);
      TypeUtils.castToInt((Object) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate(99999, 99999);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      SQLDataException sQLDataException0 = new SQLDataException();
      LinkedHashMap<BitSet, SqlDateDeserializer> linkedHashMap0 = new LinkedHashMap<BitSet, SqlDateDeserializer>();
      TypeUtils.castToBigDecimal(linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong((-1034L), toLongFunction0, (-1034L), longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "get");
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("g", classLoader0, false);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      AtomicInteger atomicInteger0 = new AtomicInteger(90);
      TypeUtils.castToTimestamp(atomicInteger0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = stringArray0[1];
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<Short> class1 = Short.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      Collator.getInstance();
      Hashtable<NumberDeserializer, SQLException> hashtable0 = new Hashtable<NumberDeserializer, SQLException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashtable0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateFormatSymbols.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HttpCookie httpCookie0 = new HttpCookie("WRY~^*O%>3`", "WRY~^*O%>3`");
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "WRY~^*O%>3`", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalMonitorStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TypeUtils.getClassFromMapping("kotlin.jvm.internal.DefaultConstructorMarker");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("kotlin.jvm.internal.DefaultConstructorMarker");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kotlin.jvm.internal.DefaultConstructorMarker\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 1014;
      intArray0[1] = 11;
      intArray0[2] = 80;
      intArray0[3] = (-4210);
      intArray0[4] = 9;
      intArray0[5] = 33;
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("/cbQLWnjG/iQ5B5L94");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "/cbQLWnjG/iQ5B5L94", intArray0, noSuchMethodException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Character> class0 = Character.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.loadClass((String) null);
      TypeUtils.getClass(type0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      TypeUtils.fnv1a_64_lower("kB-+)W");
      MockThread mockThread0 = new MockThread("getgetSigners");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader0, true);
      TypeUtils.loadClass("1");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = ";";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(";");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("&:_>~Pu/Ec(;IYJ4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : &:_>~Pu/Ec(;IYJ4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeUtils.isNumber(";2lkK:oqpCJ^dkD]zv");
      TypeUtils.getClassFromMapping(";2lkK:oqpCJ^dkD]zv");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TypeUtils.castToSqlTime((Object) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateFormatSymbols.getInstance();
      MockThread mockThread0 = new MockThread("&+f$Bu3;4oVBV0C7lnv");
      MockThread mockThread1 = new MockThread();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.getParent();
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      SQLDataException sQLDataException0 = new SQLDataException(mockNullPointerException0);
      NoSuchFieldError noSuchFieldError1 = new NoSuchFieldError("6\"&U'S<Cu@@&Z");
      noSuchFieldError0.initCause(noSuchFieldError1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : o
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("'szDt1UH$~N");
      TypeUtils.fnv1a_64_lower("w/La,K|");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("'szDt1UH$~N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 'szDt1UH$~N
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.clearClassMapping();
      JSONObject jSONObject0 = new JSONObject(27, false);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      weakHashMap0.put("@type", jSONObject0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig parserConfig1 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("cl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(869);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Locale locale0 = Locale.CANADA;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      Short short0 = new Short((short) (-3182));
      TypeUtils.castToInt(short0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, "gettoString");
      identityHashMap0.put((String) null, "kotlin.ranges.CharRange");
      identityHashMap0.put((String) null, (String) null);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("seperator");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("");
      mockIllegalAccessException0.getCause();
      Integer integer0 = new Integer(25);
      TypeUtils.castToDouble(integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "kB-+)W";
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.loadClass("char");
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("kB-+)W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : kB-+)W
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils.decapitalize(".000000000");
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.isGenericParamType(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<VerifyError> class2 = VerifyError.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.isGenericParamType(class0);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Locale locale0 = Locale.CANADA;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      TypeUtils.castToInt("null");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "o";
      Character character0 = TypeUtils.castToChar("o");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("o");
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : o
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate(99999, 99999);
      JSONObject jSONObject0 = new JSONObject(182, true);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      weakHashMap0.put("1.2.46", (Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BiFunction<Object, Object, SQLException> biFunction0 = (BiFunction<Object, Object, SQLException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.computeIfPresent("@type", biFunction0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=[");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, (ParserConfig) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      Class<Short> class0 = Short.TYPE;
      typeArray0[0] = (Type) class0;
      Class<Double> class1 = Double.TYPE;
      typeArray0[1] = (Type) class1;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<Point> class3 = Point.class;
      TypeUtils.getKoltinConstructorParameters(class3);
      TypeUtils.isProxy(class1);
      JSONArray jSONArray0 = new JSONArray(30);
      jSONArray0.getComponentType();
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      BreakIterator.getCharacterInstance();
      Class<MockJapaneseDate> class4 = MockJapaneseDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      TypeUtils.isHibernateInitialized(imageCapabilities0);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.fnv1a_64("flf/;wd6");
      TypeUtils.loadClass("flf/;wd6");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.clearClassMapping();
      Class<Double> class0 = Double.TYPE;
      TypeUtils.unwrapOptional(class0);
      TypeUtils.castToDate((Object) null);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Point point0 = new Point(116, 52);
      point0.setLocation(1426, 67);
      point0.translate(19, (-1612689374));
      Class<Date> class0 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Point> class1 = Point.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      NoSuchFieldError noSuchFieldError1 = new NoSuchFieldError("n}j`YA>}N4r");
      noSuchFieldError1.initCause(mockNullPointerException0);
      Integer integer0 = new Integer(55);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<Double> class1 = Double.TYPE;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class2;
      typeArray0[6] = (Type) class0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      typeArray0[7] = (Type) class2;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[7], typeArray0[7]);
      TypeUtils.createCollection(class2);
      TypeUtils.fnv1a_64_lower("UNASSIGNEhD_STACK");
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      TypeUtils.getSerializeFeatures(class3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getClass(type0);
      TypeUtils.isHibernateInitialized(type0);
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.loadClass(">jE=84<=q91V0T<3:<7");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(0, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sVc);>3iuZ)|z? -", ";Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", 0);
      Locale locale0 = Locale.GERMANY;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      Class<Double> class1 = Double.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Point point0 = new Point();
      point0.move(19, 110);
      point0.setLocation(19, 19);
      point0.translate(99999, 99999);
      JSONObject jSONObject0 = new JSONObject(182, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Float float0 = new Float(1259.0F);
      TypeUtils.castToLong(float0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)28);
      int int0 = Opcodes.INVOKESTATIC;
      TypeUtils.castToDate(short0);
      LinkedHashMap<String, SQLNonTransientException> linkedHashMap0 = new LinkedHashMap<String, SQLNonTransientException>();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>(linkedHashMap0);
      JSONObject jSONObject0 = new JSONObject((short)28, true);
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.clearClassMapping();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)10;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TypeUtils.castToFloat(bigInteger0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.loadClass("UTF-8");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateFormatSymbols.getInstance();
      Class<Object> class0 = Object.class;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.clearClassMapping();
      TypeUtils.castToFloat((Object) null);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.loadClass("seperator");
      TypeUtils.getCollectionItemClass(class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Integer integer0 = new Integer(2197);
      TypeUtils.castToSqlDate(integer0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("getCause");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(21, true);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      weakHashMap0.put("dUGpzSR /K", "dUGpzSR /K");
      weakHashMap0.replace("@type", (Object) "dUGpzSR /K");
      weakHashMap0.put("@type", jSONObject0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {dUGpzSR /K=dUGpzSR /K, @type={}}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateFormatSymbols.getInstance();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      ClassLoader.getSystemClassLoader();
      MockThread mockThread0 = new MockThread(":^");
      MockThread mockThread1 = new MockThread(mockThread0);
      mockThread1.getContextClassLoader();
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("java.time.ZoneRegion", (ClassLoader) aSMClassLoader0, true);
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Point point0 = new Point();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) mapDeserializer0, class0);
      InternalError internalError0 = new InternalError();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("null", "null", 0);
      Locale locale0 = Locale.GERMANY;
      DecimalFormatSymbols.getInstance(locale0);
      internalError0.initCause(sQLIntegrityConstraintViolationException0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.isNumber("sVc);>3iuZ)|z? -");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("com.alibaba.fastjson.parser.deserializer.MapDeserializer@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@0000000001
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.keySet();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      InternalError internalError0 = new InternalError();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sVc);>3iuZ)|z? -", "sVc);>3iuZ)|z? -", 26);
      Locale locale0 = Locale.GERMANY;
      Point point0 = new Point();
      point0.translate(26, 26);
      TypeUtils.castToInt("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      String string0 = "o";
      TypeUtils.castToChar((Object) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("o");
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Character> class1 = Character.TYPE;
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("o", stringIndexOutOfBoundsException0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      TypeUtils.castToSqlTime(bigDecimal0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("NULL");
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension();
      dimension0.setSize((Dimension2D) dimension1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("char");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"char\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.isHibernateInitialized(classLoader1);
      TypeUtils.isNumber("xCC~VI{W");
      Class<Rectangle> class1 = Rectangle.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      TypeUtils.isGenericParamType(type0);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONObject jSONObject0 = new JSONObject(21, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(21, 3089, 22, 3089, 21, 21);
      TypeUtils.castToSqlTime(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("kB-+)W");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("kB-+)W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kB-+)W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = stringArray0[0];
      TypeUtils.loadClass(stringArray0[1]);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "NOT_BETWEEN", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TypeUtils.decapitalize(".000000000");
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.isGenericParamType(class1);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      Class<Date> class0 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      NoSuchFieldError noSuchFieldError1 = new NoSuchFieldError((String) null);
      noSuchFieldError0.initCause(noSuchFieldError1);
      Integer integer0 = new Integer(4);
      TypeUtils.castToBoolean(integer0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) type0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      TypeUtils.castToChar("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TypeUtils.loadClass((String) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "";
      TypeUtils.fnv1a_64_lower("");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ParserConfig parserConfig0 = null;
      TypeUtils.cast((Object) "", class0, (ParserConfig) null);
      TypeUtils.isKotlin(class0);
      TreeMap<String, ClientInfoStatus> treeMap0 = new TreeMap<String, ClientInfoStatus>();
      String string1 = "gO$~VIk ";
      String string2 = " not found";
      int[] intArray0 = new int[1];
      intArray0[0] = (-4084);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      LinkageError linkageError0 = new LinkageError("", sQLFeatureNotSupportedException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("gO$~VIk ");
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, ")+r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )+r
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      NumberFormatException numberFormatException0 = new NumberFormatException(":^");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.NumberFormatException: :^
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      Class<Date> class0 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SQLException> class1 = SQLException.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TreeSet<NumberFormat> treeSet0 = new TreeSet<NumberFormat>();
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      TypeUtils.castToString((Object) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = '4';
      charArray0[2] = 'a';
      charArray0[3] = '%';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 1551, parserConfig0, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateFormatSymbols.getInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("true", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.loadClass("Lr{tI59#i~L;");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(false);
      classLoader1.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", false);
      TypeUtils.isHibernateInitialized(classLoader1);
      TypeUtils.isNumber("1");
      Class<Rectangle> class1 = Rectangle.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.entrySet();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      TypeUtils.isGenericParamType(type0);
      TypeUtils.isHibernateInitialized(classLoader0);
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = stringArray0[0];
      TypeUtils.castToTimestamp(stringArray0[1]);
      TypeUtils.isNumber("");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToString("[");
      TypeUtils.loadClass((String) null);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[", (ClassLoader) aSMClassLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      Class<Date> class0 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SQLException> class1 = SQLException.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      Collator.getInstance();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Point point0 = new Point((-1356), 1548);
      point0.y = 1863;
      Point point1 = new Point(1548, (-1356));
      point1.translate((-1843422450), (-1811818856));
      Class<Character> class0 = Character.TYPE;
      Long long0 = new Long((-1811818856));
      Class<Float> class1 = Float.TYPE;
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class1;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig(false);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@3119daf6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
