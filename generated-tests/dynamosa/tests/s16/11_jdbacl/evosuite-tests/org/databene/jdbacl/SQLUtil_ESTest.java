/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 03:52:50 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(90092, "");
      String string0 = SQLUtil.renderValue(dBDataType0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-777), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(33, "ISO8859_7");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 2, "");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W~x3j1_JT$9");
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  UNIQUE (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "kB:/u1#%]CH<Wygs", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("}8 *8", " DEFAULT ", object0);
      assertEquals("}8 *8", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "Amt}:o~2N:uGYtZ6!_v");
      assertEquals("'Amt}:o~2N:uGYtZ6!_v'", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("into", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "<jRY/&K5,", true, stringArray0);
      String string0 = SQLUtil.substituteMarkers("", " and ", dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'kZp.#p.kQ[AgcFl");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, (-8), "v3\"w");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("V3\"W", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("Can't get counts on an invalid EventHandle", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[2], stringArray0);
      assertEquals("null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PRIMARY KEY ", defaultDBTable0, 901, "k|</3iKx<");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("PRIMARY KEY  K|</3IKX< NULL", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%p[Rv9(}j)I9");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("exec");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertTrue(dBForeignKeyConstraint0.isNameDeterministic());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/3MuG/~UjgFyZ", dBSchema0);
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "y7voA7,]Po[s9/k=w", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT y7voA7,]Po[s9/k=w PRIMARY KEY (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lrca!Q`-8.C.2}<v");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "KZ[\"^+>", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT KZ[\"^+> PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin("E2^S", stringArray0, "z<A%Uk[", (String) null, stringArray0);
      assertEquals("left join z<A%Uk[ as null on E2^S.null = null.null and E2^S.null = null.null and E2^S.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.leftJoin("SYSCOLUMNS", stringArray0, "E2^S", "", stringArray0);
      assertEquals("left join E2^S as  on SYSCOLUMNS.null = .null and SYSCOLUMNS.null = .null and SYSCOLUMNS.null = .null and SYSCOLUMNS.null = .null and SYSCOLUMNS.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(",iprL=Z", (String[]) null, "", ",iprL=Z", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("GZ/`_KlgIimfOG]c", stringArray0, "GZ/`_KlgIimfOG]c", "+zsPS4rm)?r@,s?P}G/", stringArray0);
      assertEquals("left join GZ/`_KlgIimfOG]c as +zsPS4rm)?r@,s?P}G/ on ", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, stringArray0[0], "alter index", stringArray0);
      assertEquals("left join null as alter index on null.null = alter index.null", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("$;wbFh^R sd C9Ii)?", "TCVN", stringArray0, (String) null, "", stringArray0);
      assertEquals("$;wbFh^R sd C9Ii)? join null as  on TCVN.null = .null and TCVN.null = .null and TCVN.null = .null and TCVN.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join(" and ", " and ", stringArray0, "", stringArray0[2], stringArray0);
      assertEquals(" and  join  as null on  and .null = null.null and  and .null = null.null and  and .null = null.null and  and .null = null.null and  and .null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("child indexes don't match; expected ", "", stringArray0, "aakVU*p0DuC", "~[[''6 C", stringArray0);
      assertEquals("child indexes don't match; expected  join aakVU*p0DuC as ~[[''6 C on .null = ~[[''6 C.null and .null = ~[[''6 C.null and .null = ~[[''6 C.null and .null = ~[[''6 C.null and .null = ~[[''6 C.null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("", "create unique indexsyscolumns", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on create unique indexsyscolumns.null = null.null and create unique indexsyscolumns.null = null.null and create unique indexsyscolumns.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "'[4ak?$'J:tr", stringArray0[1], stringArray0);
      assertEquals("'[4ak?$'J:tr as null on null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("O1n]EN~fsV$J", stringArray0, (String) null, "create table`", stringArray0);
      assertEquals("null as create table` on O1n]EN~fsV$J.null = create table`.null", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("into", stringArray0, "", "", stringArray0);
      assertEquals(" as  on into.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "create unique indextable_type", "create unique indextable_type", stringArray0);
      assertEquals("create unique indextable_type as create unique indextable_type on ", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("", stringArray0, "/3MuG/~UjgFyZ", "qk@=OLZ1sbj", stringArray0);
      assertEquals("/3MuG/~UjgFyZ as qk@=OLZ1sbj on .null = qk@=OLZ1sbj.null", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES null(, )", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("(", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , ) REFERENCES null(, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("9X][5", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 9X][5 ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%p[Rv9(}j)I9");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "pT})V", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[2];
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition(stringArray0[0], stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1971);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[16];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DBSchema dBSchema0 = new DBSchema("null.null, null.null, null.null, null.null, null.null, null.null, null.null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null.null, null.null, null.null, null.null, null.null, null.null, null.null", dBSchema0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("Z3LEO3F}dH-3\"k%N-", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("k/*");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("j^R(/*@2");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[15];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray0, (String) null, "null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[17];
      String[] stringArray1 = new String[6];
      // Undeclared exception!
      try { 
        SQLUtil.join("TvreS", "TvreS", stringArray0, "TvreS", "TvreS", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("delete", (String[]) null, "delete", "delete", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("&FO", stringArray0, "null.null, null.null, null.null, null.null, null.null, null.null, null.null", "&FO", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("*Ng_0MVN8#RRE4E$<T", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("v<(XFDs%vp", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " DEFAULT ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \" DEFAULT \" CONSTRAINT \" DEFAULT \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k65^?yN_ 6u[", dBSchema0);
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'E:w", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName((String) null);
      StringBuilder stringBuilder0 = new StringBuilder("i9>c]");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("i9>c]", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Unknown constraint type: ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"Unknown constraint type: \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "TCVN", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("TCVN");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("TCVN", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("(", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("k,cb,5", "k,cb,5", (String[]) null, "k,cb,5", "k,cb,5", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("inner", "aakVU*p0DuC", stringArray0, "org.ap", "aakVU*p0DuC", stringArray0);
      assertEquals("org.ap as aakVU*p0DuC on ", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectalter table join selectalter table as 'E:w on ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("call");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter index'e:w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeo. -g9'p>v(u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = SQLUtil.renderValue("rename");
      assertEquals("'rename'", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2010, "OQG_");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder(2010);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("OQG_(3)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" WHERE ", (DBTable) null, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" WHERE  : CLOB", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-1310), "[cN:");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[cN:", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("[CN:(1,1)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-777), "");
      String string0 = defaultDBColumn0.toString();
      assertEquals(" : ", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 2.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1157.47852051;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1157.47852051", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = SQLUtil.normalize("child indexes don't match; expected ", true);
      assertEquals("child indexes don 't match; expected '", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.normalize("T--S*c5\"tz[m!Y.", false);
      assertEquals("T -- S * c5 \"tz[m!Y.\"", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = SQLUtil.normalize(".Ogk.^|t*/PM", false);
      assertEquals(".Ogk.^ | t  */ PM", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = SQLUtil.normalize("setObject(Strin,Objct)", true);
      assertEquals("setObject (Strin, Objct)", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = SQLUtil.removeComments("' join ' as ' on '.null = '.null and '.null = '.null and '.null = '.null");
      assertEquals("' join ' as ' on '.null = '.null and '.null = '.null and '.null = '.null", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(367, "DATE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Mk$bV:!~rWYc*lW9!");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Mk$bV:!~rWYc*lW9!", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT Mk$bV:!~rWYc*lW9! ", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("L.khYVU.s(Ug3`", false, "L.khYVU.s(Ug3`", "RDB$VIEW_RELATIONS");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT L.khYVU.s(Ug3` ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "setObject(Strin,Objct)", "setObject(Strin,Objct)");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK setObject(Strin,Objct)", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema("alter tablederby.__rt.inrestore", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals(".alter tablederby.__rt.inrestore", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "select into");
      SQLUtil.addOptionalCondition("select into", stringBuilder0);
      assertEquals("select into or select into", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop index");
      SQLUtil.addRequiredCondition("drop index", stringBuilder0);
      assertEquals("drop index and drop index", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("@97uRxEm$%>+M", stringBuilder0);
      assertEquals("@97uRxEm$%>+M", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "sqlgett", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT sqlgett UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " and ", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("WO>n3/*\"l?PgX*Nx%K|");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectalter");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablederby.__rt.inrestore");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Character character0 = new Character(':');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("':'", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "child indexes don't match; expected ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("child indexes don't match; expected  = 'child indexes don't match; expected ' AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m}!#RQ])S`");
      DBDataType dBDataType0 = DBDataType.getInstance(6, "m}!#RQ])S`");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m}!#RQ])S`", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("m}!#RQ])S` M}!#RQ])S`(0,0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(41, "hQ!fCr*(5/_ *fzs");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hQ!fCr*(5/_ *fzs", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("hQ!fCr*(5/_ *fzs HQ!FCR*(5/_ *FZS(3) NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("o42T%Rs.gTswJ");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE DEFAULT o42T%Rs.gTswJ NULL", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'kZp.#p.kQ[AgcFl");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'kZp.#p.kQ[AgcFl", defaultDBTable0, (-800), "'kZp.#p.kQ[AgcFl");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("'kZp.#p.kQ[AgcFl, 'kZp.#p.kQ[AgcFl", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[16];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'kZp.#p.kQ[AgcFl");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'kZp.#p.kQ[AgcFl", defaultDBTable0, (-824), "'kZp.#p.kQ[AgcFl");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'kZp.#p.kQ[AgcFl");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'kZp.#p.kQ[AgcFl", defaultDBTable0, (-824), "'kZp.#p.kQ[AgcFl");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("'kZp.#p.kQ[AgcFl", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOBRELEASELOCATOR", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CLOBRELEASELOCATOR");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DATE");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setObject(String,Object)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(".append() is depre'ated, please use the add() method");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin("", stringArray0, "Y^[[*PN", " DATE NULL", stringArray0);
      assertEquals("left join Y^[[*PN as  DATE NULL on .null =  DATE NULL.null and .null =  DATE NULL.null and .null =  DATE NULL.null and .null =  DATE NULL.null", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materilized viewselectaltetable", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, (NameSpec) null);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("INIT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("INIT", defaultDBTable0, (-800), "INIT");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "kvrF{P}9A", true, "INIT");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("INIT NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DBSchema dBSchema0 = new DBSchema("null.null, null.null, null.null, null.null, null.null, null.null, null.null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null.null, null.null, null.null, null.null, null.null, null.null, null.null", dBSchema0);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null.null, null.null, null.null, null.null, null.null, null.null, null.null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("child indexes don't match; expected ");
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "child indexes don't match; expected ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("child indexes don't match; expected ", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
