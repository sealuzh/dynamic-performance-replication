/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:04:28 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.min = 3;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = Simplify.simplify(regexp1);
      assertSame(regexp3, regexp1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.op = regexp_Op0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp regexp5 = new Regexp(regexp4);
      regexp4.op = regexp_Op1;
      regexp5.subs = regexpArray0;
      Regexp regexp6 = Simplify.simplify(regexp5);
      assertSame(regexp5, regexp6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp0);
      regexp3.subs = regexpArray0;
      Simplify.simplify(regexp3);
      // Undeclared exception!
      try { 
        regexp3.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 3;
      Regexp[] regexpArray0 = new Regexp[32];
      regexpArray0[6] = regexpArray0[7];
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2);
      Regexp[] regexpArray0 = new Regexp[13];
      regexpArray0[7] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[11] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotSame(regexp0, regexp1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 3;
      Regexp[] regexpArray0 = new Regexp[19];
      regexpArray0[7] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.min = 3;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      Object object1 = new Object();
      regexp0.equals(object1);
      Simplify.simplify(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp regexp4 = Simplify.simplify(regexp1);
      Regexp regexp5 = new Regexp(regexp1);
      regexp2.flags = 3;
      Simplify.simplify(regexp0);
      Regexp regexp6 = new Regexp(regexp0);
      Regexp regexp7 = new Regexp(regexp0);
      Regexp regexp8 = new Regexp(regexp3);
      Regexp regexp9 = Simplify.simplify(regexp0);
      Regexp regexp10 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp9);
      Simplify.simplify(regexp4);
      Regexp regexp11 = Simplify.simplify(regexp2);
      Regexp[] regexpArray1 = new Regexp[7];
      regexpArray1[0] = regexp2;
      regexpArray1[1] = regexp6;
      Regexp regexp12 = new Regexp(regexp_Op0);
      regexpArray1[2] = regexp12;
      regexpArray1[3] = regexp0;
      regexpArray1[5] = regexp9;
      regexpArray1[6] = regexp11;
      regexp11.subs = regexpArray1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp11);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[7] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      Simplify.simplify(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      Simplify.simplify(regexp1);
      regexp1.max = (-1);
      regexp1.min = (-1);
      Regexp regexp2 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexpArray0[7];
      regexpArray0[4] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexpArray0[3]);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.subs = regexpArray0;
      regexp2.max = (-1);
      Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = Simplify.simplify(regexp2);
      assertNotSame(regexp0, regexp4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexpArray0[7];
      regexpArray0[4] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Simplify.simplify(regexpArray0[3]);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.max = (-1);
      regexp1.min = (-1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexp1.min = 4543;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Regexp regexp5 = Simplify.simplify(regexp1);
      assertFalse(regexp5.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[7] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.flags = 1;
      Simplify.simplify(regexpArray0[3]);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 1;
      regexp1.min = 1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp1);
      assertNull(regexp4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[7] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.flags = 1;
      Simplify.simplify(regexpArray0[3]);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 1;
      Regexp regexp2 = new Regexp(regexp0);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp regexp4 = new Regexp(regexp3);
      regexp0.equals("");
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = Simplify.simplify(regexp0);
      Regexp regexp7 = new Regexp(regexp2);
      Simplify.simplify(regexp0);
      Regexp regexp8 = new Regexp(regexp1);
      Regexp regexp9 = Simplify.simplify(regexp8);
      Regexp regexp10 = Simplify.simplify(regexp6);
      assertFalse(regexp10.equals((Object)regexp9));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[11];
      regexpArray0[0] = regexp0;
      regexpArray0[0] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.min = (-1);
      Simplify.simplify(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Simplify.simplify(regexpArray0[4]);
      Regexp regexp4 = new Regexp(regexp_Op1);
      Regexp regexp5 = Simplify.simplify(regexp4);
      assertTrue(regexp5.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[0] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.min = (-2);
      Simplify.simplify(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Simplify.simplify(regexpArray0[4]);
      Regexp regexp4 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp4);
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp5 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }
}
