/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 08:31:40 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      mockPrintStream0.printf((Locale) null, "i{O8@R'x|", objectArray0);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.compactClassName(".G!'zv$b?Fjk=", ".G!'zv$b?Fjk=", false);
      assertEquals(".G!'zv$b?Fjk=", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putstatic");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.classOrInterface((-513));
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-78);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.clearBit((byte) (-38), (byte) (-38));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skip((byte) (-78));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("0");
      byteSequence0.readByte();
      byteSequence0.readUnsignedShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[4] = (byte)121;
      Utility.fillup("!D", (byte)121, false, ',');
      Utility.setBit((byte)121, 198);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.convertString(" reaching EOF");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byteSequence0.close();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Integer integer0 = new Integer((byte) (-118));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteSequence0.reset();
      Utility.compactClassName("nX", "java.lang.", false);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = null;
      boolean boolean1 = false;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(1, (byte)0, (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("f2i", "izzJHsr5)", "nX", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("LJ3Nt$fe;", true);
      Integer integer0 = new Integer((-136));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readFully(byteArray0);
      byteSequence0.skip(0L);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte) (-104);
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte) (-104);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-104);
      objectArray0[1] = (Object) fileSystemHandling0;
      Utility.typeOfSignature("Invalid StackMap offset: ");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      Utility.classOrInterface((byte) (-104));
      Utility.compactClassName("dcmpg", false);
      Utility.compactClassName("java.lang.java.lang.nop");
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.java.lang.nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.java.lang.nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[19];
      byteArray0[3] = (byte)58;
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence0.markSupported();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.setBit((byte) (-85), 76);
      Utility.convertString("0.*F%?[E\"");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 1073);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)60;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M]sJbepx3");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "istore_1", "Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Wpxk2&6xg'wSOfi<7+Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wpxk2&6xg'wSOfi<7+Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("LJ3Nt$fe;");
      Integer integer0 = new Integer((-136));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = Utility.compactClassName("monitorenter", "\\", false);
      assertEquals("monitorenter", string0);
      
      String string1 = Utility.accessToString(673, false);
      assertEquals("public synchronized transient interface", string1);
      
      String string2 = Utility.convertString("p");
      assertEquals("p", string2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("i2l");
      String string0 = Utility.compactClassName("i2l");
      assertEquals("i2l", string0);
      
      String string1 = Utility.format((byte) (-123), (-1419), true, 'l');
      assertEquals("-123", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.classOrInterface(111);
      assertEquals("class", string3);
      
      String string4 = Utility.methodTypeToSignature("-123", (String[]) null);
      assertEquals("()L-123;", string4);
      
      Utility.methodSignatureArgumentTypes("()L-123;", true);
      boolean boolean0 = Utility.isSet((byte) (-123), (-1419));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString(" reaching EOF");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.convertString(" reaching EOF");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byteSequence0.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Integer integer0 = new Integer((byte) (-118));
      Utility.accessToString(3385, true);
      try { 
        Utility.methodSignatureArgumentTypes(" reaching EOF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.compactClassName("qmonitorexit");
      byte[] byteArray0 = Utility.decode("qmonitorexit", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      byteSequence2.readBoolean();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence0.mark(189);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      Integer integer0 = new Integer(189);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "strictfp");
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      byteSequence1.skip(12);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.compactClassName("UP`Z/P|}'J|;Vw}p`", "UP`Z/P|}'J|;Vw}p`", false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)74;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)74;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Integer integer0 = new Integer((byte)74);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lload_3", "lload_3", "ineg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte)48;
      byteArray0[7] = (byte)0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aload_2";
      Utility.methodTypeToSignature("aload_2", stringArray0);
      int int0 = 245;
      boolean boolean0 = true;
      Utility.format((-3442), 245, true, '-');
      byte byte0 = (byte)28;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.classOrInterface((-852));
      String string0 = "aconst_null";
      Utility.methodSignatureArgumentTypes("(Laload_2;)Laload_2;");
      try { 
        Utility.methodSignatureReturnType("aload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "invokespecial";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokespecial");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)74;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)74;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Integer integer0 = new Integer((byte)74);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Integer integer0 = new Integer((byte)16);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant.getComparator();
      Utility.accessToString((int) (byte)16, true);
      Utility.setBit(713, (-1748));
      Utility.compactClassName("$Am_:-33oo7L2jeFE");
      Utility.convertString("$Am_:-33oo7L2jeFE");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (int) (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)69;
      byte byte0 = (byte)24;
      byteArray0[4] = (byte)35;
      byte byte1 = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "putstatic";
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-1446559776), (byte) (-77), byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("B[knM4Xuv_", "jsr_w", ")\t", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B[knM4Xuv_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-56);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      Integer integer0 = new Integer((byte) (-56));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte)76;
      byteArray1[6] = (byte)90;
      byteArray1[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skip((byte)76);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XvFwV}M/UFJT");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";t=@J9vfGp=OWHQ";
      stringArray0[1] = ";t=@J9vfGp=OWHQ";
      stringArray0[2] = ";t=@J9vfGp=OWHQ";
      stringArray0[3] = "double";
      String string0 = Utility.methodTypeToSignature(";t=@J9vfGp=OWHQ", stringArray0);
      assertEquals("(L;t=@J9vfGp=OWHQ;L;t=@J9vfGp=OWHQ;L;t=@J9vfGp=OWHQ;D)L;t=@J9vfGp=OWHQ;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-121);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), (int) (byte) (-101));
      assertEquals("0:    nop\n1:    iflt\t\t#-25700\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    i2d\n", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokespecial");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("invokespecial", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Integer integer0 = new Integer((byte)22);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant.getComparator();
      String string0 = Utility.accessToString((-282), false);
      assertEquals("private protected synchronized volatile transient interface abstract strictfp synthetic annotation enum", string0);
      
      int int0 = Utility.setBit(110, 4461);
      assertEquals(8302, int0);
      
      String string1 = Utility.compactClassName("0.*F%?[E\"");
      assertEquals("0.*F%?[E\"", string1);
      
      String string2 = Utility.convertString("lT0");
      assertEquals("lT0", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3317), 3195);
      assertEquals("0:    lmul\n1:    fdiv\n2:    fneg\n3:    ddiv\n4:    dmul\n5:    lsub\n6:    drem\n7:    irem\n8:    lsub\n9:    dadd\n10:   lmul\n11:   ladd\n12:   idiv\n", string3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 58, (int) (byte) (-35));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)69;
      byte byte0 = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.close();
      byteSequence0.readChar();
      byteSequence0.mark(203);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence1.readBoolean();
      byteSequence1.readByte();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.fillup("}[o^|qJnFLoWlAhWE", (byte)24, true, '\uB98D');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte)35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.format(231, 2143, false, 'e');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readShort();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.methodTypeToSignature("dload_0", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dload_0", "monitorexit", "class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[1] = "";
      stringArray0[2] = "short";
      stringArray0[3] = "Z(M|W8CvRG&";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "short";
      stringArray1[1] = "org.apache.bcel.classfile.Utility$1";
      String string0 = Utility.methodTypeToSignature("Z(M|W8CvRG&", stringArray1);
      assertEquals("(SLorg/apache/bcel/classfile/Utility$1;)LZ(M|W8CvRG&;", string0);
      
      Utility.compactClassName("Z(M|W8CvRG&", true);
      String string1 = Utility.methodSignatureToString("(SLorg/apache/bcel/classfile/Utility$1;)LZ(M|W8CvRG&;", "", "");
      assertEquals("Z(M|W8CvRG& (short arg1, org.apache.bcel.classfile.Utility$1 arg2)", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "/";
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "K;\"`vT2n{|`";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K;\"`vT2n{|`", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K;\"`vT2n{|`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.format((byte)104, (byte)16, false, 'm');
      Object object0 = new Object();
      try { 
        Utility.methodSignatureReturnType("iaload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iaload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "LJ3Nt$fe;";
      Utility.signatureToString("LJ3Nt$fe;", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)63;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J3Nt$fe");
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.getSignature("org.apache.bcel.classfile.ElementValue");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)69;
      byte byte0 = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.close();
      byteSequence0.readChar();
      byteSequence0.mark(203);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte)35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byteSequence1.close();
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(4096);
      Utility.getSignature("ifnull");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "ifnull";
      objectArray0[1] = (Object) "ifnull";
      objectArray0[2] = (Object) (byte)34;
      Utility.printArray(objectArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(77, 77, byteSequence0, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("g)RyizZ<BLG2n>~d7v", "", "{ifnull, ifnull, 34}", false, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: g)RyizZ<BLG2n>~d7v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)81;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.format((-102), (byte)89, false, ' ');
      assertEquals("                                                                                     -102", string0);
      
      short short0 = Utility.searchOpcode("(");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.convertString("V");
      Utility.compactClassName("E");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Integer integer0 = new Integer(193);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2, 73, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("s>x", "a", "", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s>x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte)52;
      byte byte0 = (byte) (-70);
      byteArray1[4] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 89, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)89;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-46), (int) (byte)81, false);
      assertEquals("0:    fastore\n1:    dconst_1\n2:    iadd\n3:    astore_3\n4:    <illegal opcode>\n5:    dup\n", string0);
      
      String string1 = Utility.getSignature("0:    fastore\n1:    dconst_1\n2:    iadd\n3:    astore_3\n4:    <illegal opcode>\n5:    dup\n");
      assertEquals("L0:;", string1);
      
      Utility.fillup("Invalid method signature: ", (byte)81, true, 'G');
      String string2 = Utility.accessToString((int) (byte)81, false);
      assertEquals("public final volatile", string2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.format(231, 2143, false, '\u0089');
      byte[] byteArray0 = Utility.decode(string0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((-1746));
      byteSequence1.markSupported();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.reset();
      byteSequence0.readBoolean();
      byteSequence1.readShort();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dconst_1");
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence5, (ConstantPool) null, true);
      Utility.codeToString(byteSequence5, (ConstantPool) null, true);
      Utility.classOrInterface((short) (-30327));
      try { 
        Utility.methodSignatureReturnType("l2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l2f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      byteSequence0.readChar();
      byteSequence0.mark((byte)121);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence1.read();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "<Wl@elsopcoT*e>";
      Utility.getSignature("<Wl@elsopcoT*e>");
      try { 
        Utility.methodSignatureReturnType("L<Wl@elsopcoT*e>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wl@elsopcoT*e>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.replace("lstore\t\t%0", "lstore\t\t%0", "lstore\t\t%0");
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.classOrInterface(256);
      try { 
        Utility.methodSignatureReturnType("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, (int) (byte)52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 147, 158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_=^.k,})&pVvI.JI[");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      Utility.encode(byteArray0, true);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = (-1263);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)52;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)52;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[3] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byteSequence1.close();
      byteSequence1.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("d|'5h?(:+?Hmdo4", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.read();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readShort();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 100, 40, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-86);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)52;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)52;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)4;
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(1200);
      byteSequence0.readByte();
      byteSequence1.available();
      Integer integer0 = new Integer((byte)22);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray0[3] = (byte) (-89);
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte)22;
      byteArray1[3] = (byte)22;
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence3.readBoolean();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      byteSequence3.mark((byte) (-89));
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      ByteSequence byteSequence6 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("lload\t\t%65", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)0;
      Utility.encode(byteArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes(1);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-128));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence1.mark((byte) (-128));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Utility.format(231, 2143, false, 'v');
      byte[] byteArray0 = Utility.decode(string0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-38);
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteSequence0.readByte();
      byteSequence0.available();
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)4;
      byteArray0[0] = (byte) (-100);
      byteArray1[3] = (byte) (-13);
      byteArray1[4] = (byte) (-13);
      byteArray1[5] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("0bRl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0bRl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("d|'5h?(:+?Hmdo4", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.read();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(4, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("isub", false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(1200);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.available();
      Integer integer0 = new Integer(75);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(0, (byte)65, byteSequence2, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "static", "lload\t\t%65", false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[11];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte)48;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool0, (-1674), (int) (byte)98, false);
      Utility.accessToString(45);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.typeOfSignature("Fyz7$fF");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(58);
      byteSequence0.readByte();
      byteSequence0.readByte();
      byteSequence0.available();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("lcmp");
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence1.readChar();
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-89));
      byteSequence1.readByte();
      byteSequence0.available();
      byteSequence0.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.typeOfSignature("Fyz7$fF");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(58);
      byteSequence0.readByte();
      byteSequence0.available();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("iconst_3");
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      Utility.clearBit(1330, 1330);
      Utility.isSet((-1122), 103);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)108;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-123), true);
      Utility.searchOpcode("0:    i2l\n1:    idiv\n");
      boolean boolean0 = true;
      Utility.format((byte) (-123), (-1122), true, 's');
      Utility.compactClassName("-123", false);
      Utility.methodTypeToSignature("-123", stringArray0);
      Object object1 = new Object();
      Integer integer0 = new Integer((byte) (-123));
      boolean boolean1 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep1");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Integer integer0 = new Integer(62);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Utility.decode("}P:mQ_Lz*p${`s", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FM<jIb|:3G8P\"");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)22;
      byteArray2[1] = (byte)22;
      byteSequence0.readByte();
      byteArray2[2] = (byte)22;
      byteArray2[3] = (byte)22;
      byteArray2[4] = (byte)22;
      byteArray2[5] = (byte)22;
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("nop");
      assertEquals("nop", string0);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lastore", string1);
      assertEquals(13, byteArray1.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.read();
      Utility.codeToString(byteSequence3, (ConstantPool) null);
      short short0 = Utility.searchOpcode("}P:mQ_Lz*p${`s");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes((byte)52);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("444");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 444
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.typeOfSignature("Fyz7$fF");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(58);
      byteSequence0.readByte();
      byteSequence0.markSupported();
      byteSequence0.available();
      byteSequence0.read();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2934, 2113, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.compactClassName("0q;=%r2#ToZc3B)");
      Utility.getSignature("0q;=%r2#ToZc3B)");
      Utility.compactClassName("E");
      byte[] byteArray0 = Utility.decode("0q;=%r2#ToZc3B)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.getSignature("double");
      int int0 = 2564;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2564, 2564, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.compactClassName("E0Fm)SFD?N*HUoQ", "Fyz7$fF", true);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.close();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (-27), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.close();
      byteSequence1.readByte();
      byteSequence2.readLong();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)34, false);
      try { 
        Utility.methodSignatureArgumentTypes("E0Fm)SFD?PN*&HUoQ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E0Fm)SFD?PN*&HUoQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.format(243, 2143, false, 'v');
      byte[] byteArray1 = Utility.decode(string0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      Integer integer0 = new Integer(243);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.getSignature("getfield");
      Utility.compactClassName("*d?DQl^U;XwD'cRM");
      Object object0 = new Object();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.isSet((-545), (-545));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" [", "lix*v", "Lgetfield;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-98);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("ifle\t\t#1", "ifle\t\t#1", "ifle\t\t#1");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence1.readChar();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte[] byteArray1 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("ifle\t\t#1", "}K#C{Mmp_`wz+", "lmul", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifle\t\t#1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.compactClassName("V");
      Utility.getSignature("ct^k(Zh:]");
      Utility.compactClassName("E");
      byte[] byteArray0 = Utility.decode("ct^k(Zh:]", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Lct^k(Zh:];");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isSet(110, (byte)99);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "ct^k(Zh:]", "K're8:JB&H", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature(";");
      assertEquals("L;;", string0);
      
      boolean boolean0 = Utility.isSet((-215), 58);
      assertTrue(boolean0);
      
      String string1 = Utility.replace("static", "static", "static");
      assertEquals("static", string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readBoolean();
      byteSequence1.readFully(byteArray1);
      byteSequence2.close();
      byteSequence2.readByte();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-110), (int) (byte)58, true);
      Utility.accessToString((int) (byte)0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string2 = Utility.signatureToString("L;;");
      assertEquals("", string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A$A", string3);
      
      String string4 = Utility.codeToString(byteArray0, (ConstantPool) null, (-215), 95);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-98);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("ifle\t\t#1", "ifle\t\t#1", "ifle\t\t#1");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('c');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifle\t\t#1");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("ifle\t\t#1", "Fyz7$fF", true);
      Utility.convertString("ifle\t\t#1");
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H`',l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H`',l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, (byte) (-105));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[11];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      constantPool0.copy();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "1)CONSTANT_Fieldref[9](class_index = 8, name_and_type_index = -105)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n";
      stringArray0[1] = "1)CONSTANT_Fieldref[9](class_index = 8, name_and_type_index = -105)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n";
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.getSignature("java.lang.");
      Utility.compactClassName("iadd");
      Utility.accessToString(1164);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dcmpl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dcmpl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.signatureToString("InnerClasses", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OS");
      int int0 = 1781;
      Utility.accessToString(1781);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(241, (byte) (-72));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("int");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22272. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte) (-120);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readChar();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedShort();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.getSignature("|g<v8mqmw,>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("KHm;^@$k'V2$x+(WUql");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KHm;^@$k'V2$x+(WUql'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(1421);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byteSequence1.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte) (-125));
      assertEquals("public private transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8t67_?qmi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8t67_?qmi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("|g<v8mqmw,>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L|g<v8mqmw,>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v8mqmw,>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G GmZ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G GmZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      Utility.replace("NaUM<>9Ml", ">,^o)m%i.", (String) null);
      try { 
        Utility.typeOfSignature("NaUM<>9Ml");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NaUM<>9Ml
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Okm", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Okm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("=K}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte)101);
      assertEquals("public protected synchronized volatile", string0);
      
      String string1 = Utility.compactClassName("f");
      assertEquals("f", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-31);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 238, 93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "'*-wUb,XcSM]M%s";
      try { 
        Utility.typeOfSignature("'*-wUb,XcSM]M%s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '*-wUb,XcSM]M%s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      byteSequence1.readByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 111, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      int int0 = Utility.clearBit(1330, 1330);
      assertEquals(1330, int0);
      
      Utility.isSet((-1122), 103);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)108;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-123), true);
      assertEquals("0:    i2l\n1:    idiv\n", string0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("85 6c", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isSet((byte) (-123), 123);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invald #pe: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)4);
      byteSequence0.readByte();
      byteSequence0.available();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[2] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.skipBytes((-1083));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)29);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.readByte();
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "E0Fm)SFD?PN*&HUoQ";
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      String[] stringArray0 = new String[8];
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.replace(" ", "E0Fm)SFD?PN*&HUoQ", "E0Fm)SFD?PN*&HUoQ");
      Utility.compactClassName("Illegally nested brackets:");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.replace(">jEw*TK", ">jEw*TK", "arraylength");
      assertEquals("arraylength", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifeq\t\t#17064", string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.replace("\"4S2?", "\"4S2?", "\"4S2?");
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(6);
      byteSequence0.readByte();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-1219), (byte)43, byteSequence0, (ConstantPool) null);
      byteSequence0.available();
      try { 
        Utility.methodSignatureToString("ifne\t\t#2", "\"4S2?", "istore_1", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifne\t\t#2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      String[] stringArray0 = new String[8];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-652), 196, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utility.setBit(5, 97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.close();
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.convertString("\"4S2?");
      assertEquals("\\\"4S2?", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"4S2?");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.replace("Illegally nested brackets:", "\"4S2?", "|Il+<");
      assertEquals("Illegally nested brackets:", string1);
      
      Utility.compactClassName("Illegally nested brackets:");
      byte byte0 = Utility.typeOfSignature("FqIb#:yQMV.xOvlTfY");
      assertEquals((byte)6, byte0);
      
      Utility.convertString("\"");
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("79 71 79", string2);
      
      Utility.compactClassName("void", "Illegally nested brackets:", false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readByte();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.searchOpcode("nop");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-417), (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.setBit(45, (byte)77);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 186, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.format(218, 117, false, ':');
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::218", string0);
      
      byte[] byteArray0 = Utility.decode("if_acmpne", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence1.available();
      Integer integer0 = new Integer(426);
      String string1 = Utility.getSignature("a|+'hdZ");
      assertEquals("La|+'hdZ;", string1);
      
      Utility.convertString("");
      Utility.signatureToString("La|+'hdZ;", false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)105;
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte)105;
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte)113;
      String string2 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("lmul", string3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-97);
      byteArray0[3] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpeq\t\t#19103", string0);
      
      String string1 = Utility.accessToString((-1443672986));
      assertEquals("private protected synchronized volatile abstract strictfp enum", string1);
      
      int int0 = Utility.clearBit(455, (byte)74);
      assertEquals(455, int0);
      
      Object object0 = new Object();
      Utility.decode("O},T7te v sfg", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "O},T7te v sfg";
      String string2 = Utility.printArray(objectArray0, true, false);
      assertEquals("{O},T7te v sfg}", string2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, 47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-98);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)58;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-98);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("lastore");
      Utility.compactClassName("Llastore;");
      Utility.accessToString(50);
      // Undeclared exception!
      try { 
        Utility.signatureToString("*d?DQl^U;XwD'cRM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*d?DQl^U;XwD'cRM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1135), 183, true);
      assertEquals("0:    if_icmpeq\t\t#-27757\n", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("n/f5;");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-2);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-28));
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)69, 82);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fstore_2");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantFieldref0.dump(dataOutputStream0);
      constantFieldref0.clone();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readInt();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      String string0 = Utility.methodTypeToSignature("e5%`{heNoL=6Kwjn", (String[]) null);
      assertEquals("()Le5%`{heNoL=6Kwjn;", string0);
      
      Utility.codeToString(byteSequence1, constantPool1, true);
      String string1 = Utility.classOrInterface(2);
      assertEquals("class", string1);
      
      Utility.methodSignatureArgumentTypes("()Le5%`{heNoL=6Kwjn;");
      String string2 = Utility.format(74, 66, false, '9');
      assertEquals("999999999999999999999999999999999999999999999999999999999999999974", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[4] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool0.toString();
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-28), 39);
      assertEquals("0:    astore_3\n1:    nop\n2:    nop\n3:    aload_1\n4:    astore_3\n", string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      String string1 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.methodTypeToSignature("0:    astore_3\n1:    nop\n2:    nop\n3:    aload_1\n4:    astore_3\n", (String[]) null);
      assertEquals("()L0:;", string2);
      
      String string3 = Utility.accessToString(1990, true);
      assertEquals("private protected volatile transient native abstract", string3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Illegal type: ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dstore_2", string0);
      assertEquals(14, byteArray0.length);
      
      String string1 = Utility.getSignature("idiv");
      assertEquals("Lidiv;", string1);
      
      int int0 = Utility.clearBit(160, 3095);
      assertEquals(160, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[4] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.format(2, (byte)78, true, 'i');
      byte[] byteArray1 = Utility.decode("az35VLi", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishr", string1);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      boolean boolean0 = Utility.isSet(576, (byte)43);
      assertFalse(boolean0);
      
      String string2 = Utility.replace("2iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", "R:Dp=\"q\"<]k", "char");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-116), true);
      assertEquals("0:    d2f\n1:    castore\n2:    nop\n3:    f2l\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.accessToString(165, true);
      assertEquals("public protected transient", string1);
      
      byte[] byteArray1 = Utility.decode("XHw|G-nX", false);
      short short0 = Utility.searchOpcode("0:    d2f\n1:    castore\n2:    nop\n3:    f2l\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)88, (byte)72, (byte)119, (byte)124, (byte)71, (byte)45, (byte)110, (byte)88}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      Utility.compactClassName("E0Fm)SFD?PN*&HUoQ", "Fyz7$fF", true);
      Object object0 = new Object();
      byte byte0 = (byte) (-28);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.getSignature("<illegal opcode>");
      Utility.clearBit(75, 2611);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("monitorexit");
      byte[] byteArray0 = Utility.decode("%NWF*6j", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.isSet(75, 75);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorexit", "monitorexit", "lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      String string0 = Utility.getSignature("ct^k(Zh:]");
      assertEquals("Lct^k(Zh:];", string0);
      
      Utility.compactClassName("E");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "E";
      objectArray0[1] = (Object) "Lct^k(Zh:];";
      objectArray0[2] = (Object) "V";
      objectArray0[3] = (Object) (byte) (-81);
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "E";
      Object object0 = new Object();
      objectArray0[7] = (Object) "void";
      objectArray0[8] = (Object) null;
      int int0 = Utility.setBit((byte) (-11), (byte)6);
      assertEquals((-11), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-11);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1769), (int) (byte) (-11), true);
      assertEquals("0:    nop\n1:    dreturn\n2:    iconst_3\n3:    dcmpl\n4:    <illegal opcode>\n5:    iconst_3\n6:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 13;
      Utility.format(13, 76, false, 'N');
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(153, 47);
      ConstantUtf8.getInstance("( ,tartjpc KnVg|");
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format((-2626), 76, true, 'N');
      byte[] byteArray1 = Utility.decode("-2626NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.getSignature("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN13");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 84, (-1442810043), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[8] = (byte) (-98);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(198, (byte) (-98));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.skipBytes((-10));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readInt();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.printArray((Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("r#~M RIhI'{R*vIGY>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r#~M RIhI'{R*vIGY>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.convertString(":]gh(4Xc");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Utility.convertString("\n ;Bd ^");
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)117;
      byteArray0[1] = (byte) (-118);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      byteSequence0.readByte();
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2405), 71, true);
      assertEquals("0:    nop\n1:    l2d\n2:    dup_x2\n3:    lneg\n4:    lneg\n5:    nop\n6:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    nop\n1:    l2d\n2:    dup_x2\n3:    lneg\n4:    lneg\n5:    nop\n6:    nop\n");
      assertEquals("L0:;", string1);
      
      String string2 = Utility.convertString(":]gh(4Xc");
      assertEquals(":]gh(4Xc", string2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantLong constantLong0 = new ConstantLong(1L);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantPool0.toString();
      int int0 = Utility.setBit(182, 159);
      assertEquals((-2147483466), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("if_acmpne\t\t#-15935", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 218;
      int int1 = 90;
      boolean boolean0 = false;
      Utility.format(218, 90, false, ':');
      String string0 = "new";
      byte[] byteArray0 = Utility.decode("if_acmpne", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit(426, 192);
      Utility.compactClassName("new", "new", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 218, 48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)81;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-92);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("HZ5*vYsU4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HZ5*vYsU4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((byte) (-63));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      Utility.setBit((byte) (-63), 182);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49408. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((byte)124);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.isSet(3289, 1068);
      assertFalse(boolean0);
      
      String string0 = Utility.replace("goto", "&/jAxFWy^~15}B", "");
      assertEquals("goto", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((byte) (-63));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      Utility.setBit((byte) (-63), 182);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, (-63), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49408. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-110), 59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)82;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1787), (int) (byte) (-70), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)58;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte) (-98), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)58;
      byteArray0[4] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("yE!#uG9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `yE!#uG9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byte byte0 = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), 195);
      try { 
        Utility.typeOfSignature("0:    fload_0\n1:    ifle\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fload_0
         // 1:    ifle\t\t#1
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.getSignature("dconst_0");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)51, (byte)30);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(50, 296);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)110;
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte) (-70);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-38), 102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fdiv
         // 1:    ifle\t\t#-9472
         // 4:    aload_2
         // 5:    ladd
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "( ,tartjpc KnVg|";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureToString("( ,tartjpc KnVg|", "#=~LQ5", "( ,tartjpc KnVg|", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` ,tartjpc KnVg|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(13, 76, false, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN13", string0);
      
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(153, 47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)122);
      byteSequence0.readByte();
      byteSequence0.read();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_2", string1);
      
      String string2 = Utility.replace("( ,tartjpc KnVg|", "<illegal opcode>", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN13");
      assertEquals("( ,tartjpc KnVg|", string2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 1547);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format((byte)8, 45, false, '=');
      byte[] byteArray1 = Utility.decode("Fyz7$fFE0Fm)SFD?PN*&HUoQ", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("multianewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-91);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence1.readByte();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-15));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-15);
      byteArray1[2] = (byte) (-15);
      String string0 = Utility.encode(byteArray1, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.clearBit((byte) (-80), 800);
      try { 
        Utility.methodSignatureReturnType("pmOJ4,x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `pmOJ4,x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.getSignature("ct^k(Zh:]");
      Utility.compactClassName("E");
      byte[] byteArray0 = Utility.decode("ct^k(Zh:]", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, 2564, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "\"4S2?";
      Utility.replace("\"4S2?", "\"4S2?", "\"4S2?");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(6);
      byteSequence0.readByte();
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.convertString(":]gh(4Xc");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Utility.convertString("\n ;Bd ^");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (int) (byte)45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-112);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, (byte) (-112));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-660), 102);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-130), 456, false);
      assertEquals("0:    athrow\n1:    d2f\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      
      String string1 = Utility.getSignature("1)CONSTANT_Fieldref[9](class_index = 8, name_and_type_index = -112)\n");
      assertEquals("[L1)CONSTANT_Fieldref;", string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-116);
      byteArray0[0] = (byte) (-5);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readByte();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("N@o%pGFCRVfr", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "?";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      Constant[] constantArray0 = new Constant[1];
      int int0 = 169;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, 169);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(169, (-816));
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byte byte0 = (byte)32;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method(83, 83, 83, attributeArray0, constantPool0);
      method0.getLocalVariableTable();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("N", "/bKWd*vP", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.format(234, 76, false, ':');
      byte[] byteArray1 = Utility.decode("83~M3AI}dv%6@$)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals(14, byteArray1.length);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-884), 2564, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string2);
      
      String string3 = Utility.compactClassName("fstore\t\t%51", "83~M3AI}dv%6@$)", false);
      assertTrue(string3.equals((Object)string1));
      
      String string4 = Utility.convertString(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::234");
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.clearBit(1698, (-2533));
      Utility.compactClassName("S");
      byte[] byteArray0 = Utility.decode("monitorexit", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readDouble();
      byteSequence2.skip(0L);
      Utility.convertString("!YItD X/4@ O");
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.accessToString((-2533));
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorexit", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorexit'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[7] = (byte)48;
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-10);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)71;
      byteArray0[1] = (byte) (-107);
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte) (-113);
      byteArray1[4] = (byte) (-107);
      byteArray1[5] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)71, (int) (byte) (-107), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "*d?DQl^U;XwD'cRM", "*d?DQl^U;XwD'cRM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)93;
      Utility.compactClassName("JK=|X@];");
      Utility.isJavaIdentifierPart('c');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JK=|X@];");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("f2d", "f2d", true);
      assertEquals("", string0);
      
      String string1 = Utility.convertString("RQT]`|,CFtx2/");
      assertEquals("RQT]`|,CFtx2/", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$8d$3f1$3c$Gj$5d", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("8d 3f 31 3c 06 6a 5d", string3);
      
      String string4 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-91);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("iload_3");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(13, 76, false, ':');
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)56;
      byteArray1[5] = (byte)80;
      byteArray1[6] = (byte) (-76);
      byteArray1[7] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 337, 336, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.format(218, 90, false, ':');
      byte[] byteArray0 = Utility.decode("if_acmpne", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit(426, 192);
      Utility.compactClassName("new", "new", false);
      byteSequence0.mark(90);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "new";
      byteSequence0.readInt();
      Utility.printArray(objectArray0, true, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("if_acmpne", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.typeOfSignature("Vkw_L^vRCte");
      Utility.fillup("[k: bq6tPX\"4", 224, false, '[');
      Utility.setBit(182, 2145);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte) (-74);
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)58;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(88, (byte)8);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Object object0 = new Object();
      Constant[] constantArray1 = new Constant[6];
      constantArray1[0] = (Constant) constantFieldref0;
      constantArray1[1] = (Constant) constantFieldref0;
      constantArray1[2] = (Constant) constantFieldref0;
      constantArray1[3] = (Constant) constantFieldref0;
      constantArray1[4] = (Constant) constantFieldref0;
      constantArray1[5] = (Constant) constantFieldref0;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)120, (int) (byte) (-98));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)18;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2136, (int) (byte) (-104));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[7] = (byte)48;
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-10);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dcmpg", "dcmpg", "*d?DQl^U;XwD'cRM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dcmpg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokespecial");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)22;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 65, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)87;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      byte[] byteArray1 = new byte[8];
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)24;
      byteArray2[1] = (byte)58;
      byteArray2[3] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload\t\t%58", string0);
      
      String string1 = Utility.accessToString((int) (byte)58, true);
      assertEquals("private static final", string1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(13, 76, false, ':');
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13", string0);
      
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(153, 47);
      ConstantUtf8.getInstance("( ,tartjpc KnVg|");
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$u$m$ytartjpc$mKnVg$7c", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, 13, 241);
      assertEquals("13:   sastore\n14:   dsub\n15:   iushr\n", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format((-2626), 76, true, ':');
      byte[] byteArray1 = Utility.decode("-2626:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string3 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("aaload", string3);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.typeOfSignature("Vkw_L^vRCte");
      Utility.setBit(182, 2145);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(13, 76, false, ':');
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(153, 47);
      ConstantUtf8.getInstance("( ,tartjpc KnVg|");
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, 13, 241);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format((-2626), 76, true, ':');
      byte[] byteArray1 = Utility.decode("-2626:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("lstore_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-123);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)10, (-314));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(14, (-1867));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref((-154), 27);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 4602, (int) (byte)6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41340. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "( ,tartjpc KnVg|";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, 5);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2048, 173, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      Utility.signatureToString("JB_bd", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("8Vj=@");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Utility.signatureToString("Fyz7$fF", true);
      assertEquals("float", string0);
      
      String string1 = Utility.replace("float", "Fyz7$fF", "float");
      assertEquals("float", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[2] = "Fyz7$fF";
      stringArray0[1] = "float";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k)Ksy");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-110);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 8);
      assertEquals("0:    i2c\n1:    i2c\n2:    i2c\n3:    i2c\n4:    lshl\n5:    i2c\n6:    i2c\n", string2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)56;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[2] = (byte)56;
      byteArray0[4] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)53;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)78;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      int int0 = Utility.clearBit((byte)56, 20);
      assertEquals(56, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[0];
      Utility.signatureToString("L;", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("W\"hXPP", "", "char", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W\"hXPP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, 169);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 60, 64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byte byte0 = (byte)56;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("F|/P%X?<a2?#- >pi");
      try { 
        Utility.methodSignatureArgumentTypes("jsr_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)93;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('c');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "( ,tartjpc KnVg|");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("@vh)]]X!wfSm8_'u", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@vh)]]X!wfSm8_'u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, 169);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload\t\t%88", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.getSignature(";SQ~o0$malSCn");
      Utility.methodSignatureReturnType("L;SQ~o0$malSCn;");
      Utility.getSignature(";SQ~o0$malSCn");
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = null;
      int int0 = (-2606);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-2606), (int) (byte)6, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.format(218, 90, false, ':');
      byte[] byteArray0 = Utility.decode("if_acmpne", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit(426, 192);
      Utility.compactClassName("new", "new", false);
      byteSequence0.mark(90);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "new";
      Utility.printArray(objectArray0, true, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.typeOfSignature("Vkw_L^vRCte");
      String string0 = "[k: bq6tPX\"4";
      Utility.fillup("[k: bq6tPX\"4", 224, true, '[');
      Utility.setBit(182, 2145);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1634, 47, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      Utility.format(164, (byte)95, true, 'v');
      byte[] byteArray1 = Utility.decode("GGj#ns^@", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("1/rhg}chVJU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1/rhg}chVJU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.getSignature("");
      Utility.compactClassName("L;", "", true);
      Utility.isJavaIdentifierPart('|');
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte) (-76);
      Utility.setBit((byte) (-76), 85);
      Utility.compactClassName("IM}[D~H[S9`2|z=RXz", "IM}[D~H[S9`2|z=RXz", true);
      Utility.printArray((Object[]) null, true, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("IM}[D~H[S9`2|z=RXz", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[D~H[S9`2|z=RXz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "<illegal opcode>";
      Utility.getSignature("<illegal opcode>");
      try { 
        Utility.methodSignatureReturnType("L<illegal;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)52);
      byteSequence0.readByte();
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.typeOfSignature("Vkw_L^vRCte");
      Utility.fillup("[k: bq6tPX\"4", 224, true, 'T');
      Utility.setBit(182, 2145);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)49;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-637), (-1400), true);
      assertEquals("0:    isub\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12596\n6:    ladd\n7:    daload\n", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-97);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-109), 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2s
         // 1:    monitorenter
         // 2:    faload
         // 3:    dstore_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-109);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, (-637), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "Deprecated attribute with length > 0";
      int int0 = 91;
      Utility.fillup("Deprecated attribute with length > 0", 91, true, 'p');
      Utility.fillup("Deprecated attribute with length > 0ppppppppppppppppppppppppppppppppppppppppppppppppppppppp", 91, true, '2');
      String string1 = "double";
      boolean boolean0 = false;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Deprecated attribute with length > 0ppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "Deprecated attribute with length > 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Deprecated attribute with length > 0\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E0Fm)SFD?PN*&HUoQ");
      Utility.signatureToString("Fyz7$fF", true);
      Utility.replace("float", "E0Fm)SFD?PN*&HUoQ", "float");
      String[] stringArray0 = new String[8];
      stringArray0[2] = "<";
      stringArray0[1] = "float";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[2] = "odcDFlXrZqO^|FI";
      stringArray0[3] = "float";
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(42, 40);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1600, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      Utility.format(164, (byte)95, true, 'v');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, 1324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[4] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)53;
      byteArray0[1] = (byte)78;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1955), (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_0
         // 1:    astore_3
         // 2:    fstore\t\t%0
         // 4:    jsr\t\t#13572
         // 7:    saload
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-58);
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("dup_x2", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("dup_x2", "dup_x2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // dup_x2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.fillup("g<EqdC", (byte)90, true, ';');
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Utility.format(218, 90, false, ':');
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::218", string0);
      
      byte[] byteArray0 = Utility.decode("if_acmpne", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Utility.setBit(426, 192);
      assertEquals(427, int0);
      
      String string1 = Utility.compactClassName("new", "new", false);
      assertEquals("new", string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "new";
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{null, \"new\"}", string2);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "new";
      stringArray0[2] = "new";
      stringArray0[3] = "new";
      stringArray0[4] = ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::218";
      stringArray0[5] = "P&sBz$";
      String string4 = Utility.methodTypeToSignature("if_acmpne", stringArray0);
      assertEquals("(SLnew;Lnew;Lnew;L:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::218;LP&sBz$;)Lif_acmpne;", string4);
      
      Utility.accessToString(90, false);
      String string5 = Utility.accessToString(218);
      assertEquals("private static final volatile transient", string5);
      
      String string6 = Utility.fillup("new", 169, true, 'i');
      assertEquals("newiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string6);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-23789", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)53;
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0vD.#2?]ETvqy@arQ");
      String string0 = Utility.compactClassName("fstore_0", "fstore_0", false);
      assertEquals("fstore_0", string0);
      
      Utility.compactClassName("e4D");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("q}Mi.b_GS6_@^", "", false);
      assertEquals("q}Mi.b_GS6_@^", string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(13, 76, false, ':');
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "B[knM4Xuv\\_";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2752, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-58);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1859), (-2684));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byte byte0 = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      Utility.format(164, (byte)87, true, 'v');
      boolean boolean0 = false;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("B[knM4Xuv_", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[knM4Xuv_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.format(13, 76, false, ':');
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&A";
      stringArray0[1] = "byte";
      byteSequence0.readDouble();
      Utility.methodTypeToSignature("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13", stringArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("E:e%mx@Jy)C5L]q|@]8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E:e%mx@Jy)C5L]q|@]8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      Utility.format(164, (byte)87, true, 'v');
      byte[] byteArray1 = Utility.decode("GGj#ns^@", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("1/rhg}chVJU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1/rhg}chVJU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-107);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-97);
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.methodTypeToSignature("if_icmpeq", (String[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-254), (-1636));
      Utility.getSignature("newarray");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, (-481));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, 169);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)25;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.methodTypeToSignature("?", (String[]) null);
      assertEquals("()L?;", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B[knM4Xuv_");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)121;
      byteArray1[5] = (byte)24;
      byteArray1[6] = (byte)87;
      byteArray1[7] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 176, 249);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-85);
      byte byte1 = (byte)81;
      byteArray0[5] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(13, 76, false, ':');
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readFloat();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(13, 76, false, ':');
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(153, 47);
      ConstantUtf8.getInstance("( ,tartjpc KnVg|");
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 795, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte) (-92);
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte) (-12));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 231, (int) (byte) (-92));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z2SMP6i8,", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Y)Fh~7Au?", objectArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.clearBit((byte)87, 155);
      Utility.toHexString(byteArray0);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.format(locale0, "astore_2", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      int int0 = 76;
      Utility.format(13, 76, false, ':');
      String string0 = "&A";
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.typeOfSignature("7ly#iWN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7ly#iWN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)49;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 11, true);
      assertEquals("0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n";
      stringArray0[1] = "Qvw";
      stringArray0[2] = "0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n";
      stringArray0[3] = "0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n";
      stringArray0[4] = "0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n";
      stringArray0[5] = "0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n";
      stringArray0[6] = "0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n";
      stringArray0[7] = "0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n";
      String string1 = Utility.methodTypeToSignature("0:    astore_2\n1:    aconst_null\n2:    daload\n3:    goto\t\t#12340\n6:    ladd\n7:    daload\n", stringArray0);
      assertEquals("(L0:;LQvw;L0:;L0:;L0:;L0:;L0:;L0:;)L0:;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.clearBit((byte) (-89), (byte)49);
      assertEquals((-131161), int0);
      
      String string2 = Utility.accessToString((int) (byte)48, true);
      assertEquals("final", string2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(13, 76, false, ':');
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13", string0);
      
      byte[] byteArray0 = Utility.decode("( ,tartjpc KnVg|", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&A";
      stringArray0[1] = "byte";
      String string1 = Utility.methodTypeToSignature("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13", stringArray0);
      assertEquals("(L&A;B)L::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::13;", string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_2", string2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)48;
      Utility.format(243, 2135, false, 'v');
      byte[] byteArray1 = Utility.decode("return", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("lsub", string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.skipBytes((byte)97);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"?EI!LX.qc5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"?EI!LX.qc5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)53;
      byteArray0[1] = (byte)78;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-75);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)53;
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte)80;
      byteArray1[5] = (byte)67;
      byteArray1[6] = (byte)78;
      byteArray1[7] = (byte)67;
      byteArray1[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("y#puG\"9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `y#puG\"9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, (-481));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)88;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1101), (int) (byte)43, true);
      assertEquals("0:    aload_1\n1:    pop2\n2:    aload_1\n3:    aload_1\n4:    pop2\n", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokespecial");
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokespecial", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokespecial'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-107);
      String string0 = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte) (-89));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("0:    iconst_5\n1:    if_icmpeq\t\t#-27391\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iconst_5
         // 1:    if_icmpeq\t\t#-27391
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-cRs\"{vvN#x");
      int int0 = 124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 124, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)103;
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1845319895), 507);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      String[] stringArray0 = new String[5];
      constantInterfaceMethodref1.toString();
      stringArray0[0] = "";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[3] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[4] = "public private protected synchronized volatile";
      Utility.methodTypeToSignature("", stringArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokespecial");
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.methodTypeToSignature("void", (String[]) null);
      assertEquals("()V", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.skipBytes((byte)97);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"?EI!LX.qc5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"?EI!LX.qc5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.typeOfSignature("TOK");
      Utility.compactClassName("TOK");
      Utility.convertString("(type=");
      byte byte0 = (byte) (-69);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-35);
      byte[] byteArray1 = Utility.decode(", low = ", false);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ConstantUtf8.getInstance(", low = ");
      BCELComparator bCELComparator0 = Field.getComparator();
      ConstantUtf8.clearStats();
      Constant.setComparator(bCELComparator0);
      ConstantFloat constantFloat0 = new ConstantFloat(1443.0F);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1716), (int) (byte) (-112));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)48);
      byteArrayOutputStream0.write(byteArray1);
      assertEquals(", low = ", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("fstore_0");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = Utility.classOrInterface((byte)85);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(48, 2235);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1572, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.skipBytes((byte)49);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"?EI!LX.qc5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"?EI!LX.qc5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      String string0 = "hsBHJcf AL~HR4!N{N";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-87));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("0:    ret\t\t%52\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ret\t\t%52
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)48;
      String string0 = Utility.format(243, 2135, false, 'v');
      byte[] byteArray1 = Utility.decode(string0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)78, false);
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "NhoeE|ZS0m~ey#`e?";
      // Undeclared exception!
      try { 
        Utility.signatureToString("NhoeE|ZS0m~ey#`e?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NhoeE|ZS0m~ey#`e?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-107);
      String string0 = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte) (-89));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("0:    iconst_5\n1:    caload\n2:    fcmpl\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iconst_5
         // 1:    caload
         // 2:    fcmpl
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.DescendingVisitor");
      Utility.signatureToString("Fyz7$fF", true);
      String[] stringArray0 = new String[8];
      stringArray0[2] = "<";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("<");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)106;
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)106, 48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.getSignature("<illegal opcode>");
      Utility.typeOfSignature("S");
      Utility.convertString("L<illegal;");
      byte[] byteArray0 = Utility.decode("S", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.methodTypeToSignature("multianewarray", (String[]) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = (-2952);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 7, (int) (byte)97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)22;
      byte byte1 = (byte)65;
      byteArray0[1] = (byte)65;
      Utility.encode(byteArray0, false);
      int int0 = 234;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)53;
      byteArray0[1] = (byte)78;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-112);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = (-19);
      char char0 = '8';
      Utility.fillup("double", (-19), true, '8');
      // Undeclared exception!
      try { 
        Utility.signatureToString("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.getSignature(";>vzl)~r");
      assertEquals("L;>vzl)~r;", string0);
      
      Utility.convertString("<illegal opcode>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.replace("", "vg]jQooEK", "ifnonnull");
      assertEquals("", string1);
      
      String string2 = Utility.convertString("k2o)q'O}I<A@L;df!");
      assertEquals("k2o)q\\'O}I<A@L;df!", string2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("45 20 31 4a ff", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)65;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)49;
      int int0 = (-2952);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (-2952));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.searchOpcode("The FilenameFilter must not be null");
      Utility.replace("The FilenameFilter must not be null", "sSDy`+r%", "The FilenameFilter must not be null");
      Utility.getSignature("sSDy`+r%");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skipBytes((byte) (-81));
      // Undeclared exception!
      try { 
        Utility.signatureToString("The FilenameFilter must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The FilenameFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(144, 144);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(636L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-939), (-1784), true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)48;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("39 72 de 10 bc 70 30", string0);
      
      String string1 = Utility.fillup("39 72 de 10 bc 70 30", 1528, false, '}');
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("fl", "fl", false);
      assertEquals("fl", string2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.skipBytes((byte)97);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"?EI!LX.qc5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"?EI!LX.qc5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("01 31 31 00 30 01 31 30 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.searchOpcode("GJ>@w5rYCz:!;4U:N.");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 128, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.format((-2026), 144, false, ':');
      byte[] byteArray0 = Utility.decode("new", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.getSignature(";>vzl)~r");
      Utility.convertString("<illegal opcode>");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%48", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("4e a9 30 01 30 31 00", string1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.getSignature("<illegal opcode>");
      assertEquals("L<illegal;", string0);
      
      int int0 = Utility.clearBit(75, 2611);
      assertEquals(75, int0);
      
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
      
      Utility.compactClassName("monitorexit");
      byte[] byteArray0 = Utility.decode("%NWF*6j", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("25 4e 57 46 2a 36 6a", string1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.searchOpcode("The FilenameFilter must not be null");
      String string0 = "sSDy`+r%";
      Utility.replace("The FilenameFilter must not be null", "sSDy`+r%", "The FilenameFilter must not be null");
      Utility.getSignature("sSDy`+r%");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, 155, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-116);
      byteArray0[0] = (byte) (-5);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readByte();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "newarray";
      stringArray0[1] = "newarray";
      stringArray0[2] = "newarray";
      Utility.methodTypeToSignature("newarray", stringArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, 169);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, 53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("8eWKPs-22ue_^`$H", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("fstore\t\t%101", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 1799, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload\t\t%65", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "castore";
      objectArray0[3] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(91, (byte)8);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20891. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E0Fm)SFD?PN*&HUoQ");
      Utility.signatureToString("Fyz7$fF", true);
      Utility.replace("float", "E0Fm)SFD?PN*&HUoQ", "float");
      String[] stringArray0 = new String[8];
      stringArray0[2] = "<";
      stringArray0[1] = "float";
      stringArray0[2] = "odcDFlXrZqO^|FI";
      stringArray0[3] = "float";
      stringArray0[4] = "float";
      stringArray0[5] = "float";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, 48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1543, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)53;
      Utility.encode(byteArray0, false);
      String string0 = Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-88);
      objectArray0[2] = (Object) "43 38 39 fe a8 35 00 00 00";
      objectArray0[3] = (Object) (byte) (-88);
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Utility.signatureToString("InnerClasses", false);
      Utility.clearBit(1457, 1457);
      Utility.typeOfSignature("InnerClasses");
      Utility.compactClassName(":iwRRo ;(Y_j!`>NARN");
      // Undeclared exception!
      try { 
        Utility.decode(".G!~'zv$b?F&k=", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-58);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1859), (-2684));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    faload
         // 1:    astore_2
         // 2:    fstore_3
         // 3:    lload_2
         // 4:    istore_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("n/f5;");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[2] = (byte) (-4);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-722), true);
      try { 
        Utility.typeOfSignature("n/f5;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n/f5;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(91, (byte)8);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20891. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantUtf8.getCachedInstance("n/f5;");
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.format(1266, 193, false, 'U');
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU1266", string1);
      
      String string2 = Utility.replace("return", "s52WZT", "s52WZT");
      assertEquals("return", string2);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = Utility.format((-2026), 144, false, ':');
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-2026", string0);
      
      byte[] byteArray0 = Utility.decode("new", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.getSignature("\t\t#");
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("?>...");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 9983, 49, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, 48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = Utility.clearBit(184, 184);
      assertEquals(184, int0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(", locals={");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)1, 93, true);
      assertEquals("1:    aconst_null\n2:    nop\n3:    aconst_null\n4:    aconst_null\n5:    aconst_null\n6:    aconst_null\n7:    nop\n8:    aconst_null\n", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)85;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(", locals={");
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)85;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-1819), (int) (byte)85, false);
      assertEquals("0:    nop\n1:    castore\n2:    castore\n3:    nop\n4:    castore\n", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("n/f5;");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-4);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), (-722), true);
      assertEquals("0:    i2f\n1:    l2f\n2:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)43;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1904), 97);
      try { 
        Utility.typeOfMethodSignature("ia,2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ia,2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)49;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 11, true);
      try { 
        Utility.typeOfMethodSignature(")aF.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )aF.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-116);
      byteArray0[0] = (byte) (-5);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.getSignature(";>oz3)~H");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lv$GDt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lv$GDt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(91, (byte)8);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore\t\t%179", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[2] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) null;
      byte[] byteArray1 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("c6 00 c4", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnull\t\t#196", string1);
      
      short short0 = Utility.searchOpcode("g");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      Utility.accessToString(0);
      int int0 = 2839;
      Utility.setBit(2839, 2839);
      Utility.convertString("annotation");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 128, (int) (byte)124, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      stringArray0[2] = "Exception handler(s) = \n";
      String string0 = Utility.methodTypeToSignature("?", stringArray0);
      assertEquals("(L?;L?;LException;)L?;", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.getSignature(";>oz3)~H");
      assertEquals("L;>oz3)~H;", string0);
      
      Utility.convertString("<illegal opcode>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.replace("? extends ", "\n     ", "? extends ");
      assertEquals("? extends ", string1);
      
      String string2 = Utility.convertString("\n     ");
      assertEquals("\\n     ", string2);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = ")~)Of^3.D ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(")~)Of^3.D ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )~)Of^3.D 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      String string0 = "java.lang.Float";
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.Float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.isSet((-1311), 221);
      Utility.compactClassName("java.lang.eCs{=d`>rz:|d", false);
      char char0 = 'T';
      Utility.fillup("java.lang.eCs{=d`>rz:|d", (-1311), true, 'T');
      // Undeclared exception!
      try { 
        Utility.signatureToString("G_9)j&!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G_9)j&!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.replace("V", "erUdvDYt~*i)?qa}rV", "{}");
      Utility.getSignature("{}");
      // Undeclared exception!
      try { 
        Utility.signatureToString("The FileFilter must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The FileFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = null;
      try { 
        Utility.methodSignatureReturnType("The suffix must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The suffix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0);
      Utility.compactClassName("{}");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)103;
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1845319895), 507);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "R";
      Utility.convertString("R");
      String string1 = "[<k'N*_";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[<k'N*_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<k'N*_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("( L,tartjp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` L,tartjp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)31;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i$d6$baNz$u$l", "i$d6$baNz$u$l", "wa$-~G$MUr_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i$d6$baNz$u$l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.convertString("Total of ");
      try { 
        Utility.typeOfSignature("21,)GJ~[*)Ce W13");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 21,)GJ~[*)Ce W13
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.methodSignatureReturnType("S1n$Classeo");
      Utility.format(0, 0, false, '9');
      try { 
        Utility.typeOfSignature("(class_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (class_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.convertString(";LD_]ngDI$u\"sEoE.}");
      assertEquals(";LD_]ngDI$u\\\"sEoE.}", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = Utility.format((-2026), 144, false, ':');
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-2026", string0);
      
      byte[] byteArray0 = Utility.decode("new", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)110, (byte)101, (byte)119}, byteArray0);
      assertEquals("fdiv", string1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+6`4h4Lg<zdm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6`4h4Lg<zdm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pDi");
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = 'E';
      charArray0[2] = '@';
      charArray0[3] = ';';
      mockPrintWriter0.write(charArray0);
      Object[] objectArray0 = null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("pDi", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      String string0 = "byte";
      MockFile mockFile0 = new MockFile("pDi", "byte");
      MockFile mockFile1 = new MockFile(mockFile0, "byte");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Utility.compactClassName("InneClasse");
      try { 
        Utility.typeOfSignature("&1*+A~1O}q@P!M!D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &1*+A~1O}q@P!M!D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      MockFileWriter mockFileWriter0 = new MockFileWriter("InnerClasses", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("InnerClasses", "InnerClasses");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // InnerClasses
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = "JZW`?L.]3$&Z%bL0WbQ";
      Utility.typeOfSignature("JZW`?L.]3$&Z%bL0WbQ");
      Utility.signatureToString("JZW`?L.]3$&Z%bL0WbQ");
      Utility.classOrInterface((byte)11);
      Utility.accessToString(412);
      try { 
        Utility.decode("a:", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "";
      String string1 = "";
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(" read ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` read '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = "9D";
      try { 
        Utility.typeOfSignature("9D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-128), 48, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "InneClasseo";
      try { 
        Utility.typeOfSignature("*l}!j%RU8cKT3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l}!j%RU8cKT3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-58);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "/Gt\"!LIy}G";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.signatureToString("D", false);
      assertEquals("double", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(1194, 48);
      assertEquals(66730, int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteArray0, constantPool0, (-443), 39);
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Method method0 = null;
      try {
        method0 = new Method(dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("Couldn't find: ");
      Utility.clearBit(67, 67);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(", locals={");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1192), (int) (byte)5, true);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = Utility.signatureToString("CrMCD@", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.clearBit(93, (-2052));
      try { 
        Utility.typeOfSignature("Y5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = Utility.signatureToString("DKem3");
      assertEquals("double", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Utility.signatureToString("Za0<ty_4. U#VO", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("8WcWr");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("org.apache.commons.io.filefilter.MagicNumberFileFilter", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-611), 9);
      assertEquals((-611), int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = Utility.fillup("", (-118), false, 'd');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E_Wx+r8V%$ZF~1x", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E_Wx+r8V%$ZF~1x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "java.lang.(start_pc Vg= ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.clearBit((-1177), 56);
      try { 
        Utility.methodSignatureReturnType("Lgu&]$ZO]RA|@3nE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lgu&]$ZO]RA|@3nE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("Invalid signature: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "if_icmpeq", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "32i }";
      try { 
        Utility.typeOfSignature("32i }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 32i }
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.CanWriteFileFilter");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.signatureToString("SBilh 2Ib", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "instanceof");
      Utility.compactClassName("c%'wd", true);
      try { 
        Utility.typeOfSignature("c%'wd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c%'wd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = Utility.getSignature("int");
      assertEquals("I", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rM`)4I4BAY-07Bap(";
      stringArray0[1] = null;
      stringArray0[2] = ". Constant pool size is: ";
      stringArray0[3] = "int";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("Invalid signature: ", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid signature: `");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("e'IXa2g%j", "+J?XDq)k", "Invalid signature: `", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e'IXa2g%j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Prx))uT.*wB/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Prx))uT.*wB/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6 UHq^T$!_Yj@R!.=4");
      byte byte0 = Utility.typeOfSignature("DP [BO67o!D");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte)73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(91, (byte)8);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Utility.signatureToString("Z\"4S]r", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)64;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)64, 47);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("boolean");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 47, (int) (byte)64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = Utility.convertString("Z\"4S]r");
      assertEquals("Z\\\"4S]r", string0);
      
      String string1 = Utility.compactClassName("Z\"4S]r", false);
      assertEquals("Z\"4S]r", string1);
      
      int int0 = Utility.setBit(102, 2088);
      assertEquals(358, int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "( tartjpc KnVg= ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("( tartjpc KnVg= ", "( tartjpc KnVg= ", "( tartjpc KnVg= ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` tartjpc KnVg= '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "X\"He:ref";
      try { 
        Utility.typeOfSignature("X\"He:ref");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X\"He:ref
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R1];R)#/k7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R1];R)#/k7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q0PA!j\"jvQq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q0PA!j\"jvQq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.signatureToString("Z\"4S]r", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XvFljwl}M/8FJ*/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XvFljwl}M/8FJ*_/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!>lt[j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >lt[j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.signatureToString("Vkw_L^vRSCte", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "void", "istore_0", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R1];R)#/k7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R1];R)#/k7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = Utility.getSignature("void");
      assertEquals("V", string0);
      
      String string1 = Utility.convertString("void");
      assertEquals("void", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_1", string2);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = Utility.fillup("U", 109, false, 'a');
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaU", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "U";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{U}", string1);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Utility.replace("jCt?j%arK", "jCt?j%arK", "TFb");
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = "0nMX5QY:D%:hi";
      try { 
        Utility.typeOfSignature("0nMX5QY:D%:hi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0nMX5QY:D%:hi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("Vkw_L^vRSCte", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "void";
      stringArray0[1] = "Vkw_L^vRSCte";
      stringArray0[2] = "Vkw_L^vRSCte";
      stringArray0[3] = "^'J S,";
      stringArray0[4] = "Vkw_L^vRSCte";
      stringArray0[5] = "^'J S,";
      stringArray0[6] = "void";
      stringArray0[7] = "void";
      try { 
        Utility.methodTypeToSignature("^'J S,", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("InnerClasses");
      assertEquals((byte)10, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("InnerClasses");
      assertEquals("LInnerClasses;", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@r1<tXfk_\"-R6_f*g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @r1<tXfk_\"-R6_f*g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Vkw_L^vRSCte");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = Utility.signatureToString("Z\"4S]r", true);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6[KC=aN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6[KC=aN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Synthetic");
      try { 
        Utility.typeOfMethodSignature("Synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Synthetic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"(K2P5H`[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"(K2P5H`[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = "1t*opECO";
      try { 
        Utility.typeOfSignature("1t*opECO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1t*opECO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("[r3jzfLba");
      try { 
        Utility.typeOfMethodSignature("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E]Lop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E]Lop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = Utility.format(65535, 208, true, 'z');
      assertEquals("65535zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = "t[PMb=*}Xtw@kC";
      Utility.replace("t[PMb=*}Xtw@kC", "t[PMb=*}Xtw@kC", "t[PMb=*}Xtw@kC");
      String string1 = "-KS>wm8{*8,uAUB";
      try { 
        Utility.typeOfSignature("-KS>wm8{*8,uAUB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -KS>wm8{*8,uAUB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t#");
      String string1 = Utility.convertString("L#;");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SAME_EXTENDED");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Utility.replace("(start_pc %Vg= ", "(start_pc %Vg= ", "(start_pc %Vg= ");
      try { 
        Utility.typeOfSignature("O\"h'[78h@c8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O\"h'[78h@c8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = Utility.getSignature("");
      Utility.compactClassName("Bogus", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "L;";
      objectArray0[3] = (Object) "L;";
      objectArray0[4] = (Object) "Bogus";
      objectArray0[5] = (Object) "Bogus";
      Object object0 = new Object();
      objectArray0[6] = object0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Utility.replace("M", "M", "if_icmpgt");
      try { 
        Utility.typeOfSignature("UQFh]cQI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UQFh]cQI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("8Vj=@", "8Vj=@", "8Vj=@", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Vj=@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      short short0 = Utility.searchOpcode("monitorenter");
      assertEquals((short)194, short0);
      
      String string0 = Utility.getSignature("UQFh]cQI");
      assertEquals("LUQFh]cQI;", string0);
      
      int int0 = Utility.setBit((-3013), (-3013));
      assertEquals((-3013), int0);
      
      Utility.format((-3013), 42, true, 'p');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString((byte)80);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "<3<bHA", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      Utility.signatureToString("Vkw_L^vRSCte", true);
      try { 
        Utility.typeOfSignature(";`l4(Ak~=|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;`l4(Ak~=|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = "!OK";
      try { 
        Utility.typeOfSignature("!OK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Utility.replace("(start_pc Vg= ", "(start_pc Vg= ", "(start_pc Vg= ");
      Utility.typeOfSignature("Constant pool at index ");
      try { 
        Utility.typeOfMethodSignature("+cZ=:8Ae.9[o6XXw*Cg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +cZ=:8Ae.9[o6XXw*Cg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      Utility.signatureToString("Vkw_L^vRSCte", true);
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("B{K_");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AobY?!O!im]a6A ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AobY?!O!im]a6A 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.compactClassName("{null, null, java.lang.Object@6e80d878, null, null, null, null, null, null}", "=class ", true);
      Utility.compactClassName("Zb(Re=G>qC");
      Utility.compactClassName("Zb(Re=G>qC", "Zb(Re=G>qC", true);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = "U@km'F.w+%F:ZA}:&r";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U@km'F.w+%F:ZA}:&r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U@km'F.w+%F:ZA}:&r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      Utility.replace("NaUM<>9Ml", ">,^o)m%i.", (String) null);
      try { 
        Utility.typeOfMethodSignature("NaUM<>9Ml");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NaUM<>9Ml
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      String string0 = Utility.convertString("Y'h-'yngncK*NM:E$");
      assertEquals("Y\\'h-\\'yngncK*NM:E$", string0);
      
      Utility.fillup("", 70, true, 'w');
      String string1 = Utility.format((-2612), 87, false, 'w');
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww-2612", string1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("t[PMb=*}Xtw@kC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[PMb=*}Xtw@kC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("N:yE@x", "invokestatic", "invokestatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N:yE@x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Utility.compactClassName("Ghu~D.LEgOIF@tjZz", false);
      try { 
        Utility.typeOfSignature("Ghu~D.LEgOIF@tjZz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ghu~D.LEgOIF@tjZz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.getSignature("O");
      String string0 = Utility.methodTypeToSignature("O", (String[]) null);
      assertEquals("()LO;", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.replace("(start_pc Vg= ", "(start_pc Vg= ", "(start_pc Vg= ");
      try { 
        Utility.typeOfSignature("K(t2)5H`[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K(t2)5H`[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = "if_acmpne";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!0<6", "if_acmpne", "BM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !0<6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int int0 = (-2685);
      Utility.accessToString((-2685), true);
      Utility.accessToString((-2685));
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      Utility.fillup("_R:a@6+", (-2685), true, 'k');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-2685), false, 'k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = "E5cL";
      try { 
        Utility.typeOfSignature("E5cL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E5cL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.getSignature("(start_pc Vg= ");
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(1223, 14, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("instanceof", "(start_pc Vg= ", "<illegal opcode>", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = Utility.getSignature(".");
      assertEquals("L/;", string0);
      
      String string1 = Utility.convertString(" @O");
      assertEquals(" @O", string1);
      
      String string2 = Utility.compactClassName(";", true);
      assertEquals(";", string2);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-74);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte) (-87), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%Sr:iV4xb55");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Sr:iV4xb55
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("int");
      Utility.convertString("I");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) "I";
      objectArray0[2] = (Object) "I";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "I";
      objectArray0[5] = (Object) "I";
      objectArray0[6] = (Object) "I";
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(tart_pc = ", "java.lang.Class", "E`!Put%49eY^js7D?%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tart_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte) (-61);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("51 79 07 fd 68 00 e7 c3", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("APPEND ");
      assertEquals("LAPPEND;", string0);
      
      String string1 = Utility.methodSignatureReturnType("LAPPEND;", false);
      assertEquals("APPEND", string1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZTV~7*");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.accessToString(56);
      assertEquals("static final synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t<");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.compactClassName("5.");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("BM", true);
      String string0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("b SoE", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.convertString("Q@'4XfU");
      try { 
        Utility.typeOfSignature("Q@'4XfU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q@'4XfU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(start_pc Vg= ", "(start_pc Vg= ", "(start_pc Vg= ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc Vg= '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.signatureToString("BM", true);
      String string0 = ", low = ";
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(tart_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (tart_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5l&.@Q]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5l&.@Q]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("7\"^K`(}1'+.&(N", stringArray0);
      assertEquals("()L7\"^K`(}1'+/&(N;", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.getSignature("QL;:%H#G&q^");
      // Undeclared exception!
      try { 
        Utility.getSignature("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = "Q@'4XfU";
      try { 
        Utility.typeOfSignature("Q@'4XfU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q@'4XfU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.setBit(255, 255);
      Utility.compactClassName("return");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("return", ">\t", " skipped", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = Utility.getSignature("(start_pc = ");
      assertEquals("L(start_pc;", string0);
      
      Utility.compactClassName("(start_pc = ", "Byte code ", false);
      String string1 = Utility.compactClassName("%s", false);
      assertEquals("%s", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("athrow", string2);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.getSignature("Byte code error: ");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Byte code error: ";
      objectArray0[2] = (Object) "Byte code error: ";
      objectArray0[3] = (Object) "LByte;";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "LByte;";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (start_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = Utility.fillup("Dzpx^x\"8By*{%", (-3239), true, 'u');
      assertEquals("Dzpx^x\"8By*{%", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Object object0 = new Object();
      Utility.classOrInterface((-3377));
      try { 
        Utility.typeOfMethodSignature("l?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, true, false);
      Utility.getSignature("{java.lang.Object@cd6997e, java.lang.Object@6bd169d7, java.lang.Object@66774784, java.lang.Object@52adbebf, java.lang.Object@6a88d0fd, java.lang.Object@af783aa}");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      int int0 = Utility.setBit(61, 47);
      assertEquals(32829, int0);
      
      String string0 = Utility.compactClassName("SimpleElementValue class does not know how to stringify type ");
      assertEquals("SimpleElementValue class does not know how to stringify type ", string0);
      
      String string1 = Utility.accessToString((-5152), true);
      assertEquals("volatile transient native strictfp annotation enum", string1);
      
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-3368), 584);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#aW^L|=Db5$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #aW^L|=Db5$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      Utility.signatureToString("Vkw_L^vRSCte", true);
      Utility.isJavaIdentifierPart('1');
      try { 
        Utility.methodSignatureArgumentTypes("Vkw_L^vRSCte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vkw_L^vRSCte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.classOrInterface((-1985));
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      int int0 = Utility.clearBit((byte) (-111), 3279);
      assertEquals((-32879), int0);
      
      short short0 = Utility.searchOpcode("4E*2(4dCc5D");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.accessToString((-1985));
      try { 
        Utility.methodSignatureReturnType("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)24;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-32);
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte) (-78);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("TqD5C)8wc");
      assertEquals("LTqD5C)8wc;", string0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.getSignature(" S4WN%:CECzz");
      assertEquals("LS4WN%:CECzz;", string0);
      
      String string1 = Utility.accessToString(3790, true);
      assertEquals("private protected static volatile transient abstract strictfp", string1);
      
      Utility.replace("private protected static volatile transient abstract strictfp", " S4WN%:CECzz", " S4WN%:CECzz");
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("00", string2);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature(" S4WN%:CECzz");
      Utility.accessToString(3790, true);
      try { 
        Utility.methodSignatureReturnType("\\", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "+oto";
      objectArray0[1] = (Object) "+oto";
      objectArray0[2] = (Object) "+oto";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-12);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte) (-37);
      byteArray1[3] = (byte) (-37);
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)28;
      byteArray1[6] = (byte) (-111);
      byteArray1[7] = (byte) (-37);
      byteArray1[8] = (byte) (-111);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Utility.getSignature("goto");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2317);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Lgoto;";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) "goto";
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(286, byteArrayOutputStream0.size());
      
      byte[] byteArray0 = Utility.decode("],*L&sfNd *$on?", false);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature(" S4WN%:CECzz");
      assertEquals("LS4WN%:CECzz;", string0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.compactClassName("\n", " S4WN%:CECzz", true);
      assertEquals("\n", string1);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      String string0 = "(start_pc = ";
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      String string1 = "tableswitch";
      try { 
        Utility.typeOfSignature("tableswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tableswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature("<3<bHA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <3<bHA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      objectArray0[0] = (Object) byteArrayOutputStream0;
      String string0 = Utility.getSignature("xV2Of);GDRx]Q*rFr_");
      assertEquals("LxV2Of);GDRx]Q*rFr_;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertNotNull(string1);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[1];
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.decode("Vq$K8Fz1Yq7W~BTsdp", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ">\t";
      Utility.compactClassName(">\t");
      Utility.searchOpcode(">>I");
      Utility.setBit((short) (-1), (short) (-1));
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      try { 
        Utility.methodSignatureReturnType("O.sn_{uGo}x*~C6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O.sn_{uGo}x*~C6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.classOrInterface(90);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = Utility.accessToString((-4416), false);
      assertEquals("volatile transient interface abstract strictfp annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Utility.compactClassName(">\t");
      String string0 = ">>I";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ">\t";
      objectArray0[1] = (Object) ">\t";
      objectArray0[2] = (Object) ">>I";
      objectArray0[3] = (Object) ">\t";
      objectArray0[4] = (Object) ">\t";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) ">>I";
      objectArray0[7] = (Object) ">\t";
      objectArray0[8] = (Object) ">\t";
      Utility.printArray(objectArray0);
      Utility.setBit(32, (-1651));
      try { 
        Utility.methodSignatureReturnType("{>\t, >\t, >>I, >\t, >\t, java.lang.Object@68823cfe, >>I, >\t, >\t}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{>\t, >\t, >>I, >\t, >\t, java.lang.Object@68823cfe, >>I, >\t, >\t}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Utility.format(48, 3, true, '8');
      Utility.searchOpcode("488");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.getSignature(" S4WN%:CECzz");
      Utility.accessToString((int) (byte)0, false);
      File file0 = MockFile.createTempFile("@ZS3", " S4WN%:CECzz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) " S4WN%:CECzz";
      objectArray0[7] = (Object) " S4WN%:CECzz";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.format(48, (-13), true, '*');
      Object[] objectArray0 = null;
      Utility.fillup("48", '*', true, '*');
      int int0 = (-1651);
      Utility.setBit((-1651), (-90));
      try { 
        Utility.methodSignatureReturnType("48****************************************", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `48****************************************'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[0] = (byte) (-58);
      byteArray0[2] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) null;
      try { 
        Utility.decode("zcl>HCRce.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.fillup("iF#_Anxe< c)$sET_0]", (byte)0, false, 't');
      assertEquals("iF#_Anxe< c)$sET_0]", string0);
      
      byte[] byteArray1 = Utility.decode("DW5TadGujPTPHJ;]| ", false);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1985));
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-111);
      objectArray0[2] = (Object) (byte) (-37);
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte) (-111);
      objectArray0[6] = (Object) (byte) (-12);
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = Utility.isJavaIdentifierPart('t');
      boolean boolean1 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(241, true);
      assertEquals("public final volatile transient", string1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = "RC)Rs/'E`V$";
      Utility.getSignature("RC)Rs/'E`V$");
      Utility.isSet(109, 52);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.typeOfSignature("LRC)Rs/'E`V$;");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature(" S4WN%:CECzz");
      assertEquals("LS4WN%:CECzz;", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      int int0 = 48;
      Utility.format(48, 9, true, '*');
      Utility.printArray((Object[]) null);
      Utility.setBit('*', (-90));
      Utility.printArray((Object[]) null, true, false);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "48*******");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)5;
      byteArray0[7] = (byte) (-99);
      Utility.encode(byteArray0, false);
      Utility.setBit((-1847839551), (byte)14);
      Utility.compactClassName("goto_w");
      try { 
        Utility.methodSignatureArgumentTypes("/^[{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /^[{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.getSignature("Z000BhgwbE");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)94;
      Utility.setBit((byte)0, (-168));
      Utility.compactClassName("Invalid method signature: ");
      try { 
        Utility.methodSignatureArgumentTypes("wU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      String string0 = Utility.accessToString(45);
      assertEquals("public protected static synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.compactClassName("R");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("R");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      Utility.decode("", false);
      Utility.convertString("H~TC]B3vF6");
      String string0 = "0";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.getSignature("J3Nt$fe !~|Sx}17AJ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)62;
      boolean boolean0 = false;
      Utility.signatureToString("LJ3Nt$fe;", false);
      Utility.signatureToString("J3Nt$fe !~|Sx}17AJ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J3Nt$fe";
      stringArray0[1] = "long";
      stringArray0[2] = "J3Nt$fe !~|Sx}17AJ";
      stringArray0[3] = "J3Nt$fe";
      stringArray0[4] = "LJ3Nt$fe;";
      stringArray0[5] = "LJ3Nt$fe;";
      stringArray0[6] = "LJ3Nt$fe;";
      stringArray0[7] = "LJ3Nt$fe;";
      Utility.methodTypeToSignature("long", stringArray0);
      Utility.compactClassName("# 0|5Q\"2~$", false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("J3Nt$fe", "if_acmpeq", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = Utility.format((-517), (-517), false, 'h');
      assertEquals("-517", string0);
      
      String string1 = Utility.compactClassName("pV", "", false);
      assertEquals("pV", string1);
      
      byte[] byteArray0 = Utility.decode("RuntimeInvisibleAnnotations", false);
      assertEquals(27, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-58);
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("iload_3", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "iload_3", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "iload_3", objectArray0);
      Utility.printArray(printWriter1, objectArray0);
      assertNotSame(printWriter1, printWriter0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.fillup("\tdefault = ", 139, false, '\u0084');
      assertEquals("\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\u0084\tdefault = ", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = "BM";
      int int0 = 0;
      Utility.isSet(0, (-517));
      Utility.accessToString((-517));
      // Undeclared exception!
      try { 
        Utility.signatureToString("ody1*|*.NCer&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ody1*|*.NCer&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.getSignature("goto");
      int int0 = 90;
      Utility.isSet(90, 3402);
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.LineNumberTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.LineNumberTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.accessToString((-253));
      Utility.replace("public private native interface abstract strictfp synthetic annotation enum", "public private native interface abstract strictfp synthetic annotation enum", "public private native interface abstract strictfp synthetic annotation enum");
      try { 
        Utility.methodSignatureArgumentTypes("public private native interface abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private native interface abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-58);
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) null;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.methodSignatureArgumentTypes("(start_pc = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.clearBit(1626, 0);
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[8];
      int int0 = 41;
      int int1 = 152;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(41, 152);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      MockFile mockFile0 = new MockFile("^5/GD*@", "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "{java.lang.Object@e5a428c, java.lang.Object@5b337130, java.lang.Object@30baf252}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"{java.lang.Object@e5a428c, java.lang.Object@5b337130, java.lang.Object@30baf252}\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      char char0 = 'R';
      Utility.isJavaIdentifierPart('R');
      int int0 = 92;
      Utility.format(92, 92, true, 'R');
      Utility.format(776, 92, true, 't');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("776ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", "", "> aXk:Qj^eG", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 776ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = "compiler version\t";
      Utility.convertString("compiler version\t");
      String string1 = "=ZgwL";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("=ZgwL", "compiler version\t", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ZgwL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = "BM";
      boolean boolean0 = false;
      Utility.signatureToString("BM", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("BM", "byte", "'l[]T>ax{W3q'Mz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = "Uf|TZ)h( z`qOers";
      String string1 = "Dont call getValueShort() on a non SHORT ElementValue";
      Utility.replace("Uf|TZ)h( z`qOers", "Dont call getValueShort() on a non SHORT ElementValue", "");
      // Undeclared exception!
      Utility.replace("Uf|TZ)h( z`qOers", "", "Dont call getValueShort() on a non SHORT ElementValue");
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = "`2KWk\\:Yz?i[";
      try { 
        Utility.methodSignatureArgumentTypes("`2KWk:Yz?i[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `2KWk:Yz?i[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      int int0 = 32;
      Utility.classOrInterface(32);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = "RC)R s/'E`V$";
      try { 
        Utility.methodSignatureReturnType("RC)R s/'E`V$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R s/'E`V$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      Utility.decode("", false);
      boolean boolean1 = Utility.isJavaIdentifierPart('Z');
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Utility.printArray(objectArray0, true);
      String string0 = Utility.accessToString(1471, false);
      assertEquals("public private protected static final synchronized transient native abstract", string0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = "7?cc";
      // Undeclared exception!
      try { 
        Utility.signatureToString("7?cc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7?cc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("+NH^^F8Jy6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+NH^^F8Jy6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Utility.format(48, 9, true, '*');
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      int int0 = (-1651);
      Utility.setBit((-1651), (-90));
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.getSignature("J3Nt$fe !~|Sx}17AJ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-109);
      Utility.encode(byteArray0, true);
      Utility.setBit((byte) (-4), 0);
      Utility.compactClassName("A;&Svx");
      try { 
        Utility.methodSignatureArgumentTypes(" \u0001mR.tgrXC'wT9G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  \u0001mR.tgrXC'wT9G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.accessToString((-379));
      Utility.isSet((-379), 0);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Utility.clearBit(0, 1270);
      try { 
        Utility.methodSignatureArgumentTypes("Q?:_Mi3B-!u{Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q?:_Mi3B-!u{Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = Utility.format(0, 1827, false, '+');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Utility.compactClassName(">\t");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = ">>I";
      Utility.searchOpcode(">>I");
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = Utility.format((-523), (-523), false, 'h');
      assertEquals("-523", string0);
      
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = Utility.decode("RuntimeInvisibleAnnotations", false);
      assertEquals(27, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "ezsk$K5Ax4M@o>7fP";
      stringArray0[2] = "ezsk$K5Ax4M@o>7fP";
      stringArray0[3] = "ezsk$K5Ax4M@o>7fP";
      String string0 = Utility.methodTypeToSignature("ezsk$K5Ax4M@o>7fP", stringArray0);
      assertEquals("(L;Lezsk$K5Ax4M@o>7fP;Lezsk$K5Ax4M@o>7fP;Lezsk$K5Ax4M@o>7fP;)Lezsk$K5Ax4M@o>7fP;", string0);
      
      int int0 = Utility.clearBit(148, (-1));
      assertEquals(148, int0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Utility.clearBit(22, 255);
      Utility.setBit(267, 0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.fillup("\tdefault = ", 139, true, 't');
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Utility.methodTypeToSignature("", stringArray0);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
