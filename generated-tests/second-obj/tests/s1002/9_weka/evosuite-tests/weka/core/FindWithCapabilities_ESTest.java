/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:05:32 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      String[] stringArray0 = new String[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1952.1439980829093);
      doubleArray0[1] = (-1952.1439980829093);
      doubleArray0[2] = (-1952.1439980829093);
      doubleArray0[3] = (-1952.1439980829093);
      doubleArray0[4] = (-1952.1439980829093);
      doubleArray0[5] = (-1952.1439980829093);
      doubleArray0[6] = (-1952.1439980829093);
      doubleArray0[7] = (-1952.1439980829093);
      doubleArray0[8] = (-1952.1439980829093);
      SparseInstance sparseInstance0 = new SparseInstance();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "superclass";
      stringArray0[1] = "\tMust handle unray classes.";
      stringArray0[2] = "tD#A3p=2e dmFO>]!";
      stringArray0[3] = "-num-instances";
      stringArray0[4] = "-list-packages";
      stringArray0[5] = "@5]3`6&p&D\">B";
      stringArray0[6] = "-nominal-atts";
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom((-1530));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Packages = vector0;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities0.setClassIndex("A8");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.disable(capabilities_Capability1);
      findWithCapabilities0.setFilename("'!");
      System.setCurrentTimeMillis(1950L);
      findWithCapabilities2.getFilename();
      findWithCapabilities2.getMisses();
      findWithCapabilities1.setFilename("");
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      capabilities0.enableDependency(capabilities_Capability0);
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.handles(capabilities_Capability1);
      findWithCapabilities1.setFilename("`Y/Na+`_Ky5>fH^");
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.handles(capabilities_Capability2);
      findWithCapabilities1.setFilename("#]#t?Yuu+I");
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getHandler();
      assertEquals("#]#t?Yuu+I", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j%Nh%q&-(-&{VI", arrayList0, 0);
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.getOtherCapabilities();
      capabilities0.and(capabilities1);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      SingleIndex singleIndex0 = new SingleIndex("rW0x");
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-relational-atts";
      stringArray0[1] = "&n9&%yQGQn";
      stringArray0[2] = "HG2[2x";
      stringArray0[3] = "\tMust handle nominal classes.";
      stringArray0[4] = "w|s2j0VQ&-kmtRddhOI";
      stringArray0[5] = "last";
      stringArray0[6] = "~2d:MO2UlyT";
      stringArray0[7] = "A0jbM1<6CGB";
      stringArray0[8] = "\"E2|.-5{$5Zg:X'D;";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.find();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("WVS");
      findWithCapabilities0.setFilename("WVS");
      FindWithCapabilities.main((String[]) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      SingleIndex singleIndex0 = new SingleIndex("-1");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-not-nominal-class";
      stringArray0[1] = "1~";
      stringArray0[2] = "-not-no-class";
      stringArray0[3] = "'MKmX*";
      stringArray0[4] = "\tMust handle relational attributes.";
      stringArray0[5] = "string-atts";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      SingleIndex singleIndex0 = new SingleIndex("vR+M~O(QGNus=`//A");
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-not-no-class";
      stringArray0[1] = "not-date-class";
      stringArray0[2] = "*CDE0L%";
      stringArray0[3] = "-not-date-atts";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.setClassIndex("-not-no-class");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getFilename();
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      boolean boolean0 = ClassCache.VERBOSE;
      findWithCapabilities0.listOptions();
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.m_MinimumNumberInstances = (-1);
      capabilities1.setOwner(findWithCapabilities0);
      capabilities0.assign(capabilities1);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      System.setCurrentTimeMillis((-2));
      findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(0L);
      vector1.add("weka/core/Capabilities.props");
      findWithCapabilities0.getRevision();
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "last";
      String[] stringArray1 = TestInstances.listToArray("last");
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getMatches();
      findWithCapabilities1.getNotCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray2 = new String[9];
      stringArray2[0] = "weka/core/Capabilities.props";
      stringArray2[1] = "last";
      stringArray2[2] = "(oSl0]ELJO)4>)1MDR~";
      stringArray2[3] = "last";
      stringArray2[4] = "(oSl0]ELJO)4>)1MDR~";
      stringArray2[5] = "&Y/YvBz m";
      stringArray2[6] = "(oSl0]ELJO)4>)1MDR~";
      stringArray2[7] = "B<";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      System.setCurrentTimeMillis(1942L);
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray3 = findWithCapabilities0.getOptions();
      assertNotSame(stringArray3, stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Random.setNextRandom(380);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gI");
      findWithCapabilities2.getMisses();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("date-atts");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities2.m_Handler;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities4.setFilename("Sr");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities5.getOptions();
      findWithCapabilities2.setFilename("#T[f f+w'}J{");
      assertEquals("#T[f f+w'}J{", findWithCapabilities2.getFilename());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      String[] stringArray0 = Locale.getISOCountries();
      String[] stringArray1 = new String[5];
      FindWithCapabilities.main(stringArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@5]3`6&p&D\">B");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray1);
      String[] stringArray2 = new String[2];
      stringArray2[0] = "~q{_y+9";
      stringArray2[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.setClassIndex("~q{_y+9");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.setCapabilities(capabilities0);
      System.setCurrentTimeMillis(1233L);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability1);
      String[] stringArray3 = findWithCapabilities1.getOptions();
      assertNotSame(stringArray3, stringArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMatches();
      String[] stringArray1 = new String[2];
      findWithCapabilities1.m_Filename = "(oSl0]ELJO)4>)1MDR~";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("v`Sz)owf~?j':\"+>");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      System.setCurrentTimeMillis(1942L);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      String[] stringArray2 = findWithCapabilities1.getOptions();
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "last";
      stringArray1[1] = "-E?r1vg";
      stringArray1[2] = "-not-string-class";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getOptions();
      SingleIndex singleIndex0 = new SingleIndex("-not-string-class");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "-nominal-class";
      stringArray1[1] = "hx+]-t>?^h)3i_";
      stringArray1[2] = "W$V3Q@KVa3C^,T\"[}5";
      stringArray1[3] = "C*D";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities0.setClassIndex("A8");
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.m_Superclass = "\tMust handle date classes.";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)7;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.setClassIndex("n:MoOIK\"ageoL<4D0n");
      findWithCapabilities1.setClassIndex("n:MoOIK\"ageoL<4D0n");
      System.setCurrentTimeMillis(1950L);
      capabilities0.capabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-not-missing-class-values";
      stringArray0[1] = "-not-missing-class-values";
      stringArray0[2] = "-not-missing-class-values";
      stringArray0[3] = "-not-missing-class-values";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      System.setCurrentTimeMillis(1950L);
      capabilities0.capabilities();
      findWithCapabilities1.m_ClassIndex = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.find();
      assertTrue(vector1.equals((Object)vector0));
      
      String string0 = findWithCapabilities1.getClassIndex();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0.m_Handler);
      findWithCapabilities1.m_Capabilities = capabilities1;
      findWithCapabilities1.setClassIndex("jpb>Nc9Z8s4");
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities0.setFilename("cLCVl");
      System.setCurrentTimeMillis(1950L);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7y4");
      findWithCapabilities0.setClassIndex("");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = TestInstances.listToArray("-binary-class");
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      findWithCapabilities3.getNotCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setClassIndex("m<");
      System.setCurrentTimeMillis(2L);
      findWithCapabilities1.getOptions();
      findWithCapabilities4.getFilename();
      Vector<String> vector1 = findWithCapabilities3.getMatches();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-no-class";
      stringArray0[1] = "8AXs;^~&?81YG6t";
      stringArray0[2] = ";{Xo3WJ\"cKUxUu-py1b";
      stringArray0[3] = "$Revision: 8034 $";
      stringArray0[4] = "+@0~r!*S~C^.QHIb";
      stringArray0[5] = "k7-7{}(#2{mNVvm;?";
      stringArray0[6] = "not-date-class";
      stringArray0[7] = "MO";
      stringArray0[8] = "\tThe dataset to base the capabilities on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler.\n\tEither '-t' or '-W' can be used.";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "74";
      stringArray1[1] = "74";
      stringArray1[2] = "-not-numeric-atts";
      stringArray1[3] = "74";
      stringArray1[4] = "74";
      stringArray1[5] = "74";
      stringArray1[6] = "74";
      stringArray1[7] = "74";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.find();
      FindWithCapabilities.main(stringArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SparseInstance sparseInstance0 = new SparseInstance();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance.main(stringArray0);
      binarySparseInstance0.dataset();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-no-class";
      stringArray0[1] = "8AXs;^~&?81YG6t";
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String string0 = findWithCapabilities2.m_Filename;
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.disableAllAttributes();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.getFilename();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities3.getMisses();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("-no-class");
      findWithCapabilities4.getCapabilities();
      String[] stringArray2 = new String[4];
      findWithCapabilities2.getRevision();
      stringArray2[0] = "-numeric-atts";
      stringArray2[1] = "weka/core/Capabilities.props";
      stringArray2[2] = "";
      stringArray2[3] = "8AXs;^~&?81YG6t";
      FindWithCapabilities.main(stringArray2);
      Random.setNextRandom(28);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("74");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities2.disable(capabilities_Capability0);
      findWithCapabilities1.getMatches();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities1.find();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities2.setClassIndex("");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities3.enable(capabilities_Capability1);
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities3.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "@5]3`6&p&D\">B";
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "@5]3`6&p&D\">B";
      FindWithCapabilities.main(stringArray1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.find();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("74");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setClassIndex("");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities2.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities2.enable(capabilities_Capability0);
      findWithCapabilities2.getOptions();
      findWithCapabilities2.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "(oSl0]ELJO)4>)1MDR~";
      stringArray1[2] = "(oSl0]ELJO)4>)1MDR~";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "(oSl0]ELJO)4>)1MDR~";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities4.enable(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "U";
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities1.m_Dependencies;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      hashSet0.add(capabilities_Capability0);
      capabilities0.m_Capabilities = hashSet0;
      Capabilities capabilities2 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.getOptions();
      Attribute attribute0 = new Attribute("#g$Mzn-j~?");
      capabilities0.test(attribute0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      TestInstances testInstances0 = new TestInstances();
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("74");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not-no-class");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities2.disable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getMatches();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities2.find();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-nominal-atts";
      stringArray1[1] = "74";
      stringArray1[2] = "74";
      stringArray1[3] = "not-no-class";
      stringArray1[4] = "not-no-class";
      stringArray1[5] = "not-no-class";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      findWithCapabilities0.setFilename("-not-nominal-class");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      assertEquals("", findWithCapabilities3.getFilename());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      findWithCapabilities0.setClassIndex(">");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@5]3`6&p&D\">B");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("");
      findWithCapabilities1.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.getOptions();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.enable(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(oSl0]ELJO)4>)1MDR~";
      stringArray0[1] = "@5]3`6&p&D\">B";
      stringArray0[2] = "@5]3`6&p&D\">B";
      stringArray0[3] = "@5]3`6&p&D\">B";
      stringArray0[4] = "6%&";
      stringArray0[5] = "@5]3`6&p&D\">B";
      stringArray0[6] = "@5]3`6&p&D\">B";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("end of line expected");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities1.getFilename();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String string0 = findWithCapabilities2.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.setClassIndex("-1");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      findWithCapabilities2.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMatches();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getMatches();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getRevision();
      findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      System.setCurrentTimeMillis(0L);
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("2D=Sp B:K3w'E6");
      findWithCapabilities0.setClassIndex("74");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray1 = new String[0];
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities2.getMatches();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "74");
      String[] stringArray2 = new String[0];
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("74");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getFilename();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      findWithCapabilities3.setFilename("$Ky,ox`CsA<S4");
      FindWithCapabilities.main(stringArray1);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMatches();
      findWithCapabilities1.m_Filename = "(oSl0]ELJO)4>)1MDR~";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "(oSl0]ELJO)4>)1MDR~";
      stringArray1[1] = "(oSl0]ELJO)4>)1MDR~";
      stringArray1[2] = "(oSl0]ELJO)4>)1MDR~";
      stringArray1[3] = "(oSl0]ELJO)4>)1MDR~";
      stringArray1[4] = "weka/core/Capabilities.props";
      stringArray1[5] = "(oSl0]ELJO)4>)1MDR~";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.setClassIndex("@]~4wg[.");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities2.m_Handler;
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      System.setCurrentTimeMillis((-3000L));
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      String[] stringArray2 = findWithCapabilities3.getOptions();
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("generic");
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("!I3s 9%^|*HF");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("2D=Sp B:K3w'E6");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMatches();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "74");
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMisses();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.setClassIndex("!I3s 9%^|*HF");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities3.enableNot(capabilities_Capability1);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities3.m_Handler;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      System.setCurrentTimeMillis((-3000L));
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities3.getOptions();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities4.getFilename();
      findWithCapabilities3.getOptions();
      findWithCapabilities0.getRevision();
      assertEquals("!I3s 9%^|*HF", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      findWithCapabilities0.setClassIndex(">");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">";
      stringArray0[1] = "@5]3`6&p&D\">B";
      stringArray0[2] = "nG;R.AT<yu1Hb{tXNA";
      stringArray0[3] = "@5]3`6&p&D\">B";
      findWithCapabilities1.getRevision();
      stringArray0[4] = ">";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.getFilename();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities4.getFilename();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.disable(capabilities_Capability0);
      assertNotSame(findWithCapabilities1, findWithCapabilities3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      findWithCapabilities0.setClassIndex(">");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities2.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities1.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
      
      findWithCapabilities3.find();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("jx^g(.P5+=");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities3.enableNot(capabilities_Capability2);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities3.m_Handler;
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      System.setCurrentTimeMillis((-3000L));
      findWithCapabilities3.disable(capabilities_Capability1);
      findWithCapabilities3.getOptions();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities3.disableNot(capabilities_Capability3);
      Vector<String> vector1 = findWithCapabilities2.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "@5]3`6&p&D\">B";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = new String[5];
      FindWithCapabilities.main(stringArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@5]3`6&p&D\">B");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities2;
      findWithCapabilities2.getMatches();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getMisses();
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      findWithCapabilities2.getRevision();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities2.getRevision();
      findWithCapabilities2.enable(capabilities_Capability1);
      System.setCurrentTimeMillis(1801L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities2.getMatches();
      findWithCapabilities5.setClassIndex("-t");
      assertNotSame(findWithCapabilities5, findWithCapabilities4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities2.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      MockException mockException0 = new MockException();
      capabilities0.m_FailReason = (Exception) mockException0;
      findWithCapabilities3.getMatches();
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      findWithCapabilities0.find();
      findWithCapabilities3.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities3.getRevision();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("n:MoOIK\"ageoL<4D0n");
      findWithCapabilities5.getHandler();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      boolean boolean1 = findWithCapabilities3.isEnabled(capabilities_Capability1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities2.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities3.disable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getMatches();
      boolean boolean0 = capabilities0.m_InstancesTest;
      findWithCapabilities4.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.getMisses();
      findWithCapabilities4.getOptions();
      Vector<String> vector0 = findWithCapabilities3.m_Packages;
      findWithCapabilities5.getRevision();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities6.getRevision();
      System.setCurrentTimeMillis((-2567L));
      findWithCapabilities5.getOptions();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities4.getMatches();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("not-unary-class");
      assertNotSame(findWithCapabilities1, findWithCapabilities6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.setClassIndex("n:MoOIK\"ageoL<4D0n");
      findWithCapabilities1.setClassIndex("n:MoOIK\"ageoL<4D0n");
      findWithCapabilities1.getRevision();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities1.setClassIndex("pr?z}nM/&wiQ$0?");
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      findWithCapabilities1.setFilename("pr?z}nM/&wiQ$0?");
      assertEquals("pr?z}nM/&wiQ$0?", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.listOptions();
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.m_MinimumNumberInstances = (-1);
      capabilities1.setOwner(findWithCapabilities0);
      capabilities0.assign(capabilities1);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.find();
      Vector<String> vector2 = findWithCapabilities0.getMatches();
      assertTrue(vector2.equals((Object)vector0));
      
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex(" ");
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector3 = findWithCapabilities0.find();
      assertTrue(vector3.equals((Object)vector2));
  }
}
