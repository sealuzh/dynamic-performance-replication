/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:08:19 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*~*/A,_QKqwA=$$");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 5675);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader1 = new StringReader("");
      stringReader1.ready();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.mark((-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)2);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = (-754);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 42. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      StringReader stringReader0 = new StringReader("c7-]$-@@-+La-Ox");
      Token token0 = new Token();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token1 = new Token();
      int int0 = ObjectStreamConstants.baseWireHandle;
      javaParserTokenManager0.ReInit(javaCharStream0);
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("c7", token2.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1125), (-1125));
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.lengthOfMatch = 852;
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1125), javaCharStream0.getLine());
      assertEquals((-1125), javaCharStream0.getEndLine());
      assertEquals((-1125), javaCharStream0.getEndColumn());
      assertEquals((-1125), javaCharStream0.getColumn());
      assertEquals((-1125), javaCharStream0.getBeginColumn());
      assertEquals((-1125), javaCharStream0.getBeginLine());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1125), token0.beginLine);
      assertEquals((-1125), token0.beginColumn);
      assertEquals(105, token0.kind);
      assertEquals((-1125), token0.endColumn);
      assertEquals((-1125), token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 84. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)17, (byte)17, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)110, (byte)17, (byte)17, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.prevCharIsLF = false;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)110, (byte)17, (byte)17, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)110, (byte)17, (byte)17, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("n", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)77}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[14];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)77}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("M", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)27, (byte)97}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)27, (byte)97}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)27, (byte)97}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)27, (byte)97}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals("nn", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      StringReader stringReader0 = new StringReader("cFQ C CD/0Wh4_=Y5");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("cFQ", token2.toString());
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1140), (-1140));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1140), javaCharStream0.getBeginLine());
      assertEquals((-1140), javaCharStream0.getEndLine());
      assertEquals((-1140), javaCharStream0.getColumn());
      assertEquals((-1140), javaCharStream0.getLine());
      assertEquals((-1140), javaCharStream0.getEndColumn());
      assertEquals((-1140), javaCharStream0.getBeginColumn());
      assertEquals(";", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1140), token0.endLine);
      assertEquals((-1140), token0.beginLine);
      assertEquals((-1140), token0.beginColumn);
      assertEquals((-1140), token0.endColumn);
      assertEquals(83, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1140, column -1139.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)77, (byte)77, (byte) (-28), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, 15);
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)77, (byte)77, (byte) (-28), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)77, (byte)77, (byte) (-28), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)77, (byte)77, (byte) (-28), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals("MMMM", token0.toString());
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.endColumn);
      assertEquals(15, token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endLine);
      assertEquals(74, token0.kind);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 31. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int[] intArray0 = new int[0];
      javaCharStream0.bufline = intArray0;
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("//r5lx:1||6ah");
      assertNotNull(stringReader0);
      
      token_GTToken0.kind = 0;
      assertNull(token_GTToken0.toString());
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 3, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      
      StringBuffer stringBuffer0 = new StringBuffer("//r5lx:1||6ah");
      assertEquals("//r5lx:1||6ah", stringBuffer0.toString());
      assertEquals(13, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 5.  Encountered: \"r\" (114), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(20, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      StringReader stringReader0 = new StringReader("</[H.<S(s");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-362), 0, (int) (byte)2);
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedKind = 34;
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      
      javaParserTokenManager0.defaultLexState = (-1);
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals((-362), token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals((-362), token0.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/");
      assertFalse(boolean0);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"*/\"");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"*/\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      StringReader stringReader0 = new StringReader("\"*/\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"*/\"");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean4);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('\"', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean7 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals(1, token1.endColumn);
      assertNotSame(token1, token0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("2jp{9oWivbGnHzEj5");
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=17 cap=17]", byteBuffer0.toString());
      assertEquals(17, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(17, byteBuffer0.capacity());
      assertEquals(17, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertNotNull(byteBuffer0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.SwitchTo(1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("</[H.<S(s");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjmatchedKind = 34;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      
      javaParserTokenManager0.defaultLexState = (-1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      Token token0 = Token.newToken(81);
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(104, token1.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("[", token2.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertNotNull(token2);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      assertEquals(81, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token3 = new Token();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNull(token3.toString());
      assertNotNull(token3);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      
      Token token4 = Token.newToken(0);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertNull(token4.toString());
      assertNotNull(token4);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token4));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token4);
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("H", token5.toString());
      assertNotNull(token5);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token5.endColumn);
      assertEquals(0, token5.endLine);
      assertEquals(74, token5.kind);
      assertEquals(0, token5.beginLine);
      assertEquals(2, token5.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"native\"");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      StringReader stringReader0 = new StringReader("\"native\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"native\"");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('\"', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean6 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("native", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(43, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNotSame(token0, token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      StringReader stringReader0 = new StringReader("</[H.<S(s");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("true", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(61, token0.kind);
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("\f");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 202);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.SwitchTo(token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("l");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte) (-90), (int) (byte)48, 0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals((-90), javaCharStream0.getEndLine());
      assertEquals((-90), javaCharStream0.getBeginLine());
      assertEquals((-90), javaCharStream0.getLine());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-90), token0.beginLine);
      assertEquals(48, token0.endColumn);
      assertEquals((-90), token0.endLine);
      assertEquals(48, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals((-90), javaCharStream0.getEndLine());
      assertEquals((-90), javaCharStream0.getBeginLine());
      assertEquals((-90), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3066));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3066. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      StringReader stringReader0 = new StringReader("</[H.<S(s");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-373), 0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-373), token0.beginLine);
      assertEquals((-373), token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(88, token0.kind);
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token1.kind);
      assertEquals((-373), token1.endLine);
      assertEquals((-373), token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals("[", token2.toString());
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-373), token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals((-373), token2.endLine);
      assertEquals(81, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals("H", token3.toString());
      assertNotNull(token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-373), token3.beginLine);
      assertEquals((-373), token3.endLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(3, token3.endColumn);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals(".", token4.toString());
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-373), token4.beginLine);
      assertEquals(85, token4.kind);
      assertEquals(4, token4.beginColumn);
      assertEquals(4, token4.endColumn);
      assertEquals((-373), token4.endLine);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("<", token5.toString());
      assertNotNull(token5);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-373), token5.beginLine);
      assertEquals(5, token5.endColumn);
      assertEquals(88, token5.kind);
      assertEquals(5, token5.beginColumn);
      assertEquals((-373), token5.endLine);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token5));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token4));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-373), token0.beginLine);
      assertEquals((-373), token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(88, token0.kind);
      assertNotSame(token0, token5);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token4);
      
      Token token6 = javaParserTokenManager0.jjFillToken();
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token2));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("<", token6.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-373), javaCharStream0.getLine());
      assertEquals((-373), javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals((-373), javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertNotNull(token6);
      assertEquals((-373), token6.beginLine);
      assertEquals(5, token6.endColumn);
      assertEquals(5, token6.beginColumn);
      assertEquals((-373), token6.endLine);
      assertEquals(88, token6.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token5);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertNotSame(token6, token2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("</[H.<S(s");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-362), 0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals((-362), token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals((-362), token0.beginLine);
      assertEquals(88, token0.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-362), token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(104, token1.kind);
      assertEquals((-362), token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.SwitchTo(1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(14, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("//r5lx:1||6ah");
      assertNotNull(stringReader0);
      
      token_GTToken0.kind = (-1);
      assertNull(token_GTToken0.toString());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 49, 0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(14, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(14, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 51.  Encountered: \"r\" (114), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)57, (byte)57);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-51), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      StringReader stringReader0 = new StringReader("xL':mR");
      assertNotNull(stringReader0);
      
      int int0 = token_GTToken0.beginColumn;
      assertEquals(0, int0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, (-23), 1754);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      long long0 = byteArrayInputStream0.skip(0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-51L), long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-22), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-22), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-23), javaCharStream0.getBeginColumn());
      assertEquals("xL", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-23), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals((-22), token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column -19.  Encountered: \"m\" (109), after : \"\\':\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Vb-hX5h");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      mockPrintStream0.println(true);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      mockPrintStream0.write((-1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("Vb", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(102, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("hX5h", token2.toString());
      assertNotNull(token2);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(7, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 7, (-801));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token3 = Token.newToken((-1677));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNull(token3.toString());
      assertNotNull(token3);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.SwitchTo(3);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)59, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      StringReader stringReader0 = new StringReader("xL':mR");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(120, int0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 2, (int) (byte)2, 841);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 0, 91);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream1.ReInit((Reader) stringReader0, (-1), 125, 15);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(125, javaCharStream1.getEndColumn());
      assertEquals(125, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(125, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals("L", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals(125, token0.beginColumn);
      assertEquals(125, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 128.  Encountered: \"m\" (109), after : \"\\':\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<IDENTIFIER>");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 6);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("<IDENTIFIER>");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean1 = stringReader1.ready();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("IDENTIFIER", token1.toString());
      assertNotNull(token1);
      assertEquals(10, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(11, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token_GTToken0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">", token2.toString());
      assertNotNull(token2);
      assertEquals(11, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(12, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(12, token2.beginColumn);
      assertEquals(124, token2.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token_GTToken0);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token_GTToken0.equals((Object)token2));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNull(token_GTToken0.toString());
      assertEquals(11, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token_GTToken0, token2);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "<IDENTIFIER>");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader(">>>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(62, int0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">>", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertFalse(token_GTToken0.equals((Object)token1));
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertFalse(token_GTToken1.equals((Object)token1));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)44, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-697), (byte)44);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)44, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)44, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)44, (byte)2, (byte)2}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals((-697), javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals((-697), javaCharStream0.getEndLine());
      assertEquals((-697), javaCharStream0.getLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.kind);
      assertEquals((-697), token0.endLine);
      assertEquals((-697), token0.beginLine);
      assertEquals(44, token0.beginColumn);
      assertEquals(44, token0.endColumn);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)44, (byte)2, (byte)2}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals((-697), javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals((-697), javaCharStream0.getEndLine());
      assertEquals((-697), javaCharStream0.getLine());
      assertNull(token_GTToken1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertNotSame(token_GTToken1, token_GTToken0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -697, column 45.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)105);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals("i", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(15, token0.beginLine);
      assertEquals(105, token0.endColumn);
      assertEquals(15, token0.endLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(15, token2.endLine);
      assertEquals(105, token2.endColumn);
      assertEquals(105, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(15, token2.beginLine);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      String string0 = "nD";
      StringReader stringReader0 = new StringReader("nD");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 202);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = token_GTToken0.next;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("nD", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 115, (byte)116);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals("tt", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(116, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(117, token0.endColumn);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-293));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -293. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("rOd:x");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)119}, byteArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('r', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean5 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("Od", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("/");
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(":", token3.toString());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(token3);
      assertEquals(92, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y:-!V_?3uKw'Vj");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      StringReader stringReader0 = new StringReader("Y:-!V_?3uKw'Vj");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Y", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      token_GTToken0.beginColumn = 0;
      assertNull(token_GTToken0.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(":", token2.toString());
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(92, token2.kind);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("-", token3.toString());
      assertNotNull(token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(102, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("!", token4.toString());
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(89, token4.kind);
      assertEquals(4, token4.endColumn);
      assertEquals(4, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("!", token5.toString());
      assertNotNull(token5);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token5.beginColumn);
      assertEquals(4, token5.endColumn);
      assertEquals(89, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      
      javaParserTokenManager0.SwitchTo(2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("c7-]$-@@-+La-Ox");
      assertNotNull(stringReader0);
      
      token_GTToken0.kind = (-1);
      assertNull(token_GTToken0.toString());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 49, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("c7", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(50, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("c7", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(49, token1.beginColumn);
      assertEquals(50, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals("-", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(102, token2.kind);
      assertEquals(51, token2.endColumn);
      assertEquals(51, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals("]", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(52, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(52, token3.endColumn);
      assertEquals(82, token3.kind);
      assertEquals(0, token3.beginLine);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals("$", token4.toString());
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(53, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(53, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      
      Token token5 = Token.newToken(0);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertNull(token5.toString());
      assertNotNull(token5);
      assertEquals(0, token5.beginLine);
      assertEquals(0, token5.endLine);
      assertEquals(0, token5.kind);
      assertEquals(0, token5.endColumn);
      assertEquals(0, token5.beginColumn);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark((-198));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      Token token6 = javaParserTokenManager1.getNextToken();
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("-", token6.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertNotNull(token6);
      assertEquals(54, token6.beginColumn);
      assertEquals(54, token6.endColumn);
      assertEquals(0, token6.beginLine);
      assertEquals(102, token6.kind);
      assertEquals(0, token6.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token0);
      assertNotSame(token6, token1);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(53);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 53. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@N");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("@", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("N", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.beginColumn);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = Token.newToken(0);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertNull(token4.toString());
      assertNotNull(token4);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.beginColumn);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("", token5.toString());
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token5.beginLine);
      assertEquals(2, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(2, token5.beginColumn);
      assertEquals(0, token5.kind);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 0, 2, (-282));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(18, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("fj(^kVh");
      assertNotNull(stringReader0);
      
      byteArrayInputStream0.reset();
      assertEquals(18, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("fj", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNull(token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(18, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("fj(^kVh");
      assertNotNull(stringReader0);
      
      token_GTToken0.kind = (-1);
      assertNull(token_GTToken0.toString());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 49, 0);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(18, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("fj", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      
      byteArrayInputStream0.reset();
      assertEquals(18, byteArrayInputStream0.available());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals("(", token1.toString());
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(51, token1.endColumn);
      assertEquals(51, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 52.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)105;
      StringReader stringReader0 = new StringReader(".+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".+");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(18, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 0, 2833);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = Token.newToken(3738);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(".", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(85, token2.kind);
      assertEquals(1, token2.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XWIn6>[");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token token3 = token_GTToken0.next;
      assertNull(token3);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(".", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(85, token2.kind);
      assertEquals(1, token2.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      URI uRI0 = MockURI.URI("");
      assertEquals("", uRI0.getRawPath());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
      
      Token token4 = token_GTToken0.specialToken;
      assertNull(token4);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("+", token5.toString());
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(101, token5.kind);
      assertEquals(2, token5.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token6 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token6.toString());
      assertNotNull(token6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token6.beginLine);
      assertEquals(0, token6.kind);
      assertEquals(2, token6.beginColumn);
      assertEquals(2, token6.endColumn);
      assertEquals(1, token6.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token1);
      assertNotSame(token6, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token6);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token6.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token6.beginLine);
      assertEquals(0, token6.kind);
      assertEquals(2, token6.beginColumn);
      assertEquals(2, token6.endColumn);
      assertEquals(1, token6.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token1);
      assertNotSame(token6, token0);
      
      javaParserTokenManager1.ReInit((JavaCharStream) null);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("6(HFEV_})H3>_+&1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6(HFEV_})H3>_+&1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 4226, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = Token.newToken(46);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("6", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g43qlVRZNT0yt[7");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNull(token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "6(HFEV_})H3>_+&1");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)10}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)10}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      StringReader stringReader0 = new StringReader("v\"o+7.AkB$#");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)51, (byte)10}, byteArray0);
      assertEquals(2, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)51, (byte)10}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)51, (byte)10}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("3", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)51, (byte)10}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("3", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      token_GTToken0.realKind = (-1);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("v\"o+7.AkB$#");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = token_GTToken0.endLine;
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals("F", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNotNull(token0);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals("", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNotNull(token2);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.endColumn);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 86, 0, 1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      javaParserTokenManager2.input_stream = javaCharStream2;
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaParserTokenManager2.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager2.input_stream.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("v", token3.toString());
      assertNotNull(token3);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(86, token3.beginLine);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager2.debugStream);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNull(token_GTToken0.toString());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token_GTToken0, token_GTToken1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringReader stringReader0 = new StringReader("\">>=\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("\">>=\"", token0.toString());
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      
      boolean boolean3 = javaCharStream0.prevCharIsLF;
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"native\"");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      StringReader stringReader0 = new StringReader("\"native\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"native\"");
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      boolean boolean7 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6");
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      javaParserTokenManager0.defaultLexState = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("\"native\"", token1.toString());
      assertNotNull(token1);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(8, token1.endColumn);
      assertEquals(73, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertNull(token0.toString());
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotSame(token0, token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals("", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertNotNull(token2);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(8, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(8, token2.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)14, (byte)10}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1937);
      assertArrayEquals(new byte[] {(byte)10, (byte)14, (byte)10}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)10, (byte)14, (byte)10}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("&'OOO; ?6g#?!(l[");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = token_GTToken0.next;
      assertNull(token0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 86, (int) (byte)10, 1127);
      assertArrayEquals(new byte[] {(byte)10, (byte)14, (byte)10}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)10, (byte)14, (byte)10}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)10, (byte)14, (byte)10}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals("&", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(10, token1.beginColumn);
      assertEquals(10, token1.endColumn);
      assertEquals(86, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(86, token1.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 86, column 13.  Encountered: \"O\" (79), after : \"\\'O\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2307, (byte)57);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-2302), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-2302), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-2302), byteArrayInputStream0.available());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("xL'mR");
      assertNotNull(stringReader0);
      
      int int0 = token_GTToken0.beginColumn;
      assertEquals(0, int0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 3, 1754);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-2302), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-2302), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-2302), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("xL", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      
      token0.image = null;
      assertEquals((-2302), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertNull(token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 8.  Encountered: <EOF> after : \"\\'mR\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      
      StringReader stringReader0 = new StringReader("A-Lg$A;Z]Z7pKZ");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      token_GTToken0.specialToken = (Token) token_GTToken1;
      assertNull(token_GTToken0.toString());
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken0.specialToken.toString());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 43, 2214);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader1 = new StringReader("9C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream1.ReadByte();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('9', char0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A-Lg$A;Z]Z7pKZ");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(char1 == char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('A', char1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(43, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(43, token1.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = token_GTToken1.next;
      assertNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("Lg$A", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token3.endLine);
      assertEquals(44, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(47, token3.endColumn);
      assertEquals(74, token3.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      boolean boolean5 = stringReader1.markSupported();
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean5);
      assertNotSame(stringReader1, stringReader0);
      
      Token token4 = token_GTToken1.specialToken;
      assertNull(token4);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      
      StringReader stringReader0 = new StringReader("A-Lg$A;Z]Z7pKZ");
      assertNotNull(stringReader0);
      
      token_GTToken0.specialToken = (Token) token_GTToken1;
      assertNull(token_GTToken0.toString());
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken0.specialToken.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader1 = new StringReader("9C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals('9', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals("A", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2, 35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 35. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      javaCharStream0.ExpandBuff(false);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("mIlobzpUx(t=V");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 89);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("mIlobzpUx", token0.toString());
      assertNotNull(token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(8, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals("(", token1.toString());
      assertNotNull(token1);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token1.beginColumn);
      assertEquals(9, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(77, token1.kind);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals("t", token2.toString());
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(10, token2.beginColumn);
      assertEquals(10, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals("=", token3.toString());
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, token3.beginColumn);
      assertEquals(11, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(87, token3.kind);
      assertEquals(0, token3.endLine);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("=");
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader(")86sTIP)|6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader1 = new StringReader("(Z#K_T");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, 0, 5, 15);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("(", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(77, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(5, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("Z", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertEquals(6, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("</[H.<S(s");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-362), 0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedKind = 21;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      
      javaParserTokenManager0.defaultLexState = (-1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      Token token0 = Token.newToken(81);
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-362), token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals((-362), token1.endLine);
      assertEquals(104, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("[", token2.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotNull(token2);
      assertEquals(1, token2.endColumn);
      assertEquals((-362), token2.beginLine);
      assertEquals((-362), token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(81, token2.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("[", token3.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotNull(token3);
      assertEquals(1, token3.endColumn);
      assertEquals((-362), token3.beginLine);
      assertEquals(1, token3.beginColumn);
      assertEquals((-362), token3.endLine);
      assertEquals(81, token3.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("H", token4.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertNotNull(token4);
      assertEquals(2, token4.beginColumn);
      assertEquals((-362), token4.endLine);
      assertEquals((-362), token4.beginLine);
      assertEquals(2, token4.endColumn);
      assertEquals(74, token4.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(".", token5.toString());
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token5.kind);
      assertEquals(3, token5.endColumn);
      assertEquals((-362), token5.beginLine);
      assertEquals(3, token5.beginColumn);
      assertEquals((-362), token5.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("<", token6.toString());
      assertNotNull(token6);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token6.endColumn);
      assertEquals((-362), token6.beginLine);
      assertEquals(88, token6.kind);
      assertEquals(4, token6.beginColumn);
      assertEquals((-362), token6.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token6, token0);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      
      Token token7 = Token.newToken(0);
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token5));
      assertNull(token7.toString());
      assertNotNull(token7);
      assertEquals(0, token7.beginLine);
      assertEquals(0, token7.kind);
      assertEquals(0, token7.endLine);
      assertEquals(0, token7.beginColumn);
      assertEquals(0, token7.endColumn);
      assertNotSame(token7, token4);
      assertNotSame(token7, token0);
      assertNotSame(token7, token6);
      assertNotSame(token7, token3);
      assertNotSame(token7, token1);
      assertNotSame(token7, token2);
      assertNotSame(token7, token5);
      
      javaParserTokenManager0.SkipLexicalActions(token7);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token5));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertNull(token7.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token7.beginLine);
      assertEquals(0, token7.kind);
      assertEquals(0, token7.endLine);
      assertEquals(0, token7.beginColumn);
      assertEquals(0, token7.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token7, token4);
      assertNotSame(token7, token0);
      assertNotSame(token7, token6);
      assertNotSame(token7, token3);
      assertNotSame(token7, token1);
      assertNotSame(token7, token2);
      assertNotSame(token7, token5);
      
      Token token8 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token2));
      assertFalse(token8.equals((Object)token7));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("S", token8.toString());
      assertNotNull(token8);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token8.kind);
      assertEquals(5, token8.endColumn);
      assertEquals((-362), token8.endLine);
      assertEquals((-362), token8.beginLine);
      assertEquals(5, token8.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token8, token1);
      assertNotSame(token8, token3);
      assertNotSame(token8, token6);
      assertNotSame(token8, token0);
      assertNotSame(token8, token4);
      assertNotSame(token8, token5);
      assertNotSame(token8, token2);
      assertNotSame(token8, token7);
      
      javaParserTokenManager0.TokenLexicalActions(token8);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token2));
      assertFalse(token8.equals((Object)token7));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("S", token8.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token8.kind);
      assertEquals(5, token8.endColumn);
      assertEquals((-362), token8.endLine);
      assertEquals((-362), token8.beginLine);
      assertEquals(5, token8.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token8, token1);
      assertNotSame(token8, token3);
      assertNotSame(token8, token6);
      assertNotSame(token8, token0);
      assertNotSame(token8, token4);
      assertNotSame(token8, token5);
      assertNotSame(token8, token2);
      assertNotSame(token8, token7);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("|", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("5si`8G");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      
      boolean boolean3 = stringReader0.ready();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("5", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("si", token2.toString());
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "b(r2#>T|)S#%";
      StringReader stringReader0 = new StringReader("b(r2#>T|)S#%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b(r2#>T|)S#%");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean3 = stringReader0.ready();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("b", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("(", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(77, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("r2", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.beginColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("rOd5:");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-15), (-704));
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals("rOd5", token0.toString());
      assertNotNull(token0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertNull(token_GTToken2.toString());
      assertNotNull(token_GTToken2);
      assertEquals(0, token_GTToken2.endColumn);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.endLine);
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.beginLine);
      
      Token token1 = token_GTToken1.next;
      assertNull(token1);
      
      Token token2 = Token.newToken((-2578));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNotSame(token2, token0);
      
      MockFile mockFile0 = new MockFile("");
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "rOd5:");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/rOd5:", mockFile1.toString());
      assertEquals("rOd5:", mockFile1.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertNotNull(mockFile1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)70}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1782), 50);
      assertArrayEquals(new byte[] {(byte)70, (byte)70}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)70, (byte)70}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)70, (byte)70}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals((-1782), javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals((-1782), javaCharStream0.getLine());
      assertEquals((-1782), javaCharStream0.getEndLine());
      assertEquals("FF", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(50, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1782), token0.beginLine);
      assertEquals(51, token0.endColumn);
      assertEquals((-1782), token0.endLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)70, (byte)70}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals((-1782), javaCharStream0.getBeginLine());
      assertEquals((-1782), javaCharStream0.getLine());
      assertEquals((-1782), javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(51, token2.endColumn);
      assertEquals((-1782), token2.endLine);
      assertEquals(51, token2.beginColumn);
      assertEquals((-1782), token2.beginLine);
      assertEquals(0, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      StringReader stringReader0 = new StringReader("v\"o+7.AkB$#");
      assertNotNull(stringReader0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)10, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("fj(^kVh");
      assertNotNull(stringReader0);
      
      token_GTToken0.kind = (-1);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader1 = new StringReader("{");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, 0, 0, 0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(31, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(31, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, 75);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(31, byteArrayInputStream1.available());
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0, 2689, (-1948));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(31, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("{", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(79, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("rOd};x");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("rOd", token1.toString());
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("}", token2.toString());
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(";", token3.toString());
      assertNotNull(token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token3.beginColumn);
      assertEquals(5, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(83, token3.kind);
      assertEquals(1, token3.beginLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("x", token4.toString());
      assertNotNull(token4);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(6, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(6, token4.beginColumn);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      
      token4.beginColumn = (-142);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("x", token4.toString());
      
      token4.next = token3;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(";", token3.toString());
      assertEquals("x", token4.toString());
      assertEquals(";", token4.next.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token4);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("x", token4.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(6, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals((-142), token4.beginColumn);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "CWx~/b>)J?(z_V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Vb-]hF5h");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      mockPrintStream0.print("'%W;[>86@TL9xl)^");
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringBuffer stringBuffer0 = new StringBuffer("Vb-]hF5h");
      assertEquals("Vb-]hF5h", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      int int0 = stringReader0.read();
      assertEquals(86, int0);
      
      Token token0 = Token.newToken(86);
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("b", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 30, 0, 30);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(mockPrintStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringBuffer stringBuffer1 = new StringBuffer("Vb-]hF5h");
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals(8, stringBuffer1.length());
      assertEquals("Vb-]hF5h", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      
      Token token2 = Token.newToken(30);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("b");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)59, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      byteArrayInputStream0.mark((-2107));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("ot:Pi%JHMp1uUm");
      assertNotNull(stringReader0);
      
      javaCharStream1.ReInit((Reader) stringReader0, (int) (byte)59, 0, 89);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(sequenceInputStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals("ot", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(59, token0.endLine);
      assertEquals(59, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(":", token1.toString());
      assertNotNull(token1);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token1.kind);
      assertEquals(59, token1.beginLine);
      assertEquals(59, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(token1, token0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals("Pi", token2.toString());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertNotNull(token2);
      assertEquals(59, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(59, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      
      javaParserTokenManager0.ReInit(javaCharStream2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(59);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 59. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      StringReader stringReader0 = new StringReader("^");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 52, (int) (byte)116, (int) (byte)116);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals("^", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token0.kind);
      assertEquals(52, token0.endLine);
      assertEquals(116, token0.beginColumn);
      assertEquals(116, token0.endColumn);
      assertEquals(52, token0.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 116. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";l;pDi^r.S~)<WaqMP");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      mockPrintStream0.println(false);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      mockPrintStream0.flush();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      mockPrintStream0.write((-464));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringBuffer stringBuffer0 = new StringBuffer(";l;pDi^r.S~)<WaqMP");
      assertEquals(18, stringBuffer0.length());
      assertEquals(";l;pDi^r.S~)<WaqMP", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      Token token2 = Token.newToken(1);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals("l", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token3);
      assertEquals(74, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertEquals(";", token4.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token4);
      assertEquals(3, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(3, token4.beginColumn);
      assertEquals(83, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("pDi", token5.toString());
      assertNotNull(token5);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token5.endLine);
      assertEquals(74, token5.kind);
      assertEquals(6, token5.endColumn);
      assertEquals(4, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("^", token6.toString());
      assertNotNull(token6);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token6.endLine);
      assertEquals(107, token6.kind);
      assertEquals(7, token6.beginColumn);
      assertEquals(7, token6.endColumn);
      assertEquals(1, token6.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token6, token0);
      assertNotSame(token6, token3);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      
      Token token7 = javaParserTokenManager1.jjFillToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token7.toString());
      assertNotNull(token7);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, token7.beginColumn);
      assertEquals(1, token7.endLine);
      assertEquals(7, token7.endColumn);
      assertEquals(1, token7.beginLine);
      assertEquals(0, token7.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token7, token4);
      assertNotSame(token7, token2);
      assertNotSame(token7, token0);
      assertNotSame(token7, token3);
      assertNotSame(token7, token6);
      assertNotSame(token7, token5);
      assertNotSame(token7, token1);
      
      Token token8 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token7));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token2));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("r", token8.toString());
      assertNotNull(token8);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token8.beginLine);
      assertEquals(8, token8.endColumn);
      assertEquals(74, token8.kind);
      assertEquals(8, token8.beginColumn);
      assertEquals(1, token8.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token8, token1);
      assertNotSame(token8, token7);
      assertNotSame(token8, token4);
      assertNotSame(token8, token6);
      assertNotSame(token8, token2);
      assertNotSame(token8, token5);
      assertNotSame(token8, token3);
      assertNotSame(token8, token0);
      
      Token token9 = javaParserTokenManager0.jjFillToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token9.equals((Object)token6));
      assertFalse(token9.equals((Object)token8));
      assertFalse(token9.equals((Object)token1));
      assertFalse(token9.equals((Object)token7));
      assertFalse(token9.equals((Object)token4));
      assertFalse(token9.equals((Object)token0));
      assertFalse(token9.equals((Object)token2));
      assertFalse(token9.equals((Object)token5));
      assertFalse(token9.equals((Object)token3));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("^", token9.toString());
      assertNotNull(token9);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token9.beginLine);
      assertEquals(8, token9.endColumn);
      assertEquals(107, token9.kind);
      assertEquals(8, token9.beginColumn);
      assertEquals(1, token9.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token9, token6);
      assertNotSame(token9, token8);
      assertNotSame(token9, token1);
      assertNotSame(token9, token7);
      assertNotSame(token9, token4);
      assertNotSame(token9, token0);
      assertNotSame(token9, token2);
      assertNotSame(token9, token5);
      assertNotSame(token9, token3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 114. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tz$");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      StringReader stringReader0 = new StringReader("Tz$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream1.ReadByte();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('T', char0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      char char1 = javaCharStream1.ReadByte();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(char1 == char0);
      assertEquals('z', char1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      Token token1 = Token.newToken((-1));
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token token2 = token_GTToken0.next;
      assertNull(token2);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("33", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token3);
      assertEquals(66, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertNull(token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      boolean boolean5 = stringReader0.markSupported();
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token4.toString());
      assertNotNull(token4);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(2, token4.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)106, (byte)106, (byte)106, (byte) (-28), (byte)106, (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)106, (byte)106);
      assertArrayEquals(new byte[] {(byte)106, (byte)106, (byte)106, (byte)106, (byte) (-28), (byte)106, (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)106, (byte)106, (byte)106, (byte) (-28), (byte)106, (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)106, (byte)106, (byte)106, (byte)106, (byte) (-28), (byte)106, (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals("jjjj", token0.toString());
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(106, token0.beginLine);
      assertEquals(106, token0.beginColumn);
      assertEquals(106, token0.endLine);
      assertEquals(109, token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 106, column 110.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)47, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-704), (byte)47);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)47, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)47, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)47, (byte)2, (byte)2}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-704), javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals((-704), javaCharStream0.getBeginLine());
      assertEquals((-704), javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      assertEquals((-704), token0.beginLine);
      assertEquals((-704), token0.endLine);
      assertEquals(104, token0.kind);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -704, column 48.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("<P[H.D2Ls");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-362), 0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedKind = 21;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      
      javaParserTokenManager0.defaultLexState = (-1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      Token token0 = Token.newToken(81);
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals("P", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals((-362), token1.endLine);
      assertEquals((-362), token1.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("[", token2.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotNull(token2);
      assertEquals(1, token2.endColumn);
      assertEquals((-362), token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals((-362), token2.endLine);
      assertEquals(81, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("[", token3.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotNull(token3);
      assertEquals(81, token3.kind);
      assertEquals((-362), token3.endLine);
      assertEquals((-362), token3.beginLine);
      assertEquals(1, token3.beginColumn);
      assertEquals(1, token3.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("H", token4.toString());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotNull(token4);
      assertEquals(74, token4.kind);
      assertEquals((-362), token4.beginLine);
      assertEquals(2, token4.endColumn);
      assertEquals(2, token4.beginColumn);
      assertEquals((-362), token4.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("H", token5.toString());
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-362), token5.endLine);
      assertEquals((-362), token5.beginLine);
      assertEquals(2, token5.endColumn);
      assertEquals(2, token5.beginColumn);
      assertEquals(74, token5.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNull(token_GTToken1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token_GTToken1, token_GTToken0);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token3));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-362), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals((-362), javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getBeginLine());
      assertEquals(".", token6.toString());
      assertNotNull(token6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token6.kind);
      assertEquals(3, token6.beginColumn);
      assertEquals((-362), token6.endLine);
      assertEquals((-362), token6.beginLine);
      assertEquals(3, token6.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token3);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      PrintStream printStream0 = null;
      try {
        printStream0 = new MockPrintStream("P", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      
      StringReader stringReader0 = new StringReader("A-Lg$A;Z]Z7pKZ");
      assertNotNull(stringReader0);
      
      token_GTToken0.specialToken = (Token) token_GTToken1;
      assertNull(token_GTToken0.toString());
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken0.specialToken.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader1 = new StringReader("9C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals('9', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("C", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      StringReader stringReader2 = new StringReader("f]y|je");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      stringReader0.mark(0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        stringReader1.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)0, (byte)97, (byte) (-28), (byte)97, (byte)97, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)97, (byte)97);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)0, (byte)97, (byte) (-28), (byte)97, (byte)97, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)0, (byte)97, (byte) (-28), (byte)97, (byte)97, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)0, (byte)97, (byte) (-28), (byte)97, (byte)97, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals("aa", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(97, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(97, token0.beginColumn);
      assertEquals(97, token0.endLine);
      assertEquals(98, token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 97, column 99.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("</[H.<S(s");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("abstract");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(8, javaCharStream1.getColumn());
      assertEquals("abstract", token0.toString());
      assertNotNull(token0);
      assertEquals(7, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(8, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(8, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(8, javaCharStream1.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(8, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      
      StringReader stringReader2 = new StringReader("");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      int int0 = token_GTToken0.beginColumn;
      assertEquals(0, int0);
      
      javaCharStream0.ReInit((Reader) stringReader1, 0, 2697, 8);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1793);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1793. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y:-!V_?3uKw'Vj");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      StringReader stringReader0 = new StringReader("Y:-!V_?3uKw'Vj");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader1 = new StringReader("wQJ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean3 = stringReader1.ready();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertNotSame(stringReader1, stringReader0);
      
      int int0 = token_GTToken0.endLine;
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean4 = stringReader1.ready();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), 9, 13);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals("wQJ", token0.toString());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(11, javaCharStream2.getEndColumn());
      assertEquals(9, javaCharStream2.getBeginColumn());
      assertEquals(11, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertNotNull(token0);
      assertEquals((-1), token0.beginLine);
      assertEquals(11, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals(9, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      
      Token token1 = token_GTToken1.next;
      assertNull(token1);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(byteArrayInputStream0, 0, 0, (-1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(javaCharStream3);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3, 82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 82. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader(")86sTIP)|6");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean1 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("86", token2.toString());
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("sTIP", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(7, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(")", token4.toString());
      assertNotNull(token4);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(78, token4.kind);
      assertEquals(8, token4.endColumn);
      assertEquals(8, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token4));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals("86", token2.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token3);
      assertNotSame(token2, token4);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals("|", token5.toString());
      assertNotNull(token5);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token5.endColumn);
      assertEquals(9, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(106, token5.kind);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      
      Token token6 = new Token();
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertNull(token6.toString());
      assertNotNull(token6);
      assertEquals(0, token6.beginLine);
      assertEquals(0, token6.kind);
      assertEquals(0, token6.endColumn);
      assertEquals(0, token6.beginColumn);
      assertEquals(0, token6.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("myvj |3`'J7@");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 99);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("myvj", token0.toString());
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(106, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals("3", token2.toString());
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.beginColumn);
      assertEquals(7, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals("3", token2.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.beginColumn);
      assertEquals(7, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("l?J0),JT>4o`6Mw", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";l;pDi^r.S~)<WaqMP");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(59, int0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("l", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotNull(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      mockPrintStream0.println(false);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(";", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals((-1), token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(83, token2.kind);
      assertEquals((-1), token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("pDi", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("^", token4.toString());
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(107, token4.kind);
      assertEquals(6, token4.endColumn);
      assertEquals(6, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertEquals("r", token5.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertNotNull(token5);
      assertEquals(74, token5.kind);
      assertEquals(7, token5.endColumn);
      assertEquals(7, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      
      Token token6 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(".", token6.toString());
      assertNotNull(token6);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token6.endColumn);
      assertEquals(1, token6.beginLine);
      assertEquals(85, token6.kind);
      assertEquals(8, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertNotSame(token6, token5);
      assertNotSame(token6, token0);
      
      javaParserTokenManager1.TokenLexicalActions(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token6));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token4));
      assertFalse(token2.equals((Object)token5));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(";", token2.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals((-1), token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(83, token2.kind);
      assertEquals((-1), token2.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token6);
      assertNotSame(token2, token0);
      assertNotSame(token2, token3);
      assertNotSame(token2, token4);
      assertNotSame(token2, token5);
      
      Token token7 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals("S", token7.toString());
      assertNotNull(token7);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token7.beginLine);
      assertEquals(9, token7.endColumn);
      assertEquals(9, token7.beginColumn);
      assertEquals(74, token7.kind);
      assertEquals(1, token7.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token7, token5);
      assertNotSame(token7, token3);
      assertNotSame(token7, token1);
      assertNotSame(token7, token6);
      assertNotSame(token7, token2);
      assertNotSame(token7, token4);
      assertNotSame(token7, token0);
      
      Token token8 = new Token();
      assertFalse(token8.equals((Object)token7));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token2));
      assertNull(token8.toString());
      assertNotNull(token8);
      assertEquals(0, token8.beginColumn);
      assertEquals(0, token8.endColumn);
      assertEquals(0, token8.endLine);
      assertEquals(0, token8.kind);
      assertEquals(0, token8.beginLine);
      
      Token token9 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token9.equals((Object)token4));
      assertFalse(token9.equals((Object)token0));
      assertFalse(token9.equals((Object)token2));
      assertFalse(token9.equals((Object)token5));
      assertFalse(token9.equals((Object)token3));
      assertFalse(token9.equals((Object)token1));
      assertFalse(token9.equals((Object)token6));
      assertFalse(token9.equals((Object)token8));
      assertFalse(token9.equals((Object)token7));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("~", token9.toString());
      assertNotNull(token9);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token9.kind);
      assertEquals(10, token9.beginColumn);
      assertEquals(1, token9.beginLine);
      assertEquals(10, token9.endColumn);
      assertEquals(1, token9.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token9, token4);
      assertNotSame(token9, token0);
      assertNotSame(token9, token2);
      assertNotSame(token9, token5);
      assertNotSame(token9, token3);
      assertNotSame(token9, token1);
      assertNotSame(token9, token6);
      assertNotSame(token9, token8);
      assertNotSame(token9, token7);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token10 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token10.equals((Object)token8));
      assertFalse(token10.equals((Object)token1));
      assertFalse(token10.equals((Object)token6));
      assertFalse(token10.equals((Object)token0));
      assertFalse(token10.equals((Object)token3));
      assertFalse(token10.equals((Object)token9));
      assertFalse(token10.equals((Object)token4));
      assertFalse(token10.equals((Object)token7));
      assertFalse(token10.equals((Object)token5));
      assertFalse(token10.equals((Object)token2));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(")", token10.toString());
      assertNotNull(token10);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(11, token10.endColumn);
      assertEquals(1, token10.endLine);
      assertEquals(1, token10.beginLine);
      assertEquals(78, token10.kind);
      assertEquals(11, token10.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token10, token8);
      assertNotSame(token10, token1);
      assertNotSame(token10, token6);
      assertNotSame(token10, token0);
      assertNotSame(token10, token3);
      assertNotSame(token10, token9);
      assertNotSame(token10, token4);
      assertNotSame(token10, token7);
      assertNotSame(token10, token5);
      assertNotSame(token10, token2);
      
      Token token11 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token11.equals((Object)token4));
      assertFalse(token11.equals((Object)token7));
      assertFalse(token11.equals((Object)token5));
      assertFalse(token11.equals((Object)token1));
      assertFalse(token11.equals((Object)token6));
      assertFalse(token11.equals((Object)token9));
      assertFalse(token11.equals((Object)token8));
      assertFalse(token11.equals((Object)token10));
      assertFalse(token11.equals((Object)token3));
      assertFalse(token11.equals((Object)token2));
      assertFalse(token11.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("<", token11.toString());
      assertNotNull(token11);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token11.kind);
      assertEquals(1, token11.beginLine);
      assertEquals(12, token11.endColumn);
      assertEquals(1, token11.endLine);
      assertEquals(12, token11.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token11, token4);
      assertNotSame(token11, token7);
      assertNotSame(token11, token5);
      assertNotSame(token11, token1);
      assertNotSame(token11, token6);
      assertNotSame(token11, token9);
      assertNotSame(token11, token8);
      assertNotSame(token11, token10);
      assertNotSame(token11, token3);
      assertNotSame(token11, token2);
      assertNotSame(token11, token0);
      
      javaParserTokenManager2.TokenLexicalActions(token5);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token6));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token9));
      assertFalse(token5.equals((Object)token11));
      assertFalse(token5.equals((Object)token8));
      assertFalse(token5.equals((Object)token7));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token10));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals("r", token5.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(74, token5.kind);
      assertEquals(7, token5.endColumn);
      assertEquals(7, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token6);
      assertNotSame(token5, token4);
      assertNotSame(token5, token9);
      assertNotSame(token5, token11);
      assertNotSame(token5, token8);
      assertNotSame(token5, token7);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token10);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      
      MockFile mockFile0 = new MockFile((String) null, ";7_vkAQAhSmooS=m");
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(";7_vkAQAhSmooS=m", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(";7_vkAQAhSmooS=m", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("c7-]$-@@-+La-Ox");
      assertNotNull(stringReader0);
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.available = 0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      
      int int0 = stringReader0.read();
      assertEquals(99, int0);
      
      Token token0 = Token.newToken(0);
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("7", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("-", token2.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotNull(token2);
      assertEquals(1, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(1, token2.endColumn);
      assertEquals(102, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("-", token3.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotNull(token3);
      assertEquals(1, token3.endColumn);
      assertEquals(102, token3.kind);
      assertEquals(1, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("]", token4.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotNull(token4);
      assertEquals(0, token4.beginLine);
      assertEquals(82, token4.kind);
      assertEquals(2, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("]", token5.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotNull(token5);
      assertEquals(0, token5.endLine);
      assertEquals(82, token5.kind);
      assertEquals(0, token5.beginLine);
      assertEquals(2, token5.beginColumn);
      assertEquals(2, token5.endColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.SkipLexicalActions(token5);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("]", token5.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, token5.endLine);
      assertEquals(82, token5.kind);
      assertEquals(0, token5.beginLine);
      assertEquals(2, token5.beginColumn);
      assertEquals(2, token5.endColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token5));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("$", token6.toString());
      assertNotNull(token6);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token6.kind);
      assertEquals(3, token6.endColumn);
      assertEquals(0, token6.endLine);
      assertEquals(3, token6.beginColumn);
      assertEquals(0, token6.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token6, token0);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token2);
      assertNotSame(token6, token3);
      assertNotSame(token6, token5);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";l;pDi^r.S~)<WaqMP");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(59, int0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("l", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertNotSame(token1, token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotNull(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      mockPrintStream0.println(false);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(";", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(13, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(13, token2.endColumn);
      assertEquals(83, token2.kind);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("pDi", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("^", token4.toString());
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(6, token4.beginColumn);
      assertEquals(107, token4.kind);
      assertEquals(6, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertEquals("r", token5.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertNotNull(token5);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(7, token5.beginColumn);
      assertEquals(74, token5.kind);
      assertEquals(7, token5.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token6 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(".", token6.toString());
      assertNotNull(token6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(85, token6.kind);
      assertEquals(8, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertEquals(8, token6.endColumn);
      assertEquals(1, token6.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token6, token3);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token0);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      
      Token token7 = Token.newToken(42);
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token1));
      assertNull(token7.toString());
      assertNotNull(token7);
      assertEquals(0, token7.beginLine);
      assertEquals(0, token7.kind);
      assertEquals(0, token7.beginColumn);
      assertEquals(0, token7.endColumn);
      assertEquals(0, token7.endLine);
      assertNotSame(token7, token6);
      assertNotSame(token7, token2);
      assertNotSame(token7, token4);
      assertNotSame(token7, token5);
      assertNotSame(token7, token0);
      assertNotSame(token7, token3);
      assertNotSame(token7, token1);
      
      javaParserTokenManager0.jjnewStateCnt = (-1287);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.TokenLexicalActions(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token6));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token4));
      assertFalse(token2.equals((Object)token5));
      assertFalse(token2.equals((Object)token7));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(";", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(13, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(13, token2.endColumn);
      assertEquals(83, token2.kind);
      assertEquals(1, token2.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token6);
      assertNotSame(token2, token0);
      assertNotSame(token2, token4);
      assertNotSame(token2, token5);
      assertNotSame(token2, token7);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      
      Token token8 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token7));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("S", token8.toString());
      assertNotNull(token8);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token8.kind);
      assertEquals(9, token8.beginColumn);
      assertEquals(9, token8.endColumn);
      assertEquals(1, token8.beginLine);
      assertEquals(1, token8.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token8, token1);
      assertNotSame(token8, token6);
      assertNotSame(token8, token7);
      assertNotSame(token8, token4);
      assertNotSame(token8, token0);
      assertNotSame(token8, token5);
      assertNotSame(token8, token3);
      assertNotSame(token8, token2);
      
      Token token9 = new Token();
      assertFalse(token9.equals((Object)token3));
      assertFalse(token9.equals((Object)token8));
      assertFalse(token9.equals((Object)token0));
      assertFalse(token9.equals((Object)token7));
      assertFalse(token9.equals((Object)token4));
      assertFalse(token9.equals((Object)token6));
      assertFalse(token9.equals((Object)token5));
      assertFalse(token9.equals((Object)token2));
      assertFalse(token9.equals((Object)token1));
      assertNull(token9.toString());
      assertNotNull(token9);
      assertEquals(0, token9.endColumn);
      assertEquals(0, token9.beginColumn);
      assertEquals(0, token9.kind);
      assertEquals(0, token9.beginLine);
      assertEquals(0, token9.endLine);
      
      Token token10 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token10.equals((Object)token6));
      assertFalse(token10.equals((Object)token1));
      assertFalse(token10.equals((Object)token3));
      assertFalse(token10.equals((Object)token2));
      assertFalse(token10.equals((Object)token0));
      assertFalse(token10.equals((Object)token5));
      assertFalse(token10.equals((Object)token8));
      assertFalse(token10.equals((Object)token4));
      assertFalse(token10.equals((Object)token7));
      assertFalse(token10.equals((Object)token9));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("~", token10.toString());
      assertNotNull(token10);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(10, token10.beginColumn);
      assertEquals(90, token10.kind);
      assertEquals(1, token10.endLine);
      assertEquals(10, token10.endColumn);
      assertEquals(1, token10.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token10, token6);
      assertNotSame(token10, token1);
      assertNotSame(token10, token3);
      assertNotSame(token10, token2);
      assertNotSame(token10, token0);
      assertNotSame(token10, token5);
      assertNotSame(token10, token8);
      assertNotSame(token10, token4);
      assertNotSame(token10, token7);
      assertNotSame(token10, token9);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager2);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token11 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token11.equals((Object)token7));
      assertFalse(token11.equals((Object)token0));
      assertFalse(token11.equals((Object)token4));
      assertFalse(token11.equals((Object)token3));
      assertFalse(token11.equals((Object)token8));
      assertFalse(token11.equals((Object)token6));
      assertFalse(token11.equals((Object)token10));
      assertFalse(token11.equals((Object)token2));
      assertFalse(token11.equals((Object)token1));
      assertFalse(token11.equals((Object)token9));
      assertFalse(token11.equals((Object)token5));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(")", token11.toString());
      assertNotNull(token11);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(11, token11.endColumn);
      assertEquals(1, token11.endLine);
      assertEquals(1, token11.beginLine);
      assertEquals(78, token11.kind);
      assertEquals(11, token11.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token11, token7);
      assertNotSame(token11, token0);
      assertNotSame(token11, token4);
      assertNotSame(token11, token3);
      assertNotSame(token11, token8);
      assertNotSame(token11, token6);
      assertNotSame(token11, token10);
      assertNotSame(token11, token2);
      assertNotSame(token11, token1);
      assertNotSame(token11, token9);
      assertNotSame(token11, token5);
      
      Token token12 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token12.equals((Object)token1));
      assertFalse(token12.equals((Object)token2));
      assertFalse(token12.equals((Object)token6));
      assertFalse(token12.equals((Object)token4));
      assertFalse(token12.equals((Object)token5));
      assertFalse(token12.equals((Object)token8));
      assertFalse(token12.equals((Object)token0));
      assertFalse(token12.equals((Object)token7));
      assertFalse(token12.equals((Object)token9));
      assertFalse(token12.equals((Object)token3));
      assertFalse(token12.equals((Object)token10));
      assertFalse(token12.equals((Object)token11));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("<", token12.toString());
      assertNotNull(token12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token12.kind);
      assertEquals(1, token12.endLine);
      assertEquals(1, token12.beginLine);
      assertEquals(12, token12.endColumn);
      assertEquals(12, token12.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token12, token1);
      assertNotSame(token12, token2);
      assertNotSame(token12, token6);
      assertNotSame(token12, token4);
      assertNotSame(token12, token5);
      assertNotSame(token12, token8);
      assertNotSame(token12, token0);
      assertNotSame(token12, token7);
      assertNotSame(token12, token9);
      assertNotSame(token12, token3);
      assertNotSame(token12, token10);
      assertNotSame(token12, token11);
      
      Token token13 = javaParserTokenManager2.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token13.equals((Object)token1));
      assertFalse(token13.equals((Object)token9));
      assertFalse(token13.equals((Object)token10));
      assertFalse(token13.equals((Object)token4));
      assertFalse(token13.equals((Object)token5));
      assertFalse(token13.equals((Object)token8));
      assertFalse(token13.equals((Object)token11));
      assertFalse(token13.equals((Object)token2));
      assertFalse(token13.equals((Object)token6));
      assertFalse(token13.equals((Object)token7));
      assertFalse(token13.equals((Object)token12));
      assertFalse(token13.equals((Object)token0));
      assertFalse(token13.equals((Object)token3));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("WaqMP", token13.toString());
      assertNotNull(token13);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token13.kind);
      assertEquals(13, token13.beginColumn);
      assertEquals(17, token13.endColumn);
      assertEquals(1, token13.beginLine);
      assertEquals(1, token13.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token13, token1);
      assertNotSame(token13, token9);
      assertNotSame(token13, token10);
      assertNotSame(token13, token4);
      assertNotSame(token13, token5);
      assertNotSame(token13, token8);
      assertNotSame(token13, token11);
      assertNotSame(token13, token2);
      assertNotSame(token13, token6);
      assertNotSame(token13, token7);
      assertNotSame(token13, token12);
      assertNotSame(token13, token0);
      assertNotSame(token13, token3);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token14 = javaParserTokenManager0.jjFillToken();
      assertFalse(token14.equals((Object)token11));
      assertFalse(token14.equals((Object)token7));
      assertFalse(token14.equals((Object)token9));
      assertFalse(token14.equals((Object)token10));
      assertFalse(token14.equals((Object)token1));
      assertFalse(token14.equals((Object)token13));
      assertFalse(token14.equals((Object)token0));
      assertFalse(token14.equals((Object)token5));
      assertFalse(token14.equals((Object)token8));
      assertFalse(token14.equals((Object)token4));
      assertFalse(token14.equals((Object)token6));
      assertFalse(token14.equals((Object)token12));
      assertFalse(token14.equals((Object)token3));
      assertFalse(token14.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("<", token14.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(token14);
      assertEquals(13, token14.beginColumn);
      assertEquals(1, token14.endLine);
      assertEquals(1, token14.beginLine);
      assertEquals(88, token14.kind);
      assertEquals(17, token14.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertNotSame(token14, token11);
      assertNotSame(token14, token7);
      assertNotSame(token14, token9);
      assertNotSame(token14, token10);
      assertNotSame(token14, token1);
      assertNotSame(token14, token13);
      assertNotSame(token14, token0);
      assertNotSame(token14, token5);
      assertNotSame(token14, token8);
      assertNotSame(token14, token4);
      assertNotSame(token14, token6);
      assertNotSame(token14, token12);
      assertNotSame(token14, token3);
      assertNotSame(token14, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager2.SkipLexicalActions(token5);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token5.equals((Object)token11));
      assertFalse(token5.equals((Object)token12));
      assertFalse(token5.equals((Object)token7));
      assertFalse(token5.equals((Object)token9));
      assertFalse(token5.equals((Object)token10));
      assertFalse(token5.equals((Object)token6));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token8));
      assertFalse(token5.equals((Object)token13));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token14));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals("r", token5.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(7, token5.beginColumn);
      assertEquals(74, token5.kind);
      assertEquals(7, token5.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token5, token11);
      assertNotSame(token5, token12);
      assertNotSame(token5, token7);
      assertNotSame(token5, token9);
      assertNotSame(token5, token10);
      assertNotSame(token5, token6);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token8);
      assertNotSame(token5, token13);
      assertNotSame(token5, token1);
      assertNotSame(token5, token14);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.SwitchTo(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)59, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((-2107));
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-53), byteArrayInputStream0.available());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("ot:Pi%JHMp1uUm");
      assertNotNull(stringReader0);
      
      javaCharStream1.ReInit((Reader) stringReader0, (int) (byte)59, 0, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(sequenceInputStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals("ot", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, token0.endLine);
      assertEquals(59, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(":", token2.toString());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertNotNull(token2);
      assertEquals(92, token2.kind);
      assertEquals(59, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(59, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("Pi", token3.toString());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertNotNull(token3);
      assertEquals(74, token3.kind);
      assertEquals(59, token3.endLine);
      assertEquals(59, token3.beginLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(4, token3.endColumn);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("%", token4.toString());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertNotNull(token4);
      assertEquals(5, token4.endColumn);
      assertEquals(59, token4.endLine);
      assertEquals(5, token4.beginColumn);
      assertEquals(108, token4.kind);
      assertEquals(59, token4.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("%", token5.toString());
      assertEquals(59, javaCharStream1.getEndLine());
      assertEquals(59, javaCharStream1.getBeginLine());
      assertEquals(59, javaCharStream1.getLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertNotNull(token5);
      assertEquals(5, token5.endColumn);
      assertEquals(59, token5.endLine);
      assertEquals(5, token5.beginColumn);
      assertEquals(108, token5.kind);
      assertEquals(59, token5.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      StringReader stringReader0 = new StringReader("Jw1.zOH7>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, 1306);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      
      token_GTToken0.image = "Jw1.zOH7>";
      assertEquals("Jw1.zOH7>", token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1308, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(1306, javaCharStream0.getBeginColumn());
      assertEquals(1308, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals("Jw1", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endLine);
      assertEquals(1308, token0.endColumn);
      assertEquals(1306, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.beginLine);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1308, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(1306, javaCharStream0.getBeginColumn());
      assertEquals(1308, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertNotNull(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jw1.zOH7>");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('z', char0);
      assertEquals(1308, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(1306, javaCharStream0.getBeginColumn());
      assertEquals(1308, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-2314));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2314. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"native\"");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      StringReader stringReader0 = new StringReader("\">>=\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"native\"");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('\"', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean6 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(">>=", token1.toString());
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(119, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean7 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      StringReader stringReader0 = new StringReader("v\"o+7.AkB$#");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(118, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1327), 38);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('\"', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1327), javaCharStream0.getBeginColumn());
      assertEquals((-1327), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1327), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("o", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1327), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1327), token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1326), javaCharStream0.getColumn());
      assertEquals((-1326), javaCharStream0.getBeginColumn());
      assertEquals((-1326), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("+", token1.toString());
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(101, token1.kind);
      assertEquals((-1326), token1.beginColumn);
      assertEquals((-1326), token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1325), javaCharStream0.getBeginColumn());
      assertEquals((-1324), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1324), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("7.", token2.toString());
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.endLine);
      assertEquals((-1324), token2.endColumn);
      assertEquals(70, token2.kind);
      assertEquals((-1325), token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 0, 70, (-868));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tz$");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Tz$");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('T', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char char1 = File.pathSeparatorChar;
      assertFalse(char1 == char0);
      assertEquals(':', char1);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("z$", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.beginColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*~*/A,_QKqwA=$$");
      assertNotNull(stringReader0);
      
      int int0 = 6;
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 6);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token1.toString());
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(90, token1.kind);
      assertNotSame(token1, token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token3.toString());
      assertNotNull(token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(103, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("/", token4.toString());
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(4, token4.endColumn);
      assertEquals(104, token4.kind);
      assertEquals(4, token4.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("A", token5.toString());
      assertNotNull(token5);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token5.beginColumn);
      assertEquals(1, token5.endLine);
      assertEquals(74, token5.kind);
      assertEquals(5, token5.endColumn);
      assertEquals(1, token5.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1365));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1365. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      StringReader stringReader0 = new StringReader("#H?H^bQ?\"A3O(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('#', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(char1 == char0);
      assertEquals('H', char1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean6 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      token_GTToken0.endColumn = (-1);
      assertNull(token_GTToken0.toString());
      
      token_GTToken0.realKind = 18;
      assertNull(token_GTToken0.toString());
      
      Token token0 = Token.newToken(87);
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals("?", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(91, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals("H", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals("^", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotNull(token3);
      assertEquals(3, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(107, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertEquals("^", token4.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotNull(token4);
      assertEquals(3, token4.endColumn);
      assertEquals(3, token4.beginColumn);
      assertEquals(107, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      
      javaParserTokenManager0.SkipLexicalActions(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token4));
      assertFalse(token3.equals((Object)token1));
      assertEquals("^", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(107, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token4);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNull(token_GTToken0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1), token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1642);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1642. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b(+er2#>T|)S#%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      boolean boolean3 = stringReader0.ready();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("b", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("(", token2.toString());
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(77, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("+", token3.toString());
      assertNotNull(token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(101, token3.kind);
      assertEquals(3, token3.endColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("(", token2.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(77, token2.kind);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("er2", token4.toString());
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(4, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(6, token4.endColumn);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("er2", token5.toString());
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token5.kind);
      assertEquals(6, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(4, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      
      javaCharStream0.maxNextCharInd = 0;
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("Jw1.zOH7>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, 1306);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      
      token_GTToken0.image = "Jw1.zOH7>";
      assertEquals("Jw1.zOH7>", token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1308, javaCharStream0.getColumn());
      assertEquals(1306, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1308, javaCharStream0.getEndColumn());
      assertEquals("Jw1", token0.toString());
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1306, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endLine);
      assertEquals(1308, token0.endColumn);
      assertEquals(3, token0.beginLine);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1308, javaCharStream0.getColumn());
      assertEquals(1306, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1308, javaCharStream0.getEndColumn());
      assertNotNull(mockPrintStream0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1308, javaCharStream0.getColumn());
      assertEquals(1306, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1308, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1308, javaCharStream0.getColumn());
      assertEquals(1306, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1308, javaCharStream0.getEndColumn());
      assertNull(token_GTToken1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertNotSame(token_GTToken1, token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals(".", token1.toString());
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(3, token1.beginLine);
      assertEquals(1309, token1.endColumn);
      assertEquals(1309, token1.beginColumn);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("Jw1.zOH7>", token_GTToken0.toString());
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token_GTToken0, token_GTToken1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginLine);
      assertEquals(3, token2.endLine);
      assertEquals(1309, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1309, token2.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(".", token3.toString());
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertNotNull(token3);
      assertEquals(1309, token3.endColumn);
      assertEquals(1309, token3.beginColumn);
      assertEquals(3, token3.beginLine);
      assertEquals(85, token3.kind);
      assertEquals(3, token3.endLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token2));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals(".", token1.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(3, token1.beginLine);
      assertEquals(1309, token1.endColumn);
      assertEquals(1309, token1.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token3);
      assertNotSame(token1, token2);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager1.SkipLexicalActions(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginLine);
      assertEquals(3, token2.endLine);
      assertEquals(1309, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1309, token2.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token3);
      assertNotSame(token2, token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1309, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(1309, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(1309, javaCharStream0.getBeginColumn());
      assertEquals("Jw1", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1306, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endLine);
      assertEquals(1308, token0.endColumn);
      assertEquals(3, token0.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      StringReader stringReader0 = new StringReader("\">>7\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('\"', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">>", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(124, token1.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 291, 291);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-282), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-282), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-282), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      byteArrayInputStream0.mark(9);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-282), byteArrayInputStream0.available());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      StringReader stringReader0 = new StringReader("gqKT|5Ox->.bEH<q");
      assertNotNull(stringReader0);
      
      int int0 = 2;
      javaCharStream1.ReInit((Reader) stringReader0, (-1), 9, 2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-282), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(sequenceInputStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertNotNull(javaCharStream3);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream3);
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream3.getBeginColumn());
      assertEquals(1, javaCharStream3.getLine());
      assertEquals(1, javaCharStream3.getBeginLine());
      assertEquals(1, javaCharStream3.getEndLine());
      assertEquals(4, javaCharStream3.getColumn());
      assertEquals(4, javaCharStream3.getEndColumn());
      assertEquals("gqKT", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream3.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertNotSame(javaCharStream3, javaCharStream2);
      assertNotSame(javaCharStream3, javaCharStream1);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream4 = new JavaCharStream(stringReader0, 1, 0, 0);
      assertFalse(javaCharStream4.equals((Object)javaCharStream2));
      assertFalse(javaCharStream4.equals((Object)javaCharStream0));
      assertFalse(javaCharStream4.equals((Object)javaCharStream1));
      assertFalse(javaCharStream4.equals((Object)javaCharStream3));
      assertNotNull(javaCharStream4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream4.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream4, 350);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 350. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      StringReader stringReader0 = new StringReader(")/4[f.<S(y");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedKind = 21;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      token_GTToken0.beginLine = 0;
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      
      token_GTToken1.kind = 0;
      assertNull(token_GTToken1.toString());
      
      int int0 = stringReader0.read();
      assertEquals(41, int0);
      
      Token token0 = Token.newToken(81);
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(104, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("4", token2.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotNull(token2);
      assertEquals(0, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("[", token3.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertNotNull(token3);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(81, token3.kind);
      assertEquals(0, token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token4 = new Token();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertNull(token4.toString());
      assertNotNull(token4);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader(">50)&fdB@ /(k,u");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      StringReader stringReader1 = new StringReader("9C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('>', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("50", token1.toString());
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(")", token2.toString());
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(78, token2.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("&", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertNotNull(token3);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.endColumn);
      assertEquals(105, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(4, token3.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("fdB", token4.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertNotNull(token4);
      assertEquals(1, token4.beginLine);
      assertEquals(7, token4.endColumn);
      assertEquals(5, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(74, token4.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("@", token5.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertNotNull(token5);
      assertEquals(86, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(8, token5.beginColumn);
      assertEquals(8, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("/", token6.toString());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token6);
      assertEquals(1, token6.endLine);
      assertEquals(104, token6.kind);
      assertEquals(10, token6.beginColumn);
      assertEquals(10, token6.endColumn);
      assertEquals(1, token6.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token5);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token1);
      assertNotSame(token6, token0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token7 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("(", token7.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertNotNull(token7);
      assertEquals(11, token7.endColumn);
      assertEquals(1, token7.endLine);
      assertEquals(1, token7.beginLine);
      assertEquals(77, token7.kind);
      assertEquals(11, token7.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token7, token6);
      assertNotSame(token7, token2);
      assertNotSame(token7, token1);
      assertNotSame(token7, token5);
      assertNotSame(token7, token3);
      assertNotSame(token7, token4);
      assertNotSame(token7, token0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      
      javaParserTokenManager2.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
  }
}
