/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:44:22 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2927);
      // Undeclared exception!
      try { 
        CompressedVector.random(2927, (double) 2927, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(32, 32);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(32, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.random((-616), (double) (-616), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("[($$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Vector vector0 = compressedVector0.blankOfLength(32);
      assertEquals(32, vector0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 10;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(694, 694);
      boolean boolean0 = compressedVector0.nonZeroAt(694);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(48, (-149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -149.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(709);
      compressedVector0.swapElements(709, 709);
      assertEquals(709, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.iterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      compressedVector0.setAll(718);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(718, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(718, 718);
      compressedVector0.swapElements(718, 3);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 10);
      compressedVector0.setAll(10);
      compressedVector0.subtract(0.0);
      boolean boolean0 = compressedVector0.nonZeroAt(10);
      assertEquals(718, compressedVector0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertNotNull(decimalFormat0);
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(281, 1634);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1634.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(718, compressedVector0.length());
      
      compressedVector0.setAll(718);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(718, compressedVector0.length());
      assertEquals(718, compressedVector0.cardinality());
      
      double double0 = compressedVector0.max();
      assertEquals(718.0, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(718, compressedVector0.length());
      assertEquals(718, compressedVector0.cardinality());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      assertNotNull(compressedVector0);
      assertEquals(718, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(718);
      assertEquals(718, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(718, compressedVector0.cardinality());
      
      compressedVector0.swapElements(718, (-2231));
      assertEquals(718, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(718, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(823, 823);
      assertNotNull(compressedVector0);
      assertEquals(823, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.transform(vectorFunction0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(823, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(823, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector0.setAll(823);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(823, compressedVector0.length());
      assertEquals(823, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(718, compressedVector0.length());
      
      compressedVector0.setAll(718);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(718, compressedVector0.length());
      assertEquals(718, compressedVector0.cardinality());
      
      String string0 = compressedVector0.toString();
      assertNotNull(string0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(718, compressedVector0.length());
      assertEquals(718, compressedVector0.cardinality());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 10);
      compressedVector0.setAll(10);
      compressedVector0.sliceRight(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)10).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(718, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(744);
      compressedVector0.setAll(744);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.iterator();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '4' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1084.5);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)718).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.updateAt(37, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1507);
      compressedVector0.sliceLeft(1507);
      compressedVector0.toBinary();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer((-586));
      Float float0 = new Float(3724.9289);
      hashMap0.put(integer0, float0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-586));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2303);
      Integer integer1 = new Integer(9);
      hashMap0.put(integer0, integer1);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-10.530951493700577);
      double[] doubleArray1 = new double[9];
      doubleArray0[2] = (-10.530951493700577);
      doubleArray1[1] = (-1889.5141772);
      doubleArray1[2] = (-10.530951493700577);
      doubleArray1[3] = 5.0;
      doubleArray1[4] = 5.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray1);
      byte[] byteArray0 = compressedVector0.toBinary();
      compressedVector0.setAll((-10.530951493700577));
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      compressedVector1.setAll((-10.530951493700577));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(783);
      compressedVector0.setAll(783);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(749, (-152.4));
      // Undeclared exception!
      rowMajorSparseMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(744, 744);
      compressedVector0.setAll(744);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(20, 744);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(744, 744);
      compressedVector0.setAll(744);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2231), 744);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 744
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      compressedVector0.setAll(718);
      compressedVector0.swapElements(20, 48);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3565.378095);
      doubleArray0[2] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.subtract(416.98272916065);
      compressedVector0.nonZeroAt((-3433));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector.random(66, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      compressedVector0.setAll(0);
      compressedVector0.swapElements(0, 0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(918);
      compressedVector0.copyOfLength(918);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2622, 7);
      compressedVector0.manhattanNorm();
      compressedVector0.copyOfLength(7);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3283, 10);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(10);
      Float float0 = new Float(0.0F);
      hashMap0.put(integer0, float0);
      SparseVector.fromMap(hashMap0, 3283);
      compressedVector0.swapElements(239, 239);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) (-467);
      doubleArray0[5] = (-467.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(5, 10);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.setAll(213.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(740);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(740, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(744);
      compressedVector0.setAll(744);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(744, 744);
      // Undeclared exception!
      ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, (SparseVector) compressedVector0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 10);
      compressedVector0.setAll(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(37, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toSparseVector();
      compressedVector0.setAll(0);
      compressedVector0.swapElements(0, 0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      compressedVector0.setAll(718);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)718).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(19, vectorFunction0);
      compressedVector0.nonZeroAt(19);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 10);
      compressedVector0.setAll(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2377), vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("hL}vz2Ui");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(744);
      compressedVector0.setAll(744);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements(20, (-214));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(718, 718);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.setAll(718);
      compressedVector0.setAll(718);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(674, vectorFunction1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2356.7728;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2356.7728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      compressedVector0.setAll(718);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2231), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(718, 718);
      compressedVector0.setAll(718);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-3638), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(744, 744);
      compressedVector0.setAll(744);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(20, (-136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-10.530951493700577);
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = (-1889.5141772);
      doubleArray1[2] = (-10.530951493700577);
      doubleArray1[4] = (-1889.5141772);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray1);
      int int0 = 1;
      compressedVector0.multiply((-1889.5141772));
      int int1 = (-1);
      compressedVector0.swapElements((-1), 1);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.14324000028528439;
      doubleArray0[0] = 0.14324000028528439;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      Vector vector1 = compressedVector0.add(vector0);
      compressedVector0.product();
      vector1.swapElements(1, 0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.9204349991661782;
      doubleArray0[2] = (-664.0559471356996);
      doubleArray0[3] = 0.9204349991661782;
      doubleArray0[4] = 5.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.multiply((-664.0559471356996));
      vector0.swapElements(1, (-671));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 0.9823699344091027;
      double[] doubleArray1 = new double[25];
      doubleArray1[0] = 0.9823699344091027;
      doubleArray1[1] = (-1890.3413077987293);
      doubleArray0[0] = 0.0;
      doubleArray1[12] = 0.0;
      doubleArray1[15] = 0.9823699344091027;
      doubleArray1[6] = (-1890.3413077987293);
      doubleArray1[7] = 0.9823699344091027;
      doubleArray1[8] = 0.9823699344091027;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray1);
      compressedVector0.swapElements(24, (-2633));
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector1).when(vectorFactory0).apply(anyInt());
      compressedVector0.setAll((-4378.503));
      Vector vector0 = compressedVector1.to(vectorFactory0);
      VectorFactory<Vector> vectorFactory1 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory1).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '5' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
