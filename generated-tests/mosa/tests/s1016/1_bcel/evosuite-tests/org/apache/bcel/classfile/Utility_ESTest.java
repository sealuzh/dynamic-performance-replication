/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:14:56 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("VdVt", "VdVt", "VdVt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VdVt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.convertString("P N<Y'yky4:qV3R2atK");
      assertEquals("P N<Y\\'yky4:qV3R2atK", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.compactClassName(", npairs = ");
      assertEquals(", npairs = ", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.convertString("QWG-rK#cSC. yvH)Fw{");
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.format(574, (-523), false, 'D');
      assertEquals("574", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = Utility.setBit((-96), (-716));
      assertEquals((-96), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.compactClassName("M");
      assertEquals("M", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("M", stringArray0);
      assertEquals("()LM;", string1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("!%E*@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!%E*@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P0XQL'yTk>3ip_0@H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P0XQL'yTk>3ip_0@H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.fillup("int", (-2858), true, 'a');
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.isSet(61, 61);
      try { 
        Utility.methodSignatureReturnType("/@+2yxly|K,w~r:*M'a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/@+2yxly|K,w~r:*M'a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LAD\u0007O;V", false);
      assertEquals("AD\u0007O", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("$u9#>f]=Piv0A)AD%-L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$u9#>f]=Piv0A)AD%-L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K'%ArS_&@OW3p5,L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'%ArS_&@OW3p5,L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("File ");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) "File ";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.compactClassName("i!2S 8,v9fD", false);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("b2", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&!@H:u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &!@H:u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.methodTypeToSignature("athrow", (String[]) null);
      try { 
        Utility.typeOfSignature("tw,QM2nz5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tw,QM2nz5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"\", \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("yj)R>RV3[/FCs^r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[/FCs^r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-40);
      byteArray0[6] = (byte) (-40);
      try { 
        Utility.methodSignatureReturnType("[[Q:ybU$Hh^2bKW<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q:ybU$Hh^2bKW<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.classOrInterface(614);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.convertString("F0f$O|EcL|mT?EKU#");
      Utility.classOrInterface(196);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "F0f$O|EcL|mT?EKU#";
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = Utility.isSet(61, 36);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (int) (byte) (-31), false);
      assertEquals("0:    dload_2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string0);
      
      byte[] byteArray1 = Utility.decode("0:    dload_2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", false);
      String string1 = Utility.encode(byteArray1, false);
      assertEquals("0$3a$m$m$m$mdload_2$K1$3a$m$m$m$m$3cillegal$mopcode$3e$K2$3a$m$m$m$m$3cillegal$mopcode$3e$K3$3a$m$m$m$m$3cillegal$mopcode$3e$K4$3a$m$m$m$mnop$K5$3a$m$m$m$mnop$K6$3a$m$m$m$mnop$K7$3a$m$m$m$mnop$K8$3a$m$m$m$mnop$K9$3a$m$m$m$mnop$K10$3a$m$m$mnop$K11$3a$m$m$mnop$K12$3a$m$m$mnop$K13$3a$m$m$mnop$K14$3a$m$m$mnop$K15$3a$m$m$mnop$K16$3a$m$m$mnop$K17$3a$m$m$mnop$K18$3a$m$m$mnop$K19$3a$m$m$mnop$K20$3a$m$m$mnop$K21$3a$m$m$mnop$K22$3a$m$m$mnop$K23$3a$m$m$mnop$K", string1);
      
      short short0 = Utility.searchOpcode("0:    dload_2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.replace("byte", "byte", "byte");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.compactClassName("2uiV6G*t");
      assertEquals("2uiV6G*t", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-107);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-93);
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)90;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Dl4*Z&%%glWr|");
      assertEquals("double", string0);
      
      byte byte0 = Utility.typeOfSignature("Dl4*Z&%%glWr|");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "2;$\\4\"R]Uo\\N'UKV";
      Utility.convertString("2;$\u0004\"R]UoN'UKV");
      try { 
        Utility.typeOfSignature("2;$\u0004\"R]UoN'UKV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2;$\u0004\"R]UoN'UKV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.signatureToString("F0f$/|~HFcLYmTEKUa", false);
      assertEquals("float", string0);
      
      String string1 = Utility.convertString("F0f$/|~HFcLYmTEKUa");
      assertEquals("F0f$/|~HFcLYmTEKUa", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.convertString("java.lang.M");
      Utility.isJavaIdentifierPart('9');
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.getSignature("long");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Vt<t", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AoS(oLW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AoS(oLW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Class ", false);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-31);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.convertString("nop");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!%E*@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %E*@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
      
      short short0 = Utility.searchOpcode("Z");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$u9#>f]=Piv0A)AD%-L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $u9#>f]=Piv0A)AD%-L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byte byte0 = Utility.typeOfSignature("TkIUs");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, 4);
      assertEquals("4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 3, 3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K'%ArS_&@OW3p5,L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K'%ArS_&@OW3p5,L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("E", string0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("E", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)69}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.compactClassName("t1TdLWi", "t1TdLWi", true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.compactClassName("R/UOmT#", "", true);
      assertNotNull(string0);
      assertEquals("R.UOmT#", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("O%iF.TIQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O%iF.TIQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",D,4!nW ?q$N(w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,D,4!nW ?q$N(w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":It/_wYzn>TL:+|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :It/_wYzn>TL:+|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)71, (byte)0, (byte)67, (byte)100, (byte)100, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("dstore_0", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)71, (byte)0, (byte)67, (byte)100, (byte)100, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (int) (byte)67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "(*8!7-ax`'xJ&";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(*8!7-ax`'xJ&", "t(mS02", "t(mS02");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*8!7-ax`'xJ&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "H=okZ :B`2\\7qX^-{>";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)102, (byte)122}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (-1096));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y}fnoFK)72L_opi'Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y}fnoFK)72L_opi'Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-112), (byte) (-112), (byte) (-112), (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), (int) (byte) (-112));
      assertNotNull(string0);
      assertEquals("0:    d2f\n1:    d2f\n2:    d2f\n3:    d2f\n4:    nop\n5:    nop\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-112), (byte) (-112), (byte) (-112), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("'>s[S|2Y'<!n;l2,AD}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '>s[S|2Y'<!n;l2,AD}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (int) (byte) (-31), false);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-31), (byte) (-31), (byte)0}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    nop\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1175), (-1175), false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    faload\n1:    astore\t\t%32\n3:    lload_2\n4:    lload_2\n5:    lload_2\n6:    fdiv\n7:    ddiv\n8:    irem\n9:    lconst_1\n10:   daload\n11:   astore\t\t%32\n13:   lload_2\n14:   lload_2\n15:   lload_2\n16:   istore_1\n17:   lmul\n18:   idiv\n19:   idiv\n20:   lsub\n21:   dsub\n22:   ladd\n23:   idiv\n24:   lload_2\n25:   ddiv\n26:   irem\n27:   dadd\n28:   ddiv\n29:   isub\n30:   lsub\n31:   istore_3\n32:   lconst_1\n33:   aaload\n34:   astore\t\t%32\n36:   lload_2\n37:   lload_2\n38:   lload_2\n39:   istore_1\n40:   lmul\n41:   idiv\n42:   idiv\n43:   lsub\n44:   dsub\n45:   ladd\n46:   idiv\n47:   lload_2\n48:   ddiv\n49:   irem\n50:   dadd\n51:   ddiv\n52:   isub\n53:   lsub\n54:   istore_3\n55:   lconst_1\n56:   baload\n57:   astore\t\t%32\n59:   lload_2\n60:   lload_2\n61:   lload_2\n62:   fdiv\n63:   ddiv\n64:   irem\n65:   lconst_1\n", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    nop\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      String string0 = Utility.getSignature(">\t");
      assertNotNull(string0);
      assertEquals("L>;", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "V";
      String string0 = Utility.methodTypeToSignature(" arg", stringArray0);
      assertNotNull(string0);
      assertEquals("(LV;)Larg;", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1337), 347);
      assertNotNull(string0);
      assertEquals("0:    fstore_0\n", string0);
      assertArrayEquals(new byte[] {(byte)67}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U0OnG`,/8mnx!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U0OnG`,/8mnx!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "K'%ArS_&@OW3p5,L";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "K'%ArS_&@OW3p5,L";
      stringArray0[1] = "K'%ArS_&@OW3p5,L";
      // Undeclared exception!
      try { 
        Utility.getSignature("[wiwox^!pTcH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [wiwox^!pTcH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 255, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1611, (-2487));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), 1809);
      assertNotNull(string0);
      assertEquals("0:    monitorenter\n1:    monitorenter\n", string0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-62)}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("0:    monitorenter\n1:    monitorenter\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    monitorenter
         // 1:    monitorenter
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      String string0 = "\"&)A\"?fbW )TpcBaJD";
      try { 
        Utility.typeOfSignature("\"&)A\"?fbW )TpcBaJD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"&)A\"?fbW )TpcBaJD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[U\"*|kyFTtPwN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U\"*|kyFTtPwN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#X*M},)|qjH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #X*M},)|qjH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4082), 33);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.accessToString(55, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private protected final", string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      String string0 = Utility.accessToString((int) (byte) (-31), true);
      assertNotNull(string0);
      assertEquals("public volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.typeOfMethodSignature("(b&[]%VSr+s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (b&[]%VSr+s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qa!5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qa!5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.methodSignatureReturnType("Byte code error: ", false);
      assertNotNull(string0);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)105;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)105, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)44;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)44);
      assertNotNull(string0);
      assertEquals("0:    aload_2\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n", string0);
      
      Object[] objectArray0 = new Object[2];
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-31);
      byteArray0[6] = (byte) (-31);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-31), false);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    <illegal opcode>\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string0);
      
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    <illegal opcode>\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string1 = Utility.encode(byteArray1, false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string1);
      assertEquals("0$3a$m$m$m$mnop$K1$3a$m$m$m$m$3cillegal$mopcode$3e$K2$3a$m$m$m$mnop$K3$3a$m$m$m$mnop$K4$3a$m$m$m$mnop$K5$3a$m$m$m$mnop$K6$3a$m$m$m$m$3cillegal$mopcode$3e$K7$3a$m$m$m$mnop$K8$3a$m$m$m$mnop$K9$3a$m$m$m$mnop$K10$3a$m$m$mnop$K11$3a$m$m$mnop$K12$3a$m$m$mnop$K13$3a$m$m$mnop$K14$3a$m$m$mnop$K15$3a$m$m$mnop$K16$3a$m$m$mnop$K17$3a$m$m$mnop$K18$3a$m$m$mnop$K19$3a$m$m$mnop$K20$3a$m$m$mnop$K21$3a$m$m$mnop$K22$3a$m$m$mnop$K23$3a$m$m$mnop$K", string1);
      
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-31), 156);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.compactClassName("2uiV6G*t");
      assertNotNull(string0);
      assertEquals("2uiV6G*t", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.getSignature("):\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L):;", string1);
      
      byte byte0 = Utility.typeOfSignature("L):;");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray1 = Utility.decode("UDn)#`tYW=K,k9[", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)14, 11, false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byte[] byteArray1 = Utility.decode("DV", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)86}, byteArray1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotNull(constantPool3);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool3.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)79, 171, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)87, (int) (byte)87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)107;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-42);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 186);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    dmul\n2:    nop\n3:    nop\n4:    <illegal opcode>\n", string0);
      assertEquals(7, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)107, (byte)0, (byte)0, (byte) (-42)}, byteArray0);
      
      boolean boolean1 = Utility.isSet((byte)107, (byte) (-42));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{null, null, null, null, null, null, null}", string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "N7qK\"ZJdkD5R";
      try { 
        Utility.methodSignatureReturnType("N7qK\"ZJdkD5R", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N7qK\"ZJdkD5R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte)51, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[5] = (byte)72;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), (int) (byte) (-112), true);
      assertNotNull(string0);
      assertEquals("0:    d2f\n1:    d2f\n2:    d2f\n3:    nop\n4:    nop\n5:    dstore_1\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-112), (byte) (-112), (byte)0, (byte)0, (byte)72}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.compactClassName("M");
      assertNotNull(string0);
      assertEquals("M", string0);
      
      byte byte0 = Utility.typeOfSignature("BFY?#9\"{L%");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1864), (int) (byte) (-118));
      assertNotNull(string0);
      assertEquals("0:    l2d\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = Constants.ATTR_PMG;
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      try { 
        Utility.typeOfSignature("3G??KHy[L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3G??KHy[L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)47, (byte) (-40)}, byteArray0);
      
      String string0 = Pattern.quote(",D,4!nW ?q$N(w");
      assertNotNull(string0);
      assertEquals("\\Q,D,4!nW ?q$N(w\\E", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q,D,4!nW ?q$N(wE");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ",D,4!nW ?q$N(w");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2053, (-746), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = Utility.typeOfSignature("CONSTANT_MethodHandle");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)98, (-2316));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-63));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n", string0);
      
      try { 
        Utility.typeOfSignature("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "):\n";
      String string1 = Utility.convertString("):\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("):\\n", string1);
      
      try { 
        Utility.typeOfSignature("):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("H=okZ B`2\u0007qX^-{>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H=okZ B`2\u0007qX^-{>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)45);
      assertNotNull(string0);
      assertEquals("0:    aload_3\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", string0);
      
      try { 
        Utility.methodSignatureReturnType("0:    aload_3\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    aload_3
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         // 11:   nop
         // 12:   nop
         // 13:   nop
         // 14:   nop
         // 15:   nop
         // 16:   nop
         // 17:   nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R} ,V[y~$lAHSv7w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R} ,V[y~$lAHSv7w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)38;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1112), (int) (byte)43, false);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    dload_0\n2:    aload_1\n3:    nop\n4:    nop\n5:    dload_0\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)43, (byte)0, (byte)0, (byte)38}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-47);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)59, (byte)65, (byte) (-47)}, byteArray0);
      
      String string0 = Utility.getSignature(",D,4!nW ?q$N(w");
      assertNotNull(string0);
      assertEquals("L,D,4!nW;", string0);
      
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      assertEquals((byte)117, byte0);
      
      try { 
        Utility.typeOfSignature("4*0r&cHEA{;zz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4*0r&cHEA{;zz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      try { 
        Utility.typeOfSignature("1~]4p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1~]4p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R7r?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R7r?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9IJ'|++Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9IJ'|++Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid signature: `");
      assertNotNull(string0);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)127;
      byteArray0[1] = (byte)62;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-72);
      byteArray0[6] = (byte)127;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, (int) (byte) (-11), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("cikH%z[m)Z'>J_*J", false);
      assertNotNull(string0);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.compactClassName("jKGo{U$B3E|=`I");
      assertNotNull(string0);
      assertEquals("jKGo{U$B3E|=`I", string0);
      
      String string1 = Utility.accessToString((-1926), true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static final volatile strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.replace("<illegal opcode>", "private static final volatile strictfp synthetic annotation enum", "jKGo{U$B3E|=`I");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (-1926), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertEquals("lmul", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("lmul");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("lmul", string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.getSignature("):\n");
      assertNotNull(string0);
      assertEquals("L):;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-59);
      byteArray1[7] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 100, (int) (byte) (-59));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      try { 
        Utility.typeOfSignature("NQ*T3cF\"!s[@7LJw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NQ*T3cF\"!s[@7LJw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byte byte0 = Utility.typeOfSignature("Sensitive");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1337), 32);
      assertNotNull(string0);
      assertEquals("0:    i2b\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F0f$O|EcL|m?EKU#");
      assertNotNull(string0);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)41;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 168, (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = ", npairs= ";
      try { 
        Utility.typeOfSignature("+PE $yO&2HaG0K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PE $yO&2HaG0K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("F(NB");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("lstore_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lstore_3");
      assertNotNull(mockPrintWriter0);
      
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      assertEquals((byte)117, byte0);
      
      try { 
        Utility.typeOfSignature("lstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-66);
      try { 
        Utility.decode("/w|BFR'WK$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byte byte0 = Utility.typeOfSignature("JavaClass.debug");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)84, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("bastore", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)84, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.getSignature("HO0+tW^kR$.h]]OSANL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LHO0+tW^kR$/h]]OSANL;", string1);
      
      try { 
        Utility.decode("HO0+tW^kR$.h]]OSANL", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/\"nhLU90$X.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /\"nhLU90$X.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)98;
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotNull(constantPool2);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool2.getLength());
      
      byteArray0[3] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte)98, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-121);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("C$AC$87$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0, (byte)67, (byte) (-121), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = Utility.clearBit((byte)0, 3905);
      assertEquals(0, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, 9957, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = Utility.clearBit((byte) (-37), (-719));
      assertEquals((-131109), int0);
      
      try { 
        Utility.typeOfSignature("O_WRk3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O_WRk3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)88, (int) (byte)88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.getSignature("Z");
      assertNotNull(string0);
      assertEquals("LZ;", string0);
      
      byte byte0 = Utility.typeOfSignature("LZ;");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = Utility.decode("):\n", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)58, (byte)10}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (-1014), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1611, (-1864));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("2$A$A", string0);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1112), (int) (byte)50, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    aaload\n1:    nop\n2:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0}, byteArray0);
      
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("32 00 00", string2);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)42;
      byte byte0 = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-31), true);
      assertNotNull(string0);
      assertEquals("0:    aload_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    faload\n", string0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-31), (byte) (-12), (byte)48}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("0:    aload_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    faload\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string1 = Utility.encode(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1175), (-1175), true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string2);
      assertEquals("0:    faload\n1:    astore\t\t%32\n3:    lload_2\n4:    lload_2\n5:    lload_2\n6:    ladd\n7:    idiv\n8:    ddiv\n9:    ladd\n10:   isub\n11:   swap\n12:   faload\n13:   lconst_1\n14:   daload\n15:   astore\t\t%32\n17:   lload_2\n18:   lload_2\n19:   lload_2\n20:   istore_1\n21:   lmul\n22:   idiv\n23:   idiv\n24:   lsub\n25:   dsub\n26:   ladd\n27:   idiv\n28:   lload_2\n29:   ddiv\n30:   irem\n31:   dadd\n32:   ddiv\n33:   isub\n34:   lsub\n35:   istore_3\n36:   lconst_1\n37:   aaload\n38:   astore\t\t%32\n40:   lload_2\n41:   lload_2\n42:   lload_2\n43:   istore_1\n44:   lmul\n45:   idiv\n46:   idiv\n47:   lsub\n48:   dsub\n49:   ladd\n50:   idiv\n51:   lload_2\n52:   ddiv\n53:   irem\n54:   dadd\n55:   ddiv\n56:   isub\n57:   lsub\n58:   istore_3\n59:   lconst_1\n60:   baload\n61:   astore\t\t%32\n63:   lload_2\n64:   lload_2\n65:   lload_2\n66:   fsub\n67:   ladd\n68:   idiv\n69:   ddiv\n70:   ladd\n71:   isub\n72:   lconst_1\n", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    aload_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    faload\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aload_0
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    faload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-106), (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), (int) (byte)102);
      assertNotNull(string0);
      assertEquals("0:    fsub\n1:    fcmpg\n2:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-106), (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("impdep2");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("impdep2", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-20);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-20);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$A$82$ec$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte) (-20), (byte)0}, byteArray0);
      
      int int0 = Utility.clearBit((byte) (-20), (byte) (-126));
      assertEquals((-24), int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-20), (int) (byte) (-20), false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    nop\n1:    ixor\n2:    <illegal opcode>\n3:    nop\n", string1);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte) (-20), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)29}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("iload_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)29}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("iload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[5] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, (-1301));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 33, (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)92, (byte)92, (byte) (-117), (byte)5, (byte)5}, byteArray0);
      
      int int0 = Utility.clearBit((byte) (-117), 2752);
      assertEquals((-118), int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3460), (-750), true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    f2i\n1:    dup2\n2:    dup2\n3:    f2i\n4:    iconst_2\n5:    iconst_2\n", string1);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)92, (byte)92, (byte) (-117), (byte)5, (byte)5}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), 189);
      assertNotNull(string0);
      assertEquals("0:    f2i\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1337), 347);
      assertNotNull(string0);
      assertEquals("0:    fstore_2\n", string0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)77}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("f2l", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)77}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1752), 195, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    f2l\n1:    astore_2\n", string1);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)77}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)123, (byte)41, (byte)123}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)123, (byte)41, (byte)123}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertNotNull(string0);
      assertEquals("lshr", string0);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)123, (byte)41, (byte)123}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("lshr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lshr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 210, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)53;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1110), (int) (byte)53);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    daload\n2:    <illegal opcode>\n3:    saload\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)49, (byte) (-3), (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    nop\n1:    daload\n2:    <illegal opcode>\n3:    saload\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    daload
         // 2:    <illegal opcode>
         // 3:    saload
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)115, (byte)127, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("drem", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)115, (byte)127, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("drem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `drem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)28, (byte)28, (byte)28, (byte)22, (byte)28, (byte)28, (byte)28, (byte)28}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L<init>;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-100);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 4);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    ifge\t\t#157\n4:    nop\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte)0, (byte) (-100), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2839, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byte[] byteArray1 = Utility.decode("{hib<9b5", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte)104, (byte)105, (byte)98, (byte)60, (byte)57, (byte)98, (byte)53}, byteArray1);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 287, (int) (byte) (-124), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-710), (-710), true);
      assertNotNull(string0);
      assertEquals("0:    d2i\n", string0);
      assertArrayEquals(new byte[] {(byte) (-114)}, byteArray0);
      
      String string1 = Utility.convertString("H=okZ B`2\u0007qX^-{>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("H=okZ B`2\u0007qX^-{>", string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte) (-66));
      assertNotNull(string0);
      assertEquals("0:    arraylength\n1:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)63;
      byteArray0[1] = (byte)115;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)63, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, (int) (byte)115, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (int) (byte) (-94), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81));
      assertNotNull(string0);
      assertEquals("0:    dreturn\n", string0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), 3135, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    dreturn\n", string1);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      
      try { 
        Utility.typeOfSignature("7i~73hGiDy[M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7i~73hGiDy[M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (-2042));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-41);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), 198);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    dastore\n2:    fcmpg\n3:    dastore\n4:    fcmpg\n5:    <illegal opcode>\n", string0);
      assertEquals(7, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-41), (byte)82, (byte) (-106), (byte)82, (byte) (-106), (byte) (-41)}, byteArray0);
      
      try { 
        Utility.typeOfSignature("uwf/XXg=.9tS`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: uwf/XXg=.9tS`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[5] = (byte)18;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (int) (byte)90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 889, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), (int) (byte)20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), (int) (byte) (-91));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    if_acmpeq\t\t#-16895\n4:    nop\n5:    nop\n", string0);
      assertEquals(7, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-91), (byte) (-66), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2453, (int) (byte) (-123), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "V";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)118, (byte)0, (byte)118, (byte)118, (byte)118}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    freturn
         // 1:    fload_2
         // 2:    istore_3
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1278, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      try { 
        Utility.typeOfSignature("8VZI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8VZI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "public pro");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-106);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2), (-2), false);
      assertNotNull(string0);
      assertEquals("0:    dload_1\n1:    daload\n2:    <illegal opcode>\n3:    saload\n4:    dup_x1\n5:    dload_1\n6:    fcmpg\n7:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)39, (byte)49, (byte) (-3), (byte)53, (byte)90, (byte)39, (byte) (-106), (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("0:    dload_1\n1:    daload\n2:    <illegal opcode>\n3:    saload\n4:    dup_x1\n5:    dload_1\n6:    fcmpg\n7:    nop\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    dload_1\\n1:    daload\\n2:    <illegal opcode>\\n3:    saload\\n4:    dup_x1\\n5:    dload_1\\n6:    fcmpg\\n7:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 235);
      assertNotNull(string0);
      assertEquals("0:    dconst_0\n1:    ret\t\t%9\n3:    l2i\n", string0);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-87), (byte)9, (byte) (-120)}, byteArray0);
      
      short short0 = Utility.searchOpcode("0:    dconst_0\n1:    ret\t\t%9\n3:    l2i\n");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.accessToString((int) (byte)9);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public static", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (int) (byte) (-84), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1430, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.getSignature("):\n");
      assertNotNull(string0);
      assertEquals("L):;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)106, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1309, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        Utility.typeOfSignature("ExpKcted&cl>ss `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ExpKcted&cl>ss `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString((int) (byte) (-81));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private protected static synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "public private protected static synchronized transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[1] = "Signature";
      stringArray0[2] = "#d(4JRGwr|0vRH";
      stringArray0[3] = "#d(4JRGwr|0vRH";
      stringArray0[4] = "#d(4JRGwr|0vRH";
      stringArray0[5] = "{\"[B@3192c017\", \"[B@3192c017\", \"[B@3192c017\", \"[B@3192c017\", \"[B@3192c017\"}";
      stringArray0[6] = "public private protected static synchronized transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[7] = "#d(4JRGwr|0vRH";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("#d(4JRGwr|0vRH", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B@3192c017\", \"[B@3192c017\", \"[B@3192c017\", \"[B@3192c017\", \"[B@3192c017\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1335, (int) (byte) (-58), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-109);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-109));
      assertNotNull(string0);
      assertEquals("0:    i2s\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)79;
      byteArray0[7] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)45, (byte) (-14), (byte)79, (byte)0, (byte)0, (byte)0, (byte)0, (byte)87}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("aload_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)45, (byte) (-14), (byte)79, (byte)0, (byte)0, (byte)0, (byte)0, (byte)87}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("L8J!ON!`'_*tA$iMy", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L8J!ON!`'_*tA$iMy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    arraylength
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte) (-99));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-25), (byte) (-26), (byte)102}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("ifne\t\t#-6170", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-25), (byte) (-26), (byte)102}, byteArray0);
      
      String string1 = Utility.convertString("2uiV6G*t");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2uiV6G*t", string1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.signatureToString("SQ", true);
      assertNotNull(string0);
      assertEquals("short", string0);
      
      try { 
        Utility.decode("q>Iq{<T|>{/EALhHF", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "V";
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte) (-1), (byte)49, (byte)119, (byte)13, (byte)79, (byte)112, (byte)63}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 191, false);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    dcmpg\n2:    impdep2\n3:    daload\n4:    dneg\n5:    fconst_2\n6:    iastore\n7:    irem\n8:    lstore_0\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte) (-1), (byte)49, (byte)119, (byte)13, (byte)79, (byte)112, (byte)63}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpg
         // 1:    if_icmpne\t\t#-24415
         // 4:    if_icmpne\t\t#-24412
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-119)}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), (-804));
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    l2f\n", string0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-119)}, byteArray0);
      
      byte byte0 = Constants.ATTR_PMG;
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 69, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The wildcard must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/?h[%VZ|0ux");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-695), (-695), false);
      assertNotNull(string0);
      assertEquals("0:    pop\n1:    lreturn\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)87, (byte) (-83)}, byteArray0);
      
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), 722);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), (int) (byte) (-92), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aconst_null
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)59}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("istore_0", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)59}, byteArray0);
      
      String string1 = Utility.convertString("istore_0");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("istore_0", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), (int) (byte)17);
      assertNotNull(string0);
      assertEquals("0:    sipush\t\t4352\n", string0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid constant pool reference: ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-86);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 175, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119), (byte)21, (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteSequence0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119), (byte)21, (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119), (byte)21, (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(35209, constantClass0.getNameIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119), (byte)21, (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-119), (-2091));
      assertNotNull(constantMethodHandle0);
      assertEquals((-119), constantMethodHandle0.getReferenceKind());
      assertEquals((-2091), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), 931, false);
      assertNotNull(string0);
      assertEquals("0:    l2f\n1:    l2f\n2:    l2f\n3:    iload\t\t%137\n5:    l2f\n6:    l2f\n7:    l2f\n8:    l2f\n", string0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119), (byte)21, (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-31);
      byteArray0[6] = (byte) (-31);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-31), false);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    <illegal opcode>\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string0);
      
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    <illegal opcode>\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string1 = Utility.encode(byteArray1, false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string1);
      assertEquals("0$3a$m$m$m$mnop$K1$3a$m$m$m$m$3cillegal$mopcode$3e$K2$3a$m$m$m$mnop$K3$3a$m$m$m$mnop$K4$3a$m$m$m$mnop$K5$3a$m$m$m$mnop$K6$3a$m$m$m$m$3cillegal$mopcode$3e$K7$3a$m$m$m$mnop$K8$3a$m$m$m$mnop$K9$3a$m$m$m$mnop$K10$3a$m$m$mnop$K11$3a$m$m$mnop$K12$3a$m$m$mnop$K13$3a$m$m$mnop$K14$3a$m$m$mnop$K15$3a$m$m$mnop$K16$3a$m$m$mnop$K17$3a$m$m$mnop$K18$3a$m$m$mnop$K19$3a$m$m$mnop$K20$3a$m$m$mnop$K21$3a$m$m$mnop$K22$3a$m$m$mnop$K23$3a$m$m$mnop$K", string1);
      
      try { 
        Utility.typeOfSignature("W6J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W6J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "V";
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = (-3116);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3116), (-3116));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">p8", "static", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >p8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.signatureToString("V");
      assertNotNull(string0);
      assertEquals("void", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "V";
      stringArray0[1] = "void";
      try { 
        Utility.methodTypeToSignature("(", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2180, (int) (byte) (-10));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("X`Z1a&eFHKtCwh&l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X`Z1a&eFHKtCwh&l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)123, (byte) (-68), (byte)123, (byte)123, (byte)126, (byte)126, (byte) (-67), (byte)126}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, (int) (byte)126, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 123
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.getSignature("):\n");
      assertNotNull(string0);
      assertEquals("L):;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)106, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("Hf:@u&3k4}_WB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hf:@u&3k4}_WB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-544), (int) (byte) (-60));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    wide\t(wide)\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    wide\t(wide)\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte) (-82));
      assertNotNull(string0);
      assertEquals("0:    freturn\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = Utility.clearBit(188, (-137));
      assertFalse(int1 == int0);
      assertEquals(188, int1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-109));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)83;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-31), true);
      assertNotNull(string0);
      assertEquals("0:    aload_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    aastore\n", string0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-31), (byte) (-12), (byte)83}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("0:    aload_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    aastore\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string1 = Utility.encode(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1175), (-1175), true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string2);
      assertEquals("0:    faload\n1:    astore\t\t%32\n3:    lload_2\n4:    lload_2\n5:    lload_2\n6:    ladd\n7:    idiv\n8:    ddiv\n9:    ladd\n10:   isub\n11:   swap\n12:   faload\n13:   lconst_1\n14:   daload\n15:   astore\t\t%32\n17:   lload_2\n18:   lload_2\n19:   lload_2\n20:   istore_1\n21:   lmul\n22:   idiv\n23:   idiv\n24:   lsub\n25:   dsub\n26:   ladd\n27:   idiv\n28:   lload_2\n29:   ddiv\n30:   irem\n31:   dadd\n32:   ddiv\n33:   isub\n34:   lsub\n35:   istore_3\n36:   lconst_1\n37:   aaload\n38:   astore\t\t%32\n40:   lload_2\n41:   lload_2\n42:   lload_2\n43:   istore_1\n44:   lmul\n45:   idiv\n46:   idiv\n47:   lsub\n48:   dsub\n49:   ladd\n50:   idiv\n51:   lload_2\n52:   ddiv\n53:   irem\n54:   dadd\n55:   ddiv\n56:   isub\n57:   lsub\n58:   istore_3\n59:   lconst_1\n60:   baload\n61:   astore\t\t%32\n63:   lload_2\n64:   lload_2\n65:   lload_2\n66:   ladd\n67:   ladd\n68:   drem\n69:   ineg\n70:   ddiv\n71:   frem\n72:   lsub\n73:   lconst_1\n", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-31), true);
      assertNotNull(string0);
      assertEquals("0:    fstore_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    faload\n", string0);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-31), (byte) (-12), (byte)48}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("0:    fstore_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    faload\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string1 = Utility.encode(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1175), (-1175), true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string2);
      assertEquals("0:    faload\n1:    astore\t\t%32\n3:    lload_2\n4:    lload_2\n5:    lload_2\n6:    fsub\n7:    drem\n8:    ineg\n9:    ddiv\n10:   frem\n11:   lsub\n12:   swap\n13:   faload\n14:   lconst_1\n15:   daload\n16:   astore\t\t%32\n18:   lload_2\n19:   lload_2\n20:   lload_2\n21:   istore_1\n22:   lmul\n23:   idiv\n24:   idiv\n25:   lsub\n26:   dsub\n27:   ladd\n28:   idiv\n29:   lload_2\n30:   ddiv\n31:   irem\n32:   dadd\n33:   ddiv\n34:   isub\n35:   lsub\n36:   istore_3\n37:   lconst_1\n38:   aaload\n39:   astore\t\t%32\n41:   lload_2\n42:   lload_2\n43:   lload_2\n44:   istore_1\n45:   lmul\n46:   idiv\n47:   idiv\n48:   lsub\n49:   dsub\n50:   ladd\n51:   idiv\n52:   lload_2\n53:   ddiv\n54:   irem\n55:   dadd\n56:   ddiv\n57:   isub\n58:   lsub\n59:   istore_3\n60:   lconst_1\n61:   baload\n62:   astore\t\t%32\n64:   lload_2\n65:   lload_2\n66:   lload_2\n67:   fsub\n68:   ladd\n69:   idiv\n70:   ddiv\n71:   ladd\n72:   isub\n73:   lconst_1\n", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    fstore_0\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    faload\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fstore_0
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    faload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      try { 
        Utility.typeOfSignature(".*K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .*K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3238, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 155);
      assertNotNull(string0);
      assertEquals("0:    l2i\n1:    nop\n2:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    l2i\n1:    nop\n2:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    l2i
         // 1:    nop
         // 2:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1121, (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "Jn>qwvN[1kiR";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Jn>qwvN[1kiR");
      assertFalse(boolean0);
      
      String string1 = Utility.signatureToString("Jn>qwvN[1kiR");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long", string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      try { 
        Utility.typeOfMethodSignature(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)88;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4114), (int) (byte) (-124));
      assertNotNull(string0);
      assertEquals("0:    iinc\t\t%0\t0\n", string0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    iinc\t\t%0\t0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iinc\t\t%0\t0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, 465);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-1186));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("GNH;%wTqsynD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GNH;%wTqsynD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)77}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("lxor", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)77}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1752), 195, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    lxor\n1:    astore_2\n", string1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)77}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-31), true);
      assertNotNull(string0);
      assertEquals("0:    istore\t\t%225\n2:    <illegal opcode>\n3:    faload\n", string0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-31), (byte) (-12), (byte)48}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("0:    istore\t\t%225\n2:    <illegal opcode>\n3:    faload\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string1 = Utility.encode(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1175), (-1175), true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string2);
      assertEquals("0:    faload\n1:    astore\t\t%32\n3:    lload_2\n4:    lload_2\n5:    lload_2\n6:    lmul\n7:    drem\n8:    ineg\n9:    ddiv\n10:   frem\n11:   lsub\n12:   lconst_0\n13:   lconst_0\n14:   fload_3\n15:   aaload\n16:   aaload\n17:   saload\n18:   lconst_1\n19:   aaload\n20:   astore\t\t%32\n22:   lload_2\n23:   lload_2\n24:   lload_2\n25:   istore_1\n26:   lmul\n27:   idiv\n28:   idiv\n29:   lsub\n30:   dsub\n31:   ladd\n32:   idiv\n33:   lload_2\n34:   ddiv\n35:   irem\n36:   dadd\n37:   ddiv\n38:   isub\n39:   lsub\n40:   istore_3\n41:   lconst_1\n42:   baload\n43:   astore\t\t%32\n45:   lload_2\n46:   lload_2\n47:   lload_2\n48:   fsub\n49:   ladd\n50:   idiv\n51:   ddiv\n52:   ladd\n53:   isub\n54:   lconst_1\n", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    istore\t\t%225\n2:    <illegal opcode>\n3:    faload\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    istore\t\t%225
         // 2:    <illegal opcode>
         // 3:    faload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "GNH;%wTqsynD";
      try { 
        Utility.typeOfSignature("GNH;%wTqsynD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GNH;%wTqsynD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-88), (byte)117, (byte) (-1), (byte) (-65)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1309, (int) (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WC{k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WC{k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 40, false);
      assertNotNull(string0);
      assertEquals("0:    areturn\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 2, 1210);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)82;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-5), 89);
      assertNotNull(string0);
      assertEquals("0:    fstore_3\n1:    fstore_3\n2:    <illegal opcode>\n3:    dstore\t\t%82\n", string0);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte) (-5), (byte)57, (byte)82}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)48;
      ConstantPool constantPool0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-56), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-110);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte) (-110);
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte) (-110);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-110), (int) (byte) (-110));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    i2c\n1:    aload\t\t%146\n3:    aload\t\t%146\n", string0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)25, (byte) (-110), (byte)25, (byte) (-110)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        Utility.typeOfSignature("*6s|%\"gaU5LsD>W0rHH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6s|%\"gaU5LsD>W0rHH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-64);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-954), (int) (byte) (-61));
      assertNotNull(string0);
      assertEquals("0:    if_icmpgt\t\t#-15424\n", string0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-61), (byte) (-64)}, byteArray0);
      
      String string1 = "RuntimeInvisibleParameterAnnotations";
      String string2 = Utility.convertString("RuntimeInvisibleParameterAnnotations");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("RuntimeInvisibleParameterAnnotations", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 971, (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 3851);
      assertNotNull(string0);
      assertEquals("0:    dcmpl\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1882, (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 887, (int) (byte) (-127));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.convertString("):\n");
      assertNotNull(string0);
      assertEquals("):\\n", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 242, (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte) (-61));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 540);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      String string0 = constantPool1.toString();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string0);
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertEquals(7, constantPool1.getLength());
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-100);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-100);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte) (-100), (byte) (-100)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-100), 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpeq\t\t#156
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-47);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (int) (byte) (-98));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    ifle\t\t#-12031\n4:    nop\n5:    nop\n", string0);
      assertEquals(7, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte) (-47), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (int) (byte) (-98));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(string1);
      assertEquals("0:    nop\n1:    ifle\t\t#-12031\n4:    nop\n5:    nop\n", string1);
      assertEquals(7, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte) (-47), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorexit'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-30);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), (int) (byte)70);
      assertNotNull(string0);
      assertEquals("0:    lrem\n1:    lastore\n2:    irem\n3:    fstore_3\n4:    dastore\n5:    monitorexit\n6:    istore\t\t%226\n", string0);
      assertArrayEquals(new byte[] {(byte)113, (byte)80, (byte)112, (byte)70, (byte)82, (byte) (-61), (byte)54, (byte) (-30)}, byteArray0);
      
      String string1 = Utility.compactClassName("H28hCs#/LF", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("H28hCs#.LF", string1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)127;
      String string0 = Utility.getSignature("\t\t<");
      assertNotNull(string0);
      assertEquals("L<;", string0);
      
      try { 
        Utility.methodSignatureReturnType("L<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, (-2098));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E{$_aOGn&];aG5\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E{$_aOGn&];aG5\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-31);
      byteArray0[6] = (byte) (-31);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$A$e1$A$A$A$A$e1$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string0);
      
      try { 
        Utility.decode("$A$e1$A$A$A$A$e1$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }
}
