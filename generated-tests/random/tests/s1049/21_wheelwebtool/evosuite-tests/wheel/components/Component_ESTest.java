/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:47:48 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlSerializer;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.ComponentCreator;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Component component0 = tableRow0.area(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.form("|x/g@#UOme9j");
      Submit submit0 = new Submit(errorPage0, ">3", ",{sej*U:j(`(0s8");
      submit0.id("java.nio.HeapCharBuffer@0000000004");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate");
      Component component0 = table0.hr();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "_i", "_i");
      Checkbox checkbox0 = new Checkbox(radio0, "_i", "_i");
      Boolean boolean0 = new Boolean(false);
      String string0 = checkbox0.eval(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000009");
      ComponentCreator componentCreator0 = form0.create();
      assertNotNull(componentCreator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding("k?BWB3g5(");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.param((CharSequence) null, "href");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "?B");
      Component component0 = table0.b();
      // Undeclared exception!
      try { 
        component0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.base("asset/");
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("null");
      // Undeclared exception!
      try { 
        xmlEntityRef0.var((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "?B");
      Component component0 = errorPage0.strike((Object) table0);
      // Undeclared exception!
      try { 
        component0.up(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("unable to import classes.  no variable resolver factory available.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.title(":jMbW}U\"~,*xl,c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "s@_-PSv}KkNAR;ix+/g", "}");
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        textInput0.strike((Object) elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "name", "Application error");
      // Undeclared exception!
      try { 
        textArea0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.placeholder("org.mvel.PropertyAccessException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Form form0 = new Form("l.C{}8w|=pu}86RF$]");
      // Undeclared exception!
      try { 
        form0.passwordInput("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.param((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("Z^l;");
      // Undeclared exception!
      try { 
        form0.p((Object) "Z^l;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "c8T`'*_H9B`(", "null");
      // Undeclared exception!
      try { 
        checkbox0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "xGYI%nc*eq*)", "{");
      // Undeclared exception!
      try { 
        checkbox0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Form form0 = new Form("J3X ]/+!'Kq,q-");
      TextInput textInput0 = new TextInput(form0, "java.lang.String@0000000007", "J3X ]/+!'Kq,q-");
      // Undeclared exception!
      try { 
        form0.label((Object) textInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Form form0 = new Form("*4ALWZM");
      // Undeclared exception!
      try { 
        form0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Form form0 = new Form("}bxfJPd\"5");
      TextArea textArea0 = new TextArea(form0, "L%C<i", "}bxfJPd\"5");
      // Undeclared exception!
      try { 
        textArea0.hidden("~|*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("style");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("z~o4\">8EU");
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      // Undeclared exception!
      try { 
        form0.form("fZ`337lCHJU]|", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "http://xmlpull.org/v1/doc/properties.html#xmldecl-content", "http://xmlpull.org/v1/doc/properties.html#xmldecl-content");
      // Undeclared exception!
      try { 
        textInput0.fileInput("dpunDr6dTmis-j]i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "null", "ZeUf");
      // Undeclared exception!
      try { 
        fileInput0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "G:EvO", ")INJ_Vk;5<3TDB~");
      // Undeclared exception!
      try { 
        textArea0.del((Object) ")INJ_Vk;5<3TDB~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Form form0 = new Form("Gh (F9");
      // Undeclared exception!
      try { 
        form0.checkbox("Gh (F9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "sC9/alu!l5Li4xyzQ", "sC9/alu!l5Li4xyzQ");
      Submit submit0 = new Submit(textArea0, "4pGj\"[", "sC9/alu!l5Li4xyzQ");
      // Undeclared exception!
      try { 
        submit0.b((Object) "sC9/alu!l5Li4xyzQ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      checkbox0._wrapComponentId("");
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "NV?u2/2lsy21a(^", "");
      textInput0.hashCode();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      TableRow tableRow0 = tableBlock0.tr();
      StandaloneComponent standaloneComponent0 = tableRow0.getPage();
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "8ztmLlrQ0N", "ys#=\"fdfs)o");
      Form form0 = new Form("h5");
      // Undeclared exception!
      try { 
        form0.addFormElement(textArea0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "tGdpo?8qgqp)0(zRO$", "lZY");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("select");
      RadioGroup radioGroup0 = new RadioGroup(checkbox0, "expected markupdecl in DTD not ", "expected markupdecl in DTD not ", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read value with binding select in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      tableBlock0.renderHint((CharSequence) null);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Form form0 = new Form((String) null);
      form0.getEngine();
      assertEquals("wheel_components_Form", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      xmlEntityRef0._setGeneratedId(true);
      assertTrue(xmlEntityRef0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "FxdA^b!tQB[Q%&s/Sf");
      checkbox0.label("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "FxdA^b!tQB[Q%&s/Sf");
      DateInput dateInput0 = new DateInput(checkbox0, "", "\"c&q#y\"\"0DynCx", "");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        dateInput0._setSubmitValue(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern ''.
         //
         verifyException("wheel.components.DateInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "I", "null");
      // Undeclared exception!
      try { 
        hidden0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, ",c!MJKLo.~Z<g|Y");
      Component component0 = table0.end();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "_i", "_i");
      Checkbox checkbox0 = new Checkbox(radio0, "_i", "_i");
      // Undeclared exception!
      try { 
        checkbox0.end("unsupported feature ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'unsupported feature '.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      Block block0 = tableBlock0.id("href");
      TextArea textArea0 = new TextArea(block0, "href", "href");
      Component component0 = textArea0.end("href");
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      // Undeclared exception!
      try { 
        checkbox0.end("k?BWB3g5(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'k?BWB3g5('.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("null");
      Image image0 = new Image(errorPage0, elExpression0, "null");
      assertTrue(image0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "1", "|Byo");
      Checkbox checkbox0 = new Checkbox(submit0, ".Wt.=M1", (String) null);
      ElExpression elExpression0 = new ElExpression("1");
      // Undeclared exception!
      try { 
        checkbox0.var((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Form form0 = new Form("wheel.components.Form");
      ElExpression elExpression0 = new ElExpression("wheel.components.Form");
      List<Component> list0 = form0.findAll(elExpression0);
      assertEquals("wheel.components.Form", form0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Byte byte0 = new Byte((byte) (-58));
      errorPage0.small((Object) byte0);
      errorPage0.var((Object) null);
      // Undeclared exception!
      try { 
        errorPage0.find("%!qkQV1qp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id %!qkQV1qp on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "?B");
      Block block0 = (Block)table0.b();
      assertTrue(block0._isGeneratedId());
      
      block0.id("?B");
      block0.get("?B");
      assertFalse(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("|x/g@#UOme9j");
      Component component1 = component0.label();
      Component component2 = component1.h6((Object) errorPage0);
      TableRow tableRow0 = new TableRow(component1);
      Text text0 = new Text(component2, tableRow0);
      // Undeclared exception!
      try { 
        text0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("null");
      Submit submit0 = new Submit(xmlEntityRef0, "'", "java.lang.String@0000000010");
      Checkbox checkbox0 = new Checkbox(submit0, "java.lang.String@0000000010", "processing instruction started on line ");
      Component component0 = checkbox0.up(2);
      assertEquals("null", component0.getComponentId());
      assertNotNull(component0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "8ztmLlrQ0N", "ys#=\"fdfs)o");
      TextInput textInput0 = new TextInput(textArea0, "(2/>(/l<", "ys#=\"fdfs)o");
      Checkbox checkbox0 = new Checkbox(textInput0, "YAHr#$55", "8ztmLlrQ0N");
      boolean boolean0 = checkbox0.equals(checkbox0);
      assertTrue(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      boolean boolean0 = errorPage0.equals(xmlEntityRef0);
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      block0.form("java.lang.String@0000000013", actionExpression0);
      assertTrue(block0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000009");
      Form form1 = (Form)form0.addInternalRenderHint(" ");
      assertFalse(form1._isBuilt());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "e$L", "");
      TextInput textInput0 = new TextInput(checkbox0, "", "class or class reference not found: ");
      // Undeclared exception!
      try { 
        errorPage0.addFirst(textInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Form form0 = new Form("}bxfJPd\"5");
      Form form1 = form0._getVisibleForm(true);
      assertEquals("}bxfJPd\"5", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "dd", "dd");
      checkbox0._getVisibleForm(true);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "s@_-PSv}KkNAR;ix+/g", "}");
      Form form0 = textInput0._getVisibleForm(false);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TextInput textInput0 = new TextInput(errorPage0, "NV?u2/2lsy21a(^", "");
      Component component0 = table0.abbr((Object) textInput0);
      ActionExpression actionExpression0 = new ActionExpression("style");
      Form form0 = new Form(component0, "NV?u2/2lsy21a(^", actionExpression0);
      form0.id("ds1Bkq@Xe\"");
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, ">3", ",{sej*U:j(`(0s8");
      // Undeclared exception!
      try { 
        submit0.id("java.nio.HeapCharBuffer@0000000004");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "dd", "dd");
      DynamicSelectModel dynamicSelectModel0 = checkbox0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("k?BWB3g5(");
      Select select0 = new Select(checkbox0, "org.mvel.optimizers.impl.refl.BaseAccessor", "dd", "org.mvel.optimizers.impl.refl.BaseAccessor", dynamicSelectModel1, true);
      select0.tt();
      // Undeclared exception!
      try { 
        errorPage0.remove("k?BWB3g5(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id k?BWB3g5( does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Form form0 = new Form((String) null);
      Form form1 = form0.renderHint((CharSequence) null);
      form1.toString();
      assertEquals("wheel_components_Form", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.Image");
      TableBlock tableBlock0 = table0.tfoot();
      assertTrue(tableBlock0._isGeneratedId());
      
      List<RenderableComponent> list0 = table0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate");
      table0.tfoot();
      ElExpression elExpression0 = new ElExpression("org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate");
      // Undeclared exception!
      try { 
        table0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Link link0 = new Link(errorPage0, charBuffer0);
      link0._renderActions((XmlSerializer) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("expected name start and not ");
      Radio radio0 = new Radio(xmlEntityRef0, "expected name start and not ", "expected name start and not ");
      String[] stringArray0 = new String[6];
      radio0.attributes(stringArray0);
      assertEquals("expected name start and not ", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Checkbox checkbox0 = new Checkbox(tableRow0, "-_", "-_");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        checkbox0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Form form0 = new Form("hlM/>");
      String[] stringArray0 = new String[0];
      Component component0 = form0.attributes(stringArray0);
      assertEquals("hlM/>", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression((String) null);
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "DUP X1", "3./", (ISelectModel) null, elExpression0);
      Component component0 = checkboxGroup0.code();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.em((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Form form0 = new Form("cannot coerce Float to Integer since the value (");
      // Undeclared exception!
      try { 
        form0.cite((Object) "cannot coerce Float to Integer since the value (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression(">u$");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup((Component) null, ">u$", ">u$", stringSelectModel0, elExpression0);
      TextInput textInput0 = new TextInput(checkboxGroup0, "null", "null");
      RadioGroup radioGroup0 = new RadioGroup(textInput0, "k?BWB3g5(", "null", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        checkboxGroup0.h5((Object) radioGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Link link0 = new Link(errorPage0, object0);
      Submit submit0 = new Submit(link0, "2J948^u", "2J948^u");
      Radio radio0 = new Radio(submit0, "2J948^u", "e]iXU6n^<mOK4i~M");
      // Undeclared exception!
      try { 
        radio0.dfn();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("|x/g@#UOme9j");
      Component component1 = component0.sup();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      TableRow tableRow0 = tableBlock0.tr();
      tableRow0.noscript();
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000009");
      // Undeclared exception!
      try { 
        form0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.pre((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("\"R]bh%bMB!");
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "", "Checkbox");
      // Undeclared exception!
      try { 
        numberInput0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = errorPage0.addFirst(tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select("_wrapper", dynamicSelectModel0, "_wrapper");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      // Undeclared exception!
      try { 
        image0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("'");
      Component component0 = errorPage0.form("'", actionExpression0);
      Component component1 = component0.p((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.a((Object) "A5Lj1jdS`:1h`$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.Image");
      TableBlock tableBlock0 = table0.tfoot();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.label((Object) "div");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Form form0 = new Form("k?BWB3g5(");
      // Undeclared exception!
      try { 
        form0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      // Undeclared exception!
      try { 
        checkbox0.reset("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("awKl{_XsO9hBzn(", "awKl{_XsO9hBzn(");
      // Undeclared exception!
      try { 
        component0.ol();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("ins");
      Image image0 = new Image(errorPage0, actionExpression0, "ins");
      Component component0 = errorPage0.big((Object) image0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Wv(", "Wv(");
      // Undeclared exception!
      try { 
        checkbox0.wBlock("Wv(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "org.mvel.conversion.BigIntegerCH$6");
      // Undeclared exception!
      try { 
        checkbox0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, ";/?8Wb", ";/?8Wb", ";/?8Wb");
      dateInput0._setParent((Component) null);
      assertEquals("input", dateInput0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "", "null");
      Checkbox checkbox0 = new Checkbox(submit0, "QAI)ti?", "");
      ActionExpression actionExpression0 = new ActionExpression("");
      Form form0 = new Form(checkbox0, "null", actionExpression0);
      form0.address((Object) actionExpression0);
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "name", "Application error");
      textArea0._clear();
      assertEquals("textarea", textArea0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.area((String[]) null);
      // Undeclared exception!
      try { 
        component0.style();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "S=S9^FjO!q1", "S=S9^FjO!q1");
      // Undeclared exception!
      try { 
        hidden0.textarea("S=S9^FjO!q1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Tfoot component can be added only to a Table.", ".x |S{GXD^yF2Y");
      // Undeclared exception!
      try { 
        submit0.u((Object) ".x |S{GXD^yF2Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Form form0 = new Form("");
      Checkbox checkbox0 = new Checkbox(form0, "H\"2S+{e7~M", "3:/pV2;g)240z.J");
      // Undeclared exception!
      try { 
        checkbox0.br();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.table();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "lw6*kE+zx}uN6|*", "lw6*kE+zx}uN6|*", "lw6*kE+zx}uN6|*");
      TextInput textInput0 = new TextInput(dateInput0, "lw6*kE+zx}uN6|*", "lw6*kE+zx}uN6|*");
      Checkbox checkbox0 = new Checkbox(textInput0, "lw6*kE+zx}uN6|*", "YR_#Wuy+H^}Q3");
      Block block0 = new Block(checkbox0);
      // Undeclared exception!
      try { 
        block0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action("^[K ao");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Text text0 = (Text)errorPage0.rawText(xmlEntityRef0);
      assertTrue(text0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertTrue(text0.isCdata());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("ins");
      Form form0 = new Form(errorPage0, "3$S'?%Z", actionExpression0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("3$S'?%Z");
      // Undeclared exception!
      try { 
        form0.radioGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "- N;@x5{l%&%g!2%", "- N;@x5{l%&%g!2%");
      // Undeclared exception!
      try { 
        radio0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("SaaK^q9sLZ_U");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Form form0 = new Form("D'QGk[ja9");
      // Undeclared exception!
      try { 
        form0.submit("8L&T&%5s5\"}-d{dk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.Image");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.link();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel.components.Image", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "", "k?BWB3g5(");
      // Undeclared exception!
      try { 
        textArea0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "]h2S=dFH", "_container");
      // Undeclared exception!
      try { 
        numberInput0.iframe();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "D@.GIm!");
      TextInput textInput0 = new TextInput(table0, "D@.GIm!", "D@.GIm!");
      Hidden hidden0 = new Hidden(textInput0, "D@.GIm!", "D@.GIm!");
      // Undeclared exception!
      try { 
        hidden0.required();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000009");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      MockDate mockDate0 = new MockDate();
      Component component0 = errorPage0.h1((Object) mockDate0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "/xV0L");
      Checkbox checkbox0 = new Checkbox(block0, "/xV0L", "/xV0L");
      Label label0 = new Label(checkbox0, block0);
      Component component0 = label0.noframes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_2", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "$", "$");
      // Undeclared exception!
      try { 
        checkbox0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Form form0 = new Form("p=#xL`!cy");
      // Undeclared exception!
      try { 
        form0.dd((Object) "p=#xL`!cy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "3JZWJOc=&DJ3w6(`b!", "3JZWJOc=&DJ3w6(`b!");
      NumberInput numberInput0 = new NumberInput(checkbox0, (String) null, (String) null);
      numberInput0._applyFormat(errorPage0);
      assertTrue(numberInput0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("3JZWJOc=&DJ3w6(`b!", checkbox0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      Map<String, Component> map0 = component0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("'");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Radio radio0 = new Radio(block0, "java.lang.String@0000000013", "java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        radio0.hr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "5I9#9mL", "5I9#9mL");
      // Undeclared exception!
      try { 
        textInput0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(67);
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      Hidden hidden0 = new Hidden(image0, "B>I;1.9!a-Ko(kV0-|u", "B>I;1.9!a-Ko(kV0-|u");
      Checkbox checkbox0 = new Checkbox(hidden0, "B>I;1.9!a-Ko(kV0-|u", "2nAm16");
      // Undeclared exception!
      try { 
        checkbox0.hidden("V.!V}Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, (Object) null);
      TableBlock tableBlock0 = new TableBlock(text0, "");
      Submit submit0 = new Submit(tableBlock0, "(^B3RV0H',<>HX+", "S\"(e");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("cite");
      RadioGroup radioGroup0 = new RadioGroup(submit0, "(^B3RV0H',<>HX+", (String) null, stringSelectModel0, elExpression0);
      radioGroup0.h2();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("S\"(e", submit0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "frameset", "frameset");
      // Undeclared exception!
      try { 
        fileInput0.sub((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Form form0 = new Form((String) null);
      Byte byte0 = new Byte((byte)17);
      // Undeclared exception!
      try { 
        form0.htmlText(byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("pre");
      // Undeclared exception!
      try { 
        xmlEntityRef0.li((Object) xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Form form0 = new Form("q[x rV");
      // Undeclared exception!
      try { 
        form0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("X#TF");
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo("X#TF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("null");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Form form0 = new Form(".mdsTuL");
      Hidden hidden0 = new Hidden(form0, "&HneU", "c");
      // Undeclared exception!
      try { 
        form0.code((Object) hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.dt();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Form form0 = new Form("cN9'DSSF[u`t");
      Hidden hidden0 = new Hidden(form0, "null", "null");
      DateInput dateInput0 = new DateInput(hidden0, "http://xmlpull.org/v1/doc/properties.html#location", "null", "http://xmlpull.org/v1/doc/properties.html#location");
      // Undeclared exception!
      try { 
        dateInput0.numberInput("byteValue", (CharSequence) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Component component0 = errorPage0.text(link0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, (String) null, (String) null, (CharSequence) null);
      Select select0 = new Select(dateInput0, "java.lang.String@0000000009", (String) null, (ISelectModel) null, "java.lang.String@0000000009");
      Block block0 = new Block(select0);
      FileInput fileInput0 = new FileInput(block0, "java.lang.String@0000000010", (String) null);
      // Undeclared exception!
      try { 
        fileInput0.abbr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "q^nNV0rD~R.kY^`]>|", "When using table with only tr-elements, you can't create a tbody-element.");
      // Undeclared exception!
      try { 
        submit0.h4();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "a779sb0;-s", "a779sb0;-s");
      NumberInput numberInput0 = new NumberInput((Component) null, (String) null, "\n  **  ENTER -> {collections: ");
      // Undeclared exception!
      try { 
        checkbox0.span((Object) numberInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.Image");
      TableBlock tableBlock0 = table0.tfoot();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.meta();
      ActionExpression actionExpression0 = new ActionExpression("bdo");
      Form form0 = new Form(component0, "wheel.components.Image", actionExpression0);
      form0.b((Object) table0);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel.components.Image", form0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Form form0 = new Form("S4+lLQKDu3~)a|-.");
      // Undeclared exception!
      try { 
        form0.buttonInput("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "could not access property");
      Component component0 = table0.entity("Could not encode string '");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("could not access property", table0.getComponentId());
      assertEquals("Could not encode string '", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, ";MJ]</");
      Component component0 = errorPage0.abbr((Object) tableBlock0);
      // Undeclared exception!
      try { 
        component0.passwordInput("element");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("8sc");
      Form form0 = new Form(errorPage0, "ICONST_NULL", actionExpression0);
      Table table0 = new Table(form0, "ICONST_NULL");
      TableBlock tableBlock0 = table0.thead();
      // Undeclared exception!
      try { 
        tableBlock0.encode("ICONST_NULL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("|x/g@#UOme9j");
      Component component1 = component0.label();
      Component component2 = component1.pre();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component0._isGeneratedId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Any any0 = new Any(errorPage0, charBuffer0);
      // Undeclared exception!
      try { 
        any0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Form form0 = new Form("LKYX;x&|d0:wqWg");
      // Undeclared exception!
      try { 
        form0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "INVOKESPECIAL java/lang/Object.<init>", "INVOKESPECIAL java/lang/Object.<init>");
      // Undeclared exception!
      try { 
        fileInput0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Form form0 = new Form("mA'G-b;G10slx");
      // Undeclared exception!
      try { 
        form0.tt((Object) "mA'G-b;G10slx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      TableRow tableRow0 = new TableRow(link0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("org.mvel.conversion.BooleanCH");
      Select select0 = new Select(tableRow0, "eC6+\"f", "eC6+\"f", "eC6+\"f", dynamicSelectModel1, true);
      // Undeclared exception!
      try { 
        select0.radio("rJB4T.9]Z^Y<(/!l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "6$eQH", "6$eQH");
      // Undeclared exception!
      try { 
        hidden0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Form form0 = new Form("'@JBG.");
      // Undeclared exception!
      try { 
        form0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "?B");
      Component component0 = errorPage0.strike((Object) table0);
      Component component1 = component0.div();
      assertEquals("Block_1", component1.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.dateFormat("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Select select0 = new Select((Component) null, "null", "3OB,q?x%~_4xA>_", "null", (ISelectModel) null, false);
      // Undeclared exception!
      try { 
        select0.nbsp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "3JZWJOc=&DJ3w6(`b!", "3JZWJOc=&DJ3w6(`b!");
      NumberInput numberInput0 = new NumberInput(checkbox0, (String) null, (String) null);
      String string0 = numberInput0.getComponentName();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(numberInput0._isGeneratedId());
      assertEquals("NumberInput", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.fieldset();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.q(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Form form0 = new Form("Q@A7Qj{9jV^s");
      // Undeclared exception!
      try { 
        form0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("k?BWB3g5(");
      // Undeclared exception!
      try { 
        xmlEntityRef0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.Image");
      Component component0 = table0.address();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "4c$(UK2D`");
      // Undeclared exception!
      try { 
        checkbox0.imageSubmit("4c$(UK2D`", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.form("%*{]Dh9>;}P");
      // Undeclared exception!
      try { 
        component0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "asset/", "GGxd2+ 1u_O,@1H[7", "GGxd2+ 1u_O,@1H[7");
      Table table0 = new Table(dateInput0, "H6c?");
      Component component0 = table0.legend((Object) table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("H6c?", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "?B");
      Component component0 = table0.b();
      Component component1 = component0.dl();
      assertEquals("Block_2", component1.getComponentId());
      assertEquals("?B", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Form form0 = new Form((String) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.samp(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("awKl{_XsO9hBzn(", "awKl{_XsO9hBzn(");
      Short short0 = new Short((short) (-1));
      // Undeclared exception!
      try { 
        component0.strong((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Form form0 = new Form("<<");
      // Undeclared exception!
      try { 
        form0.numberInput("<<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.checkboxGroup("null", (ISelectModel) null, (ElExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Form form0 = new Form("=5vm8`rWXWD`k0F4|");
      NumberInput numberInput0 = new NumberInput(form0, "&`h76nAbi%?{^?]", ")3Fs2(S|<R?f8&0VT");
      ElExpression elExpression0 = new ElExpression("=5vm8`rWXWD`k0F4|");
      // Undeclared exception!
      try { 
        numberInput0.fileInput(")3Fs2(S|<R?f8&0VT", elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "", "null");
      // Undeclared exception!
      try { 
        radio0.i((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Form form0 = new Form("hlM/>");
      // Undeclared exception!
      try { 
        form0.fileInput("wheel_ErrorPage");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setComponentId("style");
      assertFalse(errorPage0._isBuilt());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" xmlns");
      xmlEntityRef0.getAttributes();
      assertEquals(" xmlns", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = Boolean.valueOf("P!T1Js");
      Component component0 = errorPage0.abbr((Object) boolean0);
      Component component1 = component0.q();
      Checkbox checkbox0 = new Checkbox(component1, "dy", "label");
      Table table0 = new Table(checkbox0, "^O<ob|Knipk");
      Component component2 = table0.button();
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("^O<ob|Knipk", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, (Object) null);
      TableBlock tableBlock0 = new TableBlock(text0, "");
      // Undeclared exception!
      try { 
        tableBlock0.checkbox("cite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "3JZWJOc=&DJ3w6(`b!", "3JZWJOc=&DJ3w6(`b!");
      // Undeclared exception!
      try { 
        checkbox0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, ":#b$_!gP?Uad$Q");
      Component component0 = table0.blockquote();
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Form form0 = new Form("1vM'a9=+Mx/E");
      // Undeclared exception!
      try { 
        form0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Form form0 = new Form("null");
      Byte byte0 = new Byte((byte)125);
      // Undeclared exception!
      try { 
        form0.ins((Object) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Block block0 = tableRow0.placeholder("Could not find component with id '");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      tableRow0.el(";(m>XubB8Rth(?WYt");
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "3ovaNp4|_&-E8S\"r", "expected namespace ");
      Table table0 = new Table(checkbox0, "3ovaNp4|_&-E8S\"r");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.p();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "null", "null");
      MockDate mockDate0 = new MockDate(2047, 2047, (-3065));
      // Undeclared exception!
      try { 
        radio0.acronym((Object) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "INVOKEINTERFACE org/mvel/integration/VariableResolver.getValue");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.param("sk@Y#]90_oaU^D", "");
      // Undeclared exception!
      try { 
        component0.h6();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Component component0 = link0.s();
      DateInput dateInput0 = new DateInput(link0, "org.mvel.conversion.DoubleCH$4", "Mb~N,v@#{uXI", "Mb~N,v@#{uXI");
      Component component1 = component0.del((Object) dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
      assertEquals("Mb~N,v@#{uXI", dateInput0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "G:EvO", ")INJ_Vk;5<3TDB~");
      // Undeclared exception!
      try { 
        textArea0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.dateInput("null", "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Form form0 = new Form("jP91'MAQ'J@h:)6 S");
      // Undeclared exception!
      try { 
        form0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("8sc");
      Form form0 = new Form(errorPage0, "ICONST_NULL", actionExpression0);
      Table table0 = new Table(form0, "ICONST_NULL");
      Component component0 = table0.sup((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("ICONST_NULL", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Form form0 = new Form("K");
      // Undeclared exception!
      try { 
        form0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("y NE?");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.kbd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, ":#b$_!gP?Uad$Q");
      Component component0 = table0.samp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map("q^nNV0rD~R.kY^`]>|");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("|x/g@#UOme9j");
      Component component1 = component0.label();
      Object object0 = new Object();
      Component component2 = component1.dfn(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("|x/g@#UOme9j", component0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      Component component0 = tableBlock0.actionBinding(";<Fv@l;d.fB%5Uc6J");
      assertEquals("TableBlock_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hL(@=g8(m^GcU'fa");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "hL(@=g8(m^GcU'fa", "hL(@=g8(m^GcU'fa");
      // Undeclared exception!
      try { 
        checkbox0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("|x/g@#UOme9j");
      Component component1 = component0.label();
      Component component2 = component1.h6((Object) errorPage0);
      FormElement formElement0 = component2.textInput("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(formElement0._isGeneratedId());
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("|x/g@#UOme9j");
      Component component1 = component0.label();
      Component component2 = component1.clasS("|x/g@#UOme9j");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component0._isGeneratedId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect((String) null, dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "/xV0L");
      Checkbox checkbox0 = new Checkbox(block0, "/xV0L", "/xV0L");
      Label label0 = new Label(checkbox0, block0);
      Component component0 = label0.legend();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "3h]^LUZgtfN\"*E", "7/U");
      Table table0 = new Table(submit0, "3h]^LUZgtfN\"*E");
      TableBlock tableBlock0 = table0.thead();
      tableBlock0.kbd();
      tableBlock0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.dt((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Could not find component with id ", "7:F@");
      // Undeclared exception!
      try { 
        checkbox0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
