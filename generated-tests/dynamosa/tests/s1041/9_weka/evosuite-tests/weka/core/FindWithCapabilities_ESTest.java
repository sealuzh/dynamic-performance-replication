/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 19:01:41 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-relational-class";
      stringArray0[1] = "not-unary-atts";
      stringArray0[2] = "Bz[yK!/HZwQ;Lp";
      stringArray0[3] = "i2vx2^t]uc$/";
      stringArray0[4] = "\tMust handle relational classes.";
      stringArray0[5] = "x*peQ`U=3!k";
      stringArray0[6] = "h;=7%PM.C|i!p05R1&";
      stringArray0[7] = "Y";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.setClassIndex("i*]]NgKdZ");
      findWithCapabilities0.setFilename("8034");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-1";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      capabilities0.m_MissingValuesTest = false;
      stringArray0[4] = "-1";
      stringArray0[5] = "i*]]NgKdZ";
      stringArray0[6] = "";
      stringArray0[7] = "i*]]NgKdZ";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("W*`");
      assertEquals("W*`", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.m_Superclass = "[,9Z_";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[,9Z_");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAllAttributes();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "d~1<fn^";
      stringArray0[1] = "-num-instances";
      findWithCapabilities1.find();
      stringArray0[2] = "i(_B,7NH-";
      stringArray0[3] = "t";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i(_B,7NH-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-W";
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("o");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      capabilities0.m_AttributeTest = false;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "-not-numeric-class";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.m_Superclass = ")Lm3EUUS\"#BQ4EP=";
      stringArray0[0] = ")Lm3EUUS\"#BQ4EP=";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      assertEquals(7, stringArray1.length);
      
      findWithCapabilities0.find();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities capabilities0 = null;
      findWithCapabilities0.m_Capabilities = null;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      vector0.add("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities0);
      capabilities0.enableAll();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "A superclass has to be specified!";
      stringArray0[3] = "";
      stringArray0[4] = "binary-atts";
      stringArray0[5] = "-not-string-atts";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "z,9Z_";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.setFilename("H/`!>G'");
      findWithCapabilities0.getOptions();
      assertEquals("H/`!>G'", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(10, vector0.capacity());
      
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i*]]NgKdZ");
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      vector0.add("i*]]NgKdZ");
      findWithCapabilities0.setFilename("packages");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getFilename();
      assertEquals("packages", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      capabilities0.m_AttributeTest = false;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      try { 
        capabilities0.testWithFail((Instances) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLcdd`tu";
      stringArray0[1] = "-numeric-class";
      stringArray0[2] = "`@:g.}V";
      stringArray0[3] = "-1";
      stringArray0[4] = "N 5yw";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.clone();
      capabilities0.m_MissingClassValuesTest = true;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.m_Superclass = "";
      findWithCapabilities0.setFilename("");
      vector0.listIterator();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.dependencies();
      vector0.add("weka/core/Capabilities.props");
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "A superclass has to be specified!";
      stringArray0[3] = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[4] = "binary-atts";
      stringArray0[5] = "-not-string-atts";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getRevision();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      capabilities0.m_AttributeTest = false;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "8034";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.find();
      assertFalse(vector0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")Y.Q +_@";
      stringArray0[1] = "Qqu%}rS(db:EA4\"D'";
      stringArray0[2] = "-not-string-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability2);
      assertNotSame(capabilities_Capability2, capabilities_Capability1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("0cd^B");
      findWithCapabilities0.setClassIndex("num-instances-relational");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      assertNotSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-no-class";
      stringArray0[1] = "-string-class";
      stringArray0[2] = "\nFound ";
      stringArray0[3] = ";-!]E}diXR{'I}Fwe";
      stringArray0[4] = "first";
      stringArray0[5] = "{zZRk./i<iP;";
      stringArray0[6] = "Relational";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3&rG4Kx$IQ8?");
      capabilities0.m_MinimumNumberInstances = (-268);
      findWithCapabilities0.m_Filename = "F*|xJ',?tyk";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      System.setCurrentTimeMillis((-1136L));
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      ClassDiscovery.m_ClassCache = null;
      findWithCapabilities0.find();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals("F*|xJ',?tyk", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i*]]NgKdZ");
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.m_Matches.add((String) null);
      findWithCapabilities0.setFilename("packages");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("packages", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      findWithCapabilities0.m_Misses = vector0;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      stringArray0[0] = "Kc*H-2";
      stringArray0[1] = "hZ";
      stringArray0[2] = "missing-att-values";
      findWithCapabilities1.getRevision();
      stringArray0[3] = " 1";
      stringArray0[4] = "QC_8+1k,K6?HO3c";
      stringArray0[5] = "-not-missing-class-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-date-atts";
      stringArray0[1] = ";-!]E}diXR{'I}Fwe";
      stringArray0[2] = "weka.core.WekaException";
      stringArray0[3] = "\tThe number of string attributes (default 0).";
      stringArray0[4] = "-1";
      stringArray0[5] = "-not-date-atts";
      stringArray0[6] = "1?V";
      stringArray0[7] = "4/]G\"Eqk&OBTI@{";
      stringArray0[8] = "[[ 8z=3C";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "z,9Z_";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities.main((String[]) null);
      CapabilitiesHandler capabilitiesHandler0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "XvBt|0_itDWz+Q 9Y?";
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getNotCapabilities();
      String string0 = "";
      int[] intArray0 = new int[6];
      intArray0[0] = (-1757);
      intArray0[1] = 33;
      intArray0[2] = 0;
      intArray0[3] = (-3663);
      intArray0[4] = 1506;
      int int0 = 95;
      intArray0[5] = 95;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2375.3772689500506), (double[]) null, intArray0, 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Expected comma in range, found: ";
      stringArray0[1] = "-not-binary-class";
      stringArray0[2] = "urQ~tnOZA~x";
      stringArray0[3] = "@bzsyoH{][?/g y";
      stringArray0[4] = "%^}owHua(";
      stringArray0[5] = "nominal-values";
      stringArray0[6] = "k{i";
      stringArray0[7] = "e}/RsH";
      stringArray0[8] = "-1";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = ",C/.";
      findWithCapabilities0.m_Superclass = ",C/.";
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities2.m_ClassIndex;
      findWithCapabilities1.m_ClassIndex = singleIndex0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",C/.";
      stringArray0[1] = "8CIp";
      stringArray0[2] = "";
      stringArray0[3] = ",C/.";
      stringArray0[4] = ",C/.";
      stringArray0[5] = ",C/.";
      FindWithCapabilities.main(stringArray0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "- not allowed: ";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      findWithCapabilities0.listOptions();
      stringArray0[0] = "";
      stringArray0[1] = "";
      findWithCapabilities0.setFilename("numeric-class");
      stringArray0[2] = "uju5_Jd{p{|[-";
      stringArray0[3] = "ue)5";
      stringArray0[4] = "8@>s08:&:e#[1Dyi+";
      stringArray0[5] = "Ez~o,.CgB?./[8Xz?|";
      stringArray0[6] = "0<7,P70eT!@k%_qs";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      stringArray0[7] = ":)1&wlO<[[iP'n>sgm";
      stringArray0[8] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      assertNotSame(capabilities_Capability0, capabilities_Capability1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "z,9Z_";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      Vector<String> vector1 = findWithCapabilities0.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "b|.(DP`fLvO";
      stringArray0[1] = " requires the following packages:\n";
      stringArray0[2] = "s\"OW}Y@}GIj a.ze$5";
      stringArray0[3] = "-superclass";
      stringArray0[4] = "Ka9i0m";
      stringArray0[5] = "iRcj`Ee-Sq~2-=";
      stringArray0[6] = "Copy with third attribute deleted and inserted: ";
      stringArray0[7] = "FHX2x}%wY&j`roe";
      stringArray0[8] = " that meets constraint ";
      findWithCapabilities1.setOptions(stringArray0);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
      
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "binary-atts";
      stringArray0[2] = "}wPJ{_<v 'fzwt.`_";
      stringArray0[3] = "";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      assertEquals(1, capabilities1.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`1=x?w<zHb?&";
      stringArray0[1] = "8034";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "z6r@NuB#WWm7o~G[:fq";
      stringArray1[1] = "-not-unary-class";
      stringArray1[2] = "f";
      stringArray1[3] = "I";
      stringArray1[4] = "";
      stringArray1[5] = "#R A-Z|F$SGfn";
      stringArray1[6] = "z6r@NuB#WWm7o~G[:fq";
      FindWithCapabilities.main(stringArray1);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-nominal-class";
      stringArray0[1] = "-binary-class";
      stringArray0[2] = "<W#Cn]MKMR";
      stringArray0[3] = "-1";
      stringArray0[4] = "ed64~Kb)%}Pg";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "8034";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      findWithCapabilities0.setClassIndex("l");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-c <num>";
      stringArray0[1] = "generic";
      stringArray0[2] = "-W";
      stringArray0[3] = "b*#3Q;GdI {Alf6^we";
      stringArray0[4] = "R={>wu]y'=d[";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(11, stringArray0.length);
      
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
      
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      assertTrue(vector0.isEmpty());
      
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      vector0.listIterator();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-198));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bv46bcEuR\")";
      stringArray0[1] = "+j8+";
      stringArray0[2] = "DATE_CLASS";
      stringArray0[3] = "%D";
      stringArray0[4] = "!hu:%#";
      stringArray0[5] = "+$ab8/>,pY}weyq^\">y";
      stringArray0[6] = "-not-binary-class";
      stringArray0[7] = "sHg?P;[";
      stringArray0[8] = "W";
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.or(capabilities1);
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      FindWithCapabilities.main((String[]) null);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
      
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability1);
      capabilities0.setMinimumNumberInstances(0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("%,R,5PeJaw\r`3)e\"Ey");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      vector0.subList(0, 0);
      findWithCapabilities0.m_Matches = vector0;
      String string0 = "";
      vector0.add("");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Hashtable<String, Vector<String>> hashtable1 = new Hashtable<String, Vector<String>>(hashtable0);
      ClassDiscovery.m_Cache = hashtable1;
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", 671);
      capabilities0.capabilities();
      capabilities0.test(attribute0);
      capabilities0.m_MissingClassValuesTest = false;
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getNotCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "z,9Z_";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("H/`!>G'");
      assertEquals("H/`!>G'", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enable((Capabilities.Capability) null);
      findWithCapabilities0.m_Superclass = "8034";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("8034");
      assertEquals("8034", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Capabilities = null;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertNull(capabilities0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "8034";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.enableAll();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.find();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.m_Superclass = "[,9Z_";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[,9Z_");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAllAttributes();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getHandler();
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      capabilities0.or(capabilities1);
      findWithCapabilities0.setClassIndex("O%");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      FindWithCapabilities.main(stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Matches = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      String[] stringArray0 = new String[2];
      findWithCapabilities0.enable(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.m_Superclass = ")Lm3ElU\"#BQ4EP=";
      stringArray0[0] = ")Lm3ElU\"#BQ4EP=";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      assertEquals(7, stringArray1.length);
      
      findWithCapabilities0.setClassIndex("vIn)MX ntP");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
      
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("--");
      findWithCapabilities0.m_NotCapabilities = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|*^Z0bL,";
      stringArray0[1] = "-date-atts";
      stringArray0[2] = "#>\")";
      stringArray0[3] = "--";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-relational-atts";
      stringArray0[1] = "--";
      FindWithCapabilities.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "-c <num>";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      capabilities0.m_AttributeTest = false;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setClassIndex(" +[~UpAi,2");
      findWithCapabilities0.setFilename(" +[~UpAi,2");
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "";
      stringArray0[5] = "8034";
      stringArray0[6] = "8034";
      stringArray0[7] = "8034";
      stringArray0[8] = "8034";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals(" +[~UpAi,2", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enable(capabilities_Capability1);
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-missing-att-values";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "W";
      stringArray0[3] = "-date-atts";
      stringArray0[4] = "@p3#iyGQWokv~[|'h";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
      
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-not-no-class";
      stringArray0[1] = "JXu:8cH7g{#`el";
      stringArray0[2] = "";
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      stringArray0[3] = "Km`'lGt%5";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Freund, Y. and Mason, L.";
      stringArray0[1] = "TipText";
      stringArray0[2] = "Ho";
      stringArray0[3] = "";
      stringArray0[4] = "b6li:>?QV1km";
      stringArray0[5] = "q@r>oJ<7;BP8";
      stringArray0[6] = "{my\"0CfB(KHlT$9|";
      stringArray0[7] = "GH#H=fp=tZ5;,&";
      stringArray0[8] = "-missing-att-values";
      FindWithCapabilities.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      String string0 = "maybe";
      vector0.clear();
      vector0.add("maybe");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      stringArray0[1] = "\tMust handle numeric classes.";
      stringArray0[2] = "";
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      stringArray0[3] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("");
      String string1 = findWithCapabilities0.m_Superclass;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-W";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -W option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities1.getMatches();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities1.setFilename("Testdata");
      assertEquals("Testdata", findWithCapabilities1.getFilename());
      
      FindWithCapabilities findWithCapabilities2 = (FindWithCapabilities)findWithCapabilities0.getHandler();
      assertEquals("Testdata", findWithCapabilities2.getFilename());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      findWithCapabilities0.enable(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.m_Superclass = ")Lm3ElU\"#BQ4EP=";
      stringArray0[0] = ")Lm3ElU\"#BQ4EP=";
      findWithCapabilities0.find();
      stringArray0[1] = "-1";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("Oczj/op9Y(D/(D3[R");
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("P9ae<#1@i*K?`5bO0");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("P9ae<#1@i*K?`5bO0");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      assertEquals("P9ae<#1@i*K?`5bO0", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      capabilities0.setMinimumNumberInstances(0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      findWithCapabilities1.handles(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tMust handle unray classes.";
      stringArray0[1] = "4&|Y=yn&G<";
      stringArray0[2] = "-1";
      stringArray0[3] = "uFRK";
      stringArray0[4] = "-numeric-atts";
      stringArray0[5] = "0";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "+d46CXCG";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getCapabilities();
      assertEquals("+d46CXCG", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("@Tcb/J|");
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getMisses();
      vector0.add("[");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      StringReader stringReader0 = new StringReader("@Tcb/J|");
      stringReader0.skip((-415L));
      stringReader0.ready();
      vector0.add("@Tcb/J|");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[@Tcb/J|], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("@\">%05#C$(?d>HT+u");
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("@\">%05#C$(?d>HT+u", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      String string0 = "";
      findWithCapabilities0.find();
      stringArray0[0] = "";
      String string1 = "Ba.n";
      stringArray0[1] = "Ba.n";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-not-relational-class";
      stringArray0[1] = "cxxv5TLjjc<";
      stringArray0[2] = "pL{$T?O^6w9/^5I9Y";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-not-nominal-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities0.or(capabilities1);
      findWithCapabilities0.setClassIndex("fzug0T3, ;xJ!#E/)a.");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("Oczj/op9Y(D/(D3[R");
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("O%");
      assertEquals("O%", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("=~Y~hSK}SAP");
      assertEquals("=~Y~hSK}SAP", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable((Capabilities.Capability) null);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "z,9Z_";
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.getMatches();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "z,9Z_";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("num-instances-relational");
      assertEquals("num-instances-relational", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
      
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.getMatches();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.m_Filename = null;
      findWithCapabilities0.setClassIndex("xDE");
      findWithCapabilities0.find();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      assertNull(findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "- not allowed: ";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-W";
      findWithCapabilities0.setFilename("unary-class");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("unary-class");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_ClassIndex = null;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      assertNotSame(capabilities_Capability2, capabilities_Capability1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-W";
      stringArray0[1] = "-W";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("0cd^B");
      findWithCapabilities0.setClassIndex("num-instances-relational");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      assertNotSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("o");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "8034";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "NT<w@KPz]xO5&>q";
      stringArray0[2] = "U";
      stringArray0[3] = "premature end of file";
      stringArray0[4] = "-c <num>";
      stringArray0[5] = "-not-string-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "z,9Z_";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Vector<String> vector0 = new Vector<String>();
      vector0.iterator();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      Random.setNextRandom(87);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("num-instances-relational");
      findWithCapabilities0.getOptions();
      assertEquals("num-instances-relational", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-c <num>";
      stringArray0[1] = "generic";
      stringArray0[2] = "-W";
      stringArray0[3] = "b*#3Q;GdI {Alf6^we";
      stringArray0[4] = "R={>wu]y'=d[";
      stringArray0[5] = "~;";
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      findWithCapabilities0.enable(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.m_Superclass = ")Lm3ElU\"#BQ4EP=";
      stringArray0[0] = ")Lm3ElU\"#BQ4EP=";
      findWithCapabilities0.find();
      stringArray0[1] = "-1";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("Oczj/op9Y(D/(D3[R");
      System.setCurrentTimeMillis(0L);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("P9ae<#1@i*K?`5bO0");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("P9ae<#1@i*K?`5bO0");
      findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(3378L);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      capabilities0.setMinimumNumberInstances((-1647));
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      boolean boolean0 = findWithCapabilities1.isEnabled(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      capabilities0.setMinimumNumberInstances(0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "[auZBey|v@.dV[p,}";
      stringArray1[1] = "pdkMm}Tt";
      stringArray1[2] = "-string-atts";
      stringArray1[3] = "HJ_sHU^T9xDkF*";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      stringArray1[4] = "ZpNh oGC";
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
