/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 02 21:47:26 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Map<Integer, String>, Object>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Map<Integer, String>, Object>>();
      DoubleKeyMap<HashMap<Object, Object>, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Map<Integer, String>, Object>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<HashMap<Map<Integer, String>, String>, String, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Integer, String>, String>, String, Map<Integer, String>>();
      Map<Map<Integer, String>, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      Map<Map<Integer, String>, Object> map1 = doubleKeyMap0.get(hashMap1);
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      String string0 = doubleKeyMap0.remove((String) null, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Integer, String>>();
      Object object0 = new Object();
      Map<Integer, String> map0 = doubleKeyMap0.remove(object0, object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<String, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("SKFNOG(1;px", (Object) class0, (Object) doubleKeyMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      String string0 = doubleKeyMap0.put(integer0, (Object) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Map<String, HashMap<Object, Object>>> hashMap0 = new HashMap<String, Map<String, HashMap<Object, Object>>>(0, 8.44F);
      DoubleKeyMap<String, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Object>>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap2 = doubleKeyMap0.put((String) null, "", hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = doubleKeyMap0.put((Object) doubleKeyMap1, (Object) doubleKeyMap1, (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Object, Object>>();
      Map<String, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(map0, class0);
      Integer integer0 = doubleKeyMap1.get("wrong proto type map ", (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Integer integer0 = doubleKeyMap0.get((Integer) null, (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, "ew%{4)");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      Map<String, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, Map<Integer, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, Object>();
      Map<Map<Integer, String>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Integer, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Object, Object>>(hashMap0);
      Integer integer0 = new Integer(1);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, integer0, hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0, class0);
      Object object0 = new Object();
      Map<Integer, String> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Integer, String>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Map<Integer, HashMap<HashMap<String, Object>, HashMap<String, Object>>> map0 = doubleKeyMap1.newMap();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put((Object) map0, (Object) doubleKeyMap1, (Map<Integer, String>) hashMap0);
      Map<Integer, HashMap<Object, Map<Integer, String>>> map1 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(2027);
      Map<Integer, String> map2 = doubleKeyMap0.remove((Object) map1, (Object) integer0);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(1);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>(class0);
      Map<Integer, Map<Integer, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, Object>(map0);
      Map<HashMap<Object, String>, Map<Object, Object>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap3 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(map1, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap3.put(hashMap0, (Object) doubleKeyMap0, (Object) null);
      Object object0 = doubleKeyMap3.put(hashMap0, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>(574, 574);
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put("", hashMap1);
      Integer integer0 = new Integer((-1));
      Object object0 = doubleKeyMap0.get("", integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Integer, String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-3116));
      doubleKeyMap0.put((Object) integer0, (Object) hashMap0, (Map<Integer, String>) hashMap0);
      Map<Integer, String> map0 = doubleKeyMap0.remove((Object) integer0, (Object) hashMap0);
      assertEquals(0, map0.size());
  }
}
