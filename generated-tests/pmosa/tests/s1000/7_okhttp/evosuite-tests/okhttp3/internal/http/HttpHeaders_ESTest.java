/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:27:11 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpHeaders.skipWhitespace("t4", 0);
      HttpHeaders.parseSeconds("t4", 0);
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Response) null).when(response0).networkResponse();
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      assertEquals(1, int0);
      
      int int1 = HttpHeaders.skipUntil(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0, " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds(">Uz", 11);
      assertEquals(11, int0);
      
      int int1 = HttpHeaders.skipWhitespace("okhttp3.internal.http.HttpHeaders", 2167);
      assertEquals(2167, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "; expires=";
      String string1 = "";
      HttpHeaders.skipUntil("; expires=", 0, "");
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Headers) null, (Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("j*QQO9;$?", "jk}GE6W_fC");
      hashMap0.put("j*QQO9;$?", "");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      String string0 = "okhttp3.internal.http.HttpHeaders";
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap1);
      HttpHeaders.parseChallenges(headers0, "okhttp3.internal.http.HttpHeaders");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap2);
      Headers.of((Map<String, String>) hashMap1);
      HttpHeaders.skipUntil("dbZ9xS@i~zRluimj_", 419, "okhttp3.internal.http.HttpHeaders");
      HttpHeaders.parseChallenges(headers0, "dbZ9xS@i~zRluimj_");
      HttpHeaders.skipWhitespace("jk}GE6W_fC", 419);
      HttpHeaders.parseSeconds(",", 0);
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("AvTFH >3|'%LTm", "AvTFH >3|'%LTm");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertFalse(headers1.equals((Object)headers0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object object0 = new Object();
      hashMap0.remove(object0);
      hashMap0.put("M#oLN/", "");
      hashMap0.put("M#oLN/", "M#oLN/");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyFields(headers0);
      HttpHeaders.contentLength(headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      try { 
        MockURI.URI("", "M#oLN/", "", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://M#oLN/
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("AvTFH >3|'%LTm", "AvTFH >3|'%LTm");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      headers0.getDate(":");
      Headers headers1 = Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers2 = Headers.of((Map<String, String>) hashMap0);
      Headers.of((Map<String, String>) hashMap0);
      headers1.getDate(":");
      headers2.getDate(":");
      Headers.of(stringArray0);
      hashMap0.put(":", ":");
      headers1.names();
      HttpHeaders.contentLength(headers0);
      HttpHeaders.hasVaryAll(headers1);
      HttpHeaders.varyHeaders(headers0, headers1);
      Headers.of((Map<String, String>) hashMap0);
      Headers headers3 = HttpHeaders.varyHeaders(headers2, headers0);
      headers3.toMultimap();
      HttpHeaders.contentLength(headers3);
      Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers1, (String) null);
      HttpHeaders.varyHeaders(headers3, headers3);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace((String) null, 443);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseChallenges(headers0, ";p");
      HttpHeaders.parseChallenges(headers0, "\n");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers1);
      assertNotSame(headers1, headers0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(";oLX4", ";oLX4");
      hashMap0.put("vary", "Transfer-Encoding");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
      
      int int0 = HttpHeaders.skipUntil("J)+nK,Zx5L3O", 0, "\"okT8m4-c)}/h7");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("-72", 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("", 3);
      assertEquals(3, int0);
      
      int int1 = HttpHeaders.parseSeconds("-72", 282);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpHeaders.parseSeconds(",", 12);
      HttpHeaders.parseSeconds("1", 9);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace("{ <wz", (-3444));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("AvTFH >3=|'%LTm", "AvTFH >3=|'%LTm");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "AvTFH >3=|'%LTm");
      assertEquals(0, list0.size());
      
      hashMap0.put("; path=", "no-cache");
      int int0 = HttpHeaders.parseSeconds((String) null, 56320);
      assertEquals(56320, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Length", "Content-Length");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "y8$");
      hashMap0.put("vary", "vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }
}
