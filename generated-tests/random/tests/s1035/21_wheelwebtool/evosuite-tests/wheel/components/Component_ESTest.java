/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:45:54 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "reserved word in assignment: ", "reserved word in assignment: ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "reserved word in assignment: ";
      FileInput fileInput1 = (FileInput)fileInput0.attributes(stringArray0);
      assertTrue(fileInput1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "java.lang.String@0000000007", "java.lang.String@0000000007");
      Map<String, String> map0 = checkbox0.getAttributes();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "java.lang.String@0000000007", ",KB#(4");
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("h1");
      String string0 = textArea0.eval(initialFieldValue0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      tableBlock0.actionBinding(actionExpression0);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Form form0 = new Form("LH:19/i(~%%lO9\"FQO");
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.renderHint(" [&6");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      Submit submit0 = new Submit(hidden0, "", "");
      TableBlock tableBlock0 = new TableBlock(submit0);
      // Undeclared exception!
      try { 
        tableBlock0.remove((Component) tableBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        submit0.imageSubmit((String) null, "ICONST_4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "a-f.", "a-f.");
      // Undeclared exception!
      try { 
        numberInput0.dateFormat("`>lOEP-;", "`>lOEP-;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern '`>lOEP-;'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Form form0 = new Form("org.mvel.conversion.FloatCH");
      Component component0 = form0.clasS((CharSequence) null);
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      Component component1 = component0.attribute("[lMwLOH", "[lMwLOH");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000007");
      tableBlock0.addInternalRenderHint("java.lang.String@0000000007");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("\"b~u@^89=FwfU");
      ActionExpression actionExpression1 = actionExpression0.submitForm(false);
      Component component0 = errorPage0.actionBinding(actionExpression1);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding((String) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.ast.StaticImportNode");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0._setComponentId("MoFW0./");
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "BL4PoNs52;T=FVS-dB", "");
      // Undeclared exception!
      try { 
        fileInput0.var();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Form form0 = new Form("LH:19/i(~%%lO9\"FQO");
      // Undeclared exception!
      try { 
        form0.up(2653);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("..LCA>oz");
      Float float0 = new Float((-189.1314F));
      // Undeclared exception!
      try { 
        form0.text(float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "\f#-_8", "java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        checkbox0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form(";T Nev:");
      // Undeclared exception!
      try { 
        form0.reset("n;Pu6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, (String) null, "+6R\"VOyewdD>cF H");
      // Undeclared exception!
      try { 
        textInput0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "N=", "N=");
      // Undeclared exception!
      try { 
        checkbox0.placeholder("N=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("cache");
      // Undeclared exception!
      try { 
        xmlEntityRef0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "IT/Lm<<l/", "[!)S19wX");
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        fileInput0.message("3iL*u[BuXXA", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}6zea1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.map("expected START_TAG and not ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "p$8EhMR{7q$", "}");
      // Undeclared exception!
      try { 
        radio0.legend((Object) "java.lang.String@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "}", "}");
      // Undeclared exception!
      try { 
        fileInput0.label((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      Submit submit0 = new Submit(component0, "[lMwLOH", "[lMwLOH");
      // Undeclared exception!
      try { 
        submit0.kbd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ">[m$>Q", "}", ">[m$>Q");
      // Undeclared exception!
      try { 
        dateInput0.i();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Form form0 = new Form("fieldset");
      // Undeclared exception!
      try { 
        form0.h3((Object) "fieldset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("fieldset");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form("");
      ActionExpression actionExpression0 = new ActionExpression(".~D|k.");
      // Undeclared exception!
      try { 
        form0.form("Tfoot component can be added only to a Table.", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "ss-&I^,o^@iV=v", "\u0001`>QDk1uXRI}9");
      // Undeclared exception!
      try { 
        submit0.em((Object) "ss-&I^,o^@iV=v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        checkbox0.dl();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "Dq[S w", "RJwb*A", "RJwb*A");
      // Undeclared exception!
      try { 
        dateInput0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "AKYP)B");
      // Undeclared exception!
      try { 
        checkbox0.b((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "java.lang.String@0000000012", ")2uSSgLG`a3");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        checkbox0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.address();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Form form0 = new Form("};Hicc:0t");
      DateInput dateInput0 = new DateInput(form0, "C&O'U%`SWx[diQz<eyr", "C&O'U%`SWx[diQz<eyr", "};Hicc:0t");
      // Undeclared exception!
      try { 
        dateInput0.acronym();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("mfvgY* !#Ec!&x@m");
      // Undeclared exception!
      try { 
        xmlEntityRef0.abbr((Object) "mfvgY* !#Ec!&x@m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "label");
      TableBlock tableBlock0 = table0.tbody();
      StandaloneComponent standaloneComponent0 = tableBlock0.getPage();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "java.lang.String@0000000007");
      Label label0 = new Label(block0, errorPage0);
      StandaloneComponent standaloneComponent0 = label0._getTopLevelComponent(true);
      assertTrue(label0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "2$1;;;f@#/1Oh)>|AgE");
      Table table0 = new Table(tableBlock0, "Could not encode string '");
      Component component0 = table0.caption();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "}", "}");
      // Undeclared exception!
      try { 
        fileInput0._render((XmlSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.RenderableComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("NqQuFEy%}q;V+");
      Form form0 = new Form(errorPage0, "NqQuFEy%}q;V+", actionExpression0);
      form0.renderHint(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        errorPage0.rollback(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Integer integer0 = new Integer(8);
      Component component1 = component0.b((Object) integer0);
      component1.afterAdd();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000007");
      tableBlock0._setGeneratedId(true);
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      tableRow0._setComponentId((String) null);
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "Dq[S w", "RJw_*A");
      // Undeclared exception!
      try { 
        numberInput0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.div();
      Component component1 = component0.end();
      assertEquals("wheel_ErrorPage", component1.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("h3");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "h3", "h3");
      Component component0 = hidden0.end("h3");
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "param");
      Checkbox checkbox0 = new Checkbox(errorPage0, "param", "param");
      Component component0 = tableBlock0.sub((Object) checkbox0);
      // Undeclared exception!
      try { 
        component0.end((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.end("xMELEq!AK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'xMELEq!AK'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "java.lang.String@0000000007", ",KB#(4");
      // Undeclared exception!
      try { 
        textArea0.dateFormat("", "textarea");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression(" ");
      Image image0 = new Image(errorPage0, elExpression0, elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder();
      Image image0 = new Image(errorPage0, stringBuilder0, stringBuilder0);
      ElExpression elExpression0 = new ElExpression("CMe5pbCAk");
      List<Component> list0 = image0.findAll(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "*J*RY%r&v3sC7", "org.mvel.conversion.DoubleCH$2");
      // Undeclared exception!
      try { 
        fileInput0.find("@7nd'!%m?>xe0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id @7nd'!%m?>xe0 on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      // Undeclared exception!
      try { 
        table0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      Table table0 = new Table(hidden0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      TableRow tableRow0 = tableBlock0.tr();
      Radio radio0 = new Radio(tableRow0, (String) null, ">>}");
      radio0.up(2);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = new ErrorPage();
      boolean boolean0 = errorPage0.equals(errorPage1);
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "e'7<", "+=");
      boolean boolean0 = checkbox0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      boolean boolean0 = errorPage0.equals(errorPage0);
      assertTrue(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = errorPage0.equals(mockGregorianCalendar0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Hidden hidden0 = new Hidden(tableRow0, "TQuNG0;2TNe_TlOo", "wheel.components.ActionExpression@0000000009");
      Table table0 = new Table(hidden0, "W?");
      Table table1 = table0.renderHint("TQuNG0;2TNe_TlOo");
      table1._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Hidden hidden0 = new Hidden(tableRow0, "TQuNG0;2TNe_TlOo", "wheel.components.ActionExpression@0000000009");
      Table table0 = new Table(hidden0, "W?");
      table0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        form0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "java.lang.String@0000000014", "java.lang.String@0000000014");
      hidden0._getVisibleForm(true);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "hIr1LfD&\"*()wXo", "hIr1LfD&\"*()wXo");
      Form form0 = submit0._getVisibleForm(false);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "p$8EhMR{7q$", "}");
      Label label0 = new Label(radio0, "fsMBXt $P,}as1");
      Component component0 = label0.var();
      component0.id("address");
      assertFalse(component0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("NqQuFEy%}q;V+");
      Form form0 = new Form(errorPage0, "NqQuFEy%}q;V+", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("java.lang.String@0000000013");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "BL4PoNs52;T=FVS-dB", "");
      // Undeclared exception!
      try { 
        fileInput0.id("0#FfN:wORZ0N$rV");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("wheel.components.ActionExpression@0000000005");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "wheel.components.ActionExpression@0000000005", "org.mvel.ast.TypeCast", (ISelectModel) null, elExpression0);
      Table table0 = new Table(checkboxGroup0, "wheel.components.ActionExpression@0000000005");
      table0.tfoot();
      // Undeclared exception!
      try { 
        errorPage0.remove("org.mvel.conversion.BooleanCH$6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id org.mvel.conversion.BooleanCH$6 does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.dl();
      MXSerializer mXSerializer0 = new MXSerializer();
      // Undeclared exception!
      try { 
        errorPage0.renderComponent(mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Form form0 = new Form(" [&6");
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(form0, " [&6", " [&6", (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try { 
        checkboxGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "(Ljava/lang/String;)V");
      TableBlock tableBlock0 = table0.thead();
      tableBlock0.tr();
      ElExpression elExpression0 = new ElExpression("java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        tableBlock0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate finder expression ' java.lang.String@0000000013'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "java.lang.String@0000000007", "java.lang.String@0000000007");
      ActionExpression actionExpression0 = checkbox0._getAction();
      assertNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("\"b~u@^89=FwfU");
      Component component0 = errorPage0.actionBinding(actionExpression0);
      Component component1 = component0.actionBinding("}*][;*M1K`&}");
      assertEquals("wheel_ErrorPage", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "label");
      String[] stringArray0 = new String[6];
      Component component0 = table0.area(stringArray0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "link", "link");
      String[] stringArray0 = new String[0];
      Component component0 = radio0.attributes(stringArray0);
      assertSame(component0, radio0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("0");
      Any any0 = new Any(errorPage0, elExpression0);
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      table0.addInternalRenderHint((String) null);
      Table table1 = table0.renderHint("java.lang.StringBuilder@0000000008");
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      Table table0 = new Table(checkbox0, "java.lang.String@0000000007");
      TableBlock tableBlock0 = table0.thead();
      Block block0 = tableBlock0.renderHint("java.lang.String@0000000007");
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.code();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "Checkbox", ">Kn+]>Y/kiC");
      Table table0 = new Table(hidden0, ">Kn+]>Y/kiC");
      TableBlock tableBlock0 = table0.tbody();
      Checkbox checkbox0 = new Checkbox(tableBlock0, ">Kn+]>Y/kiC", ">Kn+]>Y/kiC");
      // Undeclared exception!
      try { 
        checkbox0.h1();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("href");
      Byte byte0 = Byte.valueOf((byte) (-59));
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite((Object) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Form form0 = new Form("W 1O=lsi(swNb");
      TextArea textArea0 = new TextArea(form0, "^>?&c,gbbREXhCoK", "^>?&c,gbbREXhCoK");
      // Undeclared exception!
      try { 
        form0.del((Object) textArea0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Form form0 = new Form("u4kSv");
      // Undeclared exception!
      try { 
        form0.sup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "", "");
      // Undeclared exception!
      try { 
        textInput0.q();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Form form0 = new Form("};Hicc:0t");
      // Undeclared exception!
      try { 
        form0.pre((Object) "};Hicc:0t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "2$1;;;f@#/1Oh)>|AgE");
      Table table0 = new Table(tableBlock0, "Could not encode string '");
      DateInput dateInput0 = new DateInput(table0, "2$1;;;f@#/1Oh)>|AgE", "Could not encode string '", "2$1;;;f@#/1Oh)>|AgE");
      // Undeclared exception!
      try { 
        dateInput0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Submit submit0 = new Submit(block0, "Fd7_CZal4<%}$F", "Fd7_CZal4<%}$F");
      // Undeclared exception!
      try { 
        block0.addFirst(submit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "b");
      DynamicSelectModel dynamicSelectModel0 = table0.selectModel();
      // Undeclared exception!
      try { 
        errorPage0.select("", dynamicSelectModel0, "b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      ActionExpression actionExpression0 = new ActionExpression("(KF++fM[,cksY;");
      component0.form("EWCM5p{,1", actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "{^", "dEGc]");
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        checkbox0.p((Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b((Object) null);
      Component component1 = errorPage0.rawText((Object) null);
      // Undeclared exception!
      try { 
        component1.label((Object) component0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        form0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "java.lang.String@0000000012", "java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        textInput0.param("", "iLypX*&7]'t;IEIYCue");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000007");
      Component component0 = tableBlock0.h5((Object) "java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        component0.reset("[J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.ast.StaticImportNode");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.ol();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "dNBUa#s@cJP,", "Attributes must be given in name, value pairs.");
      // Undeclared exception!
      try { 
        textInput0.big((Object) "tqm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0._setParent((Component) null);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address((Object) "c");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      tableBlock0._renderActions((XmlSerializer) null);
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "M-HK;))2j~b*.", "M-HK;))2j~b*.");
      Link link0 = new Link(errorPage0, textInput0);
      TextArea textArea0 = new TextArea(link0, "", "");
      // Undeclared exception!
      try { 
        textArea0.style();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("(F)V");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea("(F)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Form form0 = new Form("M-U*-?[xNHAJy4\"S]");
      TextInput textInput0 = new TextInput(form0, "$>VBu\"", "M-U*-?[xNHAJy4\"S]");
      FileInput fileInput0 = new FileInput(textInput0, "character ", "/)>js!qSal");
      ElExpression elExpression0 = new ElExpression("$>VBu\"");
      // Undeclared exception!
      try { 
        fileInput0.u((Object) elExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Form form0 = new Form("strsim");
      // Undeclared exception!
      try { 
        form0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        xmlEntityRef0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, " in class ");
      // Undeclared exception!
      try { 
        tableBlock0.textInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Form form0 = new Form("LH:19/i(~%%lO9\"FQO");
      form0.action("6=8y&KOZf8)4cq]v)9(");
      assertEquals("LH:19/i(~%%lO9\"FQO", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "xv*[o6ktqU:20F.", "[Z");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        checkbox0.radioGroup((String) null, dynamicSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.LongCH$5");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Could not redirect to '/");
      Form form0 = new Form(errorPage0, "bUxL", actionExpression0);
      TextArea textArea0 = new TextArea(form0, "wheel.components.ActionExpression@0000000009", "wheel.components.ActionExpression@0000000009");
      Table table0 = new Table(textArea0, "");
      table0.submit("bUxL");
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Form form0 = new Form("yaA3WV}O|QA=xTD!s[K");
      // Undeclared exception!
      try { 
        form0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      Table table0 = new Table(checkbox0, "java.lang.String@0000000007");
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.cite();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Form form0 = new Form("3");
      // Undeclared exception!
      try { 
        form0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.iframe();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        table0.message(".TT;7Bom;$@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      Component component0 = table0.strike();
      // Undeclared exception!
      try { 
        component0.submit((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = component0.h1((Object) "AKYP)B");
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "", "%4Wgm");
      Double double0 = new Double((-739.068942722396));
      // Undeclared exception!
      try { 
        fileInput0.dd((Object) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "2$1;;;f@#/1Oh)>|AgE");
      Table table0 = new Table(tableBlock0, "Could not encode string '");
      table0._applyFormat("Could not encode string '");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Form form0 = new Form("A");
      // Undeclared exception!
      try { 
        form0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "$8<IttC?NwZ", "CHECKCAST [S");
      // Undeclared exception!
      try { 
        checkbox0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Form form0 = new Form("org.mvel.conversion.BooleanCH$9");
      // Undeclared exception!
      try { 
        form0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("\r");
      // Undeclared exception!
      try { 
        xmlEntityRef0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.hidden("Thead component can be added only to a Table.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "BuX^g&:0hZQc", "!M:+VIUl0%O4mnD");
      Boolean boolean0 = Boolean.valueOf("BuX^g&:0hZQc");
      // Undeclared exception!
      try { 
        radio0.small((Object) boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub((Object) "BL4PoNs52;T=FVS-dB");
      Component component1 = component0.strong((Object) "");
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ">[m$>Q", "}", ">[m$>Q");
      Text text0 = (Text)errorPage0.htmlText(dateInput0);
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isHtml());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Form form0 = new Form("wGK_'Py[S");
      // Undeclared exception!
      try { 
        form0.li((Object) "wGK_'Py[S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "java.lang.String@0000000007");
      Label label0 = new Label(block0, errorPage0);
      Link link0 = new Link(label0, block0);
      Component component0 = link0.h5();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Form form0 = new Form("dt");
      // Undeclared exception!
      try { 
        form0.bdo("dt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Form form0 = new Form("org.mvel.conversion.FloatCH");
      // Undeclared exception!
      try { 
        form0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", " xmlns");
      // Undeclared exception!
      try { 
        checkbox0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "java.lang.String@0000000012", "N.Ldi2i*3ECQ|Cy");
      // Undeclared exception!
      try { 
        checkbox0.numberInput("java.lang.String@0000000012", (CharSequence) "java.lang.String@0000000012");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000007");
      Component component0 = tableBlock0.text(tableBlock0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<?");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4((Object) "<?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      Component component1 = errorPage0.a((Object) component0);
      Component component2 = component1.h5((Object) errorPage0);
      Component component3 = component2.h3((Object) component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component3._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      Table table0 = new Table(checkbox0, "java.lang.String@0000000007");
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.span((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000007");
      Component component0 = tableBlock0.b();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Integer integer0 = new Integer(8);
      Component component1 = component0.b((Object) integer0);
      Component component2 = component1.i();
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buttonInput("wheel.AbstractEngine$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity("NqQuFEy%}q;V+");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("NqQuFEy%}q;V+", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "k+xM+U=", "k+xM+U=");
      // Undeclared exception!
      try { 
        fileInput0.passwordInput("k+xM+U=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.ast.StaticImportNode");
      TableBlock tableBlock0 = table0.tbody();
      Radio radio0 = new Radio(tableBlock0, "org.mvel.ast.StaticImportNode", "O");
      // Undeclared exception!
      try { 
        radio0.encode("org.mvel.conversion.BigIntegerCH$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dd();
      component0.var((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      TableRow tableRow0 = tableBlock0.tr();
      tableRow0.pre();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        form0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dd();
      component0.object();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, (String) null, (String) null);
      Component component0 = errorPage0.tt((Object) submit0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "org.mvel.conversion.LongCH$5", "java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        numberInput0.radio("org.mvel.conversion.LongCH$5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "FgG{d$Hrb_*SflVv", "h5");
      // Undeclared exception!
      try { 
        textInput0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = new Form(" [&6");
      Component component0 = errorPage0.abbr((Object) form0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals(" [&6", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.div();
      assertEquals("Block_1", component0.getComponentId());
      
      Table table0 = new Table(errorPage0, "java.lang.String@0000000007");
      table0.id("java.lang.String@0000000007");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Submit submit0 = new Submit(xmlEntityRef0, "", "H3:+|");
      TextInput textInput0 = new TextInput(submit0, "link", "4ARig*u~k*9i");
      // Undeclared exception!
      try { 
        textInput0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.date();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "1.<-BW:K:7M-", ":wiU$:f");
      NumberInput numberInput0 = new NumberInput(submit0, "CFr:]xDztL/", "CFr:]xDztL/");
      // Undeclared exception!
      try { 
        numberInput0.em();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.nbsp();
      Table table0 = new Table(errorPage0, (String) null);
      assertTrue(table0._isGeneratedId());
      
      table0.id("java.lang.StringBuilder@0000000008");
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Form form0 = new Form("Math");
      String string0 = form0.getComponentName();
      assertEquals("Math", form0.getComponentId());
      assertEquals("Form", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.base("[uhG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = new Form(" [&6");
      Component component0 = errorPage0.strike((Object) form0);
      assertTrue(component0._isGeneratedId());
      assertEquals(" [&6", form0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Form form0 = new Form("@");
      // Undeclared exception!
      try { 
        form0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "link", "link");
      // Undeclared exception!
      try { 
        radio0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "select", "select");
      // Undeclared exception!
      try { 
        checkbox0.s((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "reserved word in assignment: ", "reserved word in assignment: ");
      // Undeclared exception!
      try { 
        fileInput0.imageSubmit("reserved word in assignment: ", "B'GxaW_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("org.mvel.conversion.ShortCH$10");
      Component component1 = component0.area((String[]) null);
      // Undeclared exception!
      try { 
        component1.wBlock("org.mvel.conversion.ShortCH$10");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.ast.StaticImportNode");
      TableBlock tableBlock0 = table0.tbody();
      Radio radio0 = new Radio(tableBlock0, "org.mvel.ast.StaticImportNode", "O");
      Component component0 = tableBlock0.legend((Object) radio0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(74);
      DateInput dateInput0 = new DateInput((Component) null, ">", ">", charBuffer0);
      MockDate mockDate0 = new MockDate(40, 6, 32, 74, 32);
      // Undeclared exception!
      try { 
        dateInput0.samp((Object) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "", "(B)Ljava/lang/Byte;");
      // Undeclared exception!
      try { 
        fileInput0.img("(B)Ljava/lang/Byte;", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("IM\"PJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "AKYP)B");
      DateInput dateInput0 = new DateInput(checkbox0, " (attr value=", "del", "AKYP)B");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("9V,");
      // Undeclared exception!
      try { 
        dateInput0.checkboxGroup("", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Form form0 = new Form("character reference (with hex value) may not contain ");
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        form0.fileInput((String) null, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Yb{<rFT/L<kx6");
      Form form0 = new Form("z'0c");
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "Yb{<rFT/L<kx6", "O-`(0rd9vbW+6L", "O-`(0rd9vbW+6L");
      // Undeclared exception!
      try { 
        form0.i((Object) dateInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "(8Xk[KgP}^ zWuI%_H", "(8Xk[KgP}^ zWuI%_H");
      // Undeclared exception!
      try { 
        checkbox0.fileInput("onclick");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(link0, "?f+/,#*", "?f+/,#*", "?f+/,#*", stringSelectModel0, false);
      ActionExpression actionExpression0 = new ActionExpression("4");
      Form form0 = new Form(select0, "?f+/,#*", actionExpression0);
      // Undeclared exception!
      try { 
        form0.title("?f+/,#*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Form form0 = new Form("W 1O=lsi(swNb");
      TextArea textArea0 = new TextArea(form0, "^>?&c,gbbREXhCoK", "^>?&c,gbbREXhCoK");
      textArea0.getAttributes();
      assertEquals("W 1O=lsi(swNb", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "B]Nima#O5XR[", "B]Nima#O5XR[");
      // Undeclared exception!
      try { 
        checkbox0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(".u1r=f;RPF2");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkbox(".u1r=f;RPF2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "x~GVaui*W;lN8", "");
      TableRow tableRow0 = new TableRow(hidden0);
      // Undeclared exception!
      try { 
        tableRow0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, " doesn't exist.", " doesn't exist.");
      Link link0 = new Link(checkbox0, errorPage0);
      TextArea textArea0 = new TextArea(link0, "'c4{7h8vV^g,j!Ws[0", "wheel.util.AbstractDateConversionHandler");
      // Undeclared exception!
      try { 
        textArea0.blockquote();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Form form0 = new Form(" does not exist.");
      Checkbox checkbox0 = new Checkbox(form0, "action", " does not exist.");
      // Undeclared exception!
      try { 
        checkbox0.strong();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "b", "b");
      // Undeclared exception!
      try { 
        submit0.ins((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.ast.StaticImportNode");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.placeholder("org.mvel.ast.StaticImportNode");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Could not redirect to '/");
      Form form0 = new Form(errorPage0, "bUxL", actionExpression0);
      TextArea textArea0 = new TextArea(form0, "wheel.components.ActionExpression@0000000009", "wheel.components.ActionExpression@0000000009");
      textArea0.fieldBinding("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("`//fH~/Pe");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "", "");
      Table table0 = new Table(textInput0, " ");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        table0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "", "/");
      // Undeclared exception!
      try { 
        checkbox0.acronym((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      Component component1 = component0.q((Object) errorPage0);
      // Undeclared exception!
      try { 
        component1.dateInput((String) null, "^&t!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "2$1;;;f@#/1Oh)>|AgE");
      Component component0 = tableBlock0.s();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.requestFocus();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Could not redirect to '/");
      Form form0 = new Form(errorPage0, "bUxL", actionExpression0);
      TextArea textArea0 = new TextArea(form0, "wheel.components.ActionExpression@0000000009", "wheel.components.ActionExpression@0000000009");
      Table table0 = new Table(textArea0, "");
      table0.dateInput((String) null, (String) null);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Form form0 = new Form("<6TI-");
      Long long0 = new Long((-332L));
      // Undeclared exception!
      try { 
        form0.sup((Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "", "");
      Table table0 = new Table(textInput0, " ");
      table0.small();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "DFm2", "DFm2");
      // Undeclared exception!
      try { 
        fileInput0.frame("DFm2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000007");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "java.lang.String@0000000007", "strong");
      // Undeclared exception!
      try { 
        xmlEntityRef0.kbd((Object) textArea0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "2}C");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = tableBlock0.samp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Form form0 = new Form("Tried to access a submit target, but no form was submitted.");
      // Undeclared exception!
      try { 
        form0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000007");
      tableBlock0.map("java.lang.String@0000000007");
      errorPage0.get("java.lang.String@0000000007");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Component component0 = errorPage0.dfn((Object) date0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder();
      Image image0 = new Image(errorPage0, stringBuilder0, stringBuilder0);
      // Undeclared exception!
      try { 
        image0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Form form0 = new Form("pre");
      Short short0 = new Short((short) (-1313));
      // Undeclared exception!
      try { 
        form0.h6((Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer();
      Select select0 = new Select(errorPage0, (String) null, (String) null, stringBuffer0, (ISelectModel) null, false);
      ElExpression elExpression0 = new ElExpression("java.lang.String@0000000012");
      RadioGroup radioGroup0 = new RadioGroup(select0, "G<WpTB0CTh*&U.p9U[", "lTA sC7VdmY:J!|s&5", (ISelectModel) null, elExpression0);
      Component component0 = radioGroup0.h2((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "}", "}");
      FileInput fileInput1 = (FileInput)fileInput0.clasS("}");
      assertEquals("input", fileInput1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "K8Uw8cuZ^g2!");
      DynamicSelectModel dynamicSelectModel0 = table0.selectModel();
      // Undeclared exception!
      try { 
        table0.multiSelect("K8Uw8cuZ^g2!", dynamicSelectModel0, "K8Uw8cuZ^g2!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Form form0 = new Form(" [&6");
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(form0, " [&6", " [&6", (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try { 
        checkboxGroup0.legend();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("SuW}B[lvMn3h5$v[+:b");
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "gEwto+74L\"W}JH/", "gEwto+74L\"W}JH/", (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1107), (Object) errorPage0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1107
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(link0, "?f+/,#*", "?f+/,#*", "?f+/,#*", stringSelectModel0, false);
      ActionExpression actionExpression0 = new ActionExpression("4");
      Form form0 = new Form(select0, "?f+/,#*", actionExpression0);
      Component component0 = form0.dt((Object) actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertFalse(form0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dd();
      Component component1 = component0.actionBinding("RW");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }
}
