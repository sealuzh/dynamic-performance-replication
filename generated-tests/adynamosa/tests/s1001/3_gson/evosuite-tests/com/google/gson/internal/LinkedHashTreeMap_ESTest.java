/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 22:44:17 GMT 2019
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node0;
      Integer integer0 = new Integer(1);
      linkedHashTreeMap0.put(integer0, "@!");
      Integer.compareUnsigned(1, 1);
      Integer.remainderUnsigned(1212, 1);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap0.put(integer0, "");
      assertEquals(1, linkedHashTreeMap0.size());
      
      Integer.compareUnsigned(1, 410);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, String>();
      Integer integer1 = new Integer((-465));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap1.keySet();
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap1.isEmpty();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("#Sv&Lfxw^b^LqeZL{G", "#Sv&Lfxw^b^LqeZL{G");
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(linkedHashTreeMap_Node3, abstractMap_SimpleImmutableEntry0, (-938), linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node4);
      linkedHashTreeMap_AvlBuilder0.reset((-6));
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node5);
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      linkedHashTreeMap_Node6.first();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node8.last();
      Integer integer0 = new Integer(410);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node9, integer0, 2184, linkedHashTreeMap_Node8, linkedHashTreeMap_Node9);
      linkedHashTreeMap_Node10.first();
      LinkedHashTreeMap<String, String> linkedHashTreeMap4 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap5 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap5.putAll(linkedHashTreeMap4);
      LinkedHashTreeMap.AvlBuilder<Object, Comparable<Object>> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, Comparable<Object>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer((-2));
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>(comparator0);
      linkedHashTreeMap0.put(integer1, "@!");
      Integer.getInteger("@!");
      Integer.compareUnsigned((-2), 1);
      Integer integer2 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node2, integer2, 16, linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, String>(comparator1);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node5, false);
      linkedHashTreeMap0.size();
      assertEquals(1, linkedHashTreeMap0.size());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>(comparator2);
      linkedHashTreeMap2.keySet();
      assertEquals(0, linkedHashTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, LinkedHashTreeMap<Integer, Object>>(comparator0);
      LinkedHashTreeMap.Node<String, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, LinkedHashTreeMap<Integer, Object>>();
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      LinkedHashTreeMap.Node<String, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap0.keySet();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 6);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>();
      Object object0 = new Object();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>(linkedHashTreeMap_Node0, object0, (-178), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.prev = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      assertSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, (-178), linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>(linkedHashTreeMap_Node3, linkedHashTreeMap_Node1, (-1781), linkedHashTreeMap_Node5, linkedHashTreeMap_Node3);
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node6;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>();
      linkedHashTreeMap_Node7.left = linkedHashTreeMap_NodeArray0[0];
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node7;
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>();
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node8;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(12, linkedHashTreeMap_NodeArray1.length);
      
      linkedHashTreeMap0.containsKey("com.google.gson.internal.LinkedHashTreeMap");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator1);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedHashTreeMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap.Node<String, Comparable<Object>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Comparable<Object>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 1);
      LinkedHashTreeMap.Node<String, Comparable<Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Comparable<Object>>();
      LinkedHashTreeMap.Node<String, Comparable<Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Comparable<Object>>[]) linkedHashTreeMap_NodeArray0);
      linkedHashTreeMap0.get("");
      linkedHashTreeMap0.size = (-227);
      linkedHashTreeMap0.size();
      assertEquals((-227), linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Comparable<Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Comparable<Object>, String>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.find(comparable0, false);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2), (-1693)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_EntrySet0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap0.keySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(1);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap2);
      assertEquals(0, linkedHashTreeMap_EntrySet1.size());
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      Integer integer1 = new Integer(608);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, String>((Comparator<? super Object>) null);
      linkedHashTreeMap4.replace((Object) integer1, (Object) linkedHashTreeMap5, (Object) integer0);
      Integer integer2 = new Integer(1);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node2, "WrPm RqDs2tX", 16, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.AvlBuilder<String, LinkedHashTreeMap<String, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, LinkedHashTreeMap<String, Object>>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap6 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      assertTrue(linkedHashTreeMap6.equals((Object)linkedHashTreeMap0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_EntrySet0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap1.modCount = (-1693);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, String>();
      Object object0 = linkedHashTreeMap_Node1.key;
      linkedHashTreeMap_EntrySet1.contains((Object) null);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator1);
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap4 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>();
      linkedHashTreeMap4.clear();
      LinkedHashTreeMap<String, String> linkedHashTreeMap5 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap6 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap6.putAll(linkedHashTreeMap5);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node2.first();
      Integer integer0 = new Integer((-1693));
      LinkedHashTreeMap<Object, String> linkedHashTreeMap7 = new LinkedHashTreeMap<Object, String>((Comparator<? super Object>) null);
      linkedHashTreeMap2.removeInternal(linkedHashTreeMap_Node2, false);
      LinkedHashTreeMap.AvlBuilder<String, LinkedHashTreeMap<String, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, LinkedHashTreeMap<String, Object>>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap8 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedHashTreeMap2.entrySet();
      assertEquals((-1), set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Comparable<Integer>, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Integer>, Integer>(comparator0);
      linkedHashTreeMap0.values();
      linkedHashTreeMap0.keySet();
      linkedHashTreeMap0.size();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Integer>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Integer>, String>(comparator1);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>(comparator2);
      linkedHashTreeMap3.entrySet();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap3.replaceAll(biFunction0);
      linkedHashTreeMap2.putAll(linkedHashTreeMap3);
      linkedHashTreeMap1.get(linkedHashTreeMap2);
      LinkedHashTreeMap<Object, Comparable<String>> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, Comparable<String>>();
      linkedHashTreeMap4.size = 4;
      linkedHashTreeMap4.entrySet();
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap.Node<Object, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, String>[]) linkedHashTreeMap_NodeArray0);
      Comparator<Object> comparator3 = null;
      LinkedHashTreeMap<Comparable<String>, String> linkedHashTreeMap5 = new LinkedHashTreeMap<Comparable<String>, String>((Comparator<? super Comparable<String>>) null);
      // Undeclared exception!
      try { 
        linkedHashTreeMap5.put((Comparable<String>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.putIfAbsent("", "?FE5P]jW");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>(linkedHashTreeMap_Node0, "", 16, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.retainAll(linkedHashTreeMap_EntrySet0);
      Integer integer0 = new Integer(16);
      linkedHashTreeMap_EntrySet2.contains(linkedHashTreeMap_NodeArray0[1]);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator1);
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap4 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet3 = linkedHashTreeMap3.new EntrySet();
      linkedHashTreeMap_EntrySet3.remove(linkedHashTreeMap3);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap6 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(comparator2);
      linkedHashTreeMap6.clear();
      linkedHashTreeMap4.clear();
      linkedHashTreeMap0.clear();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      linkedHashTreeMap_Node0.last();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_EntrySet0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(1);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap2);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap3);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      Integer integer1 = new Integer(608);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, String>((Comparator<? super Object>) null);
      Integer integer2 = new Integer(608);
      linkedHashTreeMap4.replace((Object) integer1, (Object) linkedHashTreeMap5, (Object) integer2);
      Integer integer3 = new Integer(1);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node2, "WrPm RqDs2tX", 16, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      // Undeclared exception!
      try { 
        linkedHashTreeMap4.removeInternal(linkedHashTreeMap_Node4, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node1.first();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node1);
      assertFalse(boolean0);
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      linkedHashTreeMap1.keySet();
      Set<Integer> set0 = linkedHashTreeMap1.keySet();
      assertNotNull(set0);
      
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap2.clear();
      assertEquals(0, linkedHashTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      linkedHashTreeMap_Node0.last();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_EntrySet0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(1);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap2);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap3);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap4 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator2);
      linkedHashTreeMap4.clear();
      LinkedHashTreeMap<String, String> linkedHashTreeMap5 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap6 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap5.putAll(linkedHashTreeMap6);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap7 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap6.new EntrySet();
      linkedHashTreeMap_EntrySet2.remove(linkedHashTreeMap_Node0);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap8 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(comparator3);
      linkedHashTreeMap8.clear();
      linkedHashTreeMap5.putAll(linkedHashTreeMap6);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap9 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet3 = linkedHashTreeMap3.new EntrySet();
      linkedHashTreeMap_EntrySet2.remove(linkedHashTreeMap0);
      //  // Unstable assertion: assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap10 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>((Comparator<? super Object>) null);
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap11 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      linkedHashTreeMap11.clear();
      //  // Unstable assertion: assertTrue(linkedHashTreeMap11.equals((Object)linkedHashTreeMap10));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      linkedHashTreeMap_Node0.last();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      linkedHashTreeMap0.putIfAbsent("#Sv&Lfxw^b^LqeZL{G", linkedHashTreeMap_EntrySet0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(1);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap2);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap3);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap4 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator2);
      linkedHashTreeMap4.clear();
      LinkedHashTreeMap<String, String> linkedHashTreeMap5 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap6 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap5.putAll(linkedHashTreeMap6);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap7 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap6.new EntrySet();
      linkedHashTreeMap_EntrySet2.remove(linkedHashTreeMap_Node0);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap8 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(comparator3);
      linkedHashTreeMap8.clear();
      LinkedHashTreeMap.AvlBuilder<Object, Comparable<Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Comparable<Object>>();
      linkedHashTreeMap_AvlBuilder0.reset(1);
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap9 = new LinkedHashTreeMap<Integer, String>(comparator4);
      linkedHashTreeMap9.keySet();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.putIfAbsent("", "?FE5P]jW");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashTreeMap_EntrySet0);
      linkedHashTreeMap_EntrySet0.retainAll(linkedList0);
      linkedHashTreeMap_EntrySet0.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>(linkedHashTreeMap_Node0, "", 1, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.first();
      linkedHashTreeMap_Node6.last();
      linkedHashTreeMap_Node6.equals(linkedHashTreeMap_EntrySet1);
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap<Object, Comparable<Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Comparable<Object>>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node0.setValue(" ");
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", 142, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(linkedHashTreeMap_Node1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, LinkedHashTreeMap<Object, Object>>();
      String string0 = null;
      Integer.getInteger((String) null);
      LinkedHashTreeMap.Node<Object, Comparable<Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Comparable<Object>>();
      linkedHashTreeMap_Node2.getKey();
      linkedHashTreeMap2.containsKey((Object) null);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node1, "com.google.gson.internal.LinkedHashTreeMap$AvlIterator", (-3131), linkedHashTreeMap_Node0, linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node5.setValue((String) null);
      linkedHashTreeMap_Node5.equals(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap<Object, Comparable<Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Comparable<Object>>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      int int0 = (-2925);
      linkedHashTreeMap_Node0.setValue("");
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", (-2925), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(linkedHashTreeMap_Node1);
      linkedHashTreeMap1.findByEntry(abstractMap_SimpleEntry0);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, LinkedHashTreeMap<Object, Object>>();
      Integer.getInteger("");
      linkedHashTreeMap_Node1.parent = linkedHashTreeMap_Node0;
      linkedHashTreeMap2.containsKey((Object) null);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", (-2925), linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node2.setValue("");
      linkedHashTreeMap_Node2.equals(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>(comparator0);
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>(comparator2);
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Integer.getInteger(")bL[");
      Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("com.google.gson.internal.LinkedHashTreeMap$KeySet", object0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>(linkedHashTreeMap_Node4, abstractMap_SimpleEntry0, 1397, linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.first();
      linkedHashTreeMap_Node6.equals(linkedHashTreeMap_Node5);
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Object>();
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, String>>(comparator3);
      linkedHashTreeMap2.keySet();
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator4);
      linkedHashTreeMap3.clear();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<Integer, Object>();
      linkedHashTreeMap4.keySet();
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap5 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node8 = linkedHashTreeMap5.findByObject(object0);
      assertNull(linkedHashTreeMap_Node8);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>(comparator0);
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Integer integer0 = new Integer((-1053));
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>(comparator2);
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Integer.getInteger(")bL[");
      Integer integer1 = new Integer((-1053));
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>(linkedHashTreeMap_Node1, integer1, 442, linkedHashTreeMap_Node3, linkedHashTreeMap_Node1);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>(comparator3);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.first();
      Integer integer2 = new Integer((-1053));
      linkedHashTreeMap2.replace((Object) integer1, (Object) integer2, (Object) linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node6, "WrPm RqDs2tX", (-1222), linkedHashTreeMap_Node6, linkedHashTreeMap_Node5);
      linkedHashTreeMap_Node7.right = linkedHashTreeMap_Node5;
      // Undeclared exception!
      try { 
        linkedHashTreeMap2.removeInternal(linkedHashTreeMap_Node7, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("KT93").when(comparator0).toString();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      linkedHashTreeMap_Node1.getKey();
      Object object0 = new Object();
      LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(comparator0);
      linkedHashTreeMap0.size();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(comparator0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>(linkedHashTreeMap_Node2, abstractMap_SimpleEntry0, 16, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>();
      boolean boolean0 = linkedHashTreeMap_Node4.equals(abstractMap_SimpleEntry0);
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, String>>(comparator1);
      Set<AbstractMap.SimpleEntry<Integer, Object>> set0 = linkedHashTreeMap1.keySet();
      assertNotNull(set0);
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator2);
      linkedHashTreeMap2.clear();
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap4 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap4.putAll(linkedHashTreeMap3);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap3.new EntrySet();
      boolean boolean1 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap4);
      assertTrue(boolean1 == boolean0);
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap6 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(comparator3);
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap7 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(comparator4);
      linkedHashTreeMap7.clear();
      assertEquals(0, linkedHashTreeMap7.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("", true);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>(comparator1);
      linkedHashTreeMap0.getOrDefault(linkedHashTreeMap2, ";{w\"v&");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", linkedHashTreeMap_Node0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
      linkedHashTreeMap0.replace("", "");
      Integer integer0 = new Integer(4);
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.put(abstractMap_SimpleImmutableEntry0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Function<String, String> function0 = Function.identity();
      linkedHashTreeMap0.computeIfAbsent("", function0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_KeySet0.parallelStream();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replace("", ";/UR+o\"", ";/UR+o\"");
      linkedHashTreeMap1.threshold = 0;
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.merge(";/UR+o\"", "", biFunction1);
      Integer integer0 = Integer.getInteger("llsV5}y", 12);
      BiFunction<Object, Object, String> biFunction2 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.merge(integer0, "", biFunction2);
      linkedHashTreeMap1.computeIfPresent(";/UR+o\"", biFunction0);
      boolean boolean0 = linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap1);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(linkedHashTreeMap_Node0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>(comparator2);
      Integer integer1 = new Integer(24);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>((String) null, integer1);
      linkedHashTreeMap3.put("", abstractMap_SimpleImmutableEntry0);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, Object>(comparator3);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_Node2.getValue();
      boolean boolean1 = linkedHashTreeMap_EntrySet0.remove((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node1.getKey();
      Object object0 = new Object();
      LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(comparator0);
      linkedHashTreeMap0.size();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(comparator0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object>(linkedHashTreeMap_Node2, abstractMap_SimpleEntry0, 16, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      boolean boolean0 = linkedHashTreeMap_Node4.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, String>>(comparator1);
      linkedHashTreeMap1.keySet();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator2);
      linkedHashTreeMap2.clear();
      assertEquals(0, linkedHashTreeMap2.size());
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, Object>();
      linkedHashTreeMap3.keySet();
      assertEquals(0, linkedHashTreeMap3.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_Node2.equals((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.find("com.google.gson.internal.LinkedHashTreeMap$KeySet", false);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>(comparator1);
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Integer.getInteger(")bL[");
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>(linkedHashTreeMap_Node4, (Integer) null, (-1222), linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node5, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.remove(linkedHashTreeMap_EntrySet0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<String, Object>>(comparator1);
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.next;
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node1, false);
      assertEquals((-1), linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Object>>();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, LinkedHashTreeMap<String, Object>>(comparator0);
      linkedHashTreeMap0.size();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator1);
      linkedHashTreeMap1.entrySet();
      linkedHashTreeMap1.entrySet();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      try { 
        Integer.valueOf("Ka%{^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ka%{^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      boolean boolean0 = linkedHashTreeMap_Node2.equals((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean1 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      Set<Integer> set0 = linkedHashTreeMap1.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(linkedHashTreeMap_Node0, (Integer) null, (-2115), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_Node3.last();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>(comparator0);
      linkedHashTreeMap0.containsKey(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.first();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node6.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node7;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) linkedHashTreeMap_NodeArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Integer>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Integer>, Object>(comparator2);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node5);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>(comparator3);
      // Undeclared exception!
      try { 
        linkedHashTreeMap2.put((Object) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.putIfAbsent("", "?FE5P]jW");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>(linkedHashTreeMap_Node0, "", 1, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.retainAll(linkedHashTreeMap_EntrySet0);
      Integer integer0 = new Integer(1);
      linkedHashTreeMap_EntrySet2.contains(linkedHashTreeMap_NodeArray0[1]);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Integer>(comparator1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      Object object0 = linkedHashTreeMap_Node4.value;
      linkedHashTreeMap3.containsKey((Object) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap2.new KeySet();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap4);
      LinkedHashTreeMap.AvlIterator<Integer, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Integer, LinkedHashTreeMap<Integer, Object>>();
      linkedHashTreeMap_KeySet0.remove("");
      LinkedHashTreeMap.AvlBuilder<Object, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, LinkedHashTreeMap<Object, Object>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>>();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<String, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      boolean boolean0 = linkedHashTreeMap_Node2.equals((Object) null);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node2);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>(comparator1);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>();
      Integer integer0 = new Integer(0);
      linkedHashTreeMap1.findByObject((Object) null);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Function<String, String> function0 = Function.identity();
      linkedHashTreeMap0.computeIfAbsent("", function0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_KeySet0.parallelStream();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      linkedHashTreeMap1.remove((Object) linkedHashTreeMap0);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      linkedHashTreeMap2.containsKey(function0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>(comparator2);
      linkedHashTreeMap3.find("", false);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap2.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(function0);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(linkedHashTreeMap0, "");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Object> linkedHashTreeMap5 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        linkedHashTreeMap5.put(abstractMap_SimpleEntry2, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleEntry is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Function<String, String> function0 = Function.identity();
      linkedHashTreeMap0.computeIfAbsent("", function0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replace("", ";/UR+o\"", ";/UR+o\"");
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<Integer, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<Integer, Integer>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<Integer, Integer>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<Integer, Integer>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<Integer, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<Integer, Integer>>[]) linkedHashTreeMap_NodeArray0);
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>(comparator0);
      linkedHashTreeMap0.remove((Object) "j6t!/NHk-4 oU/}", (Object) "j6t!/NHk-4 oU/}");
      linkedHashTreeMap0.entrySet();
      linkedHashTreeMap0.keySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>(comparator2);
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap2);
      Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>(comparator3);
      linkedHashTreeMap3.containsValue(linkedHashTreeMap1);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = linkedHashTreeMap1.find(linkedHashTreeMap3, true);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap1.get(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, String>(linkedHashTreeMap_Node1, linkedHashTreeMap_Node1, 3, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node2.last();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap3);
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_AvlIterator0.next();
      assertNull(linkedHashTreeMap_Node3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>(comparator1);
      linkedHashTreeMap0.findByObject(linkedHashTreeMap1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>(comparator2);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap2.computeIfPresent((Object) null, biFunction0);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap3 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Integer integer0 = new Integer(4);
      boolean boolean0 = linkedHashTreeMap_KeySet0.contains(integer0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.putIfAbsent("?FE5P]jW", "?FE5P]jW");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(1);
      linkedHashTreeMap_EntrySet1.contains(integer0);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap0.removeInternalByKey("?FE5P]jW");
      linkedHashTreeMap2.containsKey(integer0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap2);
      LinkedHashTreeMap.AvlIterator<Integer, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Integer, LinkedHashTreeMap<Integer, Object>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_Node0 = linkedHashTreeMap_AvlIterator0.next();
      assertNull(linkedHashTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.putIfAbsent("?FE5P]jW", "?FE5P]jW");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(1);
      linkedHashTreeMap_EntrySet1.contains(integer0);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap2.containsKey(integer0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap2);
      LinkedHashTreeMap.AvlIterator<Integer, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Integer, LinkedHashTreeMap<Integer, Object>>();
      linkedHashTreeMap_KeySet0.remove("?FE5P]jW");
      LinkedHashTreeMap.AvlBuilder<Object, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, LinkedHashTreeMap<Object, Object>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.putIfAbsent("?FE5P]jW", "?FE5P]jW");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet2.contains(linkedHashTreeMap_EntrySet1);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove(integer0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<String, Object>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<LinkedHashTreeMap<String, Object>, Object>(comparator1);
      linkedHashTreeMap2.keySet();
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      linkedHashTreeMap_Node0.last();
      Integer integer1 = new Integer(2);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer1, linkedHashTreeMap_EntrySet1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(linkedHashTreeMap_Node0, abstractMap_SimpleImmutableEntry0, (-2), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node2);
      LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedHashTreeMap3 = new LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap3.find((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Function<String, String> function0 = Function.identity();
      linkedHashTreeMap0.computeIfAbsent("", function0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      linkedHashTreeMap2.remove((Object) linkedHashTreeMap_KeySet0);
      linkedHashTreeMap1.removeInternalByKey((Object) null);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node2, "com.google.gson.internal.LinkedHashTreeMap$AvlIterator", (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node2, "A", (-1), linkedHashTreeMap_Node3, linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node2.equals("");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, Object>(comparator1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      Object object0 = linkedHashTreeMap_Node5.value;
      linkedHashTreeMap3.findByObject((Object) null);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      linkedHashTreeMap4.get(linkedHashTreeMap_Node2);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap5 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) null);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = linkedHashTreeMap5.remove((Object) null);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      linkedHashTreeMap1.clear();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 8);
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.first();
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node6;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 4588, linkedHashTreeMap_Node7, linkedHashTreeMap_Node6);
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node8;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node6.last();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>(linkedHashTreeMap_Node9, linkedHashTreeMap0, 4588, linkedHashTreeMap_Node7, linkedHashTreeMap_Node1);
      assertFalse(linkedHashTreeMap_Node1.equals((Object)linkedHashTreeMap_Node8));
      
      linkedHashTreeMap_NodeArray0[6] = linkedHashTreeMap_Node10;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node11 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[7] = linkedHashTreeMap_Node11;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(16, linkedHashTreeMap_NodeArray1.length);
      
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node12 = linkedHashTreeMap2.removeInternalByKey(linkedHashTreeMap_Node9);
      assertNull(linkedHashTreeMap_Node12);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node13 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node14 = linkedHashTreeMap_Node13.last();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node15 = linkedHashTreeMap_Node14.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node16 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node14, (String) null, 4588, linkedHashTreeMap_Node14, linkedHashTreeMap_Node15);
      linkedHashTreeMap_Node16.equals(linkedHashTreeMap_Node14);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Object>, Object>(comparator1);
      linkedHashTreeMap3.findByObject(linkedHashTreeMap_Node5);
      assertEquals(0, linkedHashTreeMap3.size());
      assertSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node11);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Function<String, String> function0 = Function.identity();
      linkedHashTreeMap0.computeIfAbsent("", function0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_KeySet0.parallelStream();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replace("", ";/UR+o\"", ";/UR+o\"");
      linkedHashTreeMap1.threshold = 0;
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap1);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      Object object0 = linkedHashTreeMap0.putIfAbsent("?FE5P]jW", "?FE5P]jW");
      assertNull(object0);
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(1, int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      boolean boolean0 = linkedHashTreeMap2.containsKey((Object) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap3.new KeySet();
      boolean boolean1 = linkedHashTreeMap_KeySet1.remove(linkedHashTreeMap_EntrySet0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Function<String, String> function0 = Function.identity();
      linkedHashTreeMap0.computeIfAbsent("", function0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_KeySet0.parallelStream();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replace("", ";/UR+o\"", ";/UR+o\"");
      linkedHashTreeMap1.threshold = 0;
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.merge(";/UR+o\"", "", biFunction1);
      linkedHashTreeMap1.computeIfPresent(";/UR+o\"", biFunction0);
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap1);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap_Node1 = null;
      try {
        linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String>((LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String>) null, abstractMap_SimpleEntry0, 0, (LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String>) null, (LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, String>(comparator1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, linkedHashTreeMap2, 529, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_Node2.getValue();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) null, "com.google.gson.internal.LinkedHashTreeMap$KeySet$1");
      Map.Entry.comparingByValue();
      linkedHashTreeMap1.findByEntry(abstractMap_SimpleImmutableEntry0);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      linkedHashTreeMap_Node5.getValue();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>(comparator2);
      linkedHashTreeMap3.findByEntry(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap4.size();
      LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap5.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Function<String, String> function0 = Function.identity();
      linkedHashTreeMap0.computeIfAbsent("", function0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_KeySet0.parallelStream();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>((Comparator<? super Object>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(181);
      linkedHashTreeMap_EntrySet1.contains("");
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap4 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap4.containsKey(linkedHashTreeMap5);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet2 = linkedHashTreeMap3.new KeySet();
      linkedHashTreeMap_KeySet2.remove("");
      LinkedHashTreeMap<LinkedHashTreeMap<String, Object>, Object> linkedHashTreeMap6 = new LinkedHashTreeMap<LinkedHashTreeMap<String, Object>, Object>((Comparator<? super LinkedHashTreeMap<String, Object>>) null);
      linkedHashTreeMap6.keySet();
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      Integer integer1 = new Integer(1820);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer1, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(linkedHashTreeMap_Node1, abstractMap_SimpleImmutableEntry0, 711, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node3);
      assertFalse(linkedHashTreeMap_Node1.equals((Object)linkedHashTreeMap_Node3));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.retainAll(linkedHashTreeMap_EntrySet0);
      LinkedHashTreeMap.Node<Integer, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 5);
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Object>(linkedHashTreeMap_Node0, (Integer) null, (-441), linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>(comparator2);
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap2.header;
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Integer, Object>(linkedHashTreeMap_Node2, (Integer) null, 4, linkedHashTreeMap_Node4, linkedHashTreeMap_Node1);
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap2.header;
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node6;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Integer, Object>[]) linkedHashTreeMap_NodeArray0);
      Integer integer0 = new Integer((-441));
      linkedHashTreeMap_EntrySet0.contains("7H,]2EWDm");
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Integer>();
      Integer integer1 = new Integer((-1368));
      linkedHashTreeMap3.containsKey(integer1);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.computeIfPresent("", biFunction0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.iterator();
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<Integer, Object>>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<Integer, Object>> linkedHashTreeMap_Node0 = linkedHashTreeMap1.removeInternalByKey("");
      assertNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 9);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>(linkedHashTreeMap_Node4, (AbstractMap.SimpleEntry<String, String>) null, (-1907), linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node6;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node4.last();
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node7;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node3.first();
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node8;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node9 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>(linkedHashTreeMap_Node8, (AbstractMap.SimpleEntry<String, String>) null, (-1907), linkedHashTreeMap_Node2, linkedHashTreeMap_NodeArray0[5]);
      linkedHashTreeMap_NodeArray0[6] = linkedHashTreeMap_Node9;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node10 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[7] = linkedHashTreeMap_Node10;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer> linkedHashTreeMap_Node11 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>(linkedHashTreeMap_Node2, (AbstractMap.SimpleEntry<String, String>) null, (-1), linkedHashTreeMap_Node1, linkedHashTreeMap_Node10);
      linkedHashTreeMap_NodeArray0[8] = linkedHashTreeMap_Node11;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, Integer>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(18, linkedHashTreeMap_NodeArray1.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedHashTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.put(abstractMap_SimpleImmutableEntry0, linkedHashTreeMap_Node0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashTreeMap<String, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, AbstractMap.SimpleEntry<String, Object>>();
      String string0 = null;
      linkedHashTreeMap0.get((Object) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove((Object) null);
      LinkedHashTreeMap.Node<String, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Object>[]) linkedHashTreeMap_NodeArray0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.put((String) null, (AbstractMap.SimpleEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      linkedHashTreeMap0.table = null;
      Set<Integer> set0 = linkedHashTreeMap0.keySet();
      assertNotNull(set0);
      
      linkedHashTreeMap0.findByObject((Object) null);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, linkedHashTreeMap1, 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.last();
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.putIfAbsent("?FE5P]jW", "?FE5P]jW");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_EntrySet1);
      Integer integer0 = new Integer(1);
      linkedHashTreeMap_EntrySet1.contains(integer0);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap2.containsKey(integer0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap2);
      assertEquals(1, linkedHashTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<String, Object>, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<String, Object>, String>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, Object>, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, Object>, String>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, Object>, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      String string0 = "_H*C =T:-|mS?";
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("_H*C =T:-|mS?", linkedHashTreeMap_AvlBuilder0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      int int0 = 1933;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, Object>, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, Object>, String>(linkedHashTreeMap_Node1, abstractMap_SimpleEntry0, 1933, linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node2.left = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, Object>, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<Integer, Object>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<Integer, Object>>();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.size();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node5, abstractMap_SimpleImmutableEntry0, 1, linkedHashTreeMap_Node5, linkedHashTreeMap_Node5);
      Object object0 = linkedHashTreeMap_Node6.value;
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>("jUP.", (Object) null);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add(abstractMap_SimpleEntry1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      int int0 = 1504;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, String>(linkedHashTreeMap_Node0, linkedHashTreeMap0, 1504, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node1;
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      Map.Entry.comparingByValue();
      linkedHashTreeMap_Node2.getValue();
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Object, String>, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      linkedHashTreeMap_AvlBuilder0.reset(564);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap1.values();
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.find(linkedHashTreeMap_Node0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$Node is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.reset((LinkedHashTreeMap.Node<Object, Integer>) null);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.iterator();
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlIterator1.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_AvlIterator1.reset(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_AvlIterator1.next();
      assertNotNull(linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlIterator1.next();
      assertNull(linkedHashTreeMap_Node4);
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, String>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node5);
      LinkedHashTreeMap<LinkedHashTreeMap<Integer, String>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<LinkedHashTreeMap<Integer, String>, Object>((Comparator<? super LinkedHashTreeMap<Integer, String>>) null);
      linkedHashTreeMap1.entrySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap1.new KeySet();
      int int0 = linkedHashTreeMap_KeySet1.size();
      assertEquals(0, int0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap2.new EntrySet();
      linkedHashTreeMap_EntrySet1.contains((Object) null);
      assertEquals(0, linkedHashTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>(comparator0);
      int int0 = 0;
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.find(integer0, false);
      HashMap<Integer, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, Integer>((-1), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.reset((LinkedHashTreeMap.Node<Object, Integer>) null);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<String, String>, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.iterator();
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlIterator1.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_AvlIterator1.reset(linkedHashTreeMap_Node2);
      linkedHashTreeMap_AvlIterator1.next();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_AvlIterator1.next();
      assertNull(linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, String>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(0, linkedHashTreeMap_NodeArray1.length);
      
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.reset((-2946));
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<LinkedHashTreeMap<Integer, String>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<LinkedHashTreeMap<Integer, String>, Object>((Comparator<? super LinkedHashTreeMap<Integer, String>>) null);
      linkedHashTreeMap1.entrySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap1.new KeySet();
      int int0 = linkedHashTreeMap_KeySet1.size();
      assertEquals(0, int0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap2.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet1.contains((Object) null);
      assertFalse(boolean0);
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet2.remove(linkedHashTreeMap_EntrySet0);
      LinkedHashTreeMap<String, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap3 = new LinkedHashTreeMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      linkedHashTreeMap3.findByObject((Object) null);
      assertEquals(0, linkedHashTreeMap3.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.comparator = comparator1;
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 6);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>(linkedHashTreeMap_Node2, linkedHashTreeMap1, (-5252), linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>(linkedHashTreeMap_Node2, (Object) null, (-5252), linkedHashTreeMap_Node1, linkedHashTreeMap_NodeArray0[2]);
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node6;
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>(linkedHashTreeMap_Node5, integer0, (-2), linkedHashTreeMap_NodeArray0[2], linkedHashTreeMap_NodeArray0[1]);
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node7;
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>(linkedHashTreeMap_Node7, linkedHashTreeMap_NodeArray0[1], 1260, linkedHashTreeMap_Node7, linkedHashTreeMap_Node3);
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node8;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<LinkedHashTreeMap<Object, Object>, Object>>[]) linkedHashTreeMap_NodeArray0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_EntrySet0.add((Map.Entry<Integer, LinkedHashTreeMap<Object, Object>>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>(comparator0);
      Integer integer0 = new Integer(551);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge(integer0, integer0, biFunction0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, AbstractMap.SimpleEntry<String, String>> linkedHashTreeMap1 = new LinkedHashTreeMap<String, AbstractMap.SimpleEntry<String, String>>(comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>(comparator2);
      linkedHashTreeMap1.get(linkedHashTreeMap2);
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      linkedHashTreeMap_Node0.getKey();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Object>();
      Object object0 = linkedHashTreeMap3.put("", "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, String>(comparator1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, linkedHashTreeMap2, 529, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_Node2.getValue();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) null, "com.google.gson.internal.LinkedHashTreeMap$KeySet$1");
      linkedHashTreeMap1.findByEntry(abstractMap_SimpleImmutableEntry0);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node5, linkedHashTreeMap_Node4, 0, linkedHashTreeMap_Node5, linkedHashTreeMap_Node3);
      Integer integer0 = linkedHashTreeMap_Node6.getValue();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, 1459, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      assertNotNull(linkedHashTreeMap_Node3);
      
      Object object0 = linkedHashTreeMap_Node3.getKey();
      assertNotNull(object0);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap0.threshold = 0;
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.remove(linkedHashTreeMap_EntrySet0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap1);
      LinkedHashTreeMap.AvlBuilder<Integer, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, Integer>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, LinkedHashTreeMap<Object, Object>>();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      Comparator<Object> comparator0 = null;
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.contains((Object) null);
      LinkedHashTreeMap.AvlIterator<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<String, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      String string0 = "+old.bS-R2\\to3";
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>>(linkedHashTreeMap_Node1, "+old.bS-R2\to3", 0, linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node2.parent = linkedHashTreeMap_Node1;
      linkedHashTreeMap_AvlIterator1.reset(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator2 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      linkedHashTreeMap_AvlIterator2.next();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal((LinkedHashTreeMap.Node<String, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, String>, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, String>, LinkedHashTreeMap<Object, Object>>(comparator0);
      linkedHashTreeMap0.size();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = null;
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedHashTreeMap1.compute(integer0, biFunction0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.removeInternal((LinkedHashTreeMap.Node<Integer, Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node2);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.iterator();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
      LinkedHashTreeMap.AvlIterator<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<String, Object>>();
      linkedHashTreeMap_AvlIterator1.next();
      linkedHashTreeMap_AvlIterator1.next();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet1.iterator();
      LinkedHashTreeMap.AvlBuilder<Integer, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, Integer>();
      linkedHashTreeMap_AvlBuilder0.reset((-285));
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet2 = linkedHashTreeMap1.new KeySet();
      linkedHashTreeMap_KeySet2.clear();
      assertEquals(0, linkedHashTreeMap_KeySet2.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      Integer integer0 = new Integer(1954);
      linkedHashTreeMap0.get(integer0);
      linkedHashTreeMap0.threshold = 0;
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleImmutableEntry<Object, String>>();
      String string0 = "";
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleImmutableEntry<Object, String>>(linkedHashTreeMap_Node0, "", 1954, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_EntrySet0.add(linkedHashTreeMap_Node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }
}
