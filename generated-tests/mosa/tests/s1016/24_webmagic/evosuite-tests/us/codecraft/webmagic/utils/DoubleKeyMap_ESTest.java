/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:34:38 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, "=.t8L-");
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.remove("");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(object0, (Map<Integer, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, "~E\"Y&<8novD*G");
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      HashMap<String, Map<String, String>> hashMap2 = new HashMap<String, Map<String, String>>();
      Class<Map> class0 = Map.class;
      HashMap<String, Map<Integer, Object>> hashMap3 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>(hashMap3, class0);
      Integer integer0 = new Integer(476);
      Object object0 = doubleKeyMap1.get("", integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, "=.t8L-");
      DoubleKeyMap<Object, Object, Map<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Integer, Integer>>();
      Object object0 = new Object();
      doubleKeyMap1.remove((Object) null, object0);
      String string0 = doubleKeyMap0.put((Map<Integer, Integer>) hashMap0, "=.t8L-", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put((Map<Integer, Integer>) hashMap0, "", "");
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put((Map<Integer, Integer>) hashMap1, "", "");
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.remove((Map<Integer, Integer>) hashMap2, "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>();
      doubleKeyMap1.remove((Map<Integer, Integer>) hashMap0, "=.t8L-");
      HashMap<Map<Integer, Integer>, Map<Object, Integer>> hashMap1 = new HashMap<Map<Integer, Integer>, Map<Object, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap2.newMap();
      hashMap1.put(hashMap0, map0);
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>(hashMap1);
      doubleKeyMap3.get((Map<Integer, Integer>) hashMap0, (Object) doubleKeyMap2);
      DoubleKeyMap<Integer, Object, Map<Integer, Integer>> doubleKeyMap4 = new DoubleKeyMap<Integer, Object, Map<Integer, Integer>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      HashMap<Integer, Map<Object, Map<Integer, Integer>>> hashMap2 = new HashMap<Integer, Map<Object, Map<Integer, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Map<Integer, Integer>> doubleKeyMap5 = new DoubleKeyMap<Integer, Object, Map<Integer, Integer>>(hashMap2, class0);
      Map<Integer, Integer> map1 = new HashMap<Integer, Integer>();
      Class<Map> class1 = Map.class;
      Class<Map> class2 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap6 = null;
      try {
        doubleKeyMap6 = new DoubleKeyMap<Object, String, Object>(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put((Map<Integer, Integer>) hashMap0, "", "");
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.remove((Map<Integer, Integer>) hashMap1, "5W*E8ky1hqqrSgj");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
