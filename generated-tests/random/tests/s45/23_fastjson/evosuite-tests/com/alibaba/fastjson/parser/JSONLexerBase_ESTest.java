/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:03:30 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.StringReader;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("goah");
      SymbolTable symbolTable0 = new SymbolTable(97);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      long long0 = jSONScanner0.longValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(61846L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "d6Lf[HTyJ;e.C[\\";
      JSONScanner jSONScanner0 = new JSONScanner("d6Lf[HTyJ;e.C[", 39);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CustomMapDeserializer");
      jSONScanner0.putChar('k');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1061);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanFloat('U');
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      charArray0[8] = 'U';
      jSONScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'I';
      charArray1[1] = 'I';
      charArray1[2] = 'I';
      charArray1[3] = 'I';
      jSONScanner0.scanFieldDecimal(charArray1);
      jSONScanner0.ch = 'Y';
      jSONScanner0.scanString('I');
      jSONScanner0.scanEnum(class0, (SymbolTable) null, ';');
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cus\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Unknown", 125);
      jSONScanner0.isEnabled(125);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CustomMapDeserializer");
      jSONScanner0.putChar('k');
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFloat('U');
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      charArray0[8] = 'U';
      jSONScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'I';
      charArray1[1] = 'I';
      charArray1[2] = 'I';
      charArray1[3] = 'I';
      jSONScanner0.scanFieldDecimal(charArray1);
      jSONScanner0.ch = 'Y';
      assertEquals((-2), jSONScanner0.matchStat());
      
      jSONScanner0.scanString('I');
      jSONScanner0.scanEnum(class0, (SymbolTable) null, ';');
      jSONScanner0.integerValue();
      Locale locale0 = Locale.forLanguageTag("o5$");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONScanner0.scanStringArray(set0, '4');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9T9GB", 1591);
      char char0 = 'd';
      char char1 = '(';
      jSONScanner0.intValue();
      char char2 = ';';
      char char3 = 'Q';
      jSONScanner0.scanDecimal('Q');
      char char4 = '';
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('W', 'd', '(', ';', '(', '');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 41;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteNullStringAsEmpty", 41);
      jSONReaderScanner0.token = 41;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = '`';
      int int1 = 26;
      jSONReaderScanner0.indexOf('`', 26);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.token = (-1143);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.ch = '`';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.subString(41, 41);
      jSONReaderScanner0.next();
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('`', (-1095));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k{\"/g?35-Fqq", (-1432352094));
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      String string0 = jSONScanner0.stringVal();
      assertEquals("{", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'n';
      charArray0[0] = 'n';
      char char1 = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'P';
      char char2 = 'd';
      charArray0[3] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 635);
      jSONReaderScanner0.scanString('P');
      int int0 = 72;
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.eofPos = 635;
      SymbolTable symbolTable0 = new SymbolTable(635);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1786, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O*k/x>IK!{jVsLk", 2357);
      Locale locale0 = Locale.JAPAN;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanBoolean('*');
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = 'E';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanBoolean('H');
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 1052);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "2*>KaJ+`qj";
      JSONScanner jSONScanner0 = new JSONScanner("2*>KaJ+`qj");
      jSONScanner0.skipComment();
      char char0 = '6';
      char char1 = '6';
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 92;
      JSONScanner jSONScanner0 = new JSONScanner(" \"SS6gsf", 92);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('.');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.scanNumber();
      jSONScanner0.pos();
      jSONScanner0.putChar('U');
      int int0 = 626;
      int int1 = 127;
      int int2 = 1069;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "Set", 49, 49, 626, 8, 626, 626, 127, 626, 1069);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 49
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 256;
      JSONScanner jSONScanner0 = new JSONScanner("t", 256);
      jSONScanner0.stringDefaultValue = "t";
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".I");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      jSONReaderScanner0.next();
      jSONReaderScanner0.ch = 'B';
      jSONReaderScanner0.scanIdent();
      charArray0[1] = '7';
      charArray0[2] = '(';
      jSONReaderScanner0.longValue();
      charArray0[3] = 'c';
      charArray0[4] = '\'';
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0J-3:Ao_%");
      jSONScanner0.scanType("0J-3:Ao_%");
      jSONScanner0.scanBoolean('1');
      jSONScanner0.scanType("0J-3:Ao_%");
      char[] charArray0 = new char[4];
      char char0 = '*';
      jSONScanner0.scanBoolean('O');
      charArray0[0] = '*';
      char char1 = '';
      charArray0[1] = '';
      charArray0[2] = ',';
      charArray0[3] = '1';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nt.v6o*)A9ej5Q", 41);
      char char0 = '\'';
      jSONReaderScanner0.ch = '\'';
      jSONReaderScanner0.scanNumber();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      jSONReaderScanner0.scanFieldInt(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(95);
      char char1 = '3';
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '3');
      char[] charArray1 = new char[3];
      charArray1[0] = '\'';
      charArray1[1] = '\'';
      charArray1[2] = '\'';
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      jSONReaderScanner0.scanLong('\'');
      int int0 = 95;
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "'s\"i+~p0KY]>,%!";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'s\"i+~p0KY]>,%!", 20);
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'n';
      jSONReaderScanner0.scanDouble('n');
      charArray0[2] = 'M';
      charArray0[3] = '6';
      jSONReaderScanner0.charAt(20);
      charArray0[4] = '\"';
      charArray0[5] = '^';
      charArray0[6] = '/';
      charArray0[7] = '\\';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.DefaultJSONParser", 24180);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[0];
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.getTimeZone();
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      char char0 = 'W';
      charArray0[1] = 'W';
      int int0 = 12;
      int int1 = 221;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 221);
      int int2 = 84;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.setToken(84);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '-';
      charArray0[2] = '&';
      charArray0[3] = 'f';
      charArray0[4] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 782);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanInt('C');
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Lg&Kgq~D=/");
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'V';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.putChar('V');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.pos = 41;
      jSONReaderScanner0.scanBoolean('N');
      jSONReaderScanner0.isEnabled((-214748364), 1430);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0);
      jSONReaderScanner0.scanStringArray(list0, 'V');
      jSONReaderScanner0.nextToken((-2656));
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-26), "Lg&Kgq~D=/", (-214748364), (-2656), 3, (-2212), 1, (-214748364), (-1), 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -214748364
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 26;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gg38*9<1^Q", 26);
      jSONReaderScanner0.ch = 'x';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "2Ibv Th5+Q";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2Ibv Th5+Q");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      char char0 = '}';
      jSONReaderScanner0.scanLong('}');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7>{P ");
      jSONScanner0.close();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      char char0 = 'Z';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('R', 'Z', '=', 'R', '^');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'p';
      charArray0[2] = ']';
      charArray0[3] = 'J';
      charArray0[4] = 'r';
      charArray0[5] = 'X';
      charArray0[6] = 'B';
      charArray0[7] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108, 1000);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.setToken(57);
      jSONReaderScanner0.scanStringArray(arrayList0, '@');
      jSONReaderScanner0.scanInt('[');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "false";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o5$P;", 77);
      SymbolTable symbolTable0 = new SymbolTable(172);
      jSONReaderScanner0.addSymbol(77, 77, (-2147483647), symbolTable0);
      jSONReaderScanner0.putChar('w');
      char[] charArray0 = new char[5];
      jSONReaderScanner0.token = 25;
      jSONReaderScanner0.scanType("");
      charArray0[0] = 's';
      charArray0[1] = '[';
      charArray0[2] = 'T';
      charArray0[3] = 'H';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanIdent();
      charArray0[4] = ' ';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("o5$P;", (-5050));
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-884));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" hPB");
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '|';
      charArray0[2] = 'x';
      charArray0[3] = 'l';
      charArray0[4] = 'B';
      charArray0[5] = '$';
      charArray0[6] = 'L';
      charArray0[7] = 'e';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      stringReader0.markSupported();
      int int0 = 138;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 138);
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '\"';
      charArray0[2] = 'Y';
      charArray0[3] = '8';
      charArray0[4] = 'c';
      charArray0[5] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 116);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = ',';
      charArray0[2] = 'o';
      charArray0[3] = 'f';
      charArray0[4] = 'L';
      charArray0[5] = '~';
      charArray0[6] = 'C';
      charArray0[7] = 'S';
      charArray0[8] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65536, (-533));
      jSONReaderScanner0.scanDecimal('o');
      assertEquals((-533), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 31);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.ch = '>';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.subString(31, 31);
      assertEquals(31, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1DCQNw1cwzZ+cI>\bko");
      int int0 = (-337);
      int int1 = 9;
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      char char0 = 'v';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('D');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '<';
      charArray0[2] = ':';
      charArray0[3] = '\'';
      charArray0[4] = 'F';
      charArray0[5] = 'c';
      charArray0[6] = '+';
      charArray0[7] = 'C';
      charArray0[8] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10, 24);
      char char0 = 'D';
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(41);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ux9", (-1313));
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'D';
      charArray0[2] = 'X';
      charArray0[3] = '{';
      charArray0[4] = 'u';
      charArray0[5] = '2';
      charArray0[6] = 'D';
      charArray0[7] = 'W';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.close();
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.nextToken(8);
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(1, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '\"';
      charArray0[2] = 'Y';
      charArray0[3] = '8';
      charArray0[4] = 'c';
      charArray0[5] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 116);
      jSONReaderScanner0.scanString();
      assertEquals('Y', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "\"";
      JSONScanner jSONScanner0 = new JSONScanner("\"", 110);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("X>Q9ok?");
      char char0 = '5';
      jSONReaderScanner0.ch = 'C';
      jSONReaderScanner0.scanLong('5');
      int int0 = 18;
      jSONReaderScanner0.nextToken(18);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'C';
      charArray0[2] = '~';
      charArray0[3] = 'o';
      charArray0[4] = 'K';
      charArray0[5] = 'J';
      charArray0[6] = '>';
      charArray0[7] = 'z';
      charArray0[8] = 's';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86);
      JSONScanner jSONScanner0 = new JSONScanner("Lz2Y/GQ");
      jSONScanner0.setToken(0);
      jSONScanner0.eofPos = 492;
      jSONScanner0.stringVal();
      jSONScanner0.charAt(86);
      jSONScanner0.scanFieldInt(charArray0);
      JSONScanner.charArrayCompare("RP;tA{S", 86, charArray0);
      SymbolTable symbolTable0 = new SymbolTable(12);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONScanner0.stringVal();
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '/';
      charArray0[2] = '#';
      charArray0[3] = 'k';
      charArray0[4] = '5';
      charArray0[5] = 'f';
      charArray0[6] = 'M';
      charArray0[7] = 'o';
      int int0 = 54;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120, 54);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanLong('w');
      int int1 = (-124);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-124), (-124));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ", (-109));
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = 'F';
      charArray0[2] = '\\';
      jSONReaderScanner0.scanString(']');
      charArray0[3] = '/';
      charArray0[4] = '?';
      charArray0[5] = '\'';
      charArray0[6] = '8';
      charArray0[7] = 'Z';
      JSONLexerBase.readString(charArray0, 7);
      jSONReaderScanner0.nextToken();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-109));
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[{|3r)uzo7W=9@");
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      char char0 = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'Q';
      charArray0[3] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.next();
      SymbolTable symbolTable0 = new SymbolTable(22);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("\":\"", 22, 22, 228, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ay*O&,ae)io]");
      stringReader0.markSupported();
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-477));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanInt('A');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'L';
      charArray0[2] = 'e';
      charArray0[3] = 'd';
      charArray0[4] = '=';
      charArray0[5] = '>';
      charArray0[6] = 'I';
      charArray0[7] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1711, 1711);
      SymbolTable symbolTable0 = new SymbolTable(43);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'I');
      assertEquals('W', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONLexerBase.isWhitespace('');
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      int int0 = 47;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 47);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.scanInt('^');
      timeZone0.setRawOffset(51);
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.charAt(47);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!{CUs/;~>U5am(d*_z", 1786);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(982);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '=');
      assertEquals(1786, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanType("Set");
      jSONReaderScanner0.nextToken(52);
      jSONReaderScanner0.lexError("[", (Object[]) null);
      int int0 = 110;
      jSONReaderScanner0.np = 110;
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'x');
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 52, 103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowArbitraryCommas", (-1953));
      jSONReaderScanner0.scanLong('S');
      jSONReaderScanner0.sp = (-1220);
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanFieldInt(charArray0);
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.isEnabled((-1953), 58);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "cSSR]*59O^";
      JSONScanner jSONScanner0 = new JSONScanner("cSSR]*59O^");
      char char0 = '\\';
      jSONScanner0.scanString('\\');
      jSONScanner0.token = 83;
      boolean boolean0 = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '[';
      charArray0[5] = 'M';
      charArray0[6] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-1466);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*A8VR|f;UCE", (-1466));
      char char0 = '/';
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('/', (-3788));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6iN", 42);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('m');
      jSONReaderScanner0.scanDate('|');
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'J';
      jSONReaderScanner0.charArrayCompare(charArray0);
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error :", (-373));
      jSONScanner0.ch = 'f';
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error :", (-373));
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = ':';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.bytesValue();
      char[] charArray1 = new char[3];
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      jSONScanner0.scanFieldBigInteger(charArray1);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONReaderScanner0.nextToken(103);
      assertEquals('y', jSONReaderScanner0.getCurrent());
      
      jSONScanner0.scanFieldBigInteger(charArray1);
      jSONScanner0.putChar('f');
      assertEquals((-373), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lm~");
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      jSONScanner0.bp = 370;
      charArray0[1] = '0';
      charArray0[2] = 'b';
      charArray0[3] = '_';
      charArray0[4] = 'L';
      jSONScanner0.scanDate('8');
      charArray0[5] = 'T';
      charArray0[6] = 'J';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanBoolean('_');
      jSONScanner0.scanFloat('P');
      char[] charArray1 = new char[3];
      charArray1[0] = '_';
      charArray1[1] = 'T';
      charArray1[2] = 'L';
      jSONScanner0.scanFieldIntArray(charArray1);
      PipedReader pipedReader0 = new PipedReader(370);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char char0 = '{';
      JSONLexerBase.isWhitespace('{');
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '@';
      charArray0[2] = 'q';
      charArray0[4] = '2';
      charArray0[6] = 'k';
      charArray0[8] = 'U';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 9, 58);
      jSONScanner0.nextToken(9);
      Locale locale0 = new Locale("unclosed.str", "false", "L");
      Locale locale1 = locale0.stripExtensions();
      jSONScanner0.locale = locale1;
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, 0, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<j", 14);
      jSONReaderScanner0.subString(15, 14);
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayScript();
      locale0.getDisplayScript();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken(14);
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '^';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 5, 4023);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.scanNumber();
      jSONScanner0.pos();
      jSONScanner0.putChar('U');
      int int0 = 127;
      int int1 = 1069;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "Set", 49, 49, 626, 8, 626, 626, 127, 626, 1069);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 49
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = ' ';
      charArray0[2] = 'x';
      charArray0[3] = '}';
      charArray0[4] = '8';
      charArray0[5] = 'h';
      charArray0[6] = 'V';
      int int0 = 732;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 732, 732);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanFieldDate(charArray0);
      int int1 = (-821);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{F\"W");
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("03ebcI$");
      hashSet0.add("03ebcI$");
      char char0 = 'A';
      jSONReaderScanner0.scanStringArray(hashSet0, 'A');
      char char1 = 'U';
      jSONReaderScanner0.scanDouble('U');
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'A';
      charArray0[3] = 'U';
      jSONReaderScanner0.stringVal();
      charArray0[4] = 'A';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      int int0 = 98;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 98);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1109;
      JSONScanner jSONScanner0 = new JSONScanner("error parse false", 1109);
      jSONScanner0.indexOf('}', 1109);
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "error parse false";
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) ", ";
      objectArray0[4] = (Object) jSONScanner0;
      objectArray0[5] = (Object) jSONScanner0;
      objectArray0[6] = (Object) '}';
      objectArray0[7] = (Object) "error parse false";
      objectArray0[8] = (Object) '}';
      jSONScanner0.lexError(", ", objectArray0);
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '}';
      charArray0[7] = 'p';
      charArray0[8] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1109, 1109);
      jSONReaderScanner0.scanInt('?');
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowArbitraryCommas", (-1953));
      jSONReaderScanner0.scanLong('S');
      jSONReaderScanner0.sp = (-1220);
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.isEnabled((-1953), 58);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.scanType("fastjson");
      char[] charArray0 = new char[3];
      jSONScanner0.scanISO8601DateIfMatch(true);
      charArray0[0] = 'W';
      charArray0[1] = 'r';
      charArray0[2] = '`';
      SymbolTable symbolTable0 = new SymbolTable(2731);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'W';
      objectArray0[1] = (Object) 'r';
      objectArray0[2] = (Object) "fastjson";
      objectArray0[3] = (Object) 'W';
      objectArray0[4] = (Object) jSONScanner0;
      objectArray0[5] = (Object) "fastjson";
      objectArray0[6] = (Object) 'W';
      jSONScanner0.lexError("undefined", objectArray0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 2388, 3173, 1114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'w';
      charArray0[2] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('K');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken();
      TimeZone timeZone0 = TimeZone.getTimeZone("undefined");
      timeZone0.getOffset(1007L);
      timeZone0.clone();
      TimeZone.setDefault(timeZone0);
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.scanUUID('e');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      jSONScanner0.stringVal();
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = ']';
      charArray0[2] = '^';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      MockDate mockDate0 = new MockDate(0, 106, 106, 0, (-2488), 112);
      timeZone0.inDaylightTime(mockDate0);
      jSONReaderScanner0.scanInt('B');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = ';';
      charArray0[2] = 'I';
      charArray0[3] = '$';
      charArray0[4] = '1';
      charArray0[5] = '5';
      charArray0[6] = 'F';
      charArray0[7] = 'e';
      charArray0[8] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.pos = (-3353);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.stringDefaultValue = "utf8";
      jSONReaderScanner0.np = (-4352);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "cSSR]*59O^";
      JSONScanner jSONScanner0 = new JSONScanner("cSSR]*59O^");
      char char0 = '\\';
      jSONScanner0.scanString('\\');
      jSONScanner0.token = 83;
      boolean boolean0 = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '[';
      charArray0[5] = 'M';
      charArray0[6] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'Y';
      charArray0[2] = 'w';
      charArray0[3] = '[';
      charArray0[4] = 'O';
      charArray0[5] = '.';
      charArray0[6] = 'A';
      charArray0[7] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2341);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '-';
      charArray0[2] = '\"';
      charArray0[3] = '7';
      charArray0[4] = 'L';
      charArray0[5] = 'X';
      charArray0[6] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2140, 13);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error", 12);
      jSONReaderScanner0.matchStat();
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.getCalendar();
      jSONScanner0.calendar = null;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 0, json : syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = '`';
      charArray0[2] = 's';
      charArray0[3] = '#';
      charArray0[4] = 'f';
      charArray0[5] = '7';
      charArray0[6] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2080);
      jSONReaderScanner0.scanString('s');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      jSONReaderScanner0.lexError("Set", objectArray0);
      jSONReaderScanner0.nextTokenWithChar('I');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'V');
      jSONReaderScanner0.putChar('&');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDecimal('f');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      SymbolTable symbolTable0 = new SymbolTable(85);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, ';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("h98G&dhg@aKPfrtyIr", 654);
      char[] charArray0 = new char[4];
      char char0 = 'u';
      jSONScanner0.scanDecimal('u');
      char char1 = 'Q';
      charArray0[0] = 'Q';
      char char2 = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '@';
      char char3 = 'O';
      charArray0[3] = 'O';
      jSONScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = '6';
      char char4 = '+';
      charArray1[1] = '+';
      jSONScanner0.stringDefaultValue = ";wW";
      charArray1[2] = '`';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(654, 10, charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j?`'LLmd/", 1331);
      jSONScanner0.nextToken();
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = '@';
      charArray0[2] = 'q';
      charArray0[3] = 'a';
      charArray0[4] = '2';
      charArray0[5] = 'L';
      charArray0[6] = 'k';
      charArray0[7] = ';';
      charArray0[8] = 'U';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 9, 58);
      jSONScanner0.nextToken(9);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}{u)\f_\"2zE(JE", (-4316));
      char char0 = 'l';
      jSONScanner0.scanFloat('l');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-4316));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char char0 = '{';
      char char1 = ']';
      JSONScanner.checkDate('{', '{', ']', ']', '{', ']', 84, 84);
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char char2 = 'b';
      jSONScanner0.scanBoolean('b');
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "5Z~NFC%");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      jSONReaderScanner0.sub_chars(22, 39);
      jSONReaderScanner0.putChar('V');
      jSONReaderScanner0.resetStringPosition();
      SymbolTable symbolTable0 = new SymbolTable(57);
      jSONReaderScanner0.addSymbol(39, 19, 57, symbolTable0);
      Locale locale0 = jSONReaderScanner0.getLocale();
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.lexError("5Z~NFC%", (Object[]) null);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 751;
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", 751);
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanDouble('&');
      jSONScanner0.eofPos = 751;
      jSONScanner0.info();
      jSONScanner0.scanType("scan null error");
      jSONScanner0.scanFieldBoolean(charArray0);
      int int1 = 31;
      int int2 = 1810;
      SymbolTable symbolTable0 = new SymbolTable(1810);
      int int3 = 913;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("L6}//g|~gx os", 1810, 751, (-2292));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error");
      jSONReaderScanner0.tokenName();
      char[] charArray0 = new char[1];
      char char0 = 'l';
      charArray0[0] = 'l';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "undefined";
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.token();
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = 'F';
      charArray0[2] = 'k';
      char char0 = 'H';
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 24;
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 24);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '4';
      charArray0[2] = '7';
      charArray0[3] = '^';
      charArray0[4] = '!';
      charArray0[5] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2, (-252));
      boolean boolean0 = jSONReaderScanner0.isEnabled((-252), 81);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals((-252), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error", (-1377));
      jSONScanner0.getLocale();
      assertEquals((-1377), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'q';
      charArray0[2] = '+';
      charArray0[3] = '{';
      charArray0[4] = 'L';
      charArray0[5] = 'D';
      charArray0[6] = 'q';
      charArray0[7] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 116);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 34, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "TreeSet";
      int int0 = 4096;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 4096);
      jSONScanner0.nextToken(4096);
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'h';
      charArray0[2] = ' ';
      charArray0[3] = 'n';
      charArray0[4] = '{';
      charArray0[5] = 'R';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.getCurrent();
      jSONScanner0.isBlankInput();
      char[] charArray1 = new char[2];
      SymbolTable symbolTable0 = new SymbolTable(4096);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("TreeSet", 4096, 1860, (-2), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b{j<kMp[*Cdc");
      jSONScanner0.scanString('E');
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'v';
      charArray0[2] = '$';
      charArray0[3] = '3';
      charArray0[4] = 'c';
      charArray0[5] = 'i';
      charArray0[6] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 361);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('$');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(N)NyT");
      jSONReaderScanner0.scanFloat('h');
      JSONScanner jSONScanner0 = new JSONScanner("null", (-1));
      jSONReaderScanner0.getCalendar();
      jSONScanner0.calendar = null;
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(115, 50);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1752);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONObject", 47);
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = '$';
      charArray0[2] = ',';
      charArray0[3] = 'n';
      charArray0[4] = ';';
      charArray0[5] = 'N';
      charArray0[6] = 'V';
      charArray0[7] = 'v';
      charArray0[8] = 'S';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'u');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '8';
      charArray0[0] = '8';
      char char1 = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'A';
      charArray0[3] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2736, 2736);
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("new");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 8);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 'z';
      charArray0[2] = 'P';
      charArray0[3] = 'A';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}\"7N3bV~~_J");
      jSONReaderScanner0.intValue();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 93;
      JSONScanner jSONScanner0 = new JSONScanner("utf8 decode error, ", 93);
      Class<String> class0 = String.class;
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(8);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = 'y';
      charArray0[2] = '4';
      charArray0[3] = '7';
      charArray0[4] = 'd';
      charArray0[5] = 'B';
      charArray0[6] = 'M';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 93, 71, 1869);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'F';
      charArray0[4] = 'j';
      charArray0[5] = '?';
      int int0 = 274;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 274);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - m, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UD}x[gEuKd/Q2^#on8", (-2330));
      jSONScanner0.nextToken(19);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONLexerBase.isWhitespace('s');
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      jSONScanner0.longValue();
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      jSONScanner0.scanFieldDouble(charArray0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = '(';
      charArray0[2] = '?';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'b';
      int int0 = 102;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - L, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = '*';
      charArray0[2] = 'M';
      charArray0[3] = 'i';
      charArray0[4] = 'Y';
      charArray0[5] = '#';
      charArray0[6] = '_';
      charArray0[7] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52, (-4137));
      char char0 = '`';
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".h4p22xwcj7OcD", 79);
      jSONScanner0.close();
      char[] charArray0 = new char[5];
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.config(feature0, true);
      charArray0[0] = 'N';
      jSONScanner0.scanUUID('N');
      jSONScanner0.nextToken(79);
      charArray0[1] = 'Z';
      charArray0[2] = 'A';
      charArray0[3] = '\"';
      charArray0[4] = '1';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanISO8601DateIfMatch();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256);
      jSONReaderScanner0.charAt(256);
      jSONReaderScanner0.isEnabled((-4195));
      jSONReaderScanner0.longValue();
      JSONScanner.charArrayCompare(".h4p22xwcj7OcD", 256, charArray0);
      jSONReaderScanner0.setToken(256);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.stringVal();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONScanner0.skipWhitespace();
      jSONReaderScanner0.scanDecimal('N');
      jSONScanner0.isEOF();
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '\'';
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1480, (-2435));
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanBoolean('\'');
      jSONReaderScanner0.info();
      int int0 = 3906;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{");
      char char0 = 'w';
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'w');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4xUvwXCuo0yFd", 84);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'e';
      charArray0[2] = 'y';
      charArray0[3] = 'z';
      charArray0[4] = '2';
      charArray0[5] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1120, 1120);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanUUID(':');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-1311));
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1311), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      JSONScanner.charArrayCompare("", 0, charArray0);
      JSONLexerBase.readString(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(58);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-1242), (-1242), 39, symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDate('T');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = '#';
      charArray0[2] = 'q';
      charArray0[3] = 'B';
      charArray0[4] = 'S';
      charArray0[5] = 'O';
      charArray0[6] = 'T';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 4285);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-54));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'T';
      charArray0[2] = '*';
      charArray0[3] = '[';
      charArray0[4] = ':';
      charArray0[5] = 'l';
      charArray0[6] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 302);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/vEjP}sn=6}&^");
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      jSONReaderScanner0.np = 0;
      charArray0[1] = 'g';
      charArray0[2] = '_';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.charAt(11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDate('T');
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'P';
      charArray0[0] = 'P';
      charArray0[1] = 'i';
      charArray0[2] = 'c';
      charArray0[3] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.token = 0;
      jSONReaderScanner0.scanNumber();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 544);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(106, charArray0, 70, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 97);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = '0';
      charArray0[2] = '/';
      charArray0[3] = 's';
      charArray0[4] = '|';
      charArray0[5] = '8';
      charArray0[6] = '}';
      charArray0[7] = 'X';
      charArray0[8] = ';';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(97, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_", 1857);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xwu", 57);
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = 'p';
      charArray0[2] = 'd';
      charArray0[3] = '4';
      charArray0[4] = 'L';
      charArray0[5] = 'H';
      charArray0[6] = '3';
      charArray0[7] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      jSONReaderScanner0.indexOf('$', 656);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "S";
      JSONScanner jSONScanner0 = new JSONScanner("S");
      jSONScanner0.isRef();
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken((-2));
      char char0 = '$';
      int int0 = 0;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "|>VY.Z`T`GYLJ /Xg";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|>VY.Z`T`GYLJ /Xg", 21);
      jSONReaderScanner0.scanString('*');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.subString(21, 21);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.getTimeZone();
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[5] = '*';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(21, 21, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      int int0 = 915;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 915);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONLexerBase.isWhitespace('r');
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      int int0 = 47;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 4917, 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ", (-109));
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString(']');
      jSONReaderScanner0.nextToken();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-109));
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'z';
      charArray0[0] = 'z';
      char char1 = '8';
      charArray0[1] = '8';
      char char2 = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'S';
      charArray0[4] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.scanDate('6');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0 EED'zNC>WWVO");
      char char0 = 'X';
      jSONReaderScanner0.scanString('X');
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[8];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
