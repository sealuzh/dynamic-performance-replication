/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:22:04 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(958);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -183.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.foldRow(3, (VectorAccumulator) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[0][8];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      String string0 = matrix0.toCSV();
      assertEquals("", string0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.maxInColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4133);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1587.844149);
      Double double1 = new Double((-1.0));
      linkedList0.add(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double2 = new Double((-1.0));
      linkedList0.offerFirst(double2);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 4133, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(4133, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4133' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfRows((-2367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2367x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      Integer integer0 = new Integer(0);
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getInstance();
      decimalFormat1.setPositiveSuffix("%%Ma{NtrixMarket");
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      decimalFormat1.setRoundingMode(roundingMode0);
      decimalFormat1.setMaximumIntegerDigits(0);
      DecimalFormat decimalFormat2 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      String string0 = sparseMatrix0.toCSV((NumberFormat) decimalFormat2);
      assertEquals("", string0);
      
      locale0.getDisplayScript();
      int int0 = Double.SIZE;
      MockRandom mockRandom0 = new MockRandom(334L);
      mockRandom0.nextDouble();
      boolean boolean0 = sparseMatrix0.equals((Object) locale0);
      assertFalse(boolean0);
      
      double double0 = sparseMatrix0.product();
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2365);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      sparseMatrix0.divide(3041);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 792;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2032, 792);
      cRSMatrix0.toColumnVector();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cRSMatrix0.toMatrixMarket(numberFormat0);
      // Undeclared exception!
      cRSMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns((VectorAccumulator) null);
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(4);
      Double double0 = new Double(0);
      linkedList0.add(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      matrix0.rows();
      matrix0.toRowVector();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(5, 4, (-1938.32626098274), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[0];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 2, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      int int0 = 624;
      cCSMatrix0.setAll(624);
      // Undeclared exception!
      try { 
        cCSMatrix0.foldColumn(624, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 624
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(931, 643, 1656.1280512038);
      assertEquals(931, matrix0.rows());
      assertEquals(643, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SparseMatrix.identity(2365);
      Matrix.zero(3041, 2365);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = (Locale)locale0.clone();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getIntegerInstance(locale1);
      decimalFormat1.parse("JACOBI", parsePosition0);
      NumberFormat.getInstance();
      decimalFormat0.setMaximumIntegerDigits(32);
      matrix0.toCSV((NumberFormat) decimalFormat1);
      matrix0.rank();
      // Undeclared exception!
      try { 
        matrix0.set(32, 0, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4133);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1587.844149);
      Double double1 = new Double((-1.0));
      linkedList0.add(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 4133, 32);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeRow(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2027, 2027, 3);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.identity(3);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix1);
      matrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Matrix.zero(3, 3);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.toRowMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(4);
      Double double0 = new Double(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector1 = SparseVector.fromMap(hashMap0, 1751);
      Matrix matrix0 = sparseVector1.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.foldRow(5, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat.getCurrencyInstance(locale0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(408, 408, 408);
      int int0 = 9;
      int int1 = (-354);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.eachInColumn((-354), vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-354' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      int int0 = (-1011);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      numberFormat1.setMaximumIntegerDigits(0);
      NumberFormat numberFormat2 = NumberFormat.getCurrencyInstance();
      sparseMatrix0.toCSV(numberFormat2);
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2696;
      doubleArray0[1] = (double) 1444;
      doubleArray0[2] = (double) 1444;
      doubleArray0[3] = (double) 2696;
      doubleArray0[4] = (double) 2696;
      doubleArray0[5] = (double) 1444;
      doubleArray0[6] = (double) 2696;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1444, 2696, doubleArray0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(2696, 2696);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) denseMatrix1, 1444, 4533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1444 rows and 4533 cols at 0, 0 in a 1444x2696 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.product();
      cCSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.blank();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cCSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Integer integer0 = new Integer(2729);
      MatrixOperation<Integer> matrixOperation1 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(matrixOperation1).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      rowMajorSparseMatrix0.apply(matrixOperation1);
      cCSMatrix0.setRow(2729, 1.0);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      matrix0.update((MatrixFunction) null);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(" ");
      Double.sum(0.0, 1587.844149);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      cRSMatrix0.insert((Matrix) sparseMatrix0, 1, 0);
      sparseMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        DenseMatrix.diagonal((-10), 1587.844149);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Double.sum((-726.098927793187), 3);
      Double double0 = new Double((-723.098927793187));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setGroupingUsed(true);
      decimalFormat0.toLocalizedPattern();
      Vector vector0 = rowMajorSparseMatrix0.toRowVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow((-586), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Locale locale0 = Locale.TAIWAN;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 688;
      Double.sum(0.0, 1587.844149);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      Matrix matrix0 = sparseMatrix0.removeFirstColumn();
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        matrix0.eachInColumn(646, (VectorProcedure) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '646' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(931);
      denseMatrix0.diagonalProduct();
      SparseMatrix.identity(931);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1950;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1950;
      DenseMatrix.from1DArray(1950, 931, doubleArray0);
      int int0 = 10;
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      // Undeclared exception!
      denseMatrix0.toMatrixMarket(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 4;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(4, 4, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      Object object0 = locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      Locale locale1 = Locale.forLanguageTag(")$=PqH;-a'x{=");
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat1.setRoundingMode(roundingMode0);
      numberFormat0.setMaximumIntegerDigits(1773);
      NumberFormat.getCurrencyInstance();
      NumberFormat numberFormat2 = NumberFormat.getNumberInstance();
      sparseMatrix0.toCSV(numberFormat2);
      locale1.getDisplayScript();
      sparseMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom(1773);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      sparseMatrix0.equals(object0);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(0, 1403);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][1403..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      ParsePosition parsePosition0 = new ParsePosition(824);
      Integer integer0 = new Integer(0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat0.setRoundingMode(roundingMode0);
      numberFormat0.setMaximumIntegerDigits(0);
      NumberFormat numberFormat1 = NumberFormat.getCurrencyInstance();
      sparseMatrix0.toCSV(numberFormat1);
      sparseMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom(334L);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      sparseMatrix0.sliceBottomRight(0, 0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(29);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.la4j.LinearAlgebra$DecompositorFactory$6");
      Integer integer0 = new Integer((-1584));
      NumberFormat.getInstance();
      Locale locale0 = Locale.PRC;
      NumberFormat.getIntegerInstance(locale0);
      MockRandom mockRandom0 = new MockRandom(2273L);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(30, 29);
      cCSMatrix0.equals((Object) null);
      cCSMatrix0.sliceBottomRight(29, 30);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(29, 1032);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [29..30][1032..30].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ParsePosition parsePosition0 = new ParsePosition(1781);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("][");
      Integer integer0 = new Integer(1781);
      NumberFormat.getInstance();
      int int0 = NumberFormat.INTEGER_FIELD;
      Locale locale0 = Locale.PRC;
      NumberFormat.getIntegerInstance(locale0);
      cCSMatrix0.mkString((NumberFormat) choiceFormat0);
      cCSMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom(39424L);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1781, 1781);
      cCSMatrix1.equals((Object) "%%MatrixMarkt");
      // Undeclared exception!
      try { 
        cCSMatrix1.sliceBottomRight((-1911), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1911' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1731, 1756.0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1384);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.rows();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInRow((-2266), vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2266' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      String string0 = "~ cTLD>zz&";
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      sparseMatrix0.each((MatrixProcedure) null);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.updateColumn(0, vectorFunction0);
      sparseMatrix0.transformRow(17, (VectorFunction) null);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("~ cTLD>zz&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.product();
      CCSMatrix cCSMatrix1 = new CCSMatrix(11, 11, 11);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(1564, vectorAccumulator0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 652);
      // Undeclared exception!
      try { 
        cCSMatrix1.sliceBottomRight(1564, 1564);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1564..11][1564..11].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat.getCurrencyInstance(locale0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      RowMajorSparseMatrix.zero(408, 408, 408);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-2349));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0, "TAKEN_FROM_THESE", "TAKEN_FROM_THESE");
      int int0 = 9;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.eachInColumn(9, vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.product();
      Matrix matrix0 = cCSMatrix0.subtract(1.0);
      MatrixOperation<Integer> matrixOperation1 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation1).apply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixOperation1);
      cCSMatrix0.columns();
      cCSMatrix0.toCSV();
      cCSMatrix0.setRow(0, 750.0272500301245);
      cCSMatrix0.blankOfColumns(3);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transformColumn(16, vectorFunction0);
      matrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double double0 = (-726.098927793187);
      Double.sum((-726.098927793187), 3);
      Double double1 = new Double((-723.098927793187));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double2 = new Double((-726.098927793187));
      linkedList1.add(double2);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      int int0 = 1731;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(6, 1731, 1184);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setGroupingUsed(false);
      decimalFormat0.toLocalizedPattern();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1731, 6, 1731);
      cRSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1731 rows and 6 cols at 0, 0 in a 6x1731 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(908L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      int int0 = 10;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(8, 4, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) basic2DMatrix0, 3, 573);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3 rows and 573 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(1055, vectorProcedure0);
      Matrix matrix1 = matrix0.transpose();
      matrix1.product();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat1.setRoundingMode(roundingMode0);
      numberFormat1.setMaximumIntegerDigits(0);
      NumberFormat numberFormat2 = NumberFormat.getCurrencyInstance();
      sparseMatrix0.toCSV(numberFormat2);
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      matrix0.diagonalProduct();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(0, (-1011));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1011
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 375;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(375, 375);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int1 = 5;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 375;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 375;
      doubleArray0[5] = (double) 375;
      doubleArray0[6] = (double) 375;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(375, 5, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, denseMatrix0);
      sparseMatrix0.add(matrix0);
      String string0 = "K`L})pwjJs*lu4,wR";
      DenseMatrix denseMatrix1 = DenseMatrix.fromMatrixMarket(string0);
      SparseMatrix sparseMatrix1 = SparseMatrix.block(sparseMatrix0, cCSMatrix0, matrix0, denseMatrix1);
      int int2 = 1267;
      sparseMatrix0.insert((Matrix) sparseMatrix1, int0, int0, int1, int2, int0, int0);
      String string1 = "TAKEN_FROM_THESE";
      denseMatrix0.mkString(string1, string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[0];
      RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(384);
      Double double0 = new Double(1567.7752939);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1666, 1239, 1.0);
      Matrix matrix0 = denseMatrix0.power(0);
      denseMatrix0.foldColumn(1194, (VectorAccumulator) null);
      matrix0.copy();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1431655765, 11, 652);
      // Undeclared exception!
      cCSMatrix0.power(1564);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1781);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("][");
      Integer integer0 = new Integer(1781);
      NumberFormat.getInstance();
      Locale locale0 = Locale.PRC;
      locale0.clone();
      NumberFormat.getIntegerInstance(locale0);
      MockRandom mockRandom0 = new MockRandom(1207L);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      Matrix.randomSymmetric(2798, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RowMajorSparseMatrix.fromCSV(" ");
      int int0 = 32;
      int int1 = 0;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0);
      Double.max(0.0, (-587.54439927));
      linkedList0.clear();
      linkedList0.add(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Integer integer0 = new Integer(32);
      int int2 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 7, (double[]) null);
      // Undeclared exception!
      try { 
        denseMatrix0.power(32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 7.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale.getISOLanguages();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setErrorIndex(16);
      parsePosition0.setIndex(4133);
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 4861, 1042);
      cCSMatrix0.power(37);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-3006);
      long long0 = 9L;
      MockRandom mockRandom0 = new MockRandom(9L);
      // Undeclared exception!
      try { 
        Matrix.random((-3006), (-3006), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat1.setRoundingMode(roundingMode0);
      numberFormat1.setMaximumIntegerDigits(0);
      NumberFormat numberFormat2 = NumberFormat.getCurrencyInstance();
      sparseMatrix0.toCSV(numberFormat2);
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      matrix0.diagonalProduct();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(0, (-1011));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1011
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.product();
      int int0 = Double.MAX_EXPONENT;
      Locale locale0 = Locale.TAIWAN;
      int int1 = 2729;
      Matrix matrix0 = cCSMatrix0.blank();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        matrix0.setColumn(2, 4.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      int int1 = (-1011);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat1.setRoundingMode(roundingMode0);
      numberFormat1.setMaximumIntegerDigits(0);
      NumberFormat numberFormat2 = NumberFormat.getCurrencyInstance();
      sparseMatrix0.toCSV(numberFormat2);
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      matrix0.diagonalProduct();
      matrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateColumn(3080, vectorFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3080
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3, 3);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformColumn(3, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.product();
      cCSMatrix0.rank();
      CCSMatrix cCSMatrix1 = new CCSMatrix(2, 4, 4);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1564;
      doubleArray0[2] = (double) 2;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(2, 1564, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1564
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.toRowMatrix();
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      NumberFormat.getInstance();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(" ");
      int int0 = 0;
      int int1 = 3094;
      int int2 = 688;
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(3094, 688);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3095
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat1.setRoundingMode(roundingMode0);
      numberFormat1.setMaximumIntegerDigits(0);
      NumberFormat numberFormat2 = NumberFormat.getCurrencyInstance();
      sparseMatrix0.toCSV(numberFormat2);
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      matrix0.diagonalProduct();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      matrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformRow(0, vectorFunction1);
      Integer integer0 = new Integer(2940);
      sparseMatrix0.hashCode();
      matrix1.foldRow((-1063), vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 28;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      int int1 = 32;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(Integer.MAX_VALUE, 32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      numberFormat0.parse("~ cTLD>zz&", parsePosition0);
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat1.setRoundingMode(roundingMode0);
      numberFormat1.setMaximumIntegerDigits(0);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      decimalFormat0.setGroupingSize(1760);
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom((-1011));
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 4826.72, (Random) mockRandom0);
      sparseMatrix0.kroneckerProduct(cRSMatrix0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseMatrix0.transformRow(0, vectorFunction0);
      cCSMatrix0.diagonalProduct();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cCSMatrix0.non(advancedMatrixPredicate0);
      cCSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
      Integer integer0 = new Integer((-1011));
      sparseMatrix0.hashCode();
      // Undeclared exception!
      try { 
        sparseMatrix0.removeColumn((-1139));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(931);
      Integer integer0 = new Integer(931);
      CRSMatrix.zero(931, 931);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(931, (double) 931);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 931
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(" ");
      int int0 = (-15);
      int int1 = 3094;
      cRSMatrix0.swapRows(3094, 3094);
      Double.sum(0.0, 1587.844149);
      int int2 = 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) sparseMatrix0, 1, (-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1x-15
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 28;
      Integer integer0 = new Integer(28);
      Integer integer1 = new Integer(6);
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 28);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(28, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 28. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector.fromMap(hashMap0, 28);
      Integer integer0 = new Integer(28);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1543, 1543);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      Basic2DMatrix basic2DMatrix1 = null;
      try {
        basic2DMatrix1 = new Basic2DMatrix(494, (-3162));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 30;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 30);
      int int1 = 29;
      ParsePosition parsePosition0 = new ParsePosition(29);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.la4j.LinearAlgebra$DecompositorFactory$6");
      Integer integer0 = new Integer(29);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      int int2 = Double.BYTES;
      Locale locale0 = Locale.PRC;
      NumberFormat.getIntegerInstance(locale0);
      sparseMatrix0.mkString(numberFormat0);
      CCSMatrix.zero(8, 8);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.setRow(3914, (double) 0);
      DenseVector denseVector0 = DenseVector.zero(0);
      cCSMatrix0.setRow(0, (Vector) denseVector0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int1 = 1905;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) cCSMatrix0, 1905, 48, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1905, 48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double.sum(0.0, 1587.844149);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0);
      Double.sum((-1355.95937), 32);
      linkedList0.clear();
      linkedList0.add(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Locale locale0 = Locale.PRC;
      NumberFormat.getIntegerInstance(locale0);
      double double1 = Locale.LanguageRange.MAX_WEIGHT;
      CCSMatrix.diagonal(0, (-1749.4571645100807));
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      CCSMatrix cCSMatrix1 = new CCSMatrix(5, 2087);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("gZ3{O-i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 30;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 30);
      ParsePosition parsePosition0 = new ParsePosition(29);
      Integer integer0 = new Integer(29);
      sparseMatrix0.rank();
      Locale locale0 = Locale.PRC;
      MockRandom mockRandom0 = new MockRandom(2273L);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CCSMatrix.diagonal(30, 29);
      MockRandom mockRandom1 = new MockRandom(2273L);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("org.la4j.LinearAlgebra$DecompositorFactory$6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale.getISOLanguages();
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(1042);
      parsePosition0.setIndex(4133);
      int int0 = (-1073741823);
      parsePosition0.setIndex((-1073741823));
      DecimalFormatSymbols.getInstance();
      locale0.getUnicodeLocaleKeys();
      NumberFormat.getInstance();
      int int1 = 680;
      sparseMatrix0.swapColumns(680, 680);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 1.0;
      int int0 = 998;
      CCSMatrix cCSMatrix0 = new CCSMatrix(998, 998, 3317);
      Matrix matrix0 = cCSMatrix0.copy();
      matrix0.toBinary();
      matrix0.getRow((-3847));
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(3317, (-1113.9310426132122));
      basic1DMatrix0.fold((MatrixAccumulator) null);
      double double0 = 2907.40148;
      int int1 = 4;
      String string0 = "X?'";
      SparseMatrix.fromCSV(string0);
      int int2 = 1000;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(int1, int2, double0, (Random) mockRandom0);
      Vector vector0 = cCSMatrix0.getColumn(int1);
      cCSMatrix0.multiply(vector0);
      int int3 = (-1719);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int3, int0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(499, 499);
      Matrix matrix1 = matrix0.copyOfColumns(8);
      matrix1.min();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Currency currency0 = decimalFormat0.getCurrency();
      Locale locale0 = new Locale("       ", "       ");
      Currency.getInstance(locale0);
      currency0.getDisplayName();
      numberFormat0.setCurrency(currency0);
      matrix0.mkString(numberFormat0);
      int int0 = (-761);
      matrix0.blankOfColumns(int0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      matrix1.withSolver(linearAlgebra_SolverFactory0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 30;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 30);
      NumberFormat.getPercentInstance();
      sparseMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn(30, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..29
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-156);
      doubleArray0[1] = (double) (-156);
      doubleArray0[2] = (double) (-156);
      doubleArray0[3] = (double) (-156);
      doubleArray0[4] = (double) (-156);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-156), (-156), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -156x-156
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberFormat.getPercentInstance();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(30);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-1748), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..29
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3);
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseVector0.toColumnMatrix();
      cCSMatrix0.iterator();
      cCSMatrix0.hashCode();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        cCSMatrix0.multiply((Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 3 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 30;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 30);
      sparseMatrix0.mkString("org.la4j.LinearAlgebra$InverterFactory$2", "org.la4j.LinearAlgebra$InverterFactory$2");
      Locale locale0 = Locale.US;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(30);
      int int1 = (-3366);
      Currency currency0 = numberFormat0.getCurrency();
      numberFormat0.setCurrency(currency0);
      parsePosition0.setIndex((-3366));
      Integer integer0 = new Integer(30);
      parsePosition0.toString();
      NumberFormat.getInstance();
      numberFormat0.setMaximumIntegerDigits(30);
      sparseMatrix0.toCSV(numberFormat0);
      sparseMatrix0.mkString(numberFormat0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("java.text.ParsePosition[index=-3366,errorIndex=-1]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "org.la4j.LinearAlgebra$DecompositorFactory$6";
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.la4j.LinearAlgebra$DecompositorFactory$6");
      Integer integer0 = new Integer(30);
      NumberFormat.getInstance();
      Locale locale0 = Locale.PRC;
      NumberFormat.getIntegerInstance(locale0);
      MockRandom mockRandom0 = new MockRandom(2273L);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(30, 30);
      cCSMatrix0.equals((Object) null);
      cCSMatrix0.sliceBottomRight(30, 30);
      cCSMatrix0.toMatrixMarket();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(30, 1032);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [30..30][1032..30].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      int int0 = (-1011);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
      Integer integer0 = new Integer(0);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.columns();
      sparseMatrix0.toCSV();
      cCSMatrix0.setRow(10, 0.0);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) sparseMatrix0);
      matrix0.euclideanNorm();
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      int int0 = 0;
      double double0 = 1587.844149;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.insert((Matrix) sparseMatrix0, 0, 0);
      Matrix.block(matrix0, rowMajorSparseMatrix0, sparseMatrix0, sparseMatrix0);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = (Locale)locale0.clone();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(1395);
      parsePosition0.setIndex(17);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat1 = new DecimalFormat("2_*d\u0002abE\">T", decimalFormatSymbols0);
      Currency currency0 = decimalFormat1.getCurrency();
      decimalFormat0.setCurrency(currency0);
      Integer integer0 = new Integer((-1496));
      locale1.getUnicodeLocaleKeys();
      locale0.getISO3Country();
      DecimalFormat decimalFormat2 = (DecimalFormat)NumberFormat.getInstance();
      sparseMatrix0.toCSV((NumberFormat) decimalFormat2);
      sparseMatrix0.trace();
      sparseMatrix0.rank();
      CCSMatrix.identity(8);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("TWN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(4133);
      parsePosition0.setIndex((-1496));
      int int0 = (-3366);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("2_*d\u0002abE\">T", decimalFormatSymbols0);
      Currency currency0 = decimalFormat0.getCurrency();
      decimalFormat0.setCurrency(currency0);
      Integer integer0 = new Integer((-3366));
      locale0.getUnicodeLocaleKeys();
      parsePosition0.toString();
      NumberFormat.getInstance();
      decimalFormat0.setMaximumIntegerDigits(4133);
      currency0.getDisplayName();
      sparseMatrix0.trace();
      sparseMatrix0.rank();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-255.17);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 879.068731857;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1085.0;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = (-2058005161);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.blankOfRows((-2058005161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2058005161x7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      int int0 = 0;
      double double0 = 1587.844149;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 30);
      Locale locale0 = Locale.US;
      NumberFormat.getCurrencyInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(30);
      int int0 = 337;
      SparseMatrix sparseMatrix1 = SparseMatrix.identity(337);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) sparseMatrix1, (-3366), 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -3366x30
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      Double.sum(0.0, 1587.844149);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0);
      linkedList0.clear();
      linkedList0.add(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      linkedList1.addFirst(double1);
      linkedList1.addFirst(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList1.addAll((Collection<? extends Double>) linkedList0);
      RowMajorSparseMatrix.zero(0, 0, 0);
      rowMajorSparseMatrix0.removeRow(0);
      Integer integer0 = new Integer(32);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1587.844149;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(32, 1241, doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      denseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn((-3229));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-3229' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 2032;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2032, 2032);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInRow(2032);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2032' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(4133);
      int int0 = (-1496);
      parsePosition0.setIndex((-1496));
      DecimalFormatSymbols.getInstance();
      parsePosition0.toString();
      NumberFormat.getInstance();
      sparseMatrix0.swapColumns(1042, 680);
      CRSMatrix cRSMatrix0 = new CRSMatrix(680, 1042);
      cRSMatrix0.divide((-1496));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldRows(vectorAccumulator0);
      Vector vector0 = sparseMatrix0.toColumnVector();
      cRSMatrix0.insertColumn(int0, vector0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      ParsePosition parsePosition0 = new ParsePosition((-1011));
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
      Integer integer0 = new Integer(0);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      matrix0.columns();
      sparseMatrix0.toCSV();
      matrix0.setRow(10, 0.0);
      matrix0.insert((Matrix) sparseMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldRows(vectorAccumulator1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale.getISOLanguages();
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(1042);
      int int0 = (-1073741851);
      parsePosition0.setIndex((-1073741851));
      DecimalFormatSymbols.getInstance();
      locale0.getUnicodeLocaleKeys();
      sparseMatrix0.swapColumns(680, 680);
      CRSMatrix.zero(4133, 680, 17);
      Matrix matrix0 = sparseMatrix0.sliceBottomRight(4133, 17);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-1073741851), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 4133;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      NumberFormat.getCurrencyInstance(locale0);
      int int1 = 1042;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(4133);
      int int2 = (-1496);
      parsePosition0.setIndex((-1496));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.updateRow(17, vectorFunction0);
      DecimalFormatSymbols.getInstance();
      locale0.getUnicodeLocaleKeys();
      parsePosition0.toString();
      NumberFormat.getInstance();
      int int3 = 680;
      sparseMatrix0.swapColumns(1042, 680);
      CRSMatrix cRSMatrix0 = new CRSMatrix(int3, int1);
      int int4 = 7;
      Matrix matrix0 = sparseMatrix0.sliceBottomRight(int0, int4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Vector vector0 = null;
      Matrix matrix1 = matrix0.insertRow(int2, vector0);
      cRSMatrix0.setRow(int2, (double) int3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberFormat.getPercentInstance();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(30);
      double double0 = 0.0;
      cCSMatrix0.setRow(17, 0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformRow(30, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '30' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      ParsePosition parsePosition0 = new ParsePosition(1781);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("][");
      Integer integer0 = new Integer(1781);
      NumberFormat.getInstance();
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextBoolean();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(37, mockRandom0);
      basic2DMatrix0.mkString(numberFormat0, "][", "][");
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int1 = Double.MAX_EXPONENT;
      Locale locale0 = Locale.TAIWAN;
      int int2 = 2729;
      Matrix matrix0 = cCSMatrix0.blank();
      double double1 = Locale.LanguageRange.MAX_WEIGHT;
      cCSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toRowMajorSparseMatrix();
      Integer integer0 = new Integer(1023);
      Matrix matrix1 = cCSMatrix0.removeFirstColumn();
      Integer integer1 = new Integer(2729);
      double[][] doubleArray0 = new double[0][6];
      Matrix.from2DArray(doubleArray0);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix2 = matrix0.add((-3046.5));
      matrix2.transpose();
      // Undeclared exception!
      try { 
        matrix1.add(matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 2x1 does not equal to 2x2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 22;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(32, 22);
      CCSMatrix cCSMatrix0 = new CCSMatrix(32, 32, 22);
      // Undeclared exception!
      try { 
        sparseMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.foldRows(vectorAccumulator0);
      basic1DMatrix0.manhattanNorm();
      int int0 = 399;
      int int1 = (-1601);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(399, (-1601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 399x-1601
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      DenseVector.fromArray(doubleArray0);
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      linkedList0.add(double0);
      Double double1 = new Double(0);
      linkedList0.clear();
      linkedList0.add(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.equals((Object) rowMajorSparseMatrix0);
      Integer integer0 = new Integer((-34));
      int[] intArray0 = new int[6];
      intArray0[0] = (-34);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-34' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 1535;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1535, 1535);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale.getISOLanguages();
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(1042);
      parsePosition0.setIndex(1535);
      parsePosition0.setIndex((-1073741823));
      DecimalFormatSymbols.getInstance();
      locale0.getUnicodeLocaleKeys();
      int int1 = 680;
      sparseMatrix0.swapColumns(680, 680);
      CRSMatrix cRSMatrix0 = new CRSMatrix(17, 1535);
      CCSMatrix.zero(680, 680);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(22, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.product();
      cCSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(0, vectorFunction0);
      double[][] doubleArray0 = new double[0][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      cCSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(0, vectorFunction0);
      double[][] doubleArray0 = new double[0][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.transpose();
      matrix0.add(matrix1);
      cCSMatrix0.rows();
      matrix0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(998, 998, 3317);
      cCSMatrix0.determinant();
      int int0 = 8;
      cCSMatrix0.getColumn(int0);
      cCSMatrix0.columnMajorIterator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cCSMatrix0.mkString(numberFormat0);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale.getISOLanguages();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(4133);
      parsePosition0.setIndex((-1073741823));
      DecimalFormatSymbols.getInstance();
      locale0.getUnicodeLocaleKeys();
      NumberFormat.getInstance();
      sparseMatrix0.swapColumns(680, 680);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn((-1073741823), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4132
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 4133;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition(4133);
      parsePosition0.setIndex(1042);
      parsePosition0.setIndex(4133);
      DecimalFormatSymbols.getInstance();
      locale0.getUnicodeLocaleKeys();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1073741823)).when(matrixAccumulator0).accumulate();
      sparseMatrix0.foldNonZero(matrixAccumulator0);
      int int1 = 680;
      sparseMatrix0.swapColumns(680, 680);
      CRSMatrix cRSMatrix0 = new CRSMatrix(17, 4133);
      CCSMatrix.diagonal(4133, (-1073741823));
      int int2 = 16;
      sparseMatrix0.insertRow(680, (Vector) null);
      int int3 = (-1578);
      int int4 = 1458;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int3, int4, int1);
      MockRandom mockRandom0 = new MockRandom(int0);
      int int5 = 454;
      double double0 = 2.0;
      CRSMatrix.randomSymmetric(int5, double0, (Random) mockRandom0);
      cCSMatrix0.multiply((double) int2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 0.0);
      cRSMatrix0.removeLastRow();
      CRSMatrix cRSMatrix1 = new CRSMatrix(16, 16, 16);
      cRSMatrix1.toRowMajorSparseMatrix();
      double[][] doubleArray0 = new double[0][9];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInColumn(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 16;
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(16, 16);
      cRSMatrix0.removeLastRow();
      CRSMatrix cRSMatrix1 = new CRSMatrix(16, 16, 16);
      cRSMatrix1.toRowMajorSparseMatrix();
      double[][] doubleArray0 = new double[0][9];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInColumn(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 3317;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3317, 1925, 1925);
      // Undeclared exception!
      try { 
        cCSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 16;
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 0.0);
      cRSMatrix0.removeLastRow();
      CRSMatrix cRSMatrix1 = new CRSMatrix(16, 16, 16);
      cRSMatrix1.toRowMajorSparseMatrix();
      double[][] doubleArray0 = new double[1][9];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.norm();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInColumn(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 4133;
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale.getISOLanguages();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1042);
      parsePosition0.setIndex(4133);
      int int1 = (-1073741823);
      parsePosition0.setIndex((-1073741823));
      DecimalFormatSymbols.getInstance();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0);
      linkedList0.clear();
      linkedList0.add(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      DenseMatrix.from1DArray(0, 0, (double[]) null);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.equals((Object) rowMajorSparseMatrix0);
      Integer integer0 = new Integer((-34));
      int[] intArray0 = new int[1];
      intArray0[0] = (-34);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-34' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 931;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(931);
      double double0 = denseMatrix0.diagonalProduct();
      SparseMatrix.identity(931);
      int int1 = 1950;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1950;
      denseMatrix0.divide(0.0);
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      double double1 = 0.0;
      doubleArray0[4] = double1;
      doubleArray0[5] = (double) int1;
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(int1, int0, doubleArray0);
      Locale locale0 = Locale.CHINESE;
      MockRandom mockRandom0 = new MockRandom(int0);
      String string0 = " ";
      CCSMatrix cCSMatrix0 = CCSMatrix.fromMatrixMarket(string0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(int1, int1);
      ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      double[][] doubleArrayArray0 = null;
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(doubleArrayArray0);
      denseMatrix1.insert((Matrix) basic2DMatrix1);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int2 = 1539;
      cCSMatrix0.getOrElse(int0, int2, int2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 30;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 30);
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      numberFormat0.setMinimumFractionDigits(30);
      NumberFormat.getInstance();
      sparseMatrix0.mkString(numberFormat0);
      Matrix matrix0 = sparseMatrix0.removeLastColumn();
      int int1 = 615;
      VectorAccumulator vectorAccumulator0 = null;
      matrix0.toMatrixMarket();
      matrix0.toDenseMatrix();
      matrix0.minInRow(30);
      matrix0.foldColumn(int1, vectorAccumulator0);
      int int2 = (-1092);
      Matrix matrix1 = matrix0.sliceTopLeft(int0, int2);
      int int3 = 703;
      int int4 = 1846;
      matrix1.copyOfShape(int3, int4);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2729);
      Integer integer1 = new Integer(2729);
      double[][] doubleArray0 = new double[0][6];
      Matrix.from2DArray(doubleArray0);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.add(2.0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      CRSMatrix.randomSymmetric(645, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.clear();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.listIterator();
      int int0 = 4112;
      Matrix.diagonal(4112, 629.81786);
      MockRandom mockRandom0 = new MockRandom(25);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3028, 3028);
      Vector.fromCollection(linkedList1);
      int int1 = 4158;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix.unit(3028, 3028);
      cCSMatrix0.removeLastRow();
      int int2 = (-1191);
      CCSMatrix.zero(int1, int0, int2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4133, 4133);
      Locale locale0 = Locale.US;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale.getISOLanguages();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      DecimalFormatSymbols.getInstance();
      locale0.getUnicodeLocaleKeys();
      NumberFormat.getInstance();
      sparseMatrix0.swapColumns(680, 680);
      CRSMatrix cRSMatrix0 = new CRSMatrix(569, 4133);
      Matrix matrix0 = sparseMatrix0.sliceBottomRight(4133, 17);
      cRSMatrix0.isZeroAt(17, (-1073741823));
      sparseMatrix0.max();
      cRSMatrix0.subtract((double) 4133);
      matrix0.shuffle();
      cRSMatrix0.insertRow(680, (Vector) null);
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(16, 16);
      cRSMatrix0.removeLastRow();
      CRSMatrix cRSMatrix1 = new CRSMatrix(16, 16, 16);
      cRSMatrix1.toRowMajorSparseMatrix();
      int int0 = 2729;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(16, 2729, (double[]) null);
      CCSMatrix.zero(5455, 1545, 3028);
      Matrix.from1DArray(5455, 3028, (double[]) null);
      SparseVector sparseVector0 = SparseVector.zero(5455);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(1545, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1568, 1568, 1568);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.product();
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      cCSMatrix0.toCSV(numberFormat0);
      cCSMatrix0.blank();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      Currency currency0 = Currency.getInstance(locale0);
      numberFormat0.setCurrency(currency0);
      cCSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      DenseVector denseVector0 = DenseVector.unit(2);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      numberFormat0.setMaximumFractionDigits(1569);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      SparseVector sparseVector0 = vector0.toSparseVector();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Vector.fromArray(doubleArray0);
      sparseVector0.multiply((double) 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("2, 0\n0, 2\n");
      // Undeclared exception!
      try { 
        basic1DMatrix0.insertColumn(374, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1.0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(998, 998, 3317);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1143, 2711.723157537333);
      Matrix matrix0 = Matrix.diagonal(998, 998);
      cRSMatrix0.hadamardProduct(cCSMatrix0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 2609;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2609);
      DenseVector denseVector0 = DenseVector.unit(2609);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      Matrix matrix0 = vector0.toColumnMatrix();
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Matrix matrix1 = Matrix.identity(2);
      matrix1.product();
      matrix0.apply(matrixOperation0);
      vector0.shuffle();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(")$=PqH;-a'x{=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(998, 998, 3319);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(998, 998, 3319);
      cCSMatrix1.equals((Object) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.product();
      int int0 = Double.MAX_EXPONENT;
      Locale locale0 = Locale.TAIWAN;
      Matrix matrix0 = cCSMatrix0.blank();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cCSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Integer integer0 = new Integer(1023);
      Matrix matrix1 = cCSMatrix0.removeFirstColumn();
      Integer integer1 = new Integer(2729);
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix2 = Matrix.from2DArray(doubleArray0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(2729);
      Matrix matrix3 = basic1DMatrix0.add(2.0);
      matrix0.transpose();
      cCSMatrix0.add((Matrix) basic1DMatrix0);
      matrix0.rows();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.from2DArray(doubleArray0);
      matrix2.insert(matrix3);
      MatrixFunction matrixFunction0 = null;
      rowMajorSparseMatrix0.update(matrixFunction0);
      rowMajorSparseMatrix0.removeLastRow();
      Matrix matrix4 = matrix0.blank();
      int int1 = 132;
      matrix4.maxInRow(int1);
      int int2 = 10;
      int int3 = 1371;
      matrix1.updateAt(int3, int2, matrixFunction0);
  }
}
