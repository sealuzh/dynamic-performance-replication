/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 23:43:17 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = new Token();
      jVCParser0.getNextToken();
      jVCParser0.disable_tracing();
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      JVCParser.main(stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3);
      JVCParser jVCParser1 = new JVCParser(byteArrayInputStream0);
      jVCParser1.parse();
      JVCParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = new Token();
      jVCParser0.jj_nt = token0;
      Token token1 = jVCParser0.getNextToken();
      token1.kind = 1;
      jVCParser0.disable_tracing();
      token1.beginLine = 70;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "n\"[[+\"";
      token1.next = jVCParser0.token;
      int int0 = (-27);
      token1.kind = (-27);
      stringArray0[1] = "n\"[[+\"";
      stringArray0[2] = "n\"[[+\"";
      stringArray0[3] = "n";
      JVCParser.main(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParser.main(stringArray0);
      jVCParser0.getNextToken();
      jVCParser0.generateParseException();
      // Undeclared exception!
      try { 
        jVCParser0.parse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = new Token();
      jVCParser0.jj_nt = token0;
      Token token1 = jVCParser0.getNextToken();
      token1.kind = 1;
      jVCParser0.disable_tracing();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "n\"[[+\"";
      token1.next = jVCParser0.token;
      token1.kind = 15;
      stringArray0[1] = "n\"[[+\"";
      stringArray0[2] = "n\"[[+\"";
      stringArray0[3] = "n";
      JVCParser.main(stringArray0);
      JVCParser.main(stringArray0);
      jVCParser0.getNextToken();
      jVCParser0.getToken(86);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) pipedInputStream0, "n\"[[+\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: n\"[[+\"
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = new Token();
      jVCParser0.jj_nt = token0;
      Token token1 = jVCParser0.getNextToken();
      token1.kind = 1;
      jVCParser0.disable_tracing();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"[[+\"";
      token1.next = jVCParser0.token;
      token1.kind = 15;
      stringArray0[1] = "\"[[+\"";
      stringArray0[2] = "\"[[+\"";
      stringArray0[3] = "\"";
      JVCParser.main(stringArray0);
      JVCParser.main(stringArray0);
      jVCParser0.getNextToken();
      jVCParser0.generateParseException();
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" <ESCAPED_CHAR> \"\\\" \"\" at line 1, column 1.
         // Was expecting one of:
         //     <EOF> 
         //     \"[[\" ...
         //     \"[[=\" ...
         //     \"[[==\" ...
         //     \"[[+\" ...
         //     \"[[!\" ...
         //     <EOL> ...
         //     <START_CACHE_BLOCK> ...
         //     <END_CACHE_BLOCK> ...
         //     <END_TAG> ...
         //     <IMPORT> ...
         //     <OTHER> ...
         //     
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.getNextToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16, 100);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte) (-39), 95);
      byteArrayInputStream0.skip(0L);
      jVCParser0.getNextToken();
      jVCParser0.getNextToken();
      Locale locale0 = new Locale("\"[[+\"", "\r", "[[+");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JVCParser jVCParser1 = null;
      try {
        jVCParser1 = new JVCParser(" ,6'(xtUUu,", set0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.getNextToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16, 100);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("NpDy}RKeNL?6@R");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".1DPl8u*rZ)]Y2uG");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), 238);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParser0.ReInit(jVCParserTokenManager0);
      jVCParser0.parse();
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.enable_tracing();
      Token.newToken((int) (byte) (-39));
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.getToken((byte)15);
      JVCParser.main(jVCParserTokenManager0.lexStateNames);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JVCParser.main(jVCParserTokenManager0.jjstrLiteralImages);
      jVCParser0.generateParseException();
      JVCParser jVCParser1 = new JVCParser("NpDy}RKeNL?6@R", linkedHashSet0);
      assertFalse(jVCParser1.equals((Object)jVCParser0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = jVCParser0.getNextToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)15;
      token0.kind = 1;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 100);
      jVCParser0.disable_tracing();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"";
      stringArray0[1] = "\"[[+\"";
      token0.endLine = (-1611);
      stringReader0.reset();
      stringArray0[2] = "\"";
      stringArray0[3] = "";
      stringArray0[4] = "\"[[+\"";
      stringArray0[5] = "\"[[+\"";
      stringArray0[6] = "~4Ta/J}\u0005pG4";
      JVCParser.main(stringArray0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nested tag in null, line: 1
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.getNextToken();
      Token token0 = new Token((-2767));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"[[+\"";
      stringArray0[1] = null;
      stringArray0[2] = "\"";
      stringArray0[3] = "\"";
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) null, stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = jVCParser0.getNextToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)15;
      token0.kind = 1;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 100);
      jVCParser0.disable_tracing();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"[[+\"";
      token0.next = jVCParser0.token;
      stringArray0[1] = "\"[[+\"";
      stringArray0[2] = "\"[[+\"";
      stringArray0[3] = "\"";
      stringArray0[4] = "\"[[+\"";
      stringArray0[5] = "\"";
      JVCParser.main(stringArray0);
      // Undeclared exception!
      jVCParser0.parse();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "\"[[+\"";
      StringReader stringReader0 = new StringReader("\"[[+\"");
      StringReader stringReader1 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader1);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "2\"*?tJ:59";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)0);
      StringReader stringReader0 = new StringReader("2\"*?tJ:59");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.getNextToken();
      jVCParser0.parse();
      String string1 = "|pE7t6-7P,Q\\KJfx";
      StringReader stringReader1 = new StringReader("|pE7t6-7P,QKJfx");
      StringReader stringReader2 = new StringReader("|pE7t6-7P,QKJfx");
      // Undeclared exception!
      try { 
        JVCParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = jVCParser0.getNextToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      stringReader0.read();
      byteArray0[1] = (byte)15;
      token0.beginColumn = (int) (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16, 100);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), 238);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.jjmatchedKind = 2446;
      jVCParser0.ReInit(jVCParserTokenManager0);
      jVCParser0.parse();
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.enable_tracing();
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.getToken((byte)0);
      jVCParser0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~4Ta/J}\u0005pG4");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.parse();
      StringReader stringReader1 = new StringReader("_sb.append(\"~4Ta/J}5pG4\");");
      StringReader stringReader2 = new StringReader("_sb.append(\"~4Ta/J}5pG4\");");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 100, 2389);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParser0.ReInit(jVCParserTokenManager0);
      jVCParser0.parse();
      jVCParser0.ReInit((Reader) stringReader2);
      jVCParser0.enable_tracing();
      jVCParser0.ReInit((Reader) stringReader2);
      jVCParser0.getToken((-1095));
      jVCParser0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wff?34un(");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Wff?34un(";
      jVCParser0.parse();
      StringReader stringReader1 = new StringReader(" (");
      StringReader stringReader2 = new StringReader(" (");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wff?34un(");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, (-1170), (-1711));
      JVCParser jVCParser1 = new JVCParser(pipedInputStream0);
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals("_sb.append(\"Wff?34un(\");", string0);
      
      StringReader stringReader1 = new StringReader("_sb.append(\"Wff?34un(\");");
      jVCParser1.ReInit((Reader) null);
      assertEquals(100, jVCParser1.debugColumn);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.getNextToken();
      JVCParser jVCParser1 = new JVCParser(stringReader0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~4Ta/J}\u0005pG4");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.parse();
      StringReader stringReader1 = new StringReader("_sb.append(\"~4Ta/J}5pG4\");");
      StringReader stringReader2 = new StringReader("UM9rpzwoSVIi\"fa9M");
      assertFalse(stringReader2.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        JVCParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Include file (";
      stringArray0[1] = "com.pmdesigns.jvc.tools.SimpleCharStream";
      stringArray0[2] = "IN_COMMENT";
      stringArray0[3] = "-debug";
      JVCParser.main(stringArray0);
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      Token token0 = new Token((-1936647496), "");
      jVCParser0.jj_nt = token0;
      jVCParser0.ReInit((JVCParserTokenManager) null);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zop3_Xea&7CBIJk8z");
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      int int0 = 1906;
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~r?*in=pZ[u");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      StringReader stringReader1 = new StringReader("~r?*in=pZ[u");
      JVCParser jVCParser1 = new JVCParser(stringReader1);
      StringReader stringReader2 = new StringReader("T&/S~!T`{|,bdE=");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JVCParser jVCParser2 = null;
      try {
        jVCParser2 = new JVCParser("Q", linkedHashSet0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~r?*in=pZ[u");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      String string0 = jVCParser0.parse();
      assertEquals("_sb.append(\"~r?*in=pZ[u\");", string0);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.close();
      pipedInputStream0.read();
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      jVCParser0.getToken((-3151));
      pipedInputStream0.close();
      jVCParser0.enable_tracing();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-6);
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, (-7), (int) (byte)28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = jVCParser0.getNextToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)15;
      token0.kind = 808;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 808, 100);
      char[] charArray0 = new char[2];
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), 238);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParser0.ReInit(jVCParserTokenManager0);
      jVCParser0.parse();
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.enable_tracing();
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.getToken((byte)14);
      jVCParser0.getNextToken();
      jVCParser0.generateParseException();
      jVCParser0.generateParseException();
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0);
      JVCParser jVCParser1 = null;
      try {
        jVCParser1 = new JVCParser("2\"*?tJ:59", (Set<String>) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~4Ta/J}\u0005pG4");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.parse();
      StringReader stringReader1 = new StringReader("_sb.append(\"~4Ta/J}5pG4\");");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 100, 2389);
      jVCParser0.parse();
      jVCParser0.ReInit((Reader) stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jVCParser0.enable_tracing();
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.getToken(100);
      jVCParser0.getNextToken();
      jVCParser0.generateParseException();
      jVCParser0.generateParseException();
      jVCParser0.disable_tracing();
      StringReader stringReader2 = new StringReader("");
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.ReInit((Reader) stringReader0);
      JVCParser.main(jVCParser0.token_source.jjstrLiteralImages);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.close();
      pipedInputStream0.read();
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      pipedInputStream0.markSupported();
      jVCParser0.getToken((-3151));
      pipedInputStream0.close();
      jVCParser0.enable_tracing();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-6);
      jVCParser0.ReInit((InputStream) pipedInputStream0, (String) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 61, (byte)92);
      byteArrayInputStream0.reset();
      String string0 = "-debug";
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) byteArrayInputStream0, "-debug");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: -debug
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~r?*in=pZ[u");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MQ-llp=Q#JW}!";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6J|5c_.<[*ck^h>");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 47);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 47, 92);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) bufferedInputStream0, "Nested commented tag in ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      jVCParser0.debugColumn = 0;
      jVCParser0.debugColumn = (-1);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('(');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[+\"");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.getNextToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16, 0);
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'W';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      jVCParser0.ReInit((InputStream) sequenceInputStream0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-385));
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JVCParser jVCParser0 = new JVCParser(bufferedInputStream0);
      jVCParser0.getNextToken();
      jVCParser0.enable_tracing();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)0;
      try { 
        bufferedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "s2WbE6u/[yz~5GD\"5q";
      String string0 = "";
      stringArray0[1] = "";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser(byteArrayInputStream0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 516);
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InputStream inputStream0 = null;
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      String string0 = "com.pmdesigns.jvc.tools.SimpleCharStream";
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser(pipedInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: com.pmdesigns.jvc.tools.SimpleCharStream
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.ReInit((Reader) stringReader0);
      File file0 = MockFile.createTempFile("-debug", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-debug";
      stringArray0[1] = "-debug";
      stringArray0[2] = "-debug";
      JVCParser.main(stringArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\b";
      stringArray0[1] = "";
      stringArray0[2] = "com.pmdesigns.jvc.tools.SimpleCharStream";
      stringArray0[3] = "ih";
      stringArray0[4] = ".";
      stringArray0[5] = "vY0NW";
      JVCParser.main(stringArray0);
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<!-{rhvHoq]LjuI6M?");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.getNextToken();
      int int0 = 1029;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 1029);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
