/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:16:17 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.containsValue((Object) null);
      linkedTreeMap_KeySet0.contains((Object) null);
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap1.isEmpty();
      linkedTreeMap1.size();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, "");
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.add(abstractMap_SimpleEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove(linkedTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      Object object0 = new Object();
      linkedTreeMap0.remove(object0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Object object1 = linkedTreeMap_Node0.key;
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      linkedTreeMap0.remove((Object) "");
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node0.setValue((Object) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      assertNotNull(linkedTreeMap_Node1);
      
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>((Comparator<? super Integer>) null);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.size();
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap1.clear();
      String string0 = "";
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = null;
      try {
        linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>((LinkedTreeMap.Node<Object, Integer>) null, "", (LinkedTreeMap.Node<Object, Integer>) null, (LinkedTreeMap.Node<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.remove((Object) null);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Iterator<Object> iterator0 = linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      linkedTreeMap1.size();
      linkedTreeMap1.findByObject(iterator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap1.new KeySet();
      Integer integer0 = new Integer(0);
      linkedTreeMap_KeySet1.remove(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Integer> linkedTreeMap2 = new LinkedTreeMap<String, Integer>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap2.new EntrySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap2.new KeySet();
      linkedTreeMap_EntrySet0.retainAll(linkedTreeMap_KeySet2);
      linkedTreeMap_EntrySet0.size();
      Comparator<Object> comparator1 = null;
      LinkedTreeMap<Object, Object> linkedTreeMap3 = new LinkedTreeMap<Object, Object>((Comparator<? super Object>) null);
      linkedTreeMap3.clear();
      linkedTreeMap3.remove((Object) null);
      // Undeclared exception!
      try { 
        linkedTreeMap3.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.keySet();
      linkedTreeMap_KeySet0.size();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_KeySet0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      assertEquals((-1), linkedTreeMap0.size());
      
      linkedTreeMap_EntrySet1.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.computeIfPresent(linkedTreeMap1, biFunction0);
      linkedTreeMap0.keySet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap2 = new LinkedTreeMap<Integer, Integer>(comparator0);
      linkedTreeMap2.keySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node0.getValue();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap2.new KeySet();
      linkedTreeMap_KeySet0.clear();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap2.new EntrySet();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      String string0 = " ln$7oh7[zvVY*8";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node3, " ln$7oh7[zvVY*8", linkedTreeMap_Node1, linkedTreeMap_Node3);
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.add(linkedTreeMap_Node4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.value = "";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap_Node0.prev = linkedTreeMap_Node2;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node0.first();
      assertNotNull(linkedTreeMap_Node3);
      
      boolean boolean0 = linkedTreeMap_Node3.equals(linkedTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = linkedTreeMap_Node4.value;
      boolean boolean1 = linkedTreeMap_EntrySet0.remove((Object) null);
      assertFalse(boolean1 == boolean0);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>(comparator1);
      linkedTreeMap1.get("");
      assertEquals(0, linkedTreeMap1.size());
      
      LinkedTreeMap<Integer, String> linkedTreeMap2 = new LinkedTreeMap<Integer, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap2.new EntrySet();
      int int0 = linkedTreeMap_EntrySet1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.value = "";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap_Node0.prev = linkedTreeMap_Node2;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node0.first();
      linkedTreeMap_Node3.equals(linkedTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet1.iterator();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = linkedTreeMap_Node4.value;
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node3);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>(comparator1);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node6 = linkedTreeMap_Node5.first();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node7 = null;
      try {
        linkedTreeMap_Node7 = new LinkedTreeMap.Node<Object, Integer>((LinkedTreeMap.Node<Object, Integer>) null, "", (LinkedTreeMap.Node<Object, Integer>) null, linkedTreeMap_Node6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator0);
      linkedTreeMap1.keySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      linkedTreeMap_KeySet0.size();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.remove(linkedTreeMap_EntrySet0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap1.header;
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, linkedTreeMap1, linkedTreeMap_Node0, linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal(linkedTreeMap_Node1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2138)).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node1, linkedTreeMap_Node1, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.height = 0;
      linkedTreeMap0.root = linkedTreeMap_Node2;
      Object object0 = new Object();
      linkedTreeMap0.containsKey(object0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.add(linkedTreeMap_Node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap1.header;
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node1);
      
      linkedTreeMap_Node1.first();
      linkedTreeMap_Node0.getKey();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node2, linkedTreeMap0, linkedTreeMap_Node2, linkedTreeMap_Node2);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node4 = linkedTreeMap_Node3.last();
      assertTrue(linkedTreeMap0.equals((Object)linkedTreeMap1));
      
      String string0 = linkedTreeMap_Node4.toString();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals("{}=null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "", linkedTreeMap_Node0, linkedTreeMap_Node1);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      linkedTreeMap_Node3.first();
      boolean boolean0 = linkedTreeMap_Node3.equals(linkedTreeMap_Node0);
      assertFalse(linkedTreeMap_Node1.equals((Object)linkedTreeMap_Node3));
      assertFalse(boolean0);
      
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>(comparator1);
      linkedTreeMap1.get((Object) null);
      LinkedTreeMap<Integer, String> linkedTreeMap2 = new LinkedTreeMap<Integer, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Set<Object> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node0.first();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Integer, Object>();
      Integer integer0 = linkedTreeMap_Node2.key;
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet1.contains(linkedTreeMap_Node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap0, " is not Comparable");
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleEntry0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.replaceAll(biFunction0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.contains(linkedTreeMap1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet1.clear();
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      linkedTreeMap_Node0.first();
      linkedTreeMap_Node0.last();
      LinkedTreeMap<Object, Integer> linkedTreeMap2 = new LinkedTreeMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet2.remove(linkedTreeMap_Node0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap_Node2.getKey();
      Integer integer1 = new Integer((-1840));
      linkedTreeMap2.put(integer1, integer1);
      assertEquals(1, linkedTreeMap2.size());
      
      LinkedTreeMap<Object, Object> linkedTreeMap3 = new LinkedTreeMap<Object, Object>((Comparator<? super Object>) null);
      Integer integer2 = new Integer((-1));
      Integer.compare(0, 0);
      Object object0 = new Object();
      boolean boolean0 = linkedTreeMap3.containsKey(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.value = "";
      linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node0.first();
      boolean boolean0 = linkedTreeMap_Node2.equals(linkedTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node4 = linkedTreeMap_Node3.first();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node4, "", linkedTreeMap_Node3, linkedTreeMap_Node4);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node6 = linkedTreeMap_Node5.first();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node7 = linkedTreeMap_Node6.last();
      boolean boolean1 = linkedTreeMap_Node4.equals(linkedTreeMap_Node7);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1020).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      Integer integer0 = new Integer((-2138));
      linkedTreeMap0.put("@QP@<.mx^[)dM", integer0);
      linkedTreeMap_Node2.getKey();
      linkedTreeMap0.removeInternalByKey("@QP@<.mx^[)dM");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(1, linkedTreeMap0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedTreeMap_EntrySet0.retainAll(linkedList0);
      linkedTreeMap_EntrySet0.iterator();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1602)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      linkedTreeMap0.put("", "@QP@<.mx^[)dM");
      linkedTreeMap0.find(" is not Comparable", false);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedTreeMap_EntrySet0.retainAll(linkedList0);
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("b] lAythat_H2z", comparator0);
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      linkedTreeMap0.replaceAll(biFunction0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.value = "K";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap_Node2.equals(linkedTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      Integer.remainderUnsigned(0, 1959);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node3 = null;
      try {
        linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Object>((LinkedTreeMap.Node<Integer, Object>) null, integer0, (LinkedTreeMap.Node<Integer, Object>) null, (LinkedTreeMap.Node<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1602), (-1602), 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Integer integer0 = new Integer((-1602));
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer.compare((-1602), (-1602));
      linkedTreeMap0.replaceAll(biFunction0);
      linkedTreeMap0.put("@QP@<.mx^[)dM", integer0);
      linkedTreeMap0.removeInternalByKey("@QP@<.mx^[)dM");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.put("PNJ#1.:B1y[M`vZlasc", integer0);
      linkedTreeMap0.find("PNJ#1.:B1y[M`vZlasc", true);
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap1.putAll(linkedTreeMap0);
      assertEquals(3, linkedTreeMap0.size());
      
      linkedTreeMap1.entrySet();
      assertEquals(2, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1602), (-1602), (-1602), 112).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Integer integer0 = new Integer((-1602));
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer.compare((-1602), (-1602));
      linkedTreeMap0.replaceAll(biFunction0);
      linkedTreeMap0.put("@QP@<.mx^[)dM", integer0);
      linkedTreeMap0.removeInternalByKey("@QP@<.mx^[)dM");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.put("PNJ#1.:B1y[M`vZlasc", integer0);
      linkedTreeMap0.find("PNJ#1.:B1y[M`vZlasc", true);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap2 = new LinkedTreeMap<Object, Integer>(comparator2);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = linkedTreeMap2.root;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = null;
      try {
        linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>((LinkedTreeMap.Node<Object, Integer>) null, (Object) null, (LinkedTreeMap.Node<Object, Integer>) null, (LinkedTreeMap.Node<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("~", "~");
      linkedTreeMap0.put("", (Object) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("@-eQ@/0R;", true);
      assertNotNull(linkedTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<Object, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Integer integer0 = new Integer(1271);
      Integer.compare(1271, 2);
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.replaceAll(biFunction0);
      linkedTreeMap0.put("@QP@<.mx^[)dM", (Object) null);
      Object object0 = new Object();
      linkedTreeMap0.removeInternalByKey(object0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap1.findByObject((Object) null);
      linkedTreeMap0.put("C*):q8tP/y/?mMSK*", (Object) null);
      linkedTreeMap0.find("p<_.", true);
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.put(linkedTreeMap_EntrySet0, "C*):q8tP/y/?mMSK*");
      hashMap0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        linkedTreeMap1.putAll(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap$EntrySet is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap_Node0.setValue(linkedTreeMap_Node1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator0);
      hashMap0.put(linkedTreeMap_Node0, linkedTreeMap1);
      // Undeclared exception!
      try { 
        linkedTreeMap0.putAll(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap$Node is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Integer integer0 = new Integer(1271);
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.replaceAll(biFunction0);
      linkedTreeMap0.put("@QP@<.mx^[)dM", linkedTreeMap0);
      Object object0 = new Object();
      linkedTreeMap0.removeInternalByKey(object0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap1.findByObject("@QP@<.mx^[)dM");
      linkedTreeMap0.put("C*):q8tP/y/?mMSK*", (Object) null);
      linkedTreeMap0.find("p<_.", true);
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.put(linkedTreeMap_EntrySet0, "C*):q8tP/y/?mMSK*");
      hashMap0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        linkedTreeMap1.putAll(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap$EntrySet is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Integer integer0 = new Integer(1271);
      Integer.compare((-3986), 1271);
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.replaceAll(biFunction0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node3, object0, linkedTreeMap_Node3, linkedTreeMap_Node2);
      linkedTreeMap0.put("@QP@<.mx^[)dM", linkedTreeMap_Node4);
      linkedTreeMap0.removeInternalByKey((Object) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap1.findByObject((Object) null);
      linkedTreeMap0.put("@QP@<.mx^[)dM", "@QP@<.mx^[)dM");
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Integer.compare(1271, (-3986));
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.replaceAll(biFunction0);
      linkedTreeMap0.put("@QP@<.mx^[)dM", "@QP@<.mx^[)dM");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, (Object) null, linkedTreeMap_Node0, linkedTreeMap_Node2);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node4 = linkedTreeMap_Node3.right;
      linkedTreeMap1.findByObject((Object) null);
      linkedTreeMap0.put("b] lAythat_H2z", comparator0);
      linkedTreeMap0.find("W-v5NpxC@-WQ9\"J", true);
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap1.putAll(linkedTreeMap2);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedTreeMap2.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.value = "";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node0.first();
      boolean boolean0 = linkedTreeMap_Node3.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      
      linkedTreeMap_Node2.first();
      boolean boolean1 = linkedTreeMap_Node0.equals(linkedTreeMap_Node2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "", linkedTreeMap_Node0, linkedTreeMap_Node0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge(linkedTreeMap_Node1, linkedTreeMap_Node0, biFunction0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node1);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      linkedTreeMap_Node1.parent = linkedTreeMap_Node0.left;
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap_Node0.right = linkedTreeMap_Node0;
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.left = linkedTreeMap_Node0;
      linkedTreeMap_Node1.right = linkedTreeMap_Node0;
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<Object, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
      linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
      assertEquals((-2), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1602)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Integer integer0 = new Integer((-1602));
      linkedTreeMap0.size = (-1602);
      Integer.compare((-1602), (-1602));
      linkedTreeMap0.put("@QP@<.mx^[)dM", integer0);
      linkedTreeMap0.put("@QP@<.mx^[)dM", integer0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.next;
      linkedTreeMap1.removeInternal(linkedTreeMap_Node1, false);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap_KeySet0.forEach(consumer0);
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals((-1600), linkedTreeMap0.size());
      assertEquals((-1600), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("6{W:D%pgHu$*$esN", "6{W:D%pgHu$*$esN");
      String string0 = "a6U(8\\uC[D";
      linkedTreeMap0.put(string0, (Object) null);
      linkedTreeMap0.find(";D", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.remove(";D");
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Integer>();
      Integer integer0 = linkedTreeMap_Node0.getValue();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node1, "115)I68&", linkedTreeMap_Node1, linkedTreeMap_Node1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node2);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge(linkedTreeMap_Node1, abstractMap_SimpleEntry0, biFunction0);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      linkedTreeMap0.replaceAll(biFunction1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet1.contains(linkedTreeMap_Node2);
      assertEquals(0, linkedTreeMap0.size());
      assertFalse(boolean0);
  }
}
