/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:07:28 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 65;
      intArray0[1] = (-1);
      intArray0[2] = (-2040);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = 2169;
      intArray0[1] = 2169;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1225;
      intArray0[5] = (-2059);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2169, 0, 0, 1225, (-2059)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2653;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1523;
      intArray0[4] = 2333;
      intArray0[5] = (-338);
      intArray0[6] = 8159;
      intArray0[7] = (-3596);
      intArray0[8] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2653, 0, 0, 1523, 2333, (-338), 8159, (-3596), 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-1012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 66640;
      intArray0[1] = (-4024);
      intArray0[2] = 0;
      intArray0[3] = (-1140);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 6973;
      intArray0[7] = (-1333);
      intArray0[8] = 1652;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {66640, (-4024), 0, (-1140), 0, 0, 6973, (-1333), 1652}, intArray0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange((-4024), 4150);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {66640, (-4024), 0, (-1140), 0, 0, 6973, (-4024), 4150}, intArray0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {66640, (-4024), 0, (-1140), 0, 0, 6973, (-4024), 4150}, intArray0);
      assertEquals(9, intArray0.length);
      
      int[][] intArray1 = new int[8][0];
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 6973;
      intArray2[1] = 6973;
      intArray2[2] = 1652;
      intArray2[3] = 4150;
      intArray2[4] = 0;
      intArray2[5] = (-1333);
      intArray2[6] = 0;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-1333);
      intArray3[1] = (-1140);
      intArray3[2] = 0;
      intArray3[3] = 32;
      intArray3[4] = 0;
      intArray1[1] = intArray3;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      charClass2.appendTableWithSign(intArray1, (-1140));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-2629), 93);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2629);
      intArray0[1] = (-2629);
      intArray0[2] = 93;
      intArray0[3] = 93;
      intArray0[4] = 93;
      intArray0[5] = (-2629);
      intArray0[6] = 93;
      intArray0[7] = (-2629);
      intArray0[8] = (-2629);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120077;
      intArray0[3] = (-1856);
      intArray0[4] = (-1115);
      CharClass charClass1 = charClass0.appendLiteral((-1856), (-816));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[5] = 0;
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, 64);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass6 = charClass4.appendRange(0, (-32745140));
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass7 = charClass5.appendNegatedClass(intArray0);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass8 = charClass7.appendFoldedClass(intArray0);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString(intArray0, (-1448));
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 155;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 155);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      CharClass charClass2 = new CharClass(intArray0);
      assertNotNull(charClass2);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass1.negateClass();
      assertNotNull(charClass3);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass3.appendLiteral((-39211), (-2434));
      assertNotNull(charClass4);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass3.appendFoldedRange((-6705), 68221);
      assertNotNull(charClass5);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass6 = charClass2.cleanClass();
      assertNotNull(charClass6);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass5));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass4));
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass4);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass7 = charClass6.appendRange(423, (-1239));
      assertNotNull(charClass7);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass5));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass5));
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass4);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass0);
      assertNotSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass8 = charClass5.appendFoldedClass(intArray0);
      assertNotNull(charClass8);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass7));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass7));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass7));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass7);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 65597;
      intArray0[0] = 65597;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int1 = (-4085);
      CharClass charClass1 = charClass0.appendLiteral(65597, (-4085));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 6457;
      intArray0[1] = 120687;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {6457, 120687}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange(9, 120687);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {6457, 120687}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 65597;
      intArray0[0] = 65597;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(65597, 65597);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass3 = charClass0.appendClass(intArray1);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass4 = charClass0.appendNegatedClass(intArray1);
      assertNotNull(charClass4);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass4.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[7][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 80;
      intArray1[1] = 2620;
      intArray1[2] = 2754;
      intArray1[3] = 14;
      int int0 = (-458);
      intArray1[4] = (-458);
      intArray1[5] = 110;
      intArray1[6] = 83;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2620;
      intArray2[1] = 110;
      intArray2[2] = 2620;
      intArray2[3] = 14;
      intArray2[4] = 2754;
      intArray2[5] = 80;
      intArray2[6] = 14;
      intArray2[7] = (-458);
      intArray2[8] = 110;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 83;
      intArray3[1] = 14;
      intArray3[2] = (-458);
      intArray3[3] = 2620;
      intArray3[4] = (-458);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 2620;
      intArray4[1] = 2754;
      intArray4[2] = 110;
      int int1 = (-568);
      intArray4[3] = (-568);
      intArray4[4] = 2620;
      intArray4[5] = 2754;
      intArray4[6] = 14;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2620;
      intArray5[1] = 14;
      intArray5[2] = (-458);
      intArray5[3] = (-568);
      int int2 = 3125;
      intArray5[4] = 3125;
      intArray5[5] = (-458);
      intArray5[6] = 14;
      intArray5[7] = (-458);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = (-568);
      intArray6[1] = 3125;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray7[0] = 2620;
      intArray7[1] = 110;
      intArray7[2] = 2620;
      intArray7[3] = (-458);
      intArray7[4] = 80;
      intArray7[5] = 3125;
      int int3 = 1774;
      intArray7[6] = 1774;
      intArray7[7] = (-458);
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendRange(0, 68409);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 6389;
      intArray0[1] = 844;
      intArray0[2] = (-836);
      intArray0[3] = 344;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {6389, 844, (-836), 344}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 3627;
      CharClass charClass1 = charClass0.appendRange(3627, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[1];
      int[][] intArray1 = new int[0][9];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1321;
      intArray2[1] = 3627;
      intArray2[2] = 3627;
      intArray2[3] = 926;
      intArray2[4] = 3627;
      intArray2[5] = 3627;
      intArray2[6] = 0;
      intArray2[7] = 3627;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(11670, 66639);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = (-4004);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1, 1114111, 0, 0, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 1114111, 0, (-4004), 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 1114111, (-4003), 1114111, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass4.appendLiteral(0, 64);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {0, 1114111, (-4003), 1114111, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string0 = charClass5.toString();
      assertEquals("[0x0-0x10ffff 0xfffff05d-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {0, 1114111, (-4003), 1114111, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-725);
      intArray0[0] = (-725);
      intArray0[1] = (-1583);
      intArray0[2] = 120379;
      intArray0[3] = 3110;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-725), (-1583), 120379, 3110}, intArray0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[6][9];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1646);
      int int0 = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1646), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1646), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2623;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 64;
      intArray0[5] = (-4004);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2623, 0, 0, 64, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2623, 0, 0, 64, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {2624, 1114111, 0, 0, 64, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {2624, 1114111, 0, 0, 64, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {2624, 1114111, 0, 2623, (-4003), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass4.appendLiteral(0, 64);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {2624, 1114111, 0, 2623, (-4003), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string0 = charClass5.toString();
      assertEquals("[0xa40-0x10ffff 0x0-0xa3f 0xfffff05d-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {2624, 1114111, 0, 2623, (-4003), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1172;
      CharClass charClass1 = charClass0.appendFoldedRange(1172, 1172);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 477;
      intArray0[1] = 1172;
      intArray0[2] = 1172;
      intArray0[3] = 1172;
      intArray0[4] = 1172;
      int[][] intArray1 = new int[0][6];
      CharClass charClass3 = charClass1.appendTable(intArray1);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray1.length);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1172;
      intArray2[1] = 1172;
      intArray2[2] = 1172;
      // Undeclared exception!
      try { 
        charClass4.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 7077;
      int int1 = 32;
      CharClass charClass1 = charClass0.appendRange(7077, 32);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 7077;
      intArray0[1] = 7077;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {7077, 7077}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {7077, 7077}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2;
      intArray2[1] = 1931;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = (-1046);
      intArray2[7] = 0;
      intArray2[8] = 489;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 81;
      intArray0[2] = 1168;
      int int0 = 0;
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1168;
      intArray2[1] = 0;
      intArray2[2] = 1168;
      intArray2[3] = (-893);
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 81;
      intArray2[7] = 1168;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[6] = intArray3;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-2629), 93);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedRange((-2629), 93);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2629);
      intArray0[1] = (-2629);
      intArray0[2] = 93;
      intArray0[3] = 93;
      intArray0[4] = 93;
      intArray0[5] = (-2629);
      intArray0[6] = 93;
      intArray0[7] = (-2629);
      intArray0[8] = (-2629);
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 6974;
      int int1 = 0;
      int int2 = (-4004);
      int[] intArray0 = new int[1];
      intArray0[0] = 6974;
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertArrayEquals(new int[] {6974}, intArray0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = new CharClass(intArray0);
      assertNotNull(charClass3);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertArrayEquals(new int[] {6974}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass3.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 21254;
      intArray0[0] = 21254;
      int int1 = 120596;
      intArray0[1] = 120596;
      int int2 = 3877;
      intArray0[2] = 3877;
      int int3 = (-700);
      intArray0[3] = (-700);
      int int4 = 887;
      intArray0[4] = 887;
      intArray0[5] = 1806;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {21254, 120596, 3877, (-700), 887, 1806}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {21254, 120596, 3877, (-700), (-699), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {21254, 120596, 3877, (-700), (-699), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange(21254, 1806);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {21254, 120596, 3877, (-700), (-699), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 952;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int int0 = 3;
      intArray0[3] = 3;
      intArray0[4] = (-3765);
      intArray0[5] = (-2285);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {952, (-1), 0, 3, (-3765), (-2285)}, intArray0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 65597;
      intArray0[0] = 65597;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass2 = charClass0.appendClass(intArray1);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass3 = charClass0.appendNegatedClass(intArray1);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {65597}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass3.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120077;
      intArray0[3] = (-1856);
      intArray0[4] = (-1115);
      CharClass charClass1 = charClass0.appendLiteral((-1856), (-816));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[5] = 0;
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass6 = charClass5.appendFoldedRange(300, (-148));
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass7 = charClass3.appendFoldedRange(120077, 0);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      
      CharClass charClass8 = charClass3.negateClass();
      assertNotNull(charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      
      CharClass charClass9 = charClass8.cleanClass();
      assertNotNull(charClass9);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      
      CharClass charClass10 = charClass5.appendTableWithSign(intArray1, 0);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass6);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 0, 120077, (-1856), (-1115), 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass1.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-341), (-341));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-341);
      intArray0[1] = (-973);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-341), (-973)}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {(-341), (-973)}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 119213;
      intArray0[1] = 93;
      int int0 = 0;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {119213, 93, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(119213, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {119213, 93, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 119213;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(42872, 119213);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 54;
      intArray0[1] = 66639;
      intArray0[2] = 1413;
      intArray0[3] = (-1682);
      intArray0[4] = 237;
      intArray0[5] = (-2937);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {54, 66639, 1413, (-1682), 237, (-2937)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {54, 66639, 1413, (-1682), 237, (-2937)}, intArray1);
      assertEquals(6, intArray1.length);
      
      int[][] intArray2 = new int[4][0];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray2, 426);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {54, 66639, 1413, (-1682), 237, (-2937)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray2.length);
      
      int[][] intArray3 = new int[5][7];
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = intArray0;
      intArray3[1] = intArray1;
      intArray3[2] = intArray0;
      intArray3[3] = intArray1;
      intArray3[4] = intArray1;
      CharClass charClass3 = charClass1.appendNegatedTable(intArray3);
      assertNotNull(charClass3);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray3, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {54, 66639, 1413, (-1682), 237, (-2937)}, intArray0);
      assertEquals(5, intArray3.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      int int0 = 68221;
      CharClass charClass2 = new CharClass(intArray0);
      assertNotNull(charClass2);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange(3212, 68221);
      assertNotNull(charClass3);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertNotNull(charClass5);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass6 = charClass5.appendFoldedClass(intArray0);
      assertNotNull(charClass6);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass1));
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass7 = new CharClass(intArray0);
      assertNotNull(charClass7);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass8 = charClass7.appendRange(1572, 3212);
      assertNotNull(charClass8);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass6));
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass7, charClass0);
      assertNotSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 3212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 12245;
      intArray0[0] = 12245;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {12245}, intArray0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {12245}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[3][3];
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[3] = 0;
      int int0 = (-4004);
      intArray0[5] = (-4004);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = charClass1.toArray();
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-4004)}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass2 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-4004)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray2 = new int[6][7];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray0;
      intArray2[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 1877;
      intArray1[2] = 0;
      intArray1[3] = (-182);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 1877;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1877;
      intArray3[1] = 0;
      intArray3[2] = (-1393);
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = (-1393);
      intArray4[1] = 1877;
      intArray4[2] = (-1393);
      intArray4[3] = (-182);
      intArray4[4] = 0;
      intArray4[5] = (-182);
      intArray4[6] = 0;
      intArray4[7] = 0;
      intArray4[8] = (-182);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 3116;
      intArray5[1] = 0;
      intArray5[2] = (-1393);
      intArray5[3] = 1877;
      intArray5[4] = 0;
      intArray5[5] = 1877;
      intArray5[6] = 0;
      intArray5[7] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 0;
      intArray7[1] = 1877;
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray7[5] = 0;
      intArray7[6] = (-182);
      intArray7[7] = 0;
      intArray7[8] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      intArray8[0] = 0;
      intArray8[1] = 1877;
      intArray8[2] = 0;
      intArray8[3] = 0;
      intArray8[4] = 0;
      intArray8[5] = 1877;
      intArray8[6] = 0;
      intArray8[7] = 0;
      intArray0[7] = intArray8;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1252);
      intArray0[2] = 11310;
      intArray0[3] = 0;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      
      String string1 = CharClass.charClassToString(intArray0, (-1252));
      assertEquals("[]", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-536);
      intArray0[1] = 0;
      int int0 = (-914);
      intArray0[2] = (-914);
      intArray0[3] = 68221;
      CharClass charClass0 = new CharClass(intArray0);
      int int1 = (-3422);
      int int2 = 1572;
      CharClass charClass1 = charClass0.appendRange((-3422), 1572);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      charClass2.appendFoldedClass(intArray0);
      int int3 = 1892;
      charClass2.appendRange(1892, 0);
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[4];
      intArray2[0] = 68221;
      intArray2[1] = 1572;
      intArray2[2] = (-3422);
      intArray2[3] = 1892;
      intArray1[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = (-914);
      int int4 = (-3215);
      intArray3[1] = (-3215);
      intArray3[2] = (-914);
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-914));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-536);
      intArray0[1] = 0;
      intArray0[2] = (-914);
      intArray0[3] = 68221;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange((-3422), 1572);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      charClass2.appendFoldedClass(intArray0);
      charClass2.appendRange(1892, 0);
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[4];
      intArray2[0] = 68221;
      intArray2[1] = 0;
      intArray2[2] = (-3422);
      intArray2[3] = 1892;
      intArray1[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = (-914);
      intArray3[1] = (-3215);
      intArray3[2] = (-914);
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-914));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 65;
      intArray0[1] = 871;
      intArray0[2] = 1110;
      intArray0[3] = 8509;
      intArray0[4] = 64;
      intArray0[5] = 2095;
      intArray0[6] = 0;
      intArray0[7] = 93;
      intArray0[8] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[5];
      intArray1[0] = (-1839);
      intArray1[1] = 1259;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1268;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = (-1839);
      intArray2[1] = 1;
      intArray2[2] = 1259;
      intArray2[3] = 1;
      intArray2[4] = 1259;
      intArray2[5] = 844;
      intArray2[6] = 1;
      intArray2[7] = 1268;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = (-1839);
      intArray3[1] = 844;
      intArray3[2] = 1259;
      intArray3[3] = 1259;
      intArray3[4] = 1259;
      intArray3[5] = (-1839);
      intArray3[6] = 1258;
      intArray3[7] = 1259;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 1268;
      intArray4[1] = 1268;
      intArray4[2] = 1268;
      intArray4[3] = 1258;
      intArray4[4] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 844;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 1;
      intArray6[1] = 844;
      intArray6[2] = (-1839);
      intArray6[3] = 1258;
      intArray6[4] = (-1839);
      intArray6[5] = 1113;
      intArray6[6] = 844;
      intArray6[7] = 1258;
      intArray6[8] = (-1839);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 1113;
      intArray7[1] = 1259;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 2644);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1482);
      intArray0[1] = 2656;
      intArray0[2] = 1420;
      intArray0[3] = 2656;
      intArray0[4] = (-1659);
      intArray0[5] = 64;
      intArray0[6] = 2149;
      intArray0[7] = (-1);
      intArray0[8] = 2645;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 64);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      // Undeclared exception!
      charClass2.appendFoldedRange(2656, 1114111);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1729);
      intArray0[1] = (-5568);
      intArray0[2] = 42894;
      intArray0[3] = (-6787959);
      intArray0[4] = (-939);
      intArray0[5] = (-377);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, (-5567));
      charClass4.appendClassWithSign(intArray0, (-5567));
      assertArrayEquals(new int[] {(-1729), (-5568), (-5567), 42893, (-6787958), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(10792, (-3826));
      int[] intArray0 = new int[8];
      intArray0[0] = 10792;
      intArray0[1] = (-3826);
      intArray0[2] = (-3826);
      intArray0[3] = 10792;
      intArray0[4] = 10792;
      intArray0[5] = 10792;
      intArray0[6] = (-3826);
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 10792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toArray();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendLiteral(77, 77);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-725);
      intArray0[1] = (-1583);
      intArray0[2] = 120379;
      intArray0[3] = 3110;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][9];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[0];
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray3 = charClass0.toArray();
      CharClass charClass1 = charClass0.appendRange(1473, 3110);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray2, 120379);
      CharClass charClass3 = charClass2.appendFoldedRange(2236, (-725));
      charClass3.appendRange(0, 120379);
      assertArrayEquals(new int[] {(-725), (-1583), 120379, 3110}, intArray0);
      assertSame(intArray0, intArray3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 65597;
      int int0 = 697;
      intArray0[1] = 697;
      intArray0[2] = 65597;
      intArray0[3] = 65597;
      CharClass.charClassToString(intArray0, (-178));
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 1114111;
      CharClass charClass1 = charClass0.appendFoldedRange(1114111, (-4554));
      CharClass charClass2 = charClass1.negateClass();
      int[][] intArray0 = new int[0][5];
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      CharClass charClass4 = charClass3.appendRange(1114111, (-4554));
      CharClass charClass5 = charClass4.appendLiteral((-4554), 1114111);
      int[] intArray1 = new int[5];
      intArray1[0] = 1114111;
      charClass3.appendFoldedRange(1114111, 1114111);
      intArray1[1] = (-4554);
      intArray1[2] = 1114111;
      intArray1[3] = (-4554);
      charClass4.appendTableWithSign(intArray0, 91);
      intArray1[4] = (-4554);
      // Undeclared exception!
      try { 
        charClass5.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
