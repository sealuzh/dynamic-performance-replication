/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:36:00 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.util.Comparator;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.function.Predicate;
import javax.swing.JOptionPane;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = NimbusStyle.MINI_SCALE;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric((-1));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) randomCommittee0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.RandomCommittee:
         // 
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.RandomTree)
         // 
         // Options specific to classifier weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y+;T5l'#.q>!pxw";
      stringArray0[1] = "";
      stringArray0[2] = "M80Gcc";
      stringArray0[3] = "/";
      stringArray0[4] = "4nHRSUNFVTl0+t";
      stringArray0[5] = "L[g\"p2";
      stringArray0[6] = "icide";
      stringArray0[7] = "WIyx);";
      AbstractClassifier.runClassifier(oneR0, stringArray0);
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "!5,>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 1488);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel("label", instances0, (-1), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: label
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation0.toSummaryString();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      evaluation0.pctUnclassified();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 1488);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation0.numFalseNegatives((-1));
      evaluation0.numInstances();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArffLoader arffLoader0 = new ArffLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(arffLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_SumSchemeEntropy;
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute((String) null, instances1);
      instances0.sort(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.KBInformation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.errorRate();
      evaluation0.toSummaryString();
      evaluation0.KBMeanInformation();
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 3;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 1488);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)13;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toCumulativeMarginDistributionString();
      evaluation1.areaUnderPRC((-1));
      evaluation1.numFalseNegatives((-1));
      evaluation1.getHeader();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.toSummaryString();
      evaluation0.weightedMatthewsCorrelation();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.equals(stacking0);
      Stacking stacking1 = new Stacking();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 1488);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation0.numFalseNegatives((-1));
      evaluation0.numInstances();
      try { 
        evaluation0.evaluateModel((Classifier) stacking0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n    return (double) maxI;\n");
      Stacking stacking0 = new Stacking();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.toSummaryString();
      evaluation0.weightedMatthewsCorrelation();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.equals((Object) null);
      Stacking stacking1 = new Stacking();
      int int0 = 7;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n   return (double) maxI;\n");
      Stacking stacking0 = new Stacking();
      double double0 = UnivariateKernelEstimator.CONST;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      double double1 = evaluation0.m_SumClassPredicted;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities1 = additiveRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      evaluation0.weightedFalsePositiveRate();
      randomCommittee0.getCapabilities();
      evaluation0.SFEntropyGain();
      J48 j48_0 = new J48();
      try { 
        evaluation0.evaluateModel((Classifier) j48_0, instances1, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_SumSchemeEntropy;
      Attribute attribute0 = new Attribute(".bsi", instances0);
      instances0.sort(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      evaluation0.unweightedMicroFmeasure();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stacking0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate1.negate();
      predicate4.and(predicate3);
      instances0.removeIf(predicate4);
      Stacking stacking1 = new Stacking();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      evaluation0.weightedTrueNegativeRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.errorRate();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.toSummaryString("@attribute", false);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) stacking0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.toSummaryString();
      evaluation0.weightedFalsePositiveRate();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      Stacking stacking1 = new Stacking();
      evaluation2.areaUnderPRC((-2));
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) stacking1, instances0, objectArray0);
      double double1 = evaluation0.m_SumSchemeEntropy;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      evaluation0.toSummaryString();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation2.areaUnderPRC((-2));
      String string0 = JOptionPane.SELECTION_VALUES_PROPERTY;
      instances0.remove((Object) capabilities0);
      Object[] objectArray0 = new Object[1];
      try { 
        evaluation0.evaluateModel((Classifier) randomCommittee0, instances1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RandomCommittee", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n    return (double) maxI;\n");
      RandomCommittee randomCommittee0 = new RandomCommittee();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel((Classifier) randomCommittee0, instances0, 674, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = NimbusStyle.MINI_KEY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      evaluation0.toMatrixString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double1 = evaluation0.m_ClassPriorsSum;
      evaluation0.SFMeanEntropyGain();
      evaluation0.totalCost();
      evaluation0.setPriors(instances0);
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      evaluation0.toSummaryString();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      evaluation0.weightedFalsePositiveRate();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) 1;
      evaluation0.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation.handleCostOption((String) null, 1488);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation0.numFalseNegatives(104);
      evaluation0.numInstances();
      evaluation0.toMatrixString();
      evaluation0.rootRelativeSquaredError();
      evaluation0.toSummaryString("weka/core/Capabilities.props", false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toMatrixString();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.toSummaryString("reset", false);
      evaluation0.getClassPriors();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.confusionMatrix();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(23);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = NimbusStyle.MINI_KEY;
      Stacking stacking0 = new Stacking();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      evaluation0.toMatrixString();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(237.40623294386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 237
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      evaluation0.toSummaryString();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      randomCommittee0.setNumIterations((-2));
      Object[] objectArray0 = new Object[1];
      evaluation0.evaluateModel((Classifier) randomCommittee0, instances1, objectArray0);
      evaluation2.kappa();
      evaluation1.SFMeanEntropyGain();
      evaluation1.sizeOfPredictedRegions();
      evaluation2.weightedFalsePositiveRate();
      evaluation0.addNumericTrainClass(0.714, (-1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      Stacking stacking0 = new Stacking();
      evaluation0.numFalseNegatives(117);
      evaluation0.numInstances();
      ArffLoader arffLoader0 = new ArffLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 1424.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -355750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 1488);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation0.numFalseNegatives((-1));
      double double0 = evaluation0.m_TotalCost;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArffLoader arffLoader0 = new ArffLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n    return (double) maxI;\n");
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = NimbusStyle.MINI_KEY;
      Stacking stacking0 = new Stacking();
      boolean boolean0 = evaluation0.m_NoPriors;
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.toSummaryString("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomial:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.", false);
      evaluation0.pctUnclassified();
      evaluation0.useNoPriors();
      evaluation0.toClassDetailsString("?h^b:JV7VG3h?&+>");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.getDiscardPredictions();
      evaluation0.SFPriorEntropy();
      double double1 = NimbusStyle.LARGE_SCALE;
      MockRandom mockRandom0 = new MockRandom();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      evaluation0.areaUnderROC(467);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) stacking0, instances0, 468, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.m_Correct = 601.099;
      Utils.SMALL = 1001.5922861254272;
      evaluation0.m_SumPriorSqrErr = 1001.5922861254272;
      Stacking stacking0 = new Stacking();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.m_TotalCost = 0.0;
      evaluation0.relativeAbsoluteError();
      evaluation0.toMatrixString();
      evaluation0.fMeasure(9);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n   return (doule) maxI;\n");
      RandomCommittee randomCommittee0 = new RandomCommittee();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation.makeOptionString(randomCommittee0, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1649);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1649
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostMatrix costMatrix0 = new CostMatrix(23);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      testInstances1.setRelationalClassFormat(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Stacking stacking0 = new Stacking();
      evaluation0.areaUnderPRC(412);
      AbstractClassifier.makeCopies(inputMappedClassifier0, 7);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.areaUnderPRC(83);
      evaluation0.numFalseNegatives(83);
      evaluation0.kappa();
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      Instances instances0 = testInstances0.generate("graphType");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = 'G';
      charArray0[3] = 'h';
      charArray0[4] = 'u';
      evaluation0.num2ShortID(656, charArray0, 656);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.numFalsePositives(2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      Logistic logistic0 = new Logistic();
      Capabilities capabilities0 = logistic0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      evaluation0.weightedFalsePositiveRate();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      evaluation0.areaUnderPRC(116);
      evaluation0.numFalseNegatives((-1));
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.kappa();
      evaluation1.weightedAreaUnderROC();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostMatrix costMatrix0 = new CostMatrix(36);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      testInstances1.setRelationalClassFormat(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.weightedFalseNegativeRate();
      Evaluation.handleCostOption("", (-1));
      evaluation0.weightedAreaUnderPRC();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      TestInstances testInstances1 = new TestInstances();
      TestInstances.forCapabilities(capabilities0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        Evaluation.handleCostOption("@data", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = NimbusStyle.MINI_KEY;
      Stacking stacking0 = new Stacking();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      evaluation0.toMatrixString();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(stacking0);
      evaluation0.toSummaryString("mini", true);
      evaluation0.addNumericTrainClass((-503.2), (-2842.4272725535));
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.pctUnclassified();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(458);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      RBFKernel rBFKernel0 = new RBFKernel();
      Capabilities capabilities0 = rBFKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      testInstances0.setNumString((-978));
      evaluation0.areaUnderPRC((-137));
      evaluation0.numFalseNegatives((-551));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setDirectory(file0);
      testInstances0.setNumRelationalNominal((-978));
      J48 j48_0 = new J48();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation.getGlobalInfo(linearRegression0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.getDiscardPredictions();
      evaluation0.addNumericTrainClass(1000.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostMatrix costMatrix0 = new CostMatrix(23);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      testInstances1.setRelationalClassFormat(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setDiscardPredictions(false);
      MockRandom mockRandom0 = new MockRandom();
      capabilities0.getAttributeCapabilities();
      CoverTree coverTree0 = new CoverTree();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n    return (double) maxI;\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("@relation", instances0, protectedProperties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header for relation-valued attribute should not contain any instances
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      randomCommittee0.setNumIterations((-3125));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      int int0 = 56;
      testInstances0.setClassType(56);
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.SFPriorEntropy();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1448));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getCapabilities();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.rootMeanPriorSquaredError();
      double[][] doubleArray0 = gaussianProcesses0.m_L;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.priorEntropy();
      evaluation0.rootRelativeSquaredError();
      evaluation0.pctIncorrect();
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(48);
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities0 = rEPTree0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      J48 j48_0 = new J48();
      String string0 = DefaultEditorKit.selectionDownAction;
      evaluation1.weightedFMeasure();
      evaluation0.errorRate();
      evaluation0.toSummaryString();
      evaluation1.KBMeanInformation();
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n    return (double) maxI;\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(11);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities0 = simpleKMeans0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      instances1.resample(mockRandom0);
      Evaluation evaluation1 = new Evaluation(instances1);
      Stacking stacking0 = new Stacking();
      evaluation1.areaUnderPRC(18);
      Stacking stacking1 = new Stacking();
      evaluation0.numFalsePositives(18);
      J48 j48_0 = new J48();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String string0 = JOptionPane.ICON_PROPERTY;
      evaluation1.unclassified();
      evaluation0.incorrect();
      evaluation1.KBInformation();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "makeCopies";
      stringArray0[1] = ":(b}PzJ]o-";
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostMatrix costMatrix0 = new CostMatrix(11);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    }\n    return (double) maxI;\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(11);
      evaluation0.weightedMatthewsCorrelation();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      evaluation0.weightedFalsePositiveRate();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.generate();
      evaluation0.areaUnderPRC((-2));
      evaluation0.numFalseNegatives((-2930));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.kappa();
      evaluation1.numInstances();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2930);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 45.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 45.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.toSummaryString();
      evaluation0.weightedFalsePositiveRate();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking1 = new Stacking();
      evaluation2.areaUnderPRC((-2));
      double[] doubleArray0 = new double[0];
      evaluation2.m_ClassPriors = doubleArray0;
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance((-2665.3626021), evaluation2.m_ClassPriors);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      try { 
        evaluation2.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModelOnce((-4773.91302345), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4773
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.pctUnclassified();
      Properties properties0 = new Properties();
      Evaluation evaluation1 = new Evaluation(instances0);
      Double double1 = new Double(Double.NaN);
      REPTree rEPTree0 = new REPTree();
      evaluation0.kappa();
      evaluation0.pctCorrect();
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pushbackReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stacking stacking0 = new Stacking();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      RandomSubSpace randomSubSpace1 = new RandomSubSpace();
      randomSubSpace1.listOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      Stacking stacking1 = new Stacking();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.equals(evaluation3);
      Stacking stacking2 = new Stacking();
      evaluation3.trueNegativeRate(3618);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      evaluation3.rootRelativeSquaredError();
      org.evosuite.runtime.Random.setNextRandom(3618);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(21);
      TestInstances testInstances0 = new TestInstances();
      J48 j48_0 = new J48();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation0.m_MinTarget;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double3 = new Double(0.0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.pctUnclassified();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(21);
      Attribute attribute0 = new Attribute(".arff", instances0);
      instances1.sort(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, sparseInstance0, (-34.8507675));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("graphType");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toClassDetailsString();
      evaluation0.KBMeanInformation();
      DenseInstance denseInstance0 = new DenseInstance(1);
      evaluation0.numTrueNegatives((-1));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.toSummaryString();
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("{KC65mfH");
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      RandomSubSpace randomSubSpace1 = new RandomSubSpace();
      randomSubSpace1.listOptions();
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking1 = new Stacking();
      evaluation0.numFalseNegatives((-2));
      Evaluation evaluation4 = new Evaluation(instances1, (CostMatrix) null);
      double double1 = evaluation0.m_TotalSizeOfRegions;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "minimalTipTex");
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.equals(evaluation4);
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      textDirectoryLoader0.reset();
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_SumSchemeEntropy;
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute((String) null, instances1);
      instances0.sort(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.KBInformation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.getDiscardPredictions();
      evaluation0.SFPriorEntropy();
      evaluation0.SFSchemeEntropy();
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 549L;
      MockRandom mockRandom1 = new MockRandom(549L);
      evaluation0.kappa();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      evaluation0.weightedFalsePositiveRate();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      RandomCommittee randomCommittee1 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributeDependencies();
      testInstances0.generate();
      evaluation0.weightedFalsePositiveRate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-63);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      textDirectoryLoader0.getOptions();
      evaluation0.useNoPriors();
      RandomCommittee randomCommittee2 = new RandomCommittee();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      evaluation0.numFalseNegatives((-1));
      evaluation0.weightedFalseNegativeRate();
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(84);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setRelationalClassFormat(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal((-1));
      String string0 = XML.DTD_AT_LEAST_ONE;
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.SFMeanPriorEntropy();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialText0, instances0, 400, (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@relation");
      instances1.sort(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2870);
      evaluation0.KBInformation();
      evaluation0.weightedTrueNegativeRate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominal((-1));
      String string0 = XML.DTD_AT_LEAST_ONE;
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.areaUnderPRC((-1));
      evaluation0.getDiscardPredictions();
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) randomCommittee0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.toSummaryString();
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation2 = new Evaluation(instances0);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Instances instances1 = new Instances(instances0, (-2));
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      textDirectoryLoader0.getOptions();
      evaluation2.useNoPriors();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances2 = testInstances1.generate();
      evaluation2.numFalseNegatives((-511));
      Evaluation evaluation3 = new Evaluation(instances2);
      evaluation0.weightedFalseNegativeRate();
      try { 
        evaluation3.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(48);
      REPTree rEPTree0 = new REPTree();
      rEPTree0.getRevision();
      rEPTree0.getCapabilities();
      CostMatrix costMatrix0 = new CostMatrix(48);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getFileDescription();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("{~02mm~xM$~o");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.numInstances();
      evaluation0.trueNegativeRate(483);
      evaluation0.falseNegativeRate(2);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.makeOptionString(multilayerPerceptron0, true);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(48);
      REPTree rEPTree0 = new REPTree();
      rEPTree0.getCapabilities();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities1 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      testInstances0.generate();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.pctUnclassified();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      textDirectoryLoader1.setDirectory(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal((-2059));
      J48 j48_0 = new J48();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomialText0);
      evaluation0.toSummaryString("theres", true);
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_SumSchemeEntropy;
      textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@relation", 21);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.KBInformation();
      evaluation0.weightedTrueNegativeRate();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.numTruePositives(1548);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      double double1 = evaluation0.m_MaxTarget;
      evaluation0.SFSchemeEntropy();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedTrueNegativeRate();
      double double2 = evaluation0.m_TotalCost;
      evaluation0.toSummaryString();
      DenseInstance denseInstance0 = new DenseInstance(0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = NimbusStyle.MINI_KEY;
      Stacking stacking0 = new Stacking();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      evaluation0.toMatrixString();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      rEPTree0.getRevision();
      rEPTree0.getCapabilities();
      CostMatrix costMatrix0 = new CostMatrix(48);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.getFileDescription();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("{~02mm~xM$~o");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.numFalseNegatives(3);
      evaluation0.numInstances();
      evaluation0.rootRelativeSquaredError();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation1.setNumericPriorsFromBuffer();
      evaluation1.numTrueNegatives((-1));
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance((-5288.0), doubleArray0);
      try { 
        evaluation1.evaluateModelOnce((Classifier) rEPTree0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%\u0003\"pH\"mRM[2u");
      double double0 = evaluation0.m_Unclassified;
      evaluation0.pctUnclassified();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedRecall();
      evaluation0.setPriors(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.SFMeanPriorEntropy();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Logistic logistic0 = new Logistic();
      String string0 = Evaluation.getGlobalInfo(logistic0);
      evaluation0.toSummaryString(string0, true);
      evaluation0.pctUnclassified();
      evaluation0.getRevision();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      instances0.add((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = XML.DTD_PCDATA;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(0);
      testInstances0.setNumNominal(2);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      testInstances0.setNumRelationalNumeric(2);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSchemeEntropy = (-944.169);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 1797.9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.getDiscardPredictions();
      evaluation0.SFPriorEntropy();
      evaluation0.SFSchemeEntropy();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) stacking0, instances0, 468, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getCapabilities();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      double double0 = KStarConstants.INITIAL_STEP;
      Evaluation evaluation0 = new Evaluation(instances0);
      double double1 = KStarConstants.INITIAL_STEP;
      double double2 = evaluation0.m_SumAbsErr;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double3 = new Double(0.05);
      REPTree rEPTree0 = new REPTree();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) rEPTree0, instances0, 3, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      double double0 = NimbusStyle.MINI_SCALE;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("graphType");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.getClassPriors();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances.forCapabilities(capabilities0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances.forCapabilities(capabilities0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.numFalseNegatives(1);
      evaluation0.toSummaryString("@relation", true);
      Attribute attribute0 = new Attribute(".bsi");
      sparseInstance0.isMissing(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) instances0;
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances.forCapabilities(capabilities0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances1 = testInstances2.generate();
      testInstances1.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getCapabilities();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities1 = randomCommittee0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances.forCapabilities(capabilities0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.numFalseNegatives(1);
      evaluation0.toSummaryString("@relation", true);
      Attribute attribute0 = new Attribute(".bsi");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
