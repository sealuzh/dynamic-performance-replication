/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:20:28 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSMethod;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      jSPlan0.add(object0);
      JSState jSState1 = jSState0.apply(jSPlan0);
      jSState0.addAll((Collection) jSState1);
      jSState0.addElementsToState(jSState1);
      JSState jSState2 = jSState0.apply(jSPlan0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = jSState2.satisfies(jSState1, jSSubstitution0, jSListAxioms0);
      JSOperator jSOperator0 = new JSOperator();
      jSOperator0.head();
      jSState0.satisfiesTAm((JSPredicateForm) null, jSSubstitution1);
      jSState2.clone();
      JSPlan jSPlan1 = new JSPlan();
      jSState2.addElementsToState(jSPlan1);
      jSSubstitution1.clone();
      JSSubstitution jSSubstitution2 = jSState2.satisfies(jSState1, jSSubstitution0, jSListAxioms0);
      // Undeclared exception!
      try { 
        jSState0.applyOp(jSOperator0, jSSubstitution2, jSState2, jSPlan0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSState jSState0 = null;
      try {
        jSState0 = new JSState((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = new JSState();
      JSMethod jSMethod0 = new JSMethod();
      jSMethod0.head();
      jSState1.Cdr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSMethod0);
      jSState1.satisfiesTAm((JSPredicateForm) null, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPlan0.add((Object) jSState0);
      jSState0.satisfiesTAm((JSPredicateForm) null, jSSubstitution1);
      jSState1.satisfiesTAm((JSPredicateForm) null, jSSubstitution0);
      JSPlan jSPlan1 = new JSPlan();
      JSState jSState2 = jSState0.apply(jSPlan0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      jSState2.addElementsToState(jSPlan0);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSMethod0.head();
      jSSubstitution0.add((Object) null);
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      // Undeclared exception!
      try { 
        jSState0.satisfiesAll(jSState1, jSSubstitution0, jSListAxioms1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = new JSState();
      jSState1.Cdr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPlan0.add((Object) jSState0);
      JSState jSState2 = jSState0.apply(jSPlan0);
      jSState2.addElementsToState(jSPlan0);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      jSState0.satisfiesAll(jSState1, jSSubstitution0, jSListAxioms1);
      JSOperator jSOperator0 = new JSOperator();
      // Undeclared exception!
      try { 
        jSState1.applyOp(jSOperator0, jSSubstitution1, jSState2, jSState2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }
}
