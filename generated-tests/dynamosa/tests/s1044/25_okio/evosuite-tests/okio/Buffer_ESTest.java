/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 06 00:21:57 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`Ui:9q%>-j%&");
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer_UnsafeCursor0.buffer, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer2.clone();
      buffer1.request((-1228L));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      Buffer buffer4 = realBufferedSink0.buffer;
      ByteString.decodeBase64("X");
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString.decodeBase64("source == null");
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = null;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = null;
      byteStringArray0[6] = null;
      Options options0 = Options.of(byteStringArray0);
      Options options1 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options1);
      realBufferedSource0.buffer.indexOf((byte)101, (long) 0);
      Options.of(byteStringArray0);
      buffer0.select(options0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeUtf8CodePoint(13);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer;
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer_UnsafeCursor1.buffer.writeLong((-1));
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.clone();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K$");
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) mockPrintStream0, (-2264L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2264
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      long long0 = (-922337203685477580L);
      Buffer buffer2 = buffer0.writeDecimalLong((-922337203685477580L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource1 = null;
      try {
        realBufferedSource1 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-42);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-42);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-1828));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      ByteString.decodeBase64("#u/+TsNk");
      realBufferedSink0.buffer.rangeEquals((long) (byte) (-42), (ByteString) null, (int) (byte) (-42), (int) (byte) (-42));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1499L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer2.indexOfElement(byteString1);
      ByteString byteString2 = buffer0.sha256();
      ByteString byteString3 = new ByteString((byte[]) null);
      buffer_UnsafeCursor1.buffer.sha256();
      ByteString byteString4 = ByteString.encodeUtf8("Expected leading [0-9a-fA-F] character but was 0x");
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString2);
      ByteString byteString5 = new ByteString((byte[]) null);
      buffer0.rangeEquals(280375465L, byteString4, 101, 1898);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-576L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -576
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K$");
      buffer_UnsafeCursor1.buffer.completeSegmentByteCount();
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      buffer2.writeDecimalLong(0L);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8(",95%5:zJQ2AW5Ul'w!");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(deflaterSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)23;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer3.sha256();
      ByteString.encodeUtf8("n<S]iYMP");
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.indexOfElement(byteString0);
      buffer2.read(buffer3, 11L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      HashingSource.sha256(buffer4);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer4, byteString1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource0);
      realBufferedSource2.inputStream();
      Buffer buffer5 = realBufferedSink1.buffer();
      // Undeclared exception!
      try { 
        buffer5.snapshot((int) (byte) (-53));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-53
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = buffer1.buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      ByteString byteString1 = buffer0.sha256();
      buffer2.request(10001L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer1.indexOf(byteString1);
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer0.rangeEquals((-1201L), byteString0, 416, 109);
      Buffer buffer5 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer5.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      deflaterSink0.timeout();
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha1(buffer0);
      Pipe pipe0 = new Pipe(1404L);
      Buffer buffer3 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.timeout();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource1.buffer();
      buffer0.writeDecimalLong((-1034L));
      buffer3.skip((-1034L));
      buffer0.write(buffer1, 0L);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000L);
      Inflater inflater0 = new Inflater(true);
      buffer1.writeUtf8CodePoint((-307));
      buffer1.emit();
      assertEquals(11L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeUtf8CodePoint(788);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      ByteString byteString0 = ByteString.EMPTY;
      Pipe pipe0 = new Pipe(255L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.md5(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 99);
      buffer1.copyTo((OutputStream) bufferedOutputStream1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(929L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      pipe_PipeSource0.close();
      realBufferedSource0.buffer.sha512();
      realBufferedSource0.buffer.indexOf((byte)13, (long) (byte)13, (long) (byte)13);
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8CodePoint(2187);
      ByteString byteString0 = buffer3.snapshot();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer4 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString1 = buffer2.sha256();
      Pipe pipe0 = new Pipe(71776119061217280L);
      pipe0.sinkClosed = false;
      Buffer buffer5 = pipe0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset.defaultCharset();
      ByteString byteString2 = ByteString.EMPTY;
      realBufferedSink1.buffer();
      Integer integer0 = new Integer(2187);
      buffer2.rangeEquals((long) 2187, byteString0, 2187, 2187);
      Pipe pipe1 = new Pipe(1000000000L);
      Pipe pipe2 = new Pipe(71776119061217280L);
      Buffer buffer6 = realBufferedSink1.buffer;
      realBufferedSource1.buffer.rangeEquals(1000000000L, byteString1);
      // Undeclared exception!
      try { 
        buffer4.readFrom((InputStream) null, (-1064L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1064
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) byteArrayOutputStream0, (-3118L), 2891L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-3118 byteCount=2891
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Segment segment0 = buffer1.head;
      buffer_UnsafeCursor0.seek((-1));
      buffer_UnsafeCursor1.buffer.head = null;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer2.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.snapshot((-2636));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2636
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeLong(295L);
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.readAndWriteUnsafe();
      buffer2.readShort();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      inflaterSource0.timeout();
      HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.indexOf((byte)106);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8("K$");
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor1.buffer.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor2.buffer.readString(charset0);
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.writeLongLe(71776119L);
      ByteString byteString1 = ByteString.EMPTY;
      byteString1.compareTo(byteString0);
      buffer1.sha256();
      buffer0.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-2252L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -2252
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.clone();
      buffer0.indexOf((byte)12, 10000000L);
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(1365L);
      buffer3.readAndWriteUnsafe();
      Pipe pipe0 = new Pipe(10000000L);
      Pipe pipe1 = new Pipe((byte)12);
      Buffer buffer4 = pipe1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("8cVWweOdqz-", charset0);
      // Undeclared exception!
      try { 
        buffer2.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer2.writeUtf8("K$");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer4 = realBufferedSource1.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer4.indexOfElement(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer5 = realBufferedSink0.buffer();
      buffer5.sha256();
      realBufferedSource0.buffer.request((-1L));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      Buffer buffer6 = realBufferedSink1.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.clone();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.sha256();
      Buffer buffer3 = buffer2.writeDecimalLong(2147483647L);
      // Undeclared exception!
      try { 
        buffer3.write(buffer1, (-1152921504606846976L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1152921504606846976
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.exhausted();
      buffer0.completeSegmentByteCount();
      buffer0.writeDecimalLong(10000000L);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Deflater deflater0 = new Deflater();
      buffer0.writeShort(93);
      buffer0.readByte();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.writeDecimalLong(1991L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo(buffer1, 28037546L, 3024L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=28037546 byteCount=3024
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeIntLe(224);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      Pipe pipe1 = new Pipe(1324L);
      Buffer buffer0 = pipe1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readByteString(15L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=15
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      int int0 = 0;
      buffer_UnsafeCursor0.buffer.writeInt(0);
      // Undeclared exception!
      try { 
        buffer1.readByteArray((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeUtf8("}[h3");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha1();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer1.hmacSha256(byteString0);
      buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      buffer_UnsafeCursor1.buffer.snapshot();
      Buffer buffer2 = new Buffer();
      buffer2.clear();
      assertNotSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.sha256();
      ByteString.encodeUtf8("d");
      buffer3.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      realBufferedSink0.buffer.writeLong((byte)11);
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer4.writeUtf8CodePoint(1086);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write(byteArray0, (-2848), (int) (byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-2848 byteCount=11
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      deflaterSink0.timeout();
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha1(buffer0);
      Pipe pipe0 = new Pipe(1404L);
      Buffer buffer3 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.timeout();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource1.buffer();
      buffer0.writeDecimalLong((-1034L));
      buffer3.skip((-1034L));
      // Undeclared exception!
      try { 
        buffer1.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      ByteString byteString0 = realBufferedSink0.buffer.sha1();
      buffer1.close();
      Segment segment0 = buffer1.writableSegment(264);
      SegmentPool.next = segment0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(119);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(119);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = buffer1.buffer();
      buffer2.sha1();
      realBufferedSink0.buffer.writeShort(416);
      buffer1.close();
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(1404L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=35376301a0\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor2.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8("be0co~e]");
      buffer1.readAndWriteUnsafe();
      buffer2.readShort();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      inflaterSource0.timeout();
      HashingSource.sha256(buffer1);
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(0L);
      buffer_UnsafeCursor1.buffer.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      buffer_UnsafeCursor1.buffer.snapshot();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-757L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -757
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-3);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 70, 140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=70 byteCount=140
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer3.sha256();
      ByteString byteString2 = ByteString.encodeUtf8("K$");
      buffer3.indexOfElement(byteString2);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.read(buffer2, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeDecimalLong(16711680L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer_UnsafeCursor1.buffer, inflater0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(inflaterSource0);
      realBufferedSource2.buffer();
      buffer1.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.writeString("MD5", (-1), (-1), (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8(" .0`Sl+5y9uZ)");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      buffer1.readUnsafe();
      ByteString byteString0 = ByteString.encodeUtf8(" .0`Sl+5y9uZ)");
      buffer_UnsafeCursor1.buffer.indexOfElement(byteString0);
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$t/gidWG}6ol:N#F.");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K$");
      Buffer buffer2 = buffer_UnsafeCursor1.buffer.writeUtf8CodePoint(1056);
      // Undeclared exception!
      try { 
        buffer2.read((byte[]) null, 1056, (-2650));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      buffer0.request(5L);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater(2);
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      DeflaterSink deflaterSink1 = new DeflaterSink(buffer1, deflater0);
      deflaterSink1.timeout();
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer3 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer3);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer4 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      buffer4.indexOfElement(byteString0, 4L);
      realBufferedSource0.buffer();
      buffer4.writeDecimalLong(280375465082880L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      buffer2.write(byteArray0);
      assertEquals(5L, buffer2.size());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(7L, buffer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.readUtf8();
      buffer0.writeLong(3756L);
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(2145953011);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer3 = buffer2.write(buffer_UnsafeCursor0.data);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeUtf8("M[{Qf>-+{n<]!)");
      buffer2.indexOfElement(byteString0, (long) 14);
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.clear();
      buffer1.emit();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(14L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`Ui:9q%>-j%&");
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer_UnsafeCursor0.buffer, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.sha256();
      ByteString byteString2 = ByteString.encodeUtf8("");
      buffer0.indexOfElement(byteString2);
      buffer1.read(realBufferedSource1.buffer, 2L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(hashingSource0);
      realBufferedSource3.inputStream();
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.snapshot(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.clone();
      buffer0.indexOf((byte)2, 10000000L);
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      realBufferedSink0.buffer.readShort();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      realBufferedSink0.buffer.snapshot();
      Pipe pipe0 = new Pipe(2251L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A{9j?E");
      buffer1.indexOf((byte)2);
      buffer2.timeout();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Buffer buffer5 = new Buffer();
      buffer5.write((Source) buffer2, (-1L));
      // Undeclared exception!
      try { 
        buffer3.snapshot((-106));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-106
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1830L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = ByteString.of(byteArray0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((byte)10);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.indexOf(byteString0);
      buffer3.writeDecimalLong(3L);
      try { 
        realBufferedSink0.buffer.write((Source) buffer2, 1830L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeLong(8192L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeLongLe(1126L);
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink2, deflater0);
      realBufferedSink0.buffer.sha1();
      realBufferedSink2.buffer.readAndWriteUnsafe();
      realBufferedSink2.buffer.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer.snapshot();
      Buffer buffer2 = realBufferedSink2.buffer;
      realBufferedSink1.buffer.sha256();
      realBufferedSink1.buffer.writeDecimalLong((-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink2.buffer.readString((long) (short)0, charset0);
      Buffer buffer3 = new Buffer();
      buffer1.completeSegmentByteCount();
      try { 
        buffer1.readUtf8LineStrict(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=0000000020006604000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer1.sha256();
      ByteString.encodeUtf8("endIndex > length(");
      ByteString byteString2 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString2);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte) (-42);
      ByteString byteString3 = new ByteString(byteArray1);
      Buffer buffer3 = new Buffer();
      buffer3.rangeEquals((-1344L), byteString2, (-2145301244), (-2145301244));
      Pipe pipe0 = new Pipe(3069L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      buffer2.indexOf((byte)9);
      buffer1.hmacSha1(byteString1);
      assertNotSame(buffer1, buffer2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.readUtf8CodePoint();
      buffer2.write(buffer_UnsafeCursor0.data);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer2.indexOfElement(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer_UnsafeCursor0.buffer);
      gzipSource0.close();
      Buffer buffer3 = null;
      // Undeclared exception!
      try { 
        buffer2.write((Source) null, 9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      buffer0.toString();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readByteString();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.writeString("", 1451, 66, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 66 < 1451
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      buffer0.request(0L);
      byte byte0 = (byte) (-66);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = 1000000L;
      buffer1.writeDecimalLong(1000000L);
      long long1 = 3024L;
      // Undeclared exception!
      try { 
        buffer1.copyTo(realBufferedSink0.buffer, (long) (byte) (-66), (long) (byte) (-66));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-66 byteCount=-66
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      long long0 = 439L;
      buffer0.writeLong(439L);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      int int0 = 2067947216;
      // Undeclared exception!
      try { 
        realBufferedSink2.writeUtf8("", 2067947216, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 8 < 2067947216
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.clone();
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.sha256();
      ByteString byteString1 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writeUtf8((String) null, (-261), (-261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer0.writeLong((-1));
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(194L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      HashingSource.sha256(pipe_PipeSource0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-24L));
      buffer0.readLong();
      buffer1.writeLong((-24L));
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(194L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha256(pipe_PipeSource0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)54;
      Buffer buffer2 = pipe0.buffer;
      long long0 = (-557L);
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer1, (long) (byte)102, (-557L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=102 byteCount=-557
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor1.buffer.clone();
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = buffer2.sha256();
      ByteString.encodeUtf8(" hex=");
      realBufferedSink0.buffer.indexOfElement(byteString1);
      ByteString byteString2 = new ByteString((byte[]) null);
      realBufferedSink0.buffer.rangeEquals(422L, byteString2, (-101), (-101));
      Pipe pipe0 = new Pipe(2046L);
      Pipe pipe1 = new Pipe(1904L);
      // Undeclared exception!
      try { 
        buffer3.snapshot(1960);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=1960
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)77;
      buffer0.completeSegmentByteCount();
      Segment segment0 = new Segment(byteArray0, 1382, 3, false, true);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer.toString();
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.sha1();
      buffer0.close();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(deflaterSink0);
      realBufferedSink1.buffer.size = 291L;
      Buffer buffer2 = realBufferedSink1.buffer;
      // Undeclared exception!
      try { 
        buffer2.readUtf8LineStrict(5L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)45;
      byteArray0[7] = (byte)0;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.writableSegment((-4314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      buffer3.readByteArray();
      buffer_UnsafeCursor0.buffer.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer4 = realBufferedSource0.buffer();
      Buffer buffer5 = realBufferedSource0.buffer;
      buffer5.buffer();
      Charset charset0 = Charset.defaultCharset();
      int int0 = 2021161080;
      // Undeclared exception!
      try { 
        buffer4.writeString("jJU1/jmWfOXJ4>+=*3", 2147221535, 2021161080, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 2021161080 < 2147221535
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.indexOf((byte)15, (long) (byte)15);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1802L));
      buffer0.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.snapshot();
      Buffer buffer4 = realBufferedSink0.buffer;
      ByteString byteString0 = buffer2.sha256();
      Buffer buffer5 = buffer3.writeDecimalLong(255L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K$");
      Buffer buffer6 = new Buffer();
      buffer6.completeSegmentByteCount();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer5, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer7 = realBufferedSource0.buffer();
      buffer7.writeDecimalLong(276096L);
      buffer_UnsafeCursor1.buffer.hmacSha512(byteString0);
      long long0 = (-163L);
      // Undeclared exception!
      try { 
        buffer3.write(buffer_UnsafeCursor1.buffer, (-163L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShortLe(8075);
      realBufferedSink0.buffer.sha1();
      Buffer buffer1 = realBufferedSink0.buffer;
      GzipSink gzipSink0 = new GzipSink(buffer1);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      deflaterSink0.flush();
      assertEquals(7L, buffer1.size());
      
      Buffer buffer2 = new Buffer();
      buffer2.readUtf8Line();
      assertTrue(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(2668L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2136298837);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7f555555
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.readAll(buffer_UnsafeCursor0.buffer);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      long long0 = 10000000L;
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)27;
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8("source == this", (int) (byte)27, (int) (byte)97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 97 > 14
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      GzipSink gzipSink0 = new GzipSink(buffer0);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      buffer0.readAll(deflaterSink0);
      Buffer buffer1 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = (Buffer)buffer2.emit();
      assertTrue(buffer3.exhausted());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      buffer0.sha1();
      Buffer buffer1 = buffer0.writeUtf8("K$");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.readWrite = true;
      buffer_UnsafeCursor0.close();
      buffer1.readShort();
      Inflater inflater0 = new Inflater(true);
      assertEquals(0L, inflater0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink1.buffer();
      Buffer buffer4 = realBufferedSink0.buffer;
      Pipe pipe0 = new Pipe((byte)11);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("4RxR#-I'~C>", (int) (byte)11, (int) (byte)11, charset0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      realBufferedSink1.buffer.writeString("", charset0);
      assertNotSame(buffer2, buffer1);
      
      String string0 = realBufferedSink0.buffer.readUtf8(0L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeLong((-1775L));
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFully(buffer1, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      realBufferedSink0.buffer.sha1();
      buffer1.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(119);
      buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.seek(6);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.readByteArray();
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.buffer();
      assertEquals(14, buffer_UnsafeCursor0.end);
      assertEquals(6, buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      Pipe pipe0 = new Pipe(242L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource1.buffer();
      realBufferedSink0.buffer.indexOf((byte) (-120));
      Buffer buffer5 = new Buffer();
      Buffer buffer6 = realBufferedSink0.buffer();
      buffer1.writeAll(buffer4);
      buffer0.readByteArray();
      buffer6.hashCode();
      Buffer buffer7 = realBufferedSource1.buffer();
      realBufferedSource1.buffer.buffer();
      buffer5.writeShortLe((byte) (-120));
      assertEquals(2L, buffer5.size());
      
      long long1 = buffer7.size();
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1830L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer.writeLong(1273L);
      long long0 = 1L;
      try { 
        realBufferedSink0.buffer.skip(1830L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSink0.timeout();
      buffer1.sha256();
      long long0 = buffer3.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      buffer2.writeLongLe((-348L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(2L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Pipe pipe0 = new Pipe(8L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      int int0 = realBufferedSink0.buffer.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 2;
      Deflater deflater0 = new Deflater(2);
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      DeflaterSink deflaterSink1 = new DeflaterSink(buffer1, deflater0);
      deflaterSink1.timeout();
      buffer0.readLongLe();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer2 = new Buffer();
      HashingSource.sha1(buffer2);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        buffer2.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(1798L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.seek(8L);
      realBufferedSource0.buffer.readByteArray();
      realBufferedSource0.buffer();
      buffer2.buffer();
      assertEquals(14, buffer_UnsafeCursor0.end);
      assertEquals(8, buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2891L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Segment segment0 = buffer_UnsafeCursor0.buffer.head;
      SegmentPool.next = segment0;
      buffer_UnsafeCursor0.buffer.readShort();
      buffer1.writeDecimalLong(1000L);
      buffer1.writeDecimalLong(10000000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer.writeByte(3616);
      Buffer buffer3 = buffer2.writeByte((short)25140);
      buffer3.inputStream();
      Integer integer0 = new Integer((short)25140);
      Buffer buffer4 = pipe0.buffer;
      Buffer buffer5 = buffer4.emitCompleteSegments();
      buffer5.readHexadecimalUnsignedLong();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-1), 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor1.readWrite = false;
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      long long0 = 100000000000L;
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer2.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      deflaterSink0.flush();
      Segment segment0 = new Segment();
      deflaterSink0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      buffer0.readUtf8CodePoint();
      buffer0.emitCompleteSegments();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.close();
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer.size = 291L;
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong((-238L));
      realBufferedSink0.buffer.readShort();
      HashingSource.sha256(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Integer integer0 = new Integer((short)26214);
      realBufferedSource0.buffer.readUtf8();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = realBufferedSource0.buffer;
      try { 
        buffer2.readFrom((InputStream) pipedInputStream0, 100000000000000L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer2.sha256();
      ByteString byteString2 = ByteString.encodeUtf8("K$");
      buffer2.indexOfElement(byteString2);
      buffer2.rangeEquals((-1L), byteString1, (-1), 3);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-74L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -74
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeShort(1554);
      buffer0.readByte();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.writeDecimalLong(100000000L);
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer_UnsafeCursor0.buffer, (long) (-1), 3024L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-1 byteCount=3024
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3756L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(3756L);
      buffer2.writeAll(buffer1);
      buffer1.readByteArray();
      buffer0.indexOf((byte) (-38));
      buffer0.timeout();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Pipe pipe0 = new Pipe(2380L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.writeHexadecimalUnsignedLong(1404L);
      realBufferedSink0.buffer.buffer();
      buffer0.sha1();
      realBufferedSink0.buffer.writeShort(416);
      buffer1.close();
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer2 = pipe0.buffer;
      try { 
        buffer2.readUtf8LineStrict(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      Buffer buffer2 = buffer1.buffer();
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      gzipSource0.close();
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer2, 1126L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (-717), 88, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.clone();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.snapshot();
      Pipe pipe0 = new Pipe(1095216660480L);
      Buffer buffer4 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      Buffer buffer5 = new Buffer();
      buffer4.writeLongLe(10000L);
      buffer_UnsafeCursor0.resizeBuffer(10000L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      Buffer buffer6 = realBufferedSource0.buffer();
      buffer4.readUtf8CodePoint();
      buffer6.writeIntLe(16);
      assertEquals(10003L, buffer6.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.clone();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer2.selectPrefix(options0);
      buffer0.indexOf((byte)11, 10000000L);
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      realBufferedSink0.buffer.readShort();
      int int0 = 65;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      inflaterSource0.timeout();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.indexOf((byte)11);
      buffer_UnsafeCursor0.buffer.writableSegment((byte)106);
      buffer3.readUtf8();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      long long0 = 1593L;
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 1593L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.writeDecimalLong(100000000L);
      Inflater inflater0 = new Inflater(true);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: ff0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      buffer0.readUtf8();
      buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeLong(3001L);
      buffer0.readFully(realBufferedSink0.buffer, 1L);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: ff0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(3756L);
      SegmentPool.byteCount = 3756L;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-32);
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, (int) (byte) (-32), (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-32 byteCount=-68
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("}[h3");
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha1();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      HashingSink.md5(buffer_UnsafeCursor1.buffer);
      buffer1.indexOf(byteString0);
      assertEquals(6L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2891L);
      assertEquals(4L, buffer0.size());
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.buffer.select(options0);
      assertEquals((-1), int0);
      
      realBufferedSource0.buffer.segmentSizes();
      buffer1.writeDecimalLong((-1));
      assertEquals(6L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSink0.buffer.writeLongLe((-348L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer_UnsafeCursor0.end = 1733;
      buffer_UnsafeCursor0.resizeBuffer(2L);
      Pipe pipe0 = new Pipe(8L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      int int0 = realBufferedSink0.buffer.readUtf8CodePoint();
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer();
      realBufferedSource1.buffer();
      realBufferedSource0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Buffer buffer5 = buffer4.writeDecimalLong(9223372036854775807L);
      realBufferedSink1.buffer();
      realBufferedSource0.buffer.writeAll(realBufferedSource1);
      realBufferedSink1.buffer.readByteArray();
      Buffer buffer6 = new Buffer();
      buffer6.hashCode();
      realBufferedSource0.buffer();
      buffer3.buffer();
      int int0 = buffer5.readIntLe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(858927673, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      String string0 = "K$";
      Buffer buffer2 = buffer1.writeUtf8("K$");
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.equals((Object) null);
      byte[] byteArray0 = realBufferedSource0.buffer.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 2L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer0.sha256();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      buffer2.sha256();
      buffer2.writeDecimalLong(10000L);
      buffer1.sha256();
      buffer2.request((-325L));
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.clone();
      buffer0.indexOf((byte)2, 10000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      realBufferedSink0.buffer.readShort();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      realBufferedSink0.buffer.snapshot();
      Pipe pipe0 = new Pipe(2251L);
      buffer2.readAndWriteUnsafe();
      assertEquals(1L, buffer2.size());
      
      buffer_UnsafeCursor0.resizeBuffer(1365L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.indexOf((byte)2);
      realBufferedSource0.buffer.timeout();
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      gzipSource0.close();
      buffer0.write((Source) gzipSource0, (-2993L));
      // Undeclared exception!
      try { 
        gzipSource0.read(buffer0, 1000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      inflaterSource0.close();
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readAll(realBufferedSource0.buffer);
      realBufferedSource0.buffer.completeSegmentByteCount();
      buffer1.timeout();
      Buffer buffer2 = realBufferedSource0.buffer.writeLong(100L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)18;
      ByteString byteString0 = ByteString.encodeUtf8("?");
      byteString0.sha512();
      buffer0.rangeEquals(0L, byteString0, 26, (int) (byte)74);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)26;
      buffer2.readFully(byteArray0);
      assertEquals(2L, buffer2.size());
      
      realBufferedSource0.buffer.exhausted();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("be0co~e]");
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      Buffer buffer4 = buffer3.emitCompleteSegments();
      buffer2.readHexadecimalUnsignedLong();
      buffer4.writeLong(1348L);
      buffer3.writeLong(10000000L);
      int int0 = buffer3.readInt();
      assertEquals(17L, buffer3.size());
      assertEquals(1870554461, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeUtf8CodePoint((-1237));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)126;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      buffer0.write((Source) hashingSource0, (-567L));
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = 1404L;
      buffer1.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = buffer1.buffer();
      // Undeclared exception!
      try { 
        buffer2.readByteString(1404L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=1404
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.clone();
      buffer0.indexOf((byte)2, (long) (byte)2);
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong(232L);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeUtf8CodePoint(89);
      // Undeclared exception!
      try { 
        buffer0.getByte(2146768546);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2146768546 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(65536L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)100;
      buffer0.write(byteArray0);
      short short0 = buffer0.readShortLe();
      assertEquals(4L, buffer0.size());
      assertEquals((short)4911, short0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeIntLe(1881);
      assertEquals(4L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.clone();
      buffer0.indexOf((byte)11, 10000000L);
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      realBufferedSink0.buffer.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer.snapshot();
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer4.sha256();
      assertFalse(buffer0.equals((Object)buffer1));
      
      Buffer buffer5 = realBufferedSink0.buffer.writeDecimalLong((byte)11);
      File file0 = MockFile.createTempFile("newSize < 0: ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) buffer_UnsafeCursor0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) buffer2;
      objectArray0[3] = (Object) file0;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 99);
      buffer5.copyTo((OutputStream) mockPrintStream0);
      assertEquals(3L, file0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = realBufferedSink0.buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      buffer2.equals(pushbackInputStream0);
      realBufferedSink0.buffer.readByteArray();
      ByteString byteString0 = realBufferedSink0.buffer.sha256();
      assertEquals(32, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.encodeUtf8("pi");
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString1);
      ByteString byteString2 = new ByteString((byte[]) null);
      buffer2.rangeEquals((long) (-1), byteString1, (-1), (-622));
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte byte0 = (byte) (-80);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.writeShort((byte) (-80));
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = buffer2.writeDecimalLong((-260L));
      // Undeclared exception!
      try { 
        buffer3.write(buffer1, (long) (byte) (-80));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-80
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      buffer1.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Pipe pipe0 = new Pipe(1126L);
      Pipe pipe1 = new Pipe(1126L);
      assertFalse(pipe1.equals((Object)pipe0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeInt(65);
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1000000L);
      buffer1.readIntLe();
      assertEquals(5L, buffer1.size());
      
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.clone();
      buffer0.indexOf((byte)2, 10000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      EvoSuiteFile evoSuiteFile0 = null;
      realBufferedSink0.buffer.readShort();
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2695L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2695 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = buffer0.copyTo((OutputStream) pipedOutputStream0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-430L));
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      buffer1.sha256();
      buffer3.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Integer integer0 = new Integer((-1));
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      assertEquals(9994240L, buffer2.completeSegmentByteCount());
      
      realBufferedSink0.buffer.timeout();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.writeDecimalLong(2891L);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.md5();
      String string0 = "";
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2891L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.snapshot(4);
      buffer1.buffer();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.sha1();
      Options options0 = null;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.buffer();
      long long0 = 1430L;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1430L);
      Buffer buffer2 = realBufferedSink0.buffer.buffer();
      buffer1.sha1();
      buffer2.close();
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(1430L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer();
      Buffer buffer4 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(32L);
      Buffer buffer5 = buffer1.buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink2.buffer();
      buffer1.indexOfElement(byteString0);
      buffer4.sha256();
      buffer5.request(1708L);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      GzipSource gzipSource0 = new GzipSource(buffer1);
      realBufferedSink0.buffer.readDecimalLong();
      buffer2.snapshot((int) (byte)0);
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer3));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8(" .0`Sl+5y9uZ)");
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      buffer3.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer3.readUnsafe();
      ByteString byteString0 = ByteString.encodeUtf8("cIVTrG");
      buffer_UnsafeCursor2.buffer.indexOfElement(byteString0);
      buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.resizeBuffer((-1L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("v!/EAsnO&t+`");
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      ByteString.decodeBase64("v!/EAsnO&t+`");
      byteStringArray0[2] = null;
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor1.buffer.selectPrefix(options0);
      buffer1.indexOf((byte)101, 401L);
      Options.of(byteStringArray0);
      realBufferedSource0.buffer.select(options0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      realBufferedSink0.writeUtf8CodePoint(128);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeUtf8("delegate == null");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.indexOf((byte)15, (long) (byte)15);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1802L));
      buffer0.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.snapshot();
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer2.sha256();
      buffer3.writeDecimalLong(255L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer5 = new Buffer();
      buffer5.completeSegmentByteCount();
      try { 
        buffer4.readUtf8LineStrict(255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)102;
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(941L);
      DeflaterSink deflaterSink0 = new DeflaterSink(bufferedSink0, deflater0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(2020L);
      buffer1.writeHexadecimalUnsignedLong((-1938L));
      buffer2.buffer();
      buffer1.sha256();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.request(1404L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      buffer1.indexOf(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer();
      boolean boolean0 = buffer3.request(8192L);
      assertEquals(4L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      ByteString byteString0 = buffer0.sha256();
      buffer0.rangeEquals((-1L), byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      realBufferedSource0.readByteString();
      realBufferedSource0.buffer();
      ByteString byteString1 = new ByteString((byte[]) null);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Deflater deflater0 = new Deflater();
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.flush();
      Buffer buffer1 = buffer0.writeUtf8("");
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      Buffer buffer4 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer5 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer1.sha256();
      ByteString.encodeUtf8("giHl#5}9Sk;bh ");
      long long0 = buffer_UnsafeCursor0.offset;
      // Undeclared exception!
      try { 
        buffer2.read((Buffer) null, (-72057594037927936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 3756L;
      Buffer buffer1 = buffer0.writeLong(3756L);
      try { 
        buffer1.require(3756L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("be0co~e]");
      buffer1.readHexadecimalUnsignedLong();
      assertFalse(buffer0.exhausted());
      
      Buffer buffer2 = new Buffer();
      assertFalse(buffer2.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer.size = 291L;
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeHexadecimalUnsignedLong((-2647L));
      try { 
        buffer1.readUtf8LineStrict(291L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=291 content=6666666666666666666666666635613966666666666666666666666666356139\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(3001L);
      buffer0.require((-2542L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-2542L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(1392L);
      ((RealBufferedSink) bufferedSink0).buffer.toString();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.writeDecimalLong(8L);
      assertEquals(1L, buffer4.size());
      
      Buffer buffer5 = realBufferedSink0.buffer();
      buffer0.writeAll(buffer5);
      realBufferedSource0.buffer.readByteArray();
      realBufferedSink0.buffer.hashCode();
      Buffer buffer6 = realBufferedSource0.buffer();
      buffer6.buffer();
      assertTrue(buffer6.equals((Object)buffer3));
      
      int int0 = (-1717986917);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.writeString("", 6, (-1717986917), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1717986917 < 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.clone();
      buffer0.indexOf((byte)2, 10000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      realBufferedSink0.buffer.readShort();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      realBufferedSink0.buffer.snapshot();
      Pipe pipe0 = new Pipe(2251L);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor1.buffer.writeLongLe((-72057594037927936L));
      buffer_UnsafeCursor0.resizeBuffer(1365L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.indexOf((byte)2);
      buffer2.writeInt(1073741824);
      assertEquals(1369L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = new Buffer();
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeUtf8("delegate == null");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.indexOf((byte)15, (long) (byte)15);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1802L));
      buffer2.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "delegate == null");
      buffer0.snapshot();
      ByteString byteString0 = buffer2.sha256();
      buffer3.writeDecimalLong(255L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(16L, charset0);
      Buffer buffer4 = new Buffer();
      buffer4.completeSegmentByteCount();
      HashingSink.md5(buffer3);
      buffer4.indexOf(byteString0);
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("be0co~e]");
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)74;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      gzipSource0.close();
      realBufferedSink0.buffer.write((Source) gzipSource0, (long) (byte)0);
      // Undeclared exception!
      try { 
        gzipSource0.read(realBufferedSink0.buffer, (-2459L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2459
         //
         verifyException("okio.GzipSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer buffer1 = buffer0.writeLong(10000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater1 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      buffer0.sha1();
      realBufferedSink0.buffer.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      buffer0.writeTo((OutputStream) byteArrayOutputStream1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(deflaterSink0);
      Pipe pipe0 = new Pipe(100L);
      Pipe pipe1 = new Pipe(16L);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, 2136470911, (-1321));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2136470911 byteCount=-1321
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(10000000L);
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer1, 1L, 10000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=1 byteCount=10000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 99, 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 99 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = 1180L;
      Pipe pipe0 = new Pipe(1180L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      ByteString byteString0 = realBufferedSink0.buffer.sha1();
      buffer1.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(119);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(119);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      realBufferedSink0.buffer.segmentSizes();
      realBufferedSink0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.snapshot(140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=140
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShortLe(2147221535);
      realBufferedSink0.buffer.sha1();
      Buffer buffer1 = realBufferedSink0.buffer;
      GzipSink gzipSink0 = new GzipSink(buffer0);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(gzipSink0, deflater0);
      Pipe pipe0 = new Pipe(2147221535);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 255, 2147221535, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2147221535 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`Ui:9q%>-j%&");
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer_UnsafeCursor0.buffer, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.clone();
      ByteString byteString0 = new ByteString((byte[]) null);
      realBufferedSource0.buffer.sha256();
      ByteString byteString1 = ByteString.encodeUtf8("WtC@#");
      realBufferedSink0.buffer.indexOfElement(byteString0);
      ByteString byteString2 = new ByteString((byte[]) null);
      buffer1.rangeEquals((long) 3, byteString1, 2234, (-1));
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer3.sha256();
      ByteString byteString2 = ByteString.encodeUtf8("K$");
      buffer3.indexOfElement(byteString2);
      buffer3.writeInt((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.read(buffer2, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 45;
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer1.inputStream();
      Buffer buffer3 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer3);
      hashingSink0.hash();
      long long0 = buffer_UnsafeCursor0.offset;
      buffer3.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      try { 
        realBufferedSource0.readUtf8LineStrict(100000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=4b24\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((-3278L));
      assertEquals(5L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource1.buffer();
      Charset.defaultCharset();
      Buffer buffer2 = realBufferedSource0.buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer1.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer();
      realBufferedSink0.buffer.sha256();
      Buffer buffer4 = new Buffer();
      buffer0.writeDecimalLong(100L);
      realBufferedSource1.buffer.writeDecimalLong((-1438L));
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.buffer.clear();
      buffer3.writableSegment(866);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer.size = 291L;
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.inputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer2.indexOfElement(byteString0, (long) 14);
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(3756L);
      SegmentPool.byteCount = 3756L;
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer.writeLong(3756L);
      buffer2.readFully(buffer1, 1L);
      int int0 = 0;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8CodePoint(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: ff0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer2 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer2);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      buffer3.indexOfElement(byteString0, 4L);
      buffer1.readByteArray();
      realBufferedSink0.buffer.readDecimalLong();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0, (-1156L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer1, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      deflaterSink0.timeout();
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1126L);
      Buffer buffer3 = realBufferedSink0.buffer;
      HashingSource.sha1(buffer2);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer4 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      realBufferedSource0.timeout();
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(1L);
      buffer2.readByteString(1L);
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      buffer1.sha256();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeShort(1554);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(80);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      buffer2.copyTo((OutputStream) mockPrintStream0);
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-68);
      buffer0.read(byteArray0);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-3);
      // Undeclared exception!
      try { 
        buffer0.getByte(579L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=579 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.buffer.writeDecimalLong((-937L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSource1.buffer();
      buffer0.buffer();
      buffer0.readIntLe();
      realBufferedSource0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)48;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.write(byteArray0);
      buffer0.inputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.indexOfElement(byteString0, (long) (byte)4);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.writeDecimalLong(2891L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      realBufferedSource0.buffer.readDecimalLong();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-70);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 2225, 2225);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=2225 byteCount=2225
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = 1404L;
      buffer1.writeHexadecimalUnsignedLong(1404L);
      buffer1.buffer();
      int int0 = 416;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(8230);
      buffer_UnsafeCursor0.buffer.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSource0.buffer();
      buffer0.sha256();
      realBufferedSource0.buffer();
      int int0 = buffer2.readUtf8CodePoint();
      assertTrue(buffer2.exhausted());
      assertEquals(8230, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      Buffer buffer1 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.sha256();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(deflaterSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      Buffer buffer2 = realBufferedSink2.buffer;
      Buffer buffer3 = realBufferedSink1.buffer.writeDecimalLong(10000000000000L);
      assertEquals(14L, buffer3.size());
      
      Charset charset1 = Charset.defaultCharset();
      String string0 = realBufferedSink1.buffer.readString(charset1);
      assertEquals("10000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readByteArray((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-2062L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -2062
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer3 = new Buffer();
      buffer3.indexOf((byte) (-31));
      Buffer buffer4 = realBufferedSource1.buffer();
      realBufferedSource1.toString();
      buffer4.writeDecimalLong(9223372036854775807L);
      realBufferedSink0.buffer();
      Buffer buffer5 = realBufferedSource1.buffer;
      // Undeclared exception!
      try { 
        buffer2.getByte(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9223372036854775807 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.start = 1744;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer_UnsafeCursor0.buffer.close();
      BufferedSink bufferedSink0 = buffer_UnsafeCursor0.buffer.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(71776119L);
      GzipSource gzipSource0 = new GzipSource(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      ByteString byteString1 = new ByteString(byteArray0);
      realBufferedSink0.buffer.writeUtf8("source == this", (int) (byte)0, (int) (byte)0);
      realBufferedSink0.buffer.indexOfElement(byteString0);
      buffer1.readAndWriteUnsafe();
      Buffer buffer4 = new Buffer();
      buffer2.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3756L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(3756L);
      buffer2.writeAll(buffer1);
      buffer1.readByteArray();
      buffer1.hashCode();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(3220L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=3220
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      deflater0.finished();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.seek(6);
      realBufferedSource0.buffer();
      ByteString.decodeBase64("j3_X%KFHkyn[");
      buffer3.indexOfElement((ByteString) null);
      buffer1.readAndWriteUnsafe();
      long long0 = 1063L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1063L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-260L);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-58);
      byte byte0 = (byte)4;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeDecimalLong((byte) (-58));
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (long) (byte)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      deflaterSink0.flush();
      try { 
        buffer0.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=789c000000ffff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("}[h3");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(4L, buffer0.size());
      
      buffer_UnsafeCursor0.buffer.readInt();
      Buffer buffer2 = realBufferedSink0.buffer;
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      gzipSource0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(80);
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      buffer_UnsafeCursor0.buffer.sha512();
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("YC [q7):NueRg+5O", charset0);
      assertEquals(16L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Charset.defaultCharset();
      Buffer buffer2 = realBufferedSource0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      realBufferedSource0.buffer.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = buffer3.sha256();
      Buffer buffer4 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeDecimalLong(10000000000000L);
      realBufferedSource0.buffer.writeDecimalLong((-104L));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      buffer4.writeByte(113);
      buffer1.inputStream();
      buffer0.indexOfElement(byteString0, 57L);
      buffer_UnsafeCursor0.buffer.emitCompleteSegments();
      buffer0.readHexadecimalUnsignedLong();
      buffer_UnsafeCursor0.buffer.writeLong(65536L);
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer5 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer4.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.seek((-1));
      // Undeclared exception!
      try { 
        buffer0.getByte(9223L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9223 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        buffer0.readFully(buffer1, 6L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer0.sha256();
      byteString1.compareTo(byteString0);
      buffer0.rangeEquals((long) 3, byteString1, 3, 3);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(291L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.clone();
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.sha256();
      ByteString.encodeUtf8("endIndex > length(");
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString1);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte) (-42);
      ByteString byteString2 = new ByteString(byteArray1);
      Buffer buffer2 = new Buffer();
      buffer2.readUtf8();
      buffer1.writeInt((byte) (-42));
      buffer2.rangeEquals((-1344L), byteString1, (-2145301244), (-2145301244));
      Pipe pipe0 = new Pipe(3069L);
      Pipe pipe1 = new Pipe(1904L);
      Buffer buffer3 = realBufferedSink0.buffer;
      boolean boolean0 = buffer1.rangeEquals(0L, byteString1);
      assertFalse(buffer1.exhausted());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeUtf8("delegate == null");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.indexOf((byte)15, (long) (byte)15);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1802L));
      buffer0.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.snapshot();
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer2.sha256();
      buffer3.writeDecimalLong(255L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(16L, charset0);
      Buffer buffer5 = new Buffer();
      buffer5.completeSegmentByteCount();
      try { 
        buffer4.readUtf8LineStrict(255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K$");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s == null");
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.buffer.indexOf((byte) (-52));
      buffer_UnsafeCursor0.buffer.write(buffer_UnsafeCursor1.data, 2, 93);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      realBufferedSource0.buffer.indexOf((byte)114);
      Buffer buffer2 = realBufferedSource0.buffer;
      boolean boolean0 = buffer_UnsafeCursor1.buffer.equals(buffer2);
      assertTrue(boolean0);
      
      realBufferedSource0.readByteArray();
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.buffer.buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      buffer0.clone();
      byte byte0 = (byte)2;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-84), (-72057594037927936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-72057594037927936 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.write(byteString0);
      byteString0.hashCode = (-743);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)6;
      buffer0.writeDecimalLong(1008L);
      Inflater inflater0 = new Inflater(true);
      buffer0.writeUtf8CodePoint((byte)6);
      long long0 = buffer0.size();
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.equals(hashingSource0);
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) mockFileInputStream0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K$");
      Buffer buffer2 = buffer1.writeUtf8("K$");
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.writeAll(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      Segment segment0 = new Segment();
      buffer2.close();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer_UnsafeCursor0.buffer.writeUtf8("");
      long long0 = 9L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(9L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=9 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer.size = 291L;
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(937L);
      buffer1.writeDecimalLong(291L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer1.readUnsafe();
      realBufferedSource0.buffer.clear();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      buffer0.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readUtf8((long) (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=9
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeLongLe(71776119L);
      ByteString byteString1 = ByteString.EMPTY;
      byteString1.compareTo(byteString0);
      boolean boolean0 = buffer0.rangeEquals((long) 0, byteString1, 0, 0);
      assertTrue(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      int int0 = new Integer((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      buffer0.readFrom((InputStream) mockFileInputStream0, 0L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = new Buffer();
      buffer2.clear();
      buffer2.writeLongLe(0L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-492L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeLongLe(71776119L);
      byteString0.compareTo(byteString0);
      buffer0.rangeEquals((long) 3, byteString0, 3, 3);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(999984L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=999983 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      boolean boolean0 = buffer0.request(71776115L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer1.sha1();
      buffer1.writeShort((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      byte byte0 = (byte)11;
      long long0 = 10000000L;
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSHA256");
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) mockPrintStream0, 10000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer_UnsafeCursor1.buffer.clone();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.readByteString();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.buffer();
      Buffer buffer3 = realBufferedSink0.buffer;
      Pipe pipe0 = new Pipe(223L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer3.writeString("K$", 1620, (-707), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -707 < 1620
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor1.buffer.clone();
      assertEquals(2L, buffer3.completeSegmentByteCount());
      
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = buffer2.sha256();
      ByteString byteString2 = ByteString.encodeUtf8(" hex=");
      long long0 = realBufferedSink0.buffer.indexOfElement(byteString1);
      assertEquals((-1L), long0);
      
      ByteString byteString3 = new ByteString((byte[]) null);
      realBufferedSink0.buffer.rangeEquals(422L, byteString3, (-101), (-101));
      Pipe pipe0 = new Pipe(2046L);
      Pipe pipe1 = new Pipe(1904L);
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer_UnsafeCursor1.buffer.rangeEquals(2046L, byteString2);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readUtf8();
      buffer0.writeLong(3756L);
      SegmentPool.byteCount = 3756L;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-6734L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink1.buffer.writeHexadecimalUnsignedLong(1404L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.buffer();
      buffer3.sha1();
      buffer1.close();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-1431L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1431
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-260L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) (byte) (-61));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-61
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      Buffer buffer3 = buffer0.writeDecimalLong(100000000L);
      buffer0.writeAll(buffer2);
      buffer_UnsafeCursor0.buffer.readByteArray();
      buffer3.hashCode();
      realBufferedSource0.buffer();
      buffer3.buffer();
      assertEquals(0L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer1.sha1();
      try { 
        buffer_UnsafeCursor1.buffer.readFully(realBufferedSource0.buffer, 2028L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      long long0 = 3756L;
      Buffer buffer1 = buffer0.writeLong(15L);
      buffer0.readLong();
      Buffer buffer2 = buffer1.writeLong(3756L);
      buffer2.readShortLe();
      buffer1.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.sha256();
      buffer2.indexOfElement(byteString1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeLongLe(71776119L);
      ByteString byteString1 = buffer0.sha256();
      byteString1.compareTo(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      buffer0.rangeEquals((long) 3, byteString1, 3, 3);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Buffer buffer3 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(32L);
      Buffer buffer4 = buffer1.buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink2.buffer();
      buffer1.indexOfElement(byteString0);
      buffer3.sha256();
      buffer4.request(1708L);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      GzipSource gzipSource0 = new GzipSource(buffer1);
      realBufferedSink0.buffer.readDecimalLong();
      buffer1.outputStream();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer buffer1 = buffer0.writeLong(15L);
      buffer0.readLong();
      Buffer buffer2 = buffer1.writeLong(3756L);
      buffer2.readShortLe();
      buffer1.toString();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      ByteString byteString0 = realBufferedSink0.buffer.sha1();
      buffer1.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(119);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(119);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.close();
      buffer0.md5();
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(2891L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = buffer1.emitCompleteSegments();
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.readUtf8();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.writeInt((-1));
      long long0 = 255L;
      long long1 = 280375465082880L;
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\b");
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      GzipSink gzipSink0 = new GzipSink(hashingSink0);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      deflaterSink0.timeout();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer3 = realBufferedSink0.buffer;
      HashingSource.sha1(realBufferedSink0.buffer);
      Pipe pipe0 = new Pipe(25L);
      Buffer buffer4 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      Buffer buffer5 = buffer4.writeDecimalLong(3L);
      // Undeclared exception!
      try { 
        buffer5.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = (-420L);
      String string0 = "size < 8: ";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        buffer1.readUtf8((-420L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-420
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.sha256();
      buffer3.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      Buffer buffer4 = realBufferedSource0.buffer;
      ByteString.encodeUtf8("w6hb)}Wj:");
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-3);
      // Undeclared exception!
      try { 
        buffer0.getByte(579L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=579 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("K$", charset0);
      String string0 = realBufferedSink0.buffer.readUtf8Line();
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals("K$", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.indexOf((byte)15, (long) (byte)15);
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1802L));
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.snapshot();
      buffer_UnsafeCursor2.buffer.readAndWriteUnsafe();
      buffer1.skip((byte)15);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.buffer.readFully(buffer_UnsafeCursor1.buffer, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = new Buffer();
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeUtf8("delegate == null");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.indexOf((byte)15, (long) (byte)15);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1802L));
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer2.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "delegate == null");
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = buffer2.sha256();
      buffer3.rangeEquals((-1802L), byteString0, (-1), (int) (short)25701);
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(16L, charset0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer_UnsafeCursor2.buffer, byteString1);
      hashingSink0.hash();
      ByteString byteString2 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor1.buffer.clone();
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.buffer();
      Buffer buffer4 = realBufferedSink0.buffer;
      Pipe pipe0 = new Pipe(223L);
      Buffer buffer5 = pipe0.buffer;
      buffer5.writeDecimalLong(100000000L);
      buffer3.indexOf((byte)42);
      buffer2.writeByte((-3113));
      assertFalse(buffer2.exhausted());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)20;
      buffer3.indexOf((byte)20, (long) (byte)20, (long) (byte)54);
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer1.indexOf(byteString0, (long) (byte)54);
      realBufferedSink0.buffer.readByteString();
      Buffer buffer4 = buffer3.buffer();
      Timeout timeout0 = buffer4.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.clone();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.readByteString();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      Pipe pipe0 = new Pipe(14L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.writeString((String) null, (int) (byte)87, (int) (byte)87, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.clone();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.readByteString();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      Pipe pipe0 = new Pipe(14L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString("/#*?<tld59pa&ak;M", 9, (int) (byte)103, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 103 > 17
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(24);
      buffer0.toString();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.snapshot(813);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=813
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-52);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-105);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)69, (int) (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=69 byteCount=12
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      String string0 = "v!/EAsnO&t+`";
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      ByteString byteString0 = realBufferedSink0.buffer.sha1();
      buffer1.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(119);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(119);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      realBufferedSink0.writeUtf8CodePoint(119);
      long long0 = buffer1.readAll(realBufferedSource0.buffer);
      assertTrue(buffer1.exhausted());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      buffer_UnsafeCursor0.next();
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSink0.timeout();
      buffer1.sha256();
      Segment segment0 = new Segment();
      realBufferedSource0.buffer.head = segment0;
      realBufferedSource0.buffer.indexOfElement(byteString0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)24;
      ByteBuffer.wrap(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "data == null");
      realBufferedSource0.buffer.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeDecimalLong((byte)24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      deflaterSink0.timeout();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1404L);
      buffer2.md5();
      Segment segment0 = new Segment();
      buffer2.writeIntLe((-3672));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-593L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      realBufferedSink0.buffer.sha1();
      buffer1.close();
      deflaterSink0.timeout();
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer3 = realBufferedSink0.buffer;
      HashingSource.sha1(realBufferedSink0.buffer);
      Pipe pipe0 = new Pipe(5723L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.timeout();
      realBufferedSource0.buffer();
      buffer2.writeDecimalLong(104064L);
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.write((Source) realBufferedSink0.buffer, (-104L));
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong((-815L));
      buffer1.readByteArray();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Pipe pipe0 = new Pipe(1255L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.close();
      buffer0.sha512();
      byte byte0 = (byte)13;
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)13, (-745L), 1255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-745 toIndex=1255
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer.writeShortLe(30);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      ByteString byteString0 = realBufferedSink0.buffer.sha1();
      buffer1.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(119);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(119);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      realBufferedSink0.buffer.writeLong(6L);
      buffer0.writeLong(71L);
      buffer0.readInt();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((-1L));
      buffer_UnsafeCursor1.buffer.buffer();
      buffer_UnsafeCursor0.buffer.sha1();
      realBufferedSink0.buffer.writeShort((-1));
      GzipSink gzipSink0 = new GzipSink(buffer_UnsafeCursor0.buffer);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      deflaterSink0.flush();
      try { 
        buffer3.readUtf8LineStrict(1095216660480L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0.buffer);
      realBufferedSource0.inputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0);
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(57L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Pipe pipe1 = new Pipe(57L);
      Pipe.PipeSource pipe_PipeSource1 = pipe1.new PipeSource();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.buffer();
      long long0 = (-1431L);
      realBufferedSource1.buffer.writeDecimalLong((-1431L));
      ByteString[] byteStringArray0 = new ByteString[6];
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteStringArray0[0] = byteString0;
      try { 
        realBufferedSource1.readByteString(57L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.writeHexadecimalUnsignedLong((-1L));
      buffer_UnsafeCursor1.buffer.buffer();
      realBufferedSink0.writeShortLe((-1));
      buffer_UnsafeCursor0.buffer.sha1();
      realBufferedSink0.buffer.writeShort((-1));
      GzipSink gzipSink0 = new GzipSink(buffer_UnsafeCursor0.buffer);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      deflaterSink0.flush();
      long long0 = 1095216660480L;
      // Undeclared exception!
      try { 
        buffer1.writeString("bIjmi';?#k\"Arf0PE", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("be0co~e]");
      buffer_UnsafeCursor0.seek((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(911L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = buffer0.clone();
      buffer1.indexOf((byte)12, 10000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(100000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readShort();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      buffer_UnsafeCursor0.buffer.snapshot();
      Pipe pipe1 = new Pipe(911L);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      assertEquals(5L, buffer2.size());
      
      Buffer buffer3 = new Buffer();
      buffer3.writeLongLe(10000L);
      buffer_UnsafeCursor1.resizeBuffer(2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer_UnsafeCursor0.buffer.indexOf((byte)12);
      realBufferedSource0.buffer.writeInt(87);
      int int0 = buffer4.readIntLe();
      assertEquals(1459617792, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.sha1();
      buffer0.close();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7v,26K{");
      buffer1.completeSegmentByteCount();
      buffer1.require(0L);
      Buffer buffer2 = realBufferedSink0.buffer();
      try { 
        buffer2.readUtf8LineStrict(831L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("}[h3");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer_UnsafeCursor0.buffer.readInt();
      Buffer buffer2 = realBufferedSink0.buffer;
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      gzipSource0.close();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer3.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor1.buffer;
      Buffer buffer5 = new Buffer();
      ByteString.decodeBase64("|[DVtgt`");
      // Undeclared exception!
      try { 
        buffer2.rangeEquals((long) (-1), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Pipe pipe0 = new Pipe(9L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8jwRyL,");
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)101;
      buffer0.indexOf((byte) (-53), 800L, 2123L);
      byteArray0[3] = (byte) (-34);
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (long) (byte) (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, (-177L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-177 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Pipe pipe0 = new Pipe(1684L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 1684L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.writeLong(1392L);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer.toString();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Pipe pipe0 = new Pipe(194L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = hashingSource0.hash();
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)57;
      byteArray0[0] = (byte)57;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      gzipSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write((Source) gzipSource0, (long) (byte)57);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Pipe pipe0 = new Pipe(761L);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 761L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      deflater0.finished();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer1, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSource0.readByteString();
      Buffer buffer3 = new Buffer();
      buffer3.writeUtf8CodePoint(240);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(71776L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.writeLong(71776L);
      try { 
        realBufferedSink0.buffer.readFully(buffer1, 71776L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.buffer.buffer();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.seek(8L);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.readByteArray();
      realBufferedSource0.buffer();
      buffer2.buffer();
      assertEquals(14, buffer_UnsafeCursor0.end);
      assertEquals(8, buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      Charset.defaultCharset();
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-42);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte) (-42);
      byteArray1[5] = (byte) (-42);
      byteArray1[6] = (byte) (-42);
      byteArray1[7] = (byte) (-42);
      byteArray1[8] = (byte) (-42);
      ByteString byteString1 = new ByteString(byteArray1);
      buffer2.sha256();
      ByteString.encodeUtf8("C2*{)fAoJ0PgD@L @");
      buffer1.indexOfElement(byteString1);
      // Undeclared exception!
      try { 
        buffer0.read(realBufferedSource0.buffer, (long) (byte) (-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -42
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.clone();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.sha256();
      ByteString.encodeUtf8("size < 8: ");
      realBufferedSource0.buffer.indexOfElement(byteString0);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.rangeEquals((long) 3, byteString1, 3, 3);
      Pipe pipe0 = new Pipe(3);
      Pipe pipe1 = new Pipe(1000000000000000L);
      Buffer buffer2 = pipe1.buffer;
      // Undeclared exception!
      try { 
        buffer2.snapshot((-484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-484
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      buffer0.sha1();
      Buffer buffer1 = buffer0.writeUtf8("K$");
      buffer0.readAndWriteUnsafe();
      buffer1.readShort();
      Inflater inflater0 = new Inflater(true);
      assertEquals(0, inflater0.getTotalOut());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.seek(5);
      realBufferedSource0.buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      buffer_UnsafeCursor0.next();
      realBufferedSink0.buffer.indexOf((byte)0);
      assertEquals(13L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.copyTo((OutputStream) pipedOutputStream0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer4 = buffer3.writeDecimalLong(10000000000000L);
      buffer3.writeDecimalLong(8192L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      buffer2.writeByte(113);
      Buffer buffer5 = new Buffer();
      buffer5.inputStream();
      buffer1.indexOfElement(byteString0, 397L);
      realBufferedSource0.buffer.emitCompleteSegments();
      Buffer buffer6 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer6.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000000819
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 8075;
      realBufferedSink0.writeShortLe(8075);
      ByteString byteString0 = realBufferedSink0.buffer.sha1();
      Buffer buffer1 = realBufferedSink0.buffer;
      GzipSink gzipSink0 = new GzipSink(buffer1);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      deflaterSink0.flush();
      Buffer buffer2 = new Buffer();
      buffer2.rangeEquals((-1136L), byteString0, 8075, 9);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        buffer0.readUtf8(3149L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=3149
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater(2);
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      DeflaterSink deflaterSink1 = new DeflaterSink(buffer1, deflater0);
      deflaterSink1.timeout();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer2 = new Buffer();
      HashingSource.sha1(buffer2);
      buffer1.indexOf((byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer();
      realBufferedSource0.toString();
      Buffer buffer4 = new Buffer();
      buffer4.writeDecimalLong((-74L));
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer3.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.next();
      buffer1.writeUtf8("delegate == null");
      assertEquals(16L, buffer1.size());
      
      buffer_UnsafeCursor0.buffer.indexOf((byte)15, (long) (byte)15);
      buffer_UnsafeCursor0.buffer.sha256();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeLong(3756L);
      SegmentPool.byteCount = 3756L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeLong(3756L);
      long long0 = 1L;
      try { 
        realBufferedSink0.buffer.skip(386L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer.size = 291L;
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict(291L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer_UnsafeCursor1.buffer.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.buffer();
      Buffer buffer5 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer4);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.indexOfElement(byteString0);
      buffer0.request((-3723L));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeUtf8("+lTDk");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer2.readShort();
      Inflater inflater0 = new Inflater(false);
      assertEquals(0, inflater0.getTotalIn());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeLong(3756L);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOf((byte)102, (long) (byte)102);
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((byte)102);
      Buffer buffer4 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.writeUtf8CodePoint((-1));
      byte byte0 = buffer1.readByte();
      assertEquals(3L, buffer1.size());
      assertEquals((byte)75, byte0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString0 = buffer1.sha1();
      buffer0.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)53;
      Buffer buffer2 = new Buffer();
      realBufferedSink0.buffer.rangeEquals(1217L, byteString0, (int) (byte) (-117), (-2168));
      Pipe pipe0 = new Pipe(12L);
      Pipe pipe1 = new Pipe((byte)56);
      Buffer buffer3 = realBufferedSink0.buffer;
      boolean boolean0 = buffer1.rangeEquals((long) (byte) (-62), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer0.sha256();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      ByteString byteString0 = buffer2.sha256();
      buffer2.indexOfElement(byteString0);
      buffer2.writeDecimalLong(10000L);
      buffer1.sha256();
      buffer2.request((-325L));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer3 = realBufferedSink1.buffer;
      Pipe pipe0 = new Pipe(4603L);
      Buffer buffer4 = pipe0.buffer;
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      GzipSource gzipSource0 = new GzipSource(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.copyTo(buffer_UnsafeCursor0.buffer, (-906L), 2891L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-906 byteCount=2891
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((-1L));
      buffer_UnsafeCursor1.buffer.buffer();
      buffer_UnsafeCursor0.buffer.sha1();
      realBufferedSink0.buffer.writeShort((-1));
      MockPrintStream mockPrintStream0 = new MockPrintStream("f");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) buffer3;
      objectArray0[1] = (Object) buffer_UnsafeCursor1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) realBufferedSink0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) buffer_UnsafeCursor1;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) printStream0, (long) (-1), (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=18 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.clone();
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      realBufferedSource0.buffer.indexOf((byte)114);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer_UnsafeCursor1.buffer.equals(buffer2);
      assertEquals(2L, buffer0.size());
      
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertArrayEquals(new byte[] {(byte)75, (byte)36}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.sha256();
      buffer2.indexOfElement(byteString1);
      ByteString byteString3 = buffer0.sha256();
      buffer_UnsafeCursor0.buffer.request(0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.indexOf(byteString3);
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer4.rangeEquals(2147483647L, byteString2, (-1), 109);
      Pipe pipe0 = new Pipe(1712L);
      Buffer buffer5 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer5.snapshot((-496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-496
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("be0co~e]");
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      buffer_UnsafeCursor1.next();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(8L, buffer0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (-123), 965, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -123
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      int int0 = 813;
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeUtf8CodePoint(813);
      // Undeclared exception!
      try { 
        pipe_PipeSource0.read(realBufferedSource0.buffer, 813);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      int int0 = buffer_UnsafeCursor0.end;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)61;
      ByteString byteString1 = new ByteString(byteArray0);
      realBufferedSource0.buffer.rangeEquals(1L, byteString0, (int) (byte) (-89), 2);
      Pipe pipe0 = new Pipe(2L);
      realBufferedSource0.buffer();
      try { 
        buffer1.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=4b24\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2891L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Segment segment0 = buffer_UnsafeCursor0.buffer.head;
      SegmentPool.next = segment0;
      buffer_UnsafeCursor0.buffer.readShort();
      buffer1.writeDecimalLong(1000L);
      buffer1.writeDecimalLong(10000000000L);
      assertEquals(16L, buffer0.size());
      
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      deflater0.reset();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      assertEquals(32, byteString0.size());
      
      long long0 = 100L;
      buffer0.request(100L);
      buffer0.indexOfElement(byteString0, 10001L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-487L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-487 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeLongLe((-348L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-348L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -348
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.sha1();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8("");
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(3756L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, (-2146766384), 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-2146766384 byteCount=82
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      String string0 = " Ts$l|OPF7mbX\"/_0q";
      // Undeclared exception!
      try { 
        buffer0.writeUtf8(" Ts$l|OPF7mbX\"/_0q", 2919, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 2919
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      int int0 = 0;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readUtf8();
      buffer0.writeLong(3756L);
      SegmentPool.byteCount = 3756L;
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeLong(3756L);
      int int0 = 0;
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: ff0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      ByteString.decodeBase64("v!/EAsnO&t+`");
      byteStringArray0[2] = null;
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor1.buffer.selectPrefix(options0);
      buffer1.indexOf((byte)101, 401L);
      Options.of(byteStringArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      assertTrue(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      deflaterSink0.timeout();
      buffer1.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha1(realBufferedSink0.buffer);
      Pipe pipe0 = new Pipe(1404L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong((-1048L));
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Pipe pipe0 = new Pipe(188L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe0.sourceClosed = true;
      realBufferedSource0.closed = false;
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.close();
      buffer0.sha512();
      buffer0.indexOf((byte)13, 0L, 188L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater(2);
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      DeflaterSink deflaterSink1 = new DeflaterSink(buffer1, deflater0);
      deflaterSink1.timeout();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer2 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer2);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      buffer3.writeDecimalLong(280375465082880L);
      assertEquals(15L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)123;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)123;
      byteArray1[6] = (byte) (-121);
      ByteString byteString0 = ByteString.of(byteArray1);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      buffer0.hmacSha256(byteString1);
      buffer0.writeShortLe((-568));
      buffer0.snapshot();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer2.indexOfElement(byteString1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      Buffer buffer1 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(2187);
      ByteString byteString0 = buffer2.snapshot();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer4 = realBufferedSink1.buffer;
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink2.write(byteString0);
      Buffer buffer5 = realBufferedSink1.buffer;
      realBufferedSink0.buffer.rangeEquals(64L, byteString0, 0, 2187);
      Buffer buffer6 = new Buffer();
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink2);
      Inflater inflater0 = new Inflater(false);
      Inflater inflater1 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer2, inflater1);
      buffer6.hmacSha512(byteString0);
      realBufferedSource0.buffer.skip((-1355L));
      assertEquals(3L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1404L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((Buffer) null, 1621L, (-739L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = new Buffer();
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeUtf8("delegate == null");
      buffer2.write((Source) buffer0, 0L);
      Buffer buffer3 = new Buffer();
      HashingSource.sha1(buffer3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      Buffer buffer1 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.sha256();
      Pipe pipe0 = new Pipe(71776119061217295L);
      Buffer buffer2 = pipe0.buffer;
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSink0.buffer();
      Integer integer0 = new Integer(2187);
      buffer1.writeDecimalLong(71776119061217295L);
      Pipe pipe1 = new Pipe(2187);
      Charset.defaultCharset();
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      buffer1.sha256();
      buffer3.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Integer integer0 = new Integer((-1));
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      int int0 = buffer_UnsafeCursor0.seek((byte)11);
      assertEquals(9994240L, buffer2.completeSegmentByteCount());
      assertEquals(8181, int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("}[h3");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer_UnsafeCursor0.buffer.readInt();
      Buffer buffer2 = realBufferedSink0.buffer;
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      gzipSource0.close();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer3.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor1.buffer;
      Buffer buffer5 = new Buffer();
      // Undeclared exception!
      try { 
        buffer5.snapshot((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      buffer0.request(0L);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1404L);
      buffer2.readUtf8();
      Buffer buffer3 = buffer1.buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      ByteString byteString1 = buffer0.sha256();
      buffer3.request(10001L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer4 = realBufferedSink1.buffer;
      buffer1.indexOf(byteString1);
      Buffer buffer5 = realBufferedSink0.buffer;
      buffer0.rangeEquals((-1L), byteString0, 416, 109);
      Buffer buffer6 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer6.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeHexadecimalUnsignedLong(1404L);
      buffer1.buffer();
      Pipe pipe0 = new Pipe(242L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.writeDecimalLong(9223372036854775807L);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3756L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(3756L);
      buffer2.writeAll(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, 2130165231, 2130165231);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2130165231 byteCount=2130165231
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Buffer buffer2 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer3.readByteArray();
      realBufferedSink0.buffer.hashCode();
      Buffer buffer4 = buffer2.buffer();
      assertSame(buffer2, buffer4);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.seek((-1));
      GzipSource gzipSource0 = new GzipSource(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.writeDecimalLong((-1));
      buffer0.indexOf((byte) (-64));
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.seek((-1));
      buffer_UnsafeCursor1.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(8192L);
      realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer2);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer3 = pipe0.buffer;
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.Okio$4", charset0);
      Buffer buffer4 = pipe0.buffer;
      buffer4.indexOfElement(byteString0, 0L);
      realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer5 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.write((Buffer) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      HashingSource.sha1(realBufferedSource0);
      buffer0.writeDecimalLong(2891L);
      assertEquals(4L, buffer0.size());
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.buffer.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("}[h3");
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readAndWriteUnsafe();
      buffer0.sha1();
      buffer2.exhausted();
      long long0 = new Integer((-1));
      buffer_UnsafeCursor0.buffer.writeDecimalLong(1000000000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(17L, buffer1.size());
      
      Buffer buffer3 = new Buffer();
      buffer3.size();
      assertTrue(buffer3.exhausted());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSink0.write(byteString0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      realBufferedSink2.buffer();
      Buffer buffer3 = realBufferedSink2.buffer.writeHexadecimalUnsignedLong((-1230L));
      buffer3.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)27;
      realBufferedSink2.buffer.writeByte((byte)27);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer4 = realBufferedSink2.buffer();
      buffer4.indexOfElement(byteString1);
      buffer0.sha256();
      Buffer buffer5 = realBufferedSink1.buffer;
      // Undeclared exception!
      try { 
        buffer5.write(realBufferedSink1.buffer, 2231L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1404L);
      buffer0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readDecimalLong();
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer1.indexOf((byte) (-65), (long) (byte)13, 1404L);
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer3.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer_UnsafeCursor1.buffer.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer_UnsafeCursor1.buffer.readUnsafe();
      boolean boolean0 = realBufferedSink1.buffer.exhausted();
      assertEquals(2L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      buffer0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      long long0 = 291L;
      realBufferedSink0.buffer.size = 291L;
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) null, 291L, 1000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.sha256();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      gzipSource0.timeout();
      gzipSource0.close();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readString((long) (-1), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) mockFileInputStream0, 0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      buffer1.sha256();
      ByteString byteString1 = ByteString.encodeUtf8("K$");
      Buffer buffer2 = realBufferedSource0.buffer();
      ByteString byteString2 = buffer2.hmacSha1(byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)105, (long) (byte)105);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer2.sha256();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha256(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 1830L;
      Buffer buffer1 = buffer0.writeLong(1830L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = realBufferedSink0.buffer.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer3, byteString0);
      hashingSource0.hash();
      buffer3.request(10001L);
      HashingSource.sha256(hashingSource0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((byte)10);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer4 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.indexOf(byteString0);
      Buffer buffer5 = realBufferedSink0.buffer;
      int int0 = (-1431655764);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~_v^K");
      // Undeclared exception!
      try { 
        buffer5.writeTo((OutputStream) mockFileOutputStream0, (long) (-1431655764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=-1431655764
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer_UnsafeCursor1.buffer.clone();
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink1.buffer();
      Buffer buffer4 = realBufferedSink0.buffer;
      MockPrintStream mockPrintStream0 = new MockPrintStream("b/;oA0$%to\"8F-}D");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      buffer3.writeTo((OutputStream) dataOutputStream0);
      long long0 = (-71L);
      // Undeclared exception!
      try { 
        Charset.forName("K$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // K$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.sha1();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(10L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(2L, buffer1.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      buffer0.clone();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(2187);
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeUtf8("|M\"");
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer buffer2 = new Buffer();
      realBufferedSink0.buffer.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      Buffer buffer1 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(2187);
      buffer2.snapshot();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer1.sha256();
      Pipe pipe0 = new Pipe(71776119061217280L);
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      Buffer buffer5 = buffer1.writeString("|\"o", charset1);
      Buffer buffer6 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      try { 
        buffer5.write((Source) inflaterSource0, 1524L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Pipe pipe0 = new Pipe(922337203L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShort(76);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-7L);
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOfElement((ByteString) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.buffer.writeDecimalLong((-937L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      buffer1.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource1.buffer();
      ByteString byteString0 = new ByteString((byte[]) null);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf((byte)0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = 1404L;
      buffer1.writeHexadecimalUnsignedLong(1404L);
      buffer1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.readDecimalLong();
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf((byte)0, 1404L, (long) (byte) (-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=1 fromIndex=1404 toIndex=-65
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      long long0 = 9223372036854775L;
      buffer_UnsafeCursor0.buffer.size = 9223372036854775L;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.clear();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      buffer0.read(byteArray0);
      buffer0.writeIntLe((byte)0);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.seek((-1));
      GzipSource gzipSource0 = new GzipSource(buffer1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.writeDecimalLong((-1));
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2782);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.flush();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = new Buffer();
      realBufferedSink0.buffer.readAll(buffer_UnsafeCursor0.buffer);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.readFrom((InputStream) sequenceInputStream0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      buffer3.request(100000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer4 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.indexOf(byteString0);
      Deflater deflater0 = new Deflater((-1), true);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer4, deflater0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(deflaterSink0);
      ByteString.decodeBase64("YggwW]D#");
      // Undeclared exception!
      try { 
        realBufferedSink1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer0.sha256();
      byteString1.compareTo(byteString0);
      buffer0.rangeEquals((long) (-6), byteString1, (-6), (-6));
      ByteString byteString2 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((long) (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor2.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8("be0co~e]");
      buffer1.readAndWriteUnsafe();
      buffer2.readShort();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      inflaterSource0.timeout();
      HashingSource.sha256(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.indexOf((byte) (-98));
      buffer_UnsafeCursor1.buffer.writableSegment(65);
      buffer_UnsafeCursor2.buffer.readUtf8();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.buffer.readFrom((InputStream) pipedInputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/OyGr0r]%SYR2z");
      buffer0.completeSegmentByteCount();
      buffer0.writeDecimalLong(9999993L);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Pipe pipe0 = new Pipe(351L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readString(351L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=351
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeShort((-1));
      byte byte0 = buffer0.readByte();
      assertFalse(buffer0.exhausted());
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      buffer0.request(5L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = new Buffer();
      buffer3.indexOf((byte)71);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      realBufferedSource0.buffer();
      realBufferedSource0.toString();
      realBufferedSink0.buffer.writeDecimalLong(100000L);
      Buffer buffer4 = realBufferedSink0.buffer();
      realBufferedSink0.writeUtf8("");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      Buffer buffer5 = realBufferedSource1.buffer;
      // Undeclared exception!
      try { 
        buffer5.getByte((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Pipe pipe0 = new Pipe(1126L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      buffer1.writeDecimalLong(280375465082880L);
      assertEquals(15L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      buffer0.writeUtf8CodePoint(8230);
      Pipe pipe0 = new Pipe(1506L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.sha256();
      ByteString.encodeUtf8("endIndex > length(");
      ByteString byteString1 = ByteString.EMPTY;
      long long0 = buffer0.indexOfElement(byteString1);
      assertEquals((-1L), long0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte) (-42);
      ByteString byteString2 = new ByteString(byteArray1);
      Buffer buffer3 = new Buffer();
      boolean boolean0 = buffer3.rangeEquals((-1344L), byteString1, (-2145301244), (-2145301244));
      Pipe pipe0 = new Pipe(3069L);
      Pipe pipe1 = new Pipe(1904L);
      Buffer buffer4 = realBufferedSink0.buffer;
      boolean boolean1 = buffer1.rangeEquals(0L, byteString1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(buffer1, buffer2);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)123;
      byte byte0 = (byte)77;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      String string0 = null;
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8((String) null, (int) (byte) (-42), 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Pipe pipe0 = new Pipe(761L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.indexOfElement((ByteString) null, 32L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.readByteString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      long long0 = 194L;
      Pipe pipe0 = new Pipe(194L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.inputStream();
      try { 
        realBufferedSource0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.readFully(buffer1, 0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      int int0 = 813;
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.write(byteString0);
      // Undeclared exception!
      try { 
        pipe_PipeSource0.read(realBufferedSource0.buffer, 813);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8CodePoint(2187);
      ByteString byteString0 = buffer3.snapshot();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer4 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      buffer2.sha256();
      Pipe pipe0 = new Pipe(71776119061217280L);
      pipe0.sinkClosed = false;
      Buffer buffer5 = pipe0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("cs79XULP2l\"ygT)%X", charset0);
      realBufferedSink1.buffer();
      long long0 = new Integer(2187);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource2.buffer();
      buffer2.writeDecimalLong(71776119061217280L);
      buffer3.readUtf8CodePoint();
      ByteString[] byteStringArray0 = new ByteString[5];
      ByteString byteString2 = ByteString.encodeString("", charset1);
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(2187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2187
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer2.write(byteString0);
      assertFalse(buffer2.exhausted());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer();
      buffer1.writeDecimalLong((-1));
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.write((Buffer) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      boolean boolean0 = buffer0.request(0L);
      assertTrue(boolean0);
      
      buffer0.indexOf((byte) (-66));
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      buffer0.copyTo((OutputStream) pipedOutputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      HashingSource.sha1(buffer0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-3381));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      buffer0.hmacSha256(byteString1);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.clone();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Pipe pipe0 = new Pipe(2251L);
      Buffer buffer3 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      long long0 = 8L;
      Pipe pipe0 = new Pipe(8L);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.clone();
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.sha256();
      String string0 = "endIndex > length(";
      ByteString.encodeUtf8("endIndex > length(");
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString1);
      buffer1.indexOf((byte) (-42), 10000000L);
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(10000000L);
      buffer2.sha1();
      buffer2.writeShort((byte) (-42));
      try { 
        buffer1.readUtf8LineStrict(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8 content=393839363830ffd6\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.writeUtf8CodePoint(8230);
      Pipe pipe0 = new Pipe(1506L);
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.clone();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer2.selectPrefix(options0);
      buffer0.indexOf((byte)11, 10000000L);
      buffer1.writeHexadecimalUnsignedLong(1365L);
      buffer0.sha1();
      realBufferedSink0.buffer.writeShort((byte)11);
      long long0 = 10000010L;
      try { 
        buffer1.readUtf8LineStrict(10000010L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=353535000b\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Buffer buffer2 = buffer0.copyTo((OutputStream) pipedOutputStream0);
      assertSame(buffer0, buffer2);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (-187L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -187
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      deflater0.finished();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(8192L);
      realBufferedSource0.buffer();
      HashingSource.sha1(realBufferedSource0);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(")PSqhX##}VuF", charset0);
      buffer2.indexOfElement(byteString0, 8192L);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.writeDecimalLong(92233720368547L);
      byte[] byteArray0 = new byte[0];
      buffer3.write(byteArray0);
      int int0 = buffer1.readUtf8CodePoint();
      assertFalse(buffer1.exhausted());
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer3 = buffer2.write(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.inputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer2.indexOfElement(byteString0, (long) 14);
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = 1000000L;
      try { 
        realBufferedSink0.buffer.write((Source) buffer0, 1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(360L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.write(byteArray0);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1000000L);
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.clone();
      buffer0.indexOf((byte)11, 10000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1365L);
      buffer2.readAndWriteUnsafe();
      realBufferedSink0.buffer.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer.snapshot();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.sha256();
      realBufferedSink0.buffer.writeDecimalLong((byte)11);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("newSize < 0: ", (int) (byte)11, 2582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2582 > 13
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]6![{Ld7s=a_M");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-121);
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      buffer1.hmacSha256(byteString1);
      buffer1.writeShortLe(8192);
      buffer1.snapshot();
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3756L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource1.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString byteString2 = buffer1.sha256();
      ByteString byteString3 = ByteString.encodeUtf8("");
      buffer0.indexOfElement(byteString2);
      realBufferedSource0.buffer.rangeEquals(3756L, byteString3, 3, 3);
      Pipe pipe1 = new Pipe(100000000L);
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.snapshot((-3046));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-3046
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.indexOf((byte) (-26));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(3193L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=3193 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeUtf8("}[h3");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      buffer0.writeIntLe((byte)0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(57L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Pipe pipe1 = new Pipe(57L);
      Pipe.PipeSource pipe_PipeSource1 = pipe1.new PipeSource();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(100000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=100000000 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString[] byteStringArray0 = new ByteString[2];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-73);
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString1 = options0.get(0);
      byteStringArray0[1] = byteString1;
      Options options1 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%DFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.writeDecimalLong(8L);
      Buffer buffer5 = realBufferedSink0.buffer();
      buffer0.writeAll(buffer5);
      realBufferedSource0.buffer.readByteArray();
      realBufferedSink0.buffer.hashCode();
      Buffer buffer6 = realBufferedSource0.buffer();
      buffer6.buffer();
      int int0 = buffer_UnsafeCursor0.seek(0L);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      deflaterSink0.finishDeflate();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      HashingSource.sha256(realBufferedSink0.buffer);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)54;
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer2, byteString0);
      hashingSink0.hash();
      buffer0.hmacSha256(byteString0);
      Buffer buffer3 = buffer1.writeShortLe(3);
      buffer1.snapshot();
      long long0 = buffer3.indexOfElement(byteString0);
      assertEquals(2L, buffer1.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.write((byte[]) null, (int) (byte)45, (int) (byte)45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      realBufferedSink0.buffer.sha1();
      buffer1.close();
      deflaterSink0.timeout();
      buffer0.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha1(realBufferedSink0.buffer);
      Pipe pipe0 = new Pipe(5723L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.timeout();
      MockFile mockFile0 = new MockFile("closed", "mQh77q{r FFn14\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mQh77q{r FFn14\"");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      buffer1.copyTo((OutputStream) mockPrintStream0);
      assertEquals(11L, buffer0.size());
      
      Buffer buffer4 = buffer3.writeByte(0);
      assertFalse(buffer4.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      boolean boolean0 = buffer0.request(0L);
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean1 = buffer0.rangeEquals((long) 45, byteString0, 112, (-2146277195));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("K$");
      int int0 = buffer_UnsafeCursor0.end;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      buffer0.readFrom((InputStream) mockFileInputStream0, 0L);
      GzipSource gzipSource0 = new GzipSource(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x4b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)119;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)119, 10000000L, (long) (byte)119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=10000000 toIndex=119
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeLong(3756L);
      SegmentPool.byteCount = 3756L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer.writeLong(3756L);
      buffer2.readFully(buffer1, 1L);
      realBufferedSink0.buffer.sha1();
      long long0 = buffer1.readLong();
      assertEquals(3756L, long0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeDecimalLong(10952L);
      assertEquals(5L, buffer2.size());
      
      Charset.defaultCharset();
      Buffer buffer3 = realBufferedSink0.buffer;
      assertEquals(5L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      pipe0.sinkClosed = false;
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2891L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.select(options0);
      realBufferedSource0.buffer.segmentSizes();
      buffer1.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.snapshot(586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=586
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShortLe(3);
      realBufferedSink0.buffer.sha1();
      Buffer buffer1 = realBufferedSink0.buffer;
      GzipSink gzipSink0 = new GzipSink(buffer0);
      Deflater deflater0 = gzipSink0.deflater();
      deflater0.setLevel(3);
      DeflaterSink deflaterSink0 = new DeflaterSink(gzipSink0, deflater0);
      Pipe pipe0 = new Pipe(3);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-95);
      buffer1.write(byteArray0);
      buffer1.writeString("4RxR#-I'~C>", 3, 10, charset0);
      assertEquals(18L, buffer1.size());
      
      String string0 = realBufferedSink0.buffer.readUtf8LineStrict();
      assertEquals("\u0003\u0000\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3_XAn@h#,Dy");
      Buffer buffer0 = new Buffer();
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(702);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      long long1 = new Integer((byte)0);
      buffer_UnsafeCursor0.buffer.timeout();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.sha256();
      buffer2.indexOfElement(byteString1);
      ByteString byteString3 = buffer0.sha256();
      buffer_UnsafeCursor0.buffer.request(0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.indexOf(byteString3);
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer4.rangeEquals(2147483647L, byteString2, (-1), 109);
      Buffer buffer5 = realBufferedSink0.buffer;
      buffer5.writeShortLe(8);
      buffer4.snapshot();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, (-1), 119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(8075);
      realBufferedSink0.buffer.sha1();
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        buffer0.write((Source) ((RealBufferedSink) bufferedSink0).buffer, 1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = buffer1.writeLong(0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      buffer_UnsafeCursor0.buffer.sha1();
      buffer_UnsafeCursor0.buffer.close();
      int int0 = 1620;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1620);
      realBufferedSink0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      BufferedSink bufferedSink0 = buffer1.write((Source) buffer0, (-3948L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Segment segment0 = buffer1.head;
      SegmentPool.next = null;
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.sha256();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully(buffer1, (-3948L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.compareTo(byteString0);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0);
      assertFalse(buffer0.exhausted());
      
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(32L);
      Buffer buffer3 = buffer1.buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[5] = (byte)43;
      buffer3.rangeEquals(19L, (ByteString) null, (-2145301244), 12);
      Pipe pipe0 = new Pipe(968L);
      Pipe pipe1 = new Pipe(1034L);
      Buffer buffer4 = realBufferedSink2.buffer;
      // Undeclared exception!
      try { 
        buffer1.rangeEquals((long) (byte)27, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      buffer0.readByteArray((long) 0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((byte[]) null, (-1), (-502));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2891L);
      // Undeclared exception!
      try { 
        buffer1.writeAll(realBufferedSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Pipe pipe0 = new Pipe(1850L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.mark();
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer2.write(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read(byteArray0, (-1431655764), (-1431655764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-1431655764 byteCount=-1431655764
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.clone();
      buffer0.indexOf((byte)2, 10000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1365L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      realBufferedSink0.buffer.readShort();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      realBufferedSink0.buffer.snapshot();
      Pipe pipe0 = new Pipe(2251L);
      Buffer buffer3 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.readFrom((InputStream) sequenceInputStream0);
      realBufferedSink0.writeInt(56320);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)20;
      buffer3.indexOf((byte)20, (long) (byte)20, (long) (byte)54);
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")^M4Fup,+Nxv");
      buffer1.indexOf(byteString0, (long) (byte)54);
      assertFalse(buffer1.exhausted());
      
      realBufferedSink0.buffer.readByteString();
      List<Integer> list0 = realBufferedSink0.buffer.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      Deflater deflater1 = gzipSink0.deflater();
      DeflaterSink deflaterSink1 = new DeflaterSink((BufferedSink) buffer0, deflater1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(gzipSink0);
      realBufferedSink1.buffer();
      Deflater deflater2 = null;
      try {
        deflater2 = new Deflater(48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      deflaterSink0.toString();
      deflaterSink0.timeout();
      buffer1.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha1(realBufferedSink0.buffer);
      Pipe pipe0 = new Pipe(1404L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      realBufferedSource0.timeout();
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong((-1034L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)6;
      int int0 = buffer1.read(byteArray0);
      assertEquals(5L, buffer1.size());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Pipe pipe0 = new Pipe(2891L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      byte[] byteArray0 = buffer0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(54);
      buffer0.readByte();
      buffer1.writeShort(75);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^?H<\"-*%co");
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(17);
      buffer0.readAndWriteUnsafe();
      buffer0.exhausted();
      buffer0.writeUtf8CodePoint(17);
      assertEquals(5L, buffer0.size());
      
      ByteString byteString0 = buffer0.readByteString();
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1404L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer2);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.writeDecimalLong(2057L);
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = buffer1.buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      buffer0.sha256();
      buffer2.request(10001L);
      realBufferedSink0.buffer.indexOfElement(byteString0, 10001L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1404L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1404 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      int int0 = 0;
      Buffer buffer2 = new Buffer();
      int int1 = 1229;
      buffer2.writeInt(1229);
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) 1229);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1229
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((-1));
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.buffer();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.readUtf8Line((-420L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-420
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("K$", charset0);
      List<Integer> list0 = ((RealBufferedSink) bufferedSink0).buffer.segmentSizes();
      assertFalse(list0.isEmpty());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j3_X%KFHkyn[");
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("M[{Qf>-+{n<]!)");
      buffer_UnsafeCursor0.seek(8L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.seek(8L);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readString(8L, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Pipe pipe0 = new Pipe(761L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.read(buffer1, 344L);
      buffer0.writeShort(1073741824);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      int int0 = 0;
      buffer1.writeInt(0);
      // Undeclared exception!
      try { 
        buffer2.readByteArray((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.writeDecimalLong(9223372036854775807L);
      assertEquals(19L, buffer4.size());
      
      Buffer buffer5 = realBufferedSink0.buffer();
      buffer0.writeAll(buffer3);
      buffer5.readByteArray();
      buffer2.hashCode();
      realBufferedSource0.buffer();
      buffer_UnsafeCursor1.buffer.buffer();
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      long long0 = 10000000L;
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSHA256");
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) mockPrintStream0, 10000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeUtf8("be0co~e]");
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.read((byte[]) null, 1259, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.write(byteString0);
      byteString0.hashCode = (-743);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)106;
      ByteString.of(byteArray0);
      buffer0.rangeEquals(1000000000L, byteString0, 65, 65);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)123;
      Buffer buffer2 = buffer0.write(byteArray1);
      ByteString byteString1 = buffer2.snapshot();
      buffer2.sha256();
      buffer0.writeByte(113);
      buffer1.inputStream();
      buffer2.indexOfElement(byteString1, (long) (byte)123);
      Buffer buffer3 = buffer0.emitCompleteSegments();
      buffer2.readHexadecimalUnsignedLong();
      buffer0.writeLong((-743));
      buffer3.writeLong(1000000000L);
      int int0 = buffer1.readInt();
      assertEquals(14L, buffer0.size());
      assertEquals(2071068671, int0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = new Buffer();
      buffer2.exhausted();
      buffer0.completeSegmentByteCount();
      buffer0.writeDecimalLong(0L);
      realBufferedSink0.buffer.size();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1996L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer2 = new Buffer();
      buffer2.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      Buffer buffer3 = buffer2.writeDecimalLong((byte)54);
      ByteString[] byteStringArray0 = new ByteString[1];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer3.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("v!/EAsnO&t+`");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer3.readAndWriteUnsafe();
      buffer2.readShort();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      inflaterSource0.timeout();
      buffer_UnsafeCursor0.seek(4L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".outputStream()");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cVir57O*=E}|gg3?h6~");
      buffer_UnsafeCursor0.next();
      long long0 = buffer_UnsafeCursor2.buffer.indexOf((byte) (-64));
      assertEquals(10L, buffer_UnsafeCursor0.offset);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)77;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer0.write(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeUtf8("v!/EAsnO&t+`");
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      ByteString.decodeBase64("v!/EAsnO&t+`");
      byteStringArray0[2] = null;
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor1.buffer.selectPrefix(options0);
      buffer1.indexOf((byte)101, 401L);
      buffer_UnsafeCursor1.buffer.writeHexadecimalUnsignedLong(3678L);
      buffer_UnsafeCursor0.buffer.readShort();
      HashingSource.sha256(buffer2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      Integer integer0 = new Integer((-1));
      realBufferedSource1.buffer.readUtf8();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) pipedInputStream0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      String string0 = "K$";
      buffer1.writeUtf8("K$");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.encodeUtf8("K$");
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString1);
      ByteString byteString2 = new ByteString((byte[]) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.seek(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Deflater deflater0 = new Deflater(2);
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      DeflaterSink deflaterSink1 = new DeflaterSink(buffer1, deflater0);
      deflaterSink1.timeout();
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer3 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer3);
      buffer3.clone();
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer4 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      buffer4.indexOfElement(byteString0, 4L);
      Buffer buffer5 = realBufferedSource0.buffer();
      buffer4.writeDecimalLong(280375465082880L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      buffer2.write(byteArray0);
      buffer0.readUtf8CodePoint();
      assertEquals(7L, buffer0.size());
      
      boolean boolean0 = buffer5.rangeEquals(1159L, byteString0, (int) (byte)127, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      buffer0.writeHexadecimalUnsignedLong(1404L);
      buffer0.buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)4;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)102;
      byteArray1[4] = (byte)55;
      ByteString.of(byteArray1);
      // Undeclared exception!
      try { 
        HashingSink.hmacSha512(buffer0, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(929L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      int int0 = buffer_UnsafeCursor0.end;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      buffer0.rangeEquals(100000L, byteString0, (-203), 1390);
      // Undeclared exception!
      try { 
        Charset.forName("K$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // K$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = buffer1.buffer();
      buffer2.sha1();
      realBufferedSink0.buffer.writeShort(416);
      deflaterSink0.flush();
      try { 
        buffer0.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=789c000000ffff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1000000000000000L);
      buffer0.readLong();
      Buffer buffer2 = buffer1.writeLong(414L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 1000000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor1.seek((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer2.sha256();
      ByteString byteString2 = ByteString.encodeUtf8("K$");
      buffer2.indexOfElement(byteString2);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = realBufferedSource0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-58);
      byte byte1 = (byte)4;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.timeout();
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString.encodeUtf8("K$");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.buffer();
      ByteString byteString2 = new ByteString((byte[]) null);
      buffer_UnsafeCursor1.next();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer_UnsafeCursor0.buffer, (long) 0, (long) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1126L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer2 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer2);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.EMPTY;
      buffer3.indexOfElement(byteString0, 4L);
      buffer1.readByteArray();
      realBufferedSink0.buffer.readDecimalLong();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(100000000L);
      Inflater inflater0 = new Inflater(true);
      buffer1.indexOf((byte)25, (long) (byte)25);
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      realBufferedSource0.buffer.indexOf((byte)114);
      Buffer buffer2 = realBufferedSource0.buffer;
      boolean boolean0 = buffer_UnsafeCursor1.buffer.equals(buffer2);
      assertFalse(boolean0);
      
      realBufferedSource0.readByteArray();
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      int int0 = 2663;
      realBufferedSource0.buffer.writeUtf8CodePoint(2663);
      int int1 = 65;
      inflaterSource0.timeout();
      try { 
        realBufferedSource0.indexOf((byte)106);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      ByteBuffer.wrap(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Expected leading [0-9] or '-' character but was 0x");
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = buffer0.writeDecimalLong(1095216660480L);
      buffer1.writeLong((-1744L));
      // Undeclared exception!
      try { 
        buffer1.readByteString(10000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=21 offset=0 byteCount=10000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(9L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.indexOf((byte)63, 10000000L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeHexadecimalUnsignedLong(2803L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer2 = new Buffer();
      buffer2.readFrom((InputStream) sequenceInputStream0);
      HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeLongLe(71776119L);
      ByteString byteString1 = ByteString.EMPTY;
      byteString1.compareTo(byteString0);
      buffer0.rangeEquals((long) 0, byteString1, 0, 0);
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Pipe pipe0 = new Pipe(194L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.request(10001L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer0.indexOf(byteString0);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer2.rangeEquals(1520L, byteString0, 61, (-2597));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer4 = realBufferedSink1.buffer;
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("be0co~e]");
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer2.emitCompleteSegments();
      buffer1.readHexadecimalUnsignedLong();
      HashingSink.md5(buffer1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.buffer.writeUtf8("be0co~e]");
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor2.seek((-1L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "be0co~e]");
      buffer_UnsafeCursor2.next();
      buffer_UnsafeCursor2.buffer.indexOf((byte) (-58));
      assertEquals(8L, buffer1.size());
      assertEquals(8, buffer_UnsafeCursor2.end);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1404L);
      Buffer buffer2 = buffer1.buffer();
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.indexOfElement(byteString0);
      buffer1.sha256();
      buffer2.request((-1L));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Buffer buffer4 = realBufferedSink1.buffer;
      Buffer buffer5 = realBufferedSink0.buffer;
      buffer4.rangeEquals((-1L), byteString0, 2147268899, (-2988));
      Buffer buffer6 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer5.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer1.write(buffer_UnsafeCursor0.buffer, 262L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      try { 
        buffer0.readUtf8LineStrict(3147L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer2.readUtf8Line();
      buffer2.sha256();
      ByteString byteString2 = ByteString.encodeUtf8("K$");
      buffer2.indexOfElement(byteString2);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = realBufferedSource0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-2114946015));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2114946015
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.writeUtf8("K$");
      buffer_UnsafeCursor0.seek((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer_UnsafeCursor1.seek((-1));
      ByteString byteString0 = new ByteString((byte[]) null);
      long long0 = 100000000000L;
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(2891L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer1.snapshot();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.buffer();
      buffer1.sha256();
      Buffer buffer2 = new Buffer();
      buffer1.writeDecimalLong(1000L);
      assertEquals(4L, buffer1.size());
      
      Buffer buffer3 = realBufferedSink1.buffer.writeDecimalLong((-1260L));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource1.buffer.readUnsafe();
      realBufferedSink1.buffer.clear();
      realBufferedSink1.buffer.writableSegment(5095);
      assertTrue(buffer0.equals((Object)buffer3));
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      buffer0.request(5L);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(3756L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = buffer1.writeInt(0);
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = 1404L;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1404L);
      buffer1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.readDecimalLong();
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(1000034L);
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1000034L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Deflater deflater0 = new Deflater(5, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer.clone();
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = realBufferedSink0.buffer.sha256();
      ByteString.encodeUtf8("");
      Pipe pipe0 = new Pipe(1126L);
      Buffer buffer2 = pipe0.buffer;
      boolean boolean0 = buffer2.rangeEquals(0L, byteString1, 97, 97);
      assertFalse(boolean0);
      
      Pipe pipe1 = new Pipe(97);
      Pipe pipe2 = new Pipe(7L);
      Buffer buffer3 = pipe1.buffer;
      Pipe.PipeSource pipe_PipeSource0 = pipe2.new PipeSource();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource1.buffer();
      Buffer buffer4 = pipe2.buffer;
      Buffer buffer5 = realBufferedSource0.buffer.buffer();
      assertNotSame(buffer5, buffer1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      long long0 = 5557L;
      Pipe pipe0 = new Pipe(5557L);
      pipe0.sourceClosed = false;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe0.sinkClosed = true;
      Buffer buffer0 = realBufferedSource0.buffer;
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        realBufferedSource0.buffer.readFrom(inputStream0, 5557L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      realBufferedSource0.buffer.writeUtf8CodePoint(2663);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.snapshot();
      assertEquals(3L, buffer1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.sha256();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSource0.buffer();
      int int0 = realBufferedSource0.buffer.readUtf8CodePoint();
      assertEquals(2663, int0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.clone();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.readByteString();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      Pipe pipe0 = new Pipe(14L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("/#*?<ld5$p$&akM", (int) (byte)87, (int) (byte)87, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 87 > 15
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer2.sha256();
      buffer4.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      Buffer buffer5 = realBufferedSource0.buffer;
      ByteString.encodeUtf8("w6hb)}Wj:");
      int int0 = buffer1.readIntLe();
      assertEquals(9994236L, buffer1.completeSegmentByteCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Pipe pipe0 = new Pipe(188L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe0.sourceClosed = true;
      realBufferedSource0.closed = false;
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.close();
      buffer0.sha512();
      buffer0.indexOf((byte)13, 0L, 188L);
      try { 
        realBufferedSource0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = buffer0.sha256();
      buffer0.indexOfElement(byteString2);
      buffer0.sha256();
      buffer0.request(289L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.indexOf(byteString1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.rangeEquals(2147483647L, byteString2, (int) (byte) (-61), (int) (byte) (-61));
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte) (-61));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -61
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1000000000000000L);
      byte byte0 = buffer1.readByte();
      assertFalse(buffer0.exhausted());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeLong((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeLong((-1L));
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readFully(buffer3, (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Pipe pipe0 = new Pipe(194L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      HashingSource.sha256(pipe_PipeSource0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)20;
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      hashingSink0.hash();
      buffer0.hmacSha256(byteString0);
      buffer1.writeShortLe(1);
      buffer1.snapshot();
      assertFalse(buffer0.exhausted());
      
      buffer0.clear();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.sha1();
      Integer integer0 = new Integer((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        buffer_UnsafeCursor1.buffer.readFrom((InputStream) mockFileInputStream0, 65280L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(11);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      try { 
        buffer1.readFrom((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint(2663);
      Buffer buffer3 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(15L);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer2.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer3.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      realBufferedSink0.outputStream();
      Buffer buffer4 = realBufferedSink0.buffer;
      realBufferedSource0.buffer.sha256();
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer5 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer5.writeDecimalLong((-3638L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.Timeout$1");
      buffer5.readShort();
      buffer1.completeSegmentByteCount();
      assertFalse(buffer1.exhausted());
      
      buffer5.writeDecimalLong(235L);
      assertEquals(0L, buffer5.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(1738);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)18;
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8((String) null, (int) (byte) (-128), (int) (byte)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer3.writeUtf8CodePoint((-1));
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShortLe(3);
      realBufferedSink0.buffer.sha1();
      Buffer buffer1 = realBufferedSink0.buffer;
      GzipSink gzipSink0 = new GzipSink(buffer0);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(gzipSink0, deflater0);
      Pipe pipe0 = new Pipe(3);
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("4RxR#-I'~C>", 3, 10, charset0);
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=9 content=030052232d497f277e\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.clone();
      buffer0.indexOf((byte)2, (long) (byte)2);
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(232L);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.writeUtf8CodePoint(89);
      byte byte0 = buffer2.readByte();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((byte)101, byte0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha1();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer1.hmacSha512(byteString0);
      buffer1.hmacSha256(byteString0);
      buffer_UnsafeCursor1.buffer.snapshot();
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Segment segment0 = new Segment();
      Pipe pipe0 = new Pipe(1382L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      try { 
        buffer0.require(911L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeLong(1000000000000000L);
      buffer0.readLong();
      buffer1.writeLong(414L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1000000000000000 > size=8
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }
}
