/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:52:42 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1409));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1409), "3 <Gn.$/rY0R,%rF>9p", "3 <Gn.$/rY0R,%rF>9p", "3 <Gn.$/rY0R,%rF>9p", "3 <Gn.$/rY0R,%rF>9p");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1052);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Bz9u\"V?i*I%52:%j{", "Bz9u\"V?i*I%52:%j{", (String) null, "Bz9u\"V?i*I%52:%j{");
      // Undeclared exception!
      try { 
        classWriter0.firstField.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(350);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 182, "", (String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "u!T/M'#7>^E50f25", "w2WAr(aR`bd", (String) null, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 160, "Synthetic", "Synthetic", "org.apache.commons.io.filefilter.CanReadFileFilter", "Synthetic");
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.CanReadFileFilter");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1052);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Bz9u\"V?i*I%52:%j{", "Bz9u\"V?i*I%52:%j{", (String) null, "Bz9u\"V?i*I%52:%j{");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("qN", true);
      classWriter0.firstField.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1409));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1409), "3 <Gn.$/rY0R,%rF>9p", "3 <Gn.$/rY0R,%rF>9p", "3 <Gn.$/rY0R,%rF>9p", "3 <Gn.$/rY0R,%rF>9p");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(17, "", "i,Ou2}G6C", "ys", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2405), "X%N}*\"+(,2Y", "X%N}*\"+(,2Y", "q.mxr-Z*M7Cj^", "X%N}*\"+(,2Y");
      fieldWriter0.visitAnnotation(",J!f^3p6Mr[R`", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-917), ":W", ":W", ":W", ":W");
      fieldWriter0.visitAnnotation("fl!Q(B<-AigFsp.Z", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-917), ":W", ":W", ":W", ":W");
      classWriter0.version = (-917);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1052);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Bz9u\"V?i*I%52:%j{", "Bz9u\"V?i*I%52:%j{", (String) null, "Bz9u\"V?i*I%52:%j{");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      fieldWriter0.visitAnnotation(" uzdV@XX\u0006XYbecV", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "Signature", "h|^K5G^t?/", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "", "F5", "");
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1874), "s!(,oH", "", "ConstantValue", "");
      assertFalse(fieldVisitor0.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1052);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Bz9u\"V?i*I%52:%j{", "Bz9u\"V?i*I%52:%j{", (String) null, "Bz9u\"V?i*I%52:%j{");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4561));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Cfqn", "Cfqn", "Cfqn", "Cfqn");
      Attribute attribute0 = new Attribute("Cfqn");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
