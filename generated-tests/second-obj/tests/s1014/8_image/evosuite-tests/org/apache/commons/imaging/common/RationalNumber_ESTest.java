/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:07:48 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(9.941913958755322E-9);
      String string0 = rationalNumber0.toString();
      assertEquals(9.941913969953986E-9, rationalNumber0.doubleValue(), 0.01);
      assertEquals("1/100584254 (0)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483638416047E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483638", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(2147483638, int0);
      assertEquals(2.147483638E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(286L, 286L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(0.0060000000000854925);
      assertEquals(500, rationalNumber1.divisor);
      assertEquals(0.006F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber1.longValue());
      
      rationalNumber0.doubleValue();
      rationalNumber0.floatValue();
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-252.25));
      long long0 = rationalNumber0.longValue();
      assertEquals((-252L), long0);
      assertEquals((-252.25F), rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2794L), (-2794L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      long long0 = rationalNumber0.longValue();
      assertEquals((-1L), long0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-1", string0);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.8878663843888717E-8);
      assertEquals(3.8878663152502064E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(25721049, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), 119);
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(119, rationalNumber0.divisor);
      assertEquals("-0.008", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2577.00824182976);
      String string0 = rationalNumber0.toString();
      assertEquals("260278/101 (2,577.01)", string0);
      assertEquals(2577.009900990099, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483662L, 2147483662L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483662L);
      assertEquals((-2147483634), rationalNumber1.divisor);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483674L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483674, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483674L), (-2147483674L));
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483674L), (-2147483674L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483674L));
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(4.656612929455907E-10, rationalNumber1.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("1", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 79L);
      String string0 = rationalNumber0.toString();
      assertEquals("-2147483648/-79 (27,183,337.316)", string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(2.7183338E7F, rationalNumber1.floatValue(), 0.01F);
      
      rationalNumber0.longValue();
      rationalNumber0.doubleValue();
      rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(2.7183337316455696E7);
      assertEquals(1631000239, rationalNumber2.numerator);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1.0);
      assertEquals(1.0F, rationalNumber3.floatValue(), 0.01F);
      
      rationalNumber0.toDisplayString();
      long long0 = rationalNumber0.longValue();
      assertEquals(27183337L, long0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("27,183,337.316", string1);
      
      rationalNumber0.floatValue();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(Integer.MIN_VALUE);
      assertEquals((-2147483647L), rationalNumber4.longValue());
  }
}
