/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:19:27 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_3_SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<JobAttributes> class1 = JobAttributes.class;
      TypeUtils.isKotlin(class1);
      Class<Byte> class2 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils typeUtils0 = new TypeUtils();
      Class<RenderingHints> class1 = RenderingHints.class;
      TypeUtils.isPath(class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      Short short0 = new Short((short) (-22045));
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isPath(class0);
      Class<RenderingHints> class1 = RenderingHints.class;
      TypeUtils.isPath(class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      Short short0 = new Short((short) (-22045));
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : -22045
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      FieldInfo fieldInfo0 = new FieldInfo("hashCode", class0, class0, class1, (Field) null, 50, 50, 11);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      beanContext0.getField();
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
      fieldInfo0.getDeclaredClass();
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      TypeUtils.fnv1a_64_lower("4]GC;~48pPPn yQ");
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      SQLRecoverableException sQLRecoverableException0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.unwrapOptional(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float((-184.4749314208996));
      Double double0 = new Double((-184.4749314208996));
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      Integer integer0 = new Integer(0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToDate(integer0);
      NumberFormatException numberFormatException0 = new NumberFormatException("L");
      InstantiationException instantiationException0 = new InstantiationException("|@ ");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("L", "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.toLocale("DisableCheckSpecialChar");
      Class<Byte> class0 = Byte.class;
      TypeUtils.getSerializeFeatures(class0);
      Integer integer0 = new Integer(48);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.computeIfPresent("getConstructors", biFunction0);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.getSqlDate("|Z");
      TypeUtils.castToBoolean((Object) null);
      weakHashMap0.containsValue("DisableCheckSpecialChar");
      ClassLoader.getSystemClassLoader();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.isNumber("1.2.46");
      Class<Field> class1 = Field.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Function.identity();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      TypeUtils.fnv1a_64_lower("4]GC;~48pPPn yQ");
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) list0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("?8mI;x|P~O", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.EnumerationSerializer", classLoader0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        Currency.getInstance(locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      Class<Method> class0 = Method.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "!";
      TypeUtils.loadClass("!");
      TypeUtils.isHibernateInitialized("!");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("{i$`kaHfX", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      Class<Locale> class0 = Locale.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>(weakHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap1, propertyNamingStrategy0, true);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("}Mm$.u#MQ", class0, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. }Mm$.u#MQ
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      ClassLoader.getSystemClassLoader();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.getTimeZone();
      TimeZone.getTimeZone("");
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      TypeUtils.loadClass("com.alibaba.fastjson.parser.DefaultJSONParser");
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '%';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      rectangle0.clone();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 2045);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TypeUtils.castToDate((Object) null);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Constructor<StackTraceElementDeserializer>[] constructorArray0 = (Constructor<StackTraceElementDeserializer>[]) Array.newInstance(Constructor.class, 0);
      MockThread mockThread0 = new MockThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockThread0.getContextClassLoader();
      TypeUtils.isNumber("(-0R0t+:");
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.isProxy(class1);
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "L";
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "Uo(c=:YW_:K";
      ThreadGroup threadGroup0 = new ThreadGroup("+PV2j{YZFWIylg!");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      TypeUtils.fnv1a_64_lower("+PV2j{YZFWIylg!");
      Long long0 = new Long((-3750763034362895579L));
      Long.divideUnsigned(5075423977207288709L, (-922337203685477580L));
      TypeUtils.castToTimestamp((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(threadGroup0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.ThreadGroup[name=+PV2j{YZFWIylg!,maxpri=10]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("ma", "ma");
      weakHashMap0.put((String) null, (String) null);
      weakHashMap0.put("ma", "O+Cs%PTYN");
      TypeUtils.isNumber("O+Cs%PTYN");
      Class<Dimension> class0 = Dimension.class;
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("[W`b{b*Stut");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(outOfMemoryError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.OutOfMemoryError: [W`b{b*Stut
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double((-744.0029522637533));
      Double.sum((-185.86833), (-185.86833));
      Double.isFinite((-744.0029522637533));
      Double.sum((-744.0029522637533), (-1.0));
      Double.min((-744.0029522637533), (-744.0029522637533));
      TypeUtils.castToBigInteger(double0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("! L", (String) null);
      weakHashMap0.put("\"U_*:", "etbi");
      Integer integer0 = new Integer(533);
      Time time0 = TypeUtils.castToSqlTime(integer0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getAnnotatedExceptionTypes");
      TypeUtils.castToSqlTime((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      Double.max(0.0, (-743.81252162));
      Double double1 = new Double((-184.4749314208996));
      TypeUtils.castToBigInteger(double0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.isKotlin(class0);
      ClassLoader.getSystemClassLoader();
      Class<Date> class1 = Date.class;
      TypeUtils.isKotlin(class1);
      ClassLoader.getSystemClassLoader();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.isNumber("h}");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NoSuchFieldError: Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.getClassFromMapping("v6/9 rH$%! l");
      AtomicInteger atomicInteger0 = new AtomicInteger(20);
      Class<Date> class0 = Date.class;
      Date date0 = TypeUtils.castToJavaBean((Object) atomicInteger0, class0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      linkedHashMap0.put("Ljava.awt.Font", (Object) null);
      linkedHashMap0.remove((Object) class0, (Object) "Ljava.awt.Font");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("2");
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      linkedHashMap0.put("a{buVrk4;s{4qa", sQLFeatureNotSupportedException0);
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Function<String, String> function0 = Function.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      hashtable0.computeIfAbsent("'0rw+", function0);
      Type[] typeArray0 = new Type[1];
      TypeUtils.loadClass("&\"%$~ENH", (ClassLoader) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      ParserConfig parserConfig1 = ParserConfig.global;
      TypeUtils.getKoltinConstructorParameters((Class) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "&\"%$~ENH", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@749d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      Double.sum((-185.86833), (-185.86833));
      Double.min((-743.81252162), (-743.81252162));
      TypeUtils.castToBigInteger(double0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Boolean boolean0 = Boolean.FALSE;
      weakHashMap0.containsValue(boolean0);
      weakHashMap0.put("\"U *l", "\"U *l");
      Class<Exception> class0 = Exception.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Function.identity();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      TypeUtils.loadClass("'0rw+", (ClassLoader) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig.getGlobalInstance();
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(typeArray0[0]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass("null", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      TypeUtils.fnv1a_64_lower("qTl,2gh");
      Long long0 = new Long(6690600317490212801L);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      identityHashMap0.put("qTl,2gh", "org.springframework.security.authentication.UsernamePasswordAuthenticationToken");
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "96'u$'BFtgs", fieldArray0);
      String string0 = TypeUtils.decapitalize("qTl,2gh");
      assertEquals("qTl,2gh", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("z3$(R?Q&T-");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "f?", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      ThreadGroup threadGroup0 = new ThreadGroup("cb(v\",_mIs9_R");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = new Byte((byte) (-52));
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashtable0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "fastjson.parser.autoTypeSupport");
      ParserConfig parserConfig1 = new ParserConfig();
      Class<ClassLoader> class1 = ClassLoader.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig1, class1, class0);
      AtomicLong atomicLong0 = new AtomicLong(649L);
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      TypeUtils.isKotlin(class2);
      Class<Rectangle> class3 = Rectangle.class;
      Class<Rectangle> class4 = Rectangle.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class3, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float((-743.81252162));
      Double.min((-743.81252162), (-743.81252162));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.get(biFunction0);
      weakHashMap0.put("'>2L?+J*]dM(RthUjW", "");
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      System.setCurrentTimeMillis((-1648L));
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double((-778.8516186622053));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Dimension> class0 = Dimension.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      TypeUtils.cast((Object) hashtable0, class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : -778.8516186622053
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Type[] typeArray0 = new Type[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[J", classLoader0, true);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      classLoader0.clearAssertionStatus();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl1);
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl1, parameterizedTypeImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLDataException> class1 = SQLDataException.class;
      TypeUtils.isKotlin(class1);
      classLoader0.getParent();
      Class<Long> class2 = Long.TYPE;
      TypeUtils.unwrapOptional(class2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z4yCl");
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = true;
      Class<BigDecimal> class3 = BigDecimal.class;
      TypeUtils.buildBeanInfo(class3, (Map<String, String>) null, propertyNamingStrategy0, true);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("z4yCl");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : z4yCl
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("$GmPAW?Y@<(svCRT", "$GmPAW?Y@<(svCRT");
      Object object0 = null;
      Class<MapDeserializer> class0 = MapDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "com.alibaba.fastjson.JSONPath$Operator";
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.JSONPath$Operator", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.JSONPath$Operator -> java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      ThreadGroup threadGroup0 = new ThreadGroup("cb(v\",_mIs9_R");
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      ParserConfig parserConfig0 = ParserConfig.global;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = new Byte((byte) (-52));
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      noSuchFieldError0.initCause((Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.NoSuchFieldError\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor117\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMClassLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@4441bddf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = new Float((-743.81252162));
      Double.min((-743.81252162), (-743.81252162));
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.util.ASMClassLoader");
      MockThread mockThread0 = new MockThread(threadGroup0, "java.lang.");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("llGs+xF", classLoader1, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      TypeUtils.isKotlin(class1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      TypeUtils.castToBoolean(float0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class2 = TypeUtils.loadClass("<9><tj.?9?6:W", classLoader1, false);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-185.86833));
      assertEquals((-185.86833F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      double double1 = Double.min((-743.81252162), (-743.81252162));
      assertEquals((-743.81252162), double1, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = weakHashMap0.computeIfPresent("<9><tj.?9?6:W", biFunction0);
      assertNull(string0);
      
      Boolean boolean1 = TypeUtils.castToBoolean(bigInteger0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertFalse(boolean1);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = weakHashMap0.containsValue(boolean1);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertFalse(boolean2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      String string1 = weakHashMap0.put((String) null, "(Ljava/lang/Object;Ljava/lang/Object;)V");
      assertNull(string1);
      
      String string2 = weakHashMap0.put("hashCode", "\"U_*:");
      assertNull(string2);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      VerifyError verifyError0 = new VerifyError();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNotNull(verifyError0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(verifyError0);
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.lang.VerifyError", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.lang.VerifyError", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransactionRollbackException: java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      JSONType jSONType0 = null;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      boolean boolean0 = true;
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Field field0 = linkedHashMap0.put("2lgcv_h#V7Wn", (Field) null);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(field0);
      
      linkedHashMap0.replaceAll(biFunction0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      BiFunction<Object, Object, Field> biFunction1 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedHashMap0.merge("2lgcv_h#V7Wn", (Field) null, biFunction1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte0);
      assertNotNull(byte0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Class<Collator> class1 = Collator.class;
      ParserConfig.parserAllFieldToCache(class1, hashtable0);
      assertEquals(13, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class1, class0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      classLoader0.setDefaultAssertionStatus(true);
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      boolean boolean1 = TypeUtils.isPath(class2);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThaiBuddhistDate0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Date> class0 = Date.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.sql.Date", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader0.setClassAssertionStatus("writeString", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      long long0 = TypeUtils.fnv1a_64_lower("getgetClass");
      assertEquals(389188801492389515L, long0);
      
      boolean boolean0 = TypeUtils.isNumber("P#~>&h6)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNull(type0);
      
      long long0 = TypeUtils.fnv1a_64("o");
      assertEquals((-5808550276084140354L), long0);
      
      BitSet bitSet0 = new BitSet(203);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(256, bitSet0.size());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(bitSet0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.util\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-185.86833), (-185.86833));
      assertEquals((-371.73666), double1, 0.01);
      
      double double2 = Double.sum((-743.81252162), (-1.0));
      assertEquals((-744.81252162), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Double.min((-743.81252162), (-743.81252162));
      assertEquals((-743.81252162), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotNull(bigInteger0);
      
      boolean boolean0 = TypeUtils.isNumber(">n~}E!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-743.81252162), (-1.0));
      assertEquals((-744.81252162), double1, 0.01);
      
      double double2 = Double.min((-743.81252162), (-743.81252162));
      assertEquals((-743.81252162), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      long long1 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long1);
      assertTrue(long1 == long0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(1034);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.put("Ljava.awt.Color", "L");
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(string0);
      
      String string1 = hashtable0.put("2e[", "2e[");
      assertFalse(hashtable0.isEmpty());
      assertEquals(2, hashtable0.size());
      assertNull(string1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ljava.awt.Color");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(calendar0);
      
      String string2 = TypeUtils.castToString((Object) null);
      assertNull(string2);
      
      Class<InternalError> class0 = InternalError.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertFalse(hashtable0.isEmpty());
      assertEquals(2, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping(")DT/s");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader0.setClassAssertionStatus(": Is>!tNTxv &keQQ~", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader0.setPackageAssertionStatus("Jk", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class1 = TypeUtils.loadClass("Jk", classLoader1, true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(25);
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("Jk", "getClass");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("j", "j");
      assertNull(string1);
      
      byte[] byteArray0 = TypeUtils.castToBytes("Jk");
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Date> class0 = Date.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.Date", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader0.setClassAssertionStatus("m#", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      Class<?> class2 = TypeUtils.loadClass("m#", classLoader1, true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class2);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("m#");
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int1 = Boolean.compare(false, true);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(boolean1);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean2 == boolean0);
      
      Class<?> class3 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class3);
      
      Class<?> class4 = TypeUtils.getRawClass(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.Date", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertEquals("class java.sql.Date", class4.toString());
      assertFalse(class4.isEnum());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertSame(class1, class4);
      assertSame(class4, class1);
      assertNotNull(class4);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      Class class5 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(1, class5.getModifiers());
      assertEquals("class java.sql.Date", class5.toString());
      assertFalse(class5.isPrimitive());
      assertNotNull(class5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThread mockThread0 = new MockThread("+PV2j{YZFWIylg!");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("+PV2j{YZFWIylg!", false);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      Class<?> class0 = TypeUtils.loadClass("H6<Glj>~", classLoader0, false);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("4]GC;~48pPPn yQ");
      assertEquals(4896846525826316267L, long0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException sQLRecoverableException0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(sQLRecoverableException0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-185.86833), (-185.86833));
      assertEquals((-371.73666), double1, 0.01);
      
      double double2 = Double.sum((-743.81252162), (-1.0));
      assertEquals((-744.81252162), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Double.min((-743.81252162), (-743.81252162));
      assertEquals((-743.81252162), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      boolean boolean0 = TypeUtils.isNumber("/>n~}E!");
      assertFalse(boolean0);
      
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(bigInteger0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger1.shortValue());
      assertEquals((byte)25, bigInteger1.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      long long0 = TypeUtils.fnv1a_64_lower("7}JYezCit");
      assertEquals((-4376853014685137375L), long0);
      
      Class<IllegalStateException> class0 = IllegalStateException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "null";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = "qTl,2gh";
      long long0 = TypeUtils.fnv1a_64_lower("qTl,2gh");
      assertEquals(6690600317490212801L, long0);
      
      Long long1 = new Long(6690600317490212801L);
      assertEquals(6690600317490212801L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(long1);
      assertEquals(801000000, timestamp0.getNanos());
      assertEquals("212018653-11-30 15:43:32.801", timestamp0.toString());
      assertTrue(long1.equals((Object)long0));
      assertNotNull(timestamp0);
      
      WeakHashMap<Boolean, SQLWarning> weakHashMap0 = new WeakHashMap<Boolean, SQLWarning>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<LinkageError> class1 = LinkageError.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      aSMClassLoader0.setPackageAssertionStatus("", false);
      Class<?> class2 = TypeUtils.loadClass("", classLoader0, true);
      assertNull(class2);
      
      long long0 = TypeUtils.fnv1a_64_lower("iWw(iJ7O$||RG4yV");
      assertEquals((-3155083504269147479L), long0);
      
      Long long1 = new Long((-1447L));
      assertEquals((-1447L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long long2 = Long.divideUnsigned((-1447L), (-3155083504269147479L));
      assertEquals(1L, long2);
      assertFalse(long2 == long0);
      
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      long long0 = TypeUtils.fnv1a_64_lower("qTl,2gh");
      assertEquals(6690600317490212801L, long0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      WeakHashMap<Boolean, SQLWarning> weakHashMap0 = new WeakHashMap<Boolean, SQLWarning>();
      assertNotNull(weakHashMap0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
      
      aSMClassLoader0.setClassAssertionStatus("null", false);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      boolean boolean1 = TypeUtils.isNumber("DVlw)J.7");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("qTl,2gh");
      assertEquals(6690600317490212801L, long0);
      
      Long long1 = new Long(6690600317490212801L);
      assertEquals(6690600317490212801L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(long1);
      assertEquals(801000000, timestamp0.getNanos());
      assertEquals("212018653-11-30 15:43:32.801", timestamp0.toString());
      assertTrue(long1.equals((Object)long0));
      assertNotNull(timestamp0);
      
      WeakHashMap<Boolean, SQLWarning> weakHashMap0 = new WeakHashMap<Boolean, SQLWarning>();
      assertNotNull(weakHashMap0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
      
      boolean boolean1 = TypeUtils.isNumber("DVlw)J.7");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "+`,7 ZySLWr*";
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("+`,7 ZySLWr*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : +`,7 ZySLWr*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("ma", "ma");
      assertNull(string0);
      
      String string1 = weakHashMap0.put((String) null, (String) null);
      assertNull(string1);
      
      String string2 = weakHashMap0.put("ma", "O+Cs%PTYN");
      assertEquals("ma", string2);
      assertNotNull(string2);
      
      boolean boolean0 = TypeUtils.isNumber("O+Cs%PTYN");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("O+Cs%PTYN", false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string3 = hashtable0.computeIfAbsent("ma", function0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals("ma", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("cb(v\",_mIs9_R");
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      classLoader0.setDefaultAssertionStatus(true);
      Byte byte0 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte0);
      assertNotNull(byte0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny", (byte) (-52));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-52), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-52), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(calendar0);
      
      Insets insets0 = TypeUtils.cast((Object) null, (Type) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(insets0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy0);
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) propertyNamingStrategy0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertNotNull(propertyProcessableDeserializer0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tp/");
      assertFalse(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = File.separator;
      assertEquals("/", string0);
      assertNotNull(string0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      boolean boolean2 = TypeUtils.isKotlin(class2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertNotNull(type1);
      
      boolean boolean3 = TypeUtils.isNumber("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertSame(type0, type1);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-185.86833), (-185.86833));
      assertEquals((-371.73666), double1, 0.01);
      
      double double2 = Double.sum((-743.81252162), (-1.0));
      assertEquals((-744.81252162), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Double.min((-743.81252162), (-743.81252162));
      assertEquals((-743.81252162), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(bigInteger0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertFalse(boolean0);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(boolean0);
      
      boolean boolean1 = weakHashMap0.containsValue(boolean0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertFalse(boolean1);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      String string0 = weakHashMap0.put("! L", (String) null);
      assertNull(string0);
      
      String string1 = weakHashMap0.put("\"U_*:", "etbi");
      assertNull(string1);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double((-778.8516186622053));
      assertEquals((-778.8516186622053), (double)double0, 0.01);
      assertNotNull(double0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.computeIfAbsent("6xq6`{PGCN", function0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals("6xq6`{PGCN", string0);
      assertNotNull(string0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Class<MapDeserializer> class0 = MapDeserializer.class;
      List<FieldInfo> list0 = new Stack<FieldInfo>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class1 = TypeUtils.loadClass("6xq6`{PGCN", (ClassLoader) null);
      assertNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<NoSuchMethodException> class3 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "6xq6`{PGCN", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.clearClassMapping();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(linkedHashMap1);
      
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", linkedHashMap1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertNotNull(propertyProcessableDeserializer0);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class0, class0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      parserConfig0.initJavaBeanDeserializers((Class<?>[]) null);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.deny");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("charAt", "java.lang.AutoCloseable", 3761);
      assertEquals(3761, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.lang.AutoCloseable", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: charAt", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("charAt", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Class<Dimension> class2 = Dimension.class;
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      assertNotNull(numberDeserializer0);
      
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sqlDateDeserializer0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Object", class0.toString());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) identityHashMap0, false);
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Object", class0.toString());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      long long0 = TypeUtils.fnv1a_64_lower("tp/");
      assertEquals(6273922308264017426L, long0);
      
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertNotNull(type1);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockThread.dumpStack();
      long long0 = TypeUtils.fnv1a_64_lower("!`");
      assertEquals(559081904608637252L, long0);
      
      String string0 = concurrentHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.awt.Rectangle");
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(string0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {Ljava.util.concurrent.ConcurrentSkipListSet=Ljava.awt.Rectangle}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+`,7 ZySLWr*");
      assertFalse(boolean0);
      
      LinkedHashSet<MockDateFormat> linkedHashSet0 = new LinkedHashSet<MockDateFormat>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+`,7 ZySLWr*";
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(24, 1076.1301F);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.computeIfAbsent("B", function0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals("B", string0);
      assertNotNull(string0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<TimeZone> class0 = TimeZone.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class1 = TypeUtils.loadClass("B", (ClassLoader) null);
      assertNull(class1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0LX");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertNotNull(mockSimpleDateFormat0);
      
      // Undeclared exception!
      try { 
        DateFormat.getTimeInstance(1412);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1412
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Character character0 = new Character('`');
      assertEquals('`', (char)character0);
      assertNotNull(character0);
      
      Class<Short> class0 = Short.class;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Date(");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) character0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : `
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<Character> class0 = Character.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = Double.sum((-184.4749314208996), (-184.4749314208996));
      assertEquals((-368.9498628417992), double0, 0.01);
      
      Double double1 = new Double((-184.4749314208996));
      assertEquals((-184.4749314208996), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      Random.setNextRandom(105);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockThread.dumpStack();
      long long0 = TypeUtils.fnv1a_64_lower("!`");
      assertEquals(559081904608637252L, long0);
      
      String string0 = concurrentHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.awt.Rectangle");
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(string0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-743.81252162));
      assertEquals((-743.8125F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      double double1 = Double.min((-743.81252162), (-743.81252162));
      assertEquals((-743.81252162), double1, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean1 = weakHashMap0.isEmpty();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = weakHashMap0.computeIfPresent("<9><tj.?9?6:W", biFunction0);
      assertNull(string0);
      
      Boolean boolean3 = TypeUtils.castToBoolean(bigInteger0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertFalse(boolean3);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      InstantiationException instantiationException0 = new InstantiationException("<9><tj.?9?6:W");
      assertEquals("java.lang.InstantiationException: <9><tj.?9?6:W", instantiationException0.toString());
      assertEquals("<9><tj.?9?6:W", instantiationException0.getMessage());
      assertNotNull(instantiationException0);
      
      boolean boolean4 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(float0);
      assertEquals((byte)25, bigInteger1.byteValue());
      assertEquals((short) (-743), bigInteger1.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      boolean boolean5 = TypeUtils.isKotlin(class0);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread.dumpStack();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0, true);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertEquals(9729, class0.getModifiers());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertEquals(9729, class0.getModifiers());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(type0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertEquals(9729, class0.getModifiers());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertEquals(9729, class0.getModifiers());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertTrue(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertTrue(class1.isAnnotation());
      assertEquals("interface javax.persistence.ManyToMany", class1.toString());
      assertEquals(9729, class1.getModifiers());
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass(type0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertEquals(9729, class0.getModifiers());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotSame(class0, class2);
      assertSame(class0, class1);
      assertNotSame(class2, class1);
      assertNotSame(class2, class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(class2.equals((Object)class1));
      assertFalse(class2.equals((Object)class0));
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertEquals(9729, class0.getModifiers());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotSame(class0, class2);
      assertSame(class0, class1);
      assertNotSame(class2, class1);
      assertNotSame(class2, class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(class0.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertFalse(class2.equals((Object)class0));
      assertNotNull(class3);
      
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = hashtable0.computeIfAbsent("'0rw+", function0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals("'0rw+", string0);
      assertNotNull(string0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class1 = TypeUtils.loadClass("'0rw+", (ClassLoader) null);
      assertNull(class1);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Class<?> class2 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Class<Character> class3 = Character.TYPE;
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("char", class3.toString());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertNotNull(class3);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class3);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("char", class3.toString());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      VerifyError verifyError0 = new VerifyError("longValue");
      assertEquals("longValue", verifyError0.getMessage());
      assertEquals("java.lang.VerifyError: longValue", verifyError0.toString());
      assertNotNull(verifyError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) verifyError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.VerifyError -> char
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("dialog");
      assertEquals((-2547851178734588583L), long0);
      
      Locale locale0 = TypeUtils.toLocale("dialog");
      assertEquals("dialog", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("dialog", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.EnumDeserializer", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = Double.sum((-184.4749314208996), (-184.4749314208996));
      assertEquals((-368.9498628417992), double0, 0.01);
      
      Double double1 = new Double((-184.4749314208996));
      assertEquals((-184.4749314208996), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      
      Float float0 = new Float(202.82581480445918);
      assertEquals(202.82582F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@94446f01
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "-%>Q`:#";
      Constructor<StackTraceElementDeserializer>[] constructorArray0 = (Constructor<StackTraceElementDeserializer>[]) Array.newInstance(Constructor.class, 3);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-743.81252162));
      assertEquals((-743.8125F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = "<9><tj.?9?6:W";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("<9><tj.?9?6:W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<9><tj.?9?6:W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float((-744.0029522637533));
      assertEquals((-744.0029F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      double double0 = Double.max((-73.97721), (-744.0029522637533));
      assertEquals((-73.97721), double0, 0.01);
      
      double double1 = Double.min((-185.86833), 0.0);
      assertEquals((-185.86833), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Double.sum((-185.86833), (-185.86833));
      assertEquals((-371.73666), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Float float1 = new Float((-371.73666));
      assertEquals((-371.73666F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Locale locale0 = TypeUtils.toLocale("7\u0004 f(OjU:V-5<kD");
      assertEquals("", locale0.getISO3Country());
      assertEquals("7\u0004 f(oju:v-5<kd", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("7\u0004 f(oju:v-5<kd", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      float float2 = Float.max(0.0F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("7\u0004 f(oju:v-5<kd", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("7\u0004 f(oju:v-5<kd", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(boolean0);
      
      Double double3 = TypeUtils.castToDouble(float1);
      assertEquals((-371.7366638183594), (double)double3, 0.01);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-200.56287459883518), (-200.56287459883518));
      assertEquals((-401.12574919767036), double1, 0.01);
      
      Double double2 = new Double((-200.56287459883518));
      assertEquals((-200.56287459883518), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotNull(bigInteger0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("L");
      assertEquals("java.lang.NumberFormatException: L", numberFormatException0.toString());
      assertEquals("L", numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      InstantiationException instantiationException0 = new InstantiationException("L");
      assertEquals("L", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: L", instantiationException0.toString());
      assertNotNull(instantiationException0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(instantiationException0);
      assertEquals("L", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: L", instantiationException0.toString());
      assertTrue(boolean0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isInterface());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isArray());
      assertEquals("interface java.time.chrono.ChronoLocalDate", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("2%e[");
      assertEquals(5492049909771161909L, long0);
      
      long long1 = TypeUtils.fnv1a_64("YRB 1rV>v!B");
      assertEquals((-1028488541657115640L), long1);
      assertFalse(long1 == long0);
      
      Class<Timestamp> class0 = Timestamp.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(7);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Byte byte0 = new Byte((byte)22);
      assertEquals((byte)22, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = TypeUtils.decapitalize("YRB 1rV>v!B");
      assertEquals("YRB 1rV>v!B", string0);
      assertNotNull(string0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setPackageAssertionStatus("Ljava.awt.Point", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Point", classLoader1, false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put(";S}EitCfXHT", "EMPTY");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double((-744.0029522637533));
      assertEquals((-744.0029522637533), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-185.86833), (-185.86833));
      assertEquals((-371.73666), double1, 0.01);
      
      boolean boolean0 = Double.isFinite((-744.0029522637533));
      assertTrue(boolean0);
      
      double double2 = Double.sum((-744.0029522637533), (-1.0));
      assertEquals((-745.0029522637533), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Double.min((-744.0029522637533), (-744.0029522637533));
      assertEquals((-744.0029522637533), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-744), bigInteger0.shortValue());
      assertEquals((byte)24, bigInteger0.byteValue());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(57, 11, 11, 57, 57);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=57,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=57,HOUR_OF_DAY=57,MINUTE=57,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=57,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=57,HOUR_OF_DAY=57,MINUTE=57,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("00:00:00", time0.toString());
      assertNotNull(time0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>(weakHashMap0);
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Float> class0 = Float.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap1, propertyNamingStrategy0);
      assertNotSame(weakHashMap0, weakHashMap1);
      assertNotSame(weakHashMap1, weakHashMap0);
      assertTrue(weakHashMap0.equals((Object)weakHashMap1));
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(serializeBeanInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(weakHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "org.springframework.util.LinkedCaseInsensitiveMap");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(classLoader2);
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath", classLoader2, false);
      assertEquals(1, class0.getModifiers());
      assertEquals("class com.alibaba.fastjson.JSONPath", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.springframework.util.LinkedCaseInsensitiveMap", (Throwable) null);
      assertEquals("java.sql.SQLTransientException: org.springframework.util.LinkedCaseInsensitiveMap", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("org.springframework.util.LinkedCaseInsensitiveMap", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      Integer integer0 = new Integer(1975);
      assertEquals(1975, (int)integer0);
      assertNotNull(integer0);
      
      java.util.Date date0 = TypeUtils.castToDate(integer0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      String string0 = "|@ ";
      InstantiationException instantiationException0 = new InstantiationException("org.springframework.util.LinkedCaseInsensitiveMap");
      assertEquals("java.lang.InstantiationException: org.springframework.util.LinkedCaseInsensitiveMap", instantiationException0.toString());
      assertEquals("org.springframework.util.LinkedCaseInsensitiveMap", instantiationException0.getMessage());
      assertNotNull(instantiationException0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1, class0.getModifiers());
      assertEquals("class com.alibaba.fastjson.JSONPath", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertSame(classLoader2, classLoader1);
      assertNotSame(class0, class1);
      assertNotSame(class1, class0);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getRawClass(class0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class com.alibaba.fastjson.JSONPath", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class0.getModifiers());
      assertEquals("class com.alibaba.fastjson.JSONPath", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertNotSame(class2, class1);
      assertSame(class2, class0);
      assertSame(classLoader2, classLoader1);
      assertNotSame(class0, class1);
      assertSame(class0, class2);
      assertFalse(class2.equals((Object)class1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(class0.equals((Object)class1));
      assertNotNull(class2);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getClass(type0);
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tp/");
      assertFalse(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.toString();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean1 = weakHashMap0.isEmpty();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = weakHashMap0.put(",Odp8\"JcPbP", "-18:00");
      assertNull(string1);
      
      Class<Point> class1 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Class<?> class2 = TypeUtils.getClass(type0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertSame(class2, class0);
      assertNotNull(class2);
      
      Character character0 = Character.valueOf('!');
      assertEquals('!', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : !
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("!`");
      assertEquals(559081904608637252L, long0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      Class<Character> class0 = Character.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!`");
      assertFalse(boolean0);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("fastjson.parser.autoTypeSupport");
      assertEquals("java.lang.IllegalAccessError: fastjson.parser.autoTypeSupport", illegalAccessError0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", illegalAccessError0.getMessage());
      assertNotNull(illegalAccessError0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread.dumpStack();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      String string0 = "failedProperties";
      ThreadGroup threadGroup0 = new ThreadGroup("failedProperties");
      assertEquals("failedProperties", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      String string1 = "getMetaClass";
      // Undeclared exception!
      try { 
        threadGroup0.enumerate((Thread[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-184.4749314208996));
      assertEquals((-184.47493F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double1 = new Double((-184.4749314208996));
      assertEquals((-184.4749314208996), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      Float float1 = TypeUtils.castToFloat(bigInteger0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((-743.0F), (float)float1, 0.01F);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-12473307);
      longArray0[1] = (long) (-12473307);
      longArray0[3] = (long) (-12473307);
      longArray0[4] = (long) (-12473307);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : -743
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.max(0.0, (-743.81252162));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = Double.sum(0.0, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Double.sum((-743.81252162), (-2503.0379780507));
      assertEquals((-3246.8504996707), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = Double.sum((-743.81252162), (-743.81252162));
      assertEquals((-1487.62504324), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      Double double5 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotNull(bigInteger0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      double double6 = Double.sum((-771.897), (-743.81252162));
      assertEquals((-1515.70952162), double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<FieldInfo> class1 = FieldInfo.class;
      Class<Short> class2 = Short.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(17, class3.getModifiers());
      assertEquals("class java.lang.Short", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      Class class4 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals("class java.lang.Object", class4.toString());
      assertEquals(1, class4.getModifiers());
      assertNotNull(class4);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Class<?> class5 = TypeUtils.getRawClass(class0);
      assertTrue(class5.isInterface());
      assertEquals("interface java.time.chrono.ChronoLocalDate", class5.toString());
      assertEquals(1537, class5.getModifiers());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isEnum());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isArray());
      assertNotSame(class5, class3);
      assertFalse(class5.equals((Object)class3));
      assertNotNull(class5);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(".", locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(".", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(".", mockSimpleDateFormat0.toLocalizedPattern());
      assertNotNull(mockSimpleDateFormat0);
      
      String string0 = TypeUtils.castToString(mockSimpleDateFormat0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(".", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(".", mockSimpleDateFormat0.toLocalizedPattern());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "writeFieldNameDirect");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Method> class0 = Method.class;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      Constructor<SQLClientInfoException>[] constructorArray0 = (Constructor<SQLClientInfoException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      boolean boolean2 = TypeUtils.isProxy(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      boolean boolean4 = TypeUtils.isKotlin(class1);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class2.toString());
      assertTrue(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      
      boolean boolean5 = TypeUtils.isNumber("-%>Q`:#");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      
      Class<Integer> class3 = Integer.TYPE;
      assertEquals(1041, class3.getModifiers());
      assertEquals("int", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      HttpCookie httpCookie0 = new HttpCookie("istoString", "writeFieldNameDirect");
      assertNull(httpCookie0.getCommentURL());
      assertFalse(httpCookie0.hasExpired());
      assertFalse(httpCookie0.getSecure());
      assertEquals("istoString=\"writeFieldNameDirect\"", httpCookie0.toString());
      assertNull(httpCookie0.getPortlist());
      assertEquals("writeFieldNameDirect", httpCookie0.getValue());
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertEquals("istoString", httpCookie0.getName());
      assertFalse(httpCookie0.getDiscard());
      assertNull(httpCookie0.getPath());
      assertFalse(httpCookie0.isHttpOnly());
      assertNull(httpCookie0.getComment());
      assertEquals(1, httpCookie0.getVersion());
      assertNull(httpCookie0.getDomain());
      assertNotNull(httpCookie0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertNotNull(stringIndexOutOfBoundsException0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("FXt1~6fpJI8HW+^", stringIndexOutOfBoundsException0);
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertNotNull(mockIllegalArgumentException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-154.07964790391932));
      assertEquals((-154.07965F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double1 = new Double((-154.07964790391932));
      assertEquals((-154.07964790391932), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      java.util.Date date0 = TypeUtils.castToDate(integer0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(date0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean0 = weakHashMap0.isEmpty();
      assertTrue(boolean0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      String string1 = parameterizedTypeImpl0.getTypeName();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = TypeUtils.isGenericParamType(typeArray0[0]);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      SortedMap<String, String> sortedMap0 = treeMap0.tailMap("m@5*Hs:1C");
      assertEquals(0, treeMap0.size());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(sortedMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class [F", class1.toString());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class [F", class1.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertEquals("class [F", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isArray());
      assertNotNull(class2);
      
      Class<JobAttributes> class3 = JobAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class2, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray0);
      assertEquals("{4, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bitSet0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("qTl,2gh");
      assertEquals(6690600317490212801L, long0);
      
      Long long1 = new Long(6690600317490212801L);
      assertEquals(6690600317490212801L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(long1);
      assertEquals(801000000, timestamp0.getNanos());
      assertEquals("212018653-11-30 15:43:32.801", timestamp0.toString());
      assertTrue(long1.equals((Object)long0));
      assertNotNull(timestamp0);
      
      Class<?> class0 = null;
      WeakHashMap<Boolean, SQLWarning> weakHashMap0 = new WeakHashMap<Boolean, SQLWarning>();
      assertNotNull(weakHashMap0);
      
      Boolean boolean1 = Boolean.valueOf(".000000");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("istargetEntity");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qTl,2gh", "v~UlGA!3?bj@vAkt");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("v~UlGA!3?bj@vAkt", sQLTimeoutException0.getSQLState());
      assertEquals("qTl,2gh", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: qTl,2gh", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("qTl,2gh", "d~{ID&=<m", (-1523), sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("v~UlGA!3?bj@vAkt", sQLTimeoutException0.getSQLState());
      assertEquals("qTl,2gh", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: qTl,2gh", sQLTimeoutException0.toString());
      assertEquals("qTl,2gh", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: qTl,2gh", sQLWarning0.toString());
      assertEquals((-1523), sQLWarning0.getErrorCode());
      assertEquals("d~{ID&=<m", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SQLWarning sQLWarning1 = weakHashMap0.put(boolean1, sQLWarning0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("v~UlGA!3?bj@vAkt", sQLTimeoutException0.getSQLState());
      assertEquals("qTl,2gh", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: qTl,2gh", sQLTimeoutException0.toString());
      assertEquals("qTl,2gh", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: qTl,2gh", sQLWarning0.toString());
      assertEquals((-1523), sQLWarning0.getErrorCode());
      assertEquals("d~{ID&=<m", sQLWarning0.getSQLState());
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertNull(sQLWarning1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-184.4749314208996));
      assertEquals((-184.47493F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double1 = Double.valueOf((-184.4749314208996));
      assertEquals((-184.4749314208996), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double1);
      assertEquals((short) (-184), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(bigInteger0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(31);
      assertEquals(31, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger0);
      assertEquals((short) (-184), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      assertEquals((byte)72, bigDecimal0.byteValue());
      assertEquals((short) (-184), bigDecimal0.shortValue());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = TypeUtils.isNumber("{U'ZoP/fr+7BG");
      assertFalse(boolean0);
      
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.toString();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
      
      boolean boolean1 = TypeUtils.isNumber("getSuppressed");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("-18:00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : -18:00
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("0BSGZf8M");
      assertFalse(boolean0);
      
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("0BSGZf8M");
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("#0BSGZf8M", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("BSGZf8M", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("BSGZf8M", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#0BSGZf8M", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)51;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)52, (byte)51}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormat0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getClass(type0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("tp/");
      assertEquals("tp/", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: tp/", noSuchFieldException0.toString());
      assertNotNull(noSuchFieldException0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNotNull(illegalMonitorStateException0);
      
      Class<Short> class1 = Short.TYPE;
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(0, int0);
      
      Integer integer0 = new Integer((-561));
      assertEquals((-561), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      MockDate mockDate0 = new MockDate((-62), 18, 180);
      assertEquals("Fri Dec 27 00:00:00 GMT 1839", mockDate0.toString());
      assertNotNull(mockDate0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      Integer integer1 = new Integer(20);
      assertEquals(20, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("yF59z}^\"e,ON");
      assertEquals("yF59z}^\"e,ON", string0);
      assertNotNull(string0);
      
      Class<Calendar> class2 = Calendar.class;
      boolean boolean1 = TypeUtils.isProxy(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockThread.dumpStack();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      long long0 = TypeUtils.fnv1a_64_lower("getComponentType");
      assertEquals((-3529476926640535710L), long0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.text.SimpleDateFormat", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-154.07964790391932));
      assertEquals((-154.07965F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double1 = new Double((-154.07964790391932));
      assertEquals((-154.07964790391932), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      int int0 = Opcodes.ACC_SUPER;
      assertEquals(32, int0);
      
      double double2 = Double.max(0.0, (-743.81252162));
      assertEquals(0.0, double2, 0.01);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      PropertyNamingStrategy propertyNamingStrategy0 = TypeUtils.cast((Object) double3, class0, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Locale locale0 = TypeUtils.toLocale("DisableCheckSpecialChar");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("disablecheckspecialchar", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("disablecheckspecialchar", locale0.toString());
      assertNotNull(locale0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      String string0 = "yF59z\\}^\"e,ON";
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("yF59z}^\"e,ON");
      assertEquals("java.lang.NoSuchFieldException: yF59z}^\"e,ON", noSuchFieldException0.toString());
      assertEquals("yF59z}^\"e,ON", noSuchFieldException0.getMessage());
      assertNotNull(noSuchFieldException0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("DisableCheckSpecialChar");
      assertEquals("java.lang.IllegalMonitorStateException: DisableCheckSpecialChar", illegalMonitorStateException0.toString());
      assertEquals("DisableCheckSpecialChar", illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      Class<Short> class1 = Short.TYPE;
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<TimeUnit> class2 = TimeUnit.class;
      int int1 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      long long0 = 6690600317490212801L;
      System.setCurrentTimeMillis(6690600317490212801L);
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string1 = "y)ENEWmsBV_>u";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("DisableCheckSpecialChar", "yF59z}^\"e,ON", 0);
      assertEquals("java.sql.SQLSyntaxErrorException: DisableCheckSpecialChar", sQLSyntaxErrorException0.toString());
      assertEquals("yF59z}^\"e,ON", sQLSyntaxErrorException0.getSQLState());
      assertEquals("DisableCheckSpecialChar", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Float float0 = new Float(0.75);
      assertEquals(0.75F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = TypeUtils.castToInt(float0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      LinkedHashSet<IllegalArgumentException> linkedHashSet0 = new LinkedHashSet<IllegalArgumentException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("y)ENEWmsBV_>u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("E==1e'X>03!mO!", "cause");
      assertNull(string0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      String string1 = weakHashMap1.put("cause", (String) null);
      assertNotSame(weakHashMap1, weakHashMap0);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNull(string1);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      Point point0 = new Point();
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      Rectangle rectangle0 = new Rectangle(0, 289);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(289, rectangle0.height);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(289.0, rectangle0.getMaxY(), 0.01);
      assertEquals(144.5, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(289.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThread mockThread0 = new MockThread("+PV2j{YZFWIylg!");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("cb(v\",_mIs9_R");
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ThrowableDeserializer throwableDeserializer0 = TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(throwableDeserializer0);
      
      Class<EnumDeserializer> class2 = EnumDeserializer.class;
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(string0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      String string1 = parameterizedTypeImpl1.getTypeName();
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(parameterizedTypeImpl0.equals((Object)parameterizedTypeImpl1));
      assertNotNull(string1);
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertTrue(boolean1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertFalse(boolean1 == boolean0);
      assertFalse(parameterizedTypeImpl0.equals((Object)parameterizedTypeImpl1));
      
      Class class3 = (Class)TypeUtils.unwrapOptional(typeArray0[0]);
      assertFalse(class3.isAnnotation());
      assertEquals("long", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isInterface());
      assertEquals(1041, class3.getModifiers());
      assertSame(class3, class1);
      assertNotNull(class3);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      SortedMap<String, String> sortedMap0 = treeMap0.tailMap(";29<|7$~?anW");
      assertEquals(0, treeMap0.size());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<String> class4 = String.class;
      Class<Annotation> class5 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class4, class5);
      assertNull(annotation0);
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("NheUC%D5", "getMetaClass", intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("NheUC%D5", batchUpdateException0.getMessage());
      assertEquals("getMetaClass", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: NheUC%D5", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.BatchUpdateException: NheUC%D5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Type[] typeArray0 = new Type[0];
      String string0 = "[J";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.setDefaultClassLoader(classLoader0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-185.86833));
      assertEquals((-185.86833F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = weakHashMap0.computeIfPresent("<9><tj.?9?6:W", biFunction0);
      assertNull(string0);
      
      Boolean boolean2 = TypeUtils.castToBoolean(bigInteger0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      LinkedHashMap<SQLSyntaxErrorException, MockGregorianCalendar> linkedHashMap0 = new LinkedHashMap<SQLSyntaxErrorException, MockGregorianCalendar>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("<9><tj.?9?6:W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : <9><tj.?9?6:W
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-185.86833), (-185.86833));
      assertEquals((-371.73666), double1, 0.01);
      
      double double2 = Double.sum((-743.81252162), (-1.0));
      assertEquals((-744.81252162), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Double.min((-743.81252162), (-743.81252162));
      assertEquals((-743.81252162), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      boolean boolean1 = weakHashMap0.containsValue((Object) null);
      assertFalse(boolean1);
      
      String string0 = weakHashMap0.put("! L", (String) null);
      assertNull(string0);
      
      String string1 = weakHashMap0.put("scanEnum", "etbi");
      assertNull(string1);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockThread.dumpStack();
      long long0 = TypeUtils.fnv1a_64_lower("!`");
      assertEquals(559081904608637252L, long0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class<Float> class0 = Float.class;
      Boolean boolean1 = new Boolean("fastjson.parser.autoTypeSupport");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean2 = TypeUtils.isNumber("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      assertNotNull(negativeArraySizeException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      negativeArraySizeException0.setStackTrace(stackTraceElementArray0);
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      
      Class<Timestamp> class3 = Timestamp.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) concurrentHashMap0, false);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string1 = "[";
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isPath(class0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThread mockThread0 = new MockThread("+PV2j{YZFWIylg!");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("cb(v\",_mIs9_R");
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("+PV2j{YZFWIylg!");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      negativeArraySizeException0.setStackTrace(stackTraceElementArray0);
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = new Byte((byte)23);
      assertEquals((byte)23, (byte)byte0);
      assertNotNull(byte0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class [I", class2.toString());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertNotNull(class2);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@7fccb4e2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("cb(v\",_mIs9_R");
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      assertNotNull(negativeArraySizeException0);
      
      NegativeArraySizeException negativeArraySizeException1 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException1.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException1.toString());
      assertFalse(negativeArraySizeException1.equals((Object)negativeArraySizeException0));
      assertNotNull(negativeArraySizeException1);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class [I", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThaiBuddhistDate0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double((-744.002952264));
      assertEquals((-744.002952264), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-744.002952264), 2907.39235485914);
      assertEquals((-744.002952264), double1, 0.01);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      boolean boolean0 = true;
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.setAsmEnable(true);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<SQLDataException> class0 = SQLDataException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<Integer> class1 = Integer.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray1);
      
      boolean boolean1 = Double.isFinite(2234.4856462765);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockThread.dumpStack();
      String string0 = "!`";
      long long0 = TypeUtils.fnv1a_64_lower("!`");
      assertEquals(559081904608637252L, long0);
      
      String string1 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class<Float> class0 = Float.class;
      Boolean boolean1 = new Boolean("fastjson.parser.autoTypeSupport");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean2 = TypeUtils.isNumber("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      assertNotNull(negativeArraySizeException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      negativeArraySizeException0.setStackTrace(stackTraceElementArray0);
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      parserConfig0.setAutoTypeSupport(false);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.ParserConfig@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("2u%`N5oGDoYXQa6=T=", classLoader0, true);
      assertNull(class1);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl1);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl1);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.String", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertNotNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, class2, type0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.String", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(parameterizedTypeImpl2.equals((Object)parameterizedTypeImpl0));
      assertFalse(parameterizedTypeImpl2.equals((Object)type0));
      assertNotNull(parameterizedTypeImpl2);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<Integer> class3 = Integer.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray1);
      
      System.setCurrentTimeMillis((-1382L));
      Class<?> class4 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader0);
      assertNull(class4);
      
      Class<Boolean> class5 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64("Ljava.lang.AutoCloseable");
      assertEquals(1583300896935897196L, long0);
      
      Locale locale0 = TypeUtils.toLocale("Ljava.lang.AutoCloseable");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ljava.lang.autocloseable", locale0.getLanguage());
      assertEquals("ljava.lang.autocloseable", locale0.toString());
      assertNotNull(locale0);
      
      System.setCurrentTimeMillis(789L);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-561));
      assertEquals((-561), (int)integer0);
      assertNotNull(integer0);
      
      MockDate mockDate0 = new MockDate(2531, 2531, (-691));
      assertEquals("Thu Jan 09 00:00:00 GMT 4640", mockDate0.toString());
      assertNotNull(mockDate0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.get(integer0);
      assertNull(string0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      System.setCurrentTimeMillis(1583300896935897196L);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Ljava.lang.AutoCloseable", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("nJlIl", (ClassLoader) aSMClassLoader0, true);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNull(class0);
      
      long long0 = TypeUtils.fnv1a_64_lower("qTl,2gh");
      assertEquals(6690600317490212801L, long0);
      
      Long long1 = new Long(6690600317490212801L);
      assertEquals(6690600317490212801L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Timestamp> class1 = Timestamp.class;
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
      assertNotNull(noSuchFieldException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchFieldException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      boolean boolean0 = true;
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?> class0 = TypeUtils.loadClass("$:}xJvhR+rL", classLoader1, true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class0);
      
      boolean boolean2 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      classLoader1.setDefaultAssertionStatus(true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(",Q8_X/2vp2XlV%G", (Throwable) null);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ,Q8_X/2vp2XlV%G", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(",Q8_X/2vp2XlV%G", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean3 = TypeUtils.isNumber(" \"0YeiMa(");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      
      Class<Point> class1 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator(" \"0YeiMa(");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : \"0YeiMa(
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockThread.dumpStack();
      String string0 = concurrentHashMap0.put(",N", "|jR)}f0Q:(6D,c");
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = concurrentHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.awt.Rectangle");
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(string1);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {,N=|jR)}f0Q:(6D,c, Ljava.util.concurrent.ConcurrentSkipListSet=Ljava.awt.Rectangle}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      Class<AtomicInteger> class0 = AtomicInteger.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.concurrent.atomic.AtomicInteger", class1.toString());
      assertNotNull(class1);
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class1;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[4]);
      assertNotNull(parameterizedTypeImpl0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(typeArray0[3]);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[7], class2);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[2], (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Locale locale0 = TypeUtils.toLocale("DisableCheckSpecialChar");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("disablecheckspecialchar", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("disablecheckspecialchar", locale0.getLanguage());
      assertNotNull(locale0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("yF59z}^\"e,ON");
      assertEquals("yF59z}^\"e,ON", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: yF59z}^\"e,ON", noSuchFieldException0.toString());
      assertNotNull(noSuchFieldException0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("DisableCheckSpecialChar");
      assertEquals("java.lang.IllegalMonitorStateException: DisableCheckSpecialChar", illegalMonitorStateException0.toString());
      assertEquals("DisableCheckSpecialChar", illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      Class<Short> class1 = Short.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<TimeUnit> class2 = TimeUnit.class;
      int int1 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer((-62));
      assertEquals((-62), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      MockDate mockDate0 = new MockDate((-62), (-62), (-561));
      assertEquals("Tue Apr 19 00:00:00 GMT 1831", mockDate0.toString());
      assertNotNull(mockDate0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      Integer integer1 = new Integer((-561));
      assertEquals((-561), (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      classLoader1.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory1);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertNotNull(aSMClassLoader1);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "yF59z}^\"e,ON");
      assertEquals("java.util.SimpleTimeZone[id=yF59z}^\"e,ON,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("yF59z}^\"e,ON", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      LinkedHashSet<MockDate> linkedHashSet0 = new LinkedHashSet<MockDate>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertEquals("Tue Apr 19 00:00:00 GMT 1831", date0.toString());
      assertEquals("Tue Apr 19 00:00:00 GMT 1831", mockDate0.toString());
      assertSame(date0, mockDate0);
      assertSame(mockDate0, date0);
      assertNotNull(date0);
      
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
      
      Class<Currency> class3 = Currency.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
      
      java.util.IdentityHashMap<SQLSyntaxErrorException, StackTraceElementDeserializer> identityHashMap0 = new java.util.IdentityHashMap<SQLSyntaxErrorException, StackTraceElementDeserializer>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = Double.sum((-185.86833), (-185.86833));
      assertEquals((-371.73666), double0, 0.01);
      
      boolean boolean0 = TypeUtils.isNumber("/>n~}E!");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Method> class0 = Method.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("/>n~}E!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray0);
      assertEquals("{4, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("oK)$%8sY4n%*HwB", "oK)$%8sY4n%*HwB", "oK)$%8sY4n%*HwB", (-934));
      assertEquals("oK)$%8sY4n%*HwB.oK)$%8sY4n%*HwB(oK)$%8sY4n%*HwB)", stackTraceElement0.toString());
      assertEquals("oK)$%8sY4n%*HwB", stackTraceElement0.getClassName());
      assertEquals("oK)$%8sY4n%*HwB", stackTraceElement0.getFileName());
      assertEquals((-934), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("oK)$%8sY4n%*HwB", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("oK)$%8sY4n%*HwB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oK)$%8sY4n%*HwB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("NOT_LIKE");
      assertEquals("", locale0.getVariant());
      assertEquals("LIKE", locale0.getCountry());
      assertEquals("not", locale0.getISO3Language());
      assertEquals("not", locale0.getLanguage());
      assertEquals("not_LIKE", locale0.toString());
      assertNotNull(locale0);
      
      System.setCurrentTimeMillis(789L);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockDate mockDate0 = new MockDate(2531, 2531, (-691));
      assertEquals("Thu Jan 09 00:00:00 GMT 4640", mockDate0.toString());
      assertNotNull(mockDate0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Date> class1 = Date.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertFalse(class2.isAnnotation());
      assertEquals("class java.sql.Date", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanSerializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("w]u)Q#=e*~");
      assertEquals((-8101939049769707783L), long0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals("class java.sql.SQLClientInfoException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("w]u)Q#=e*~", classLoader0, true);
      assertNull(class2);
      
      Class<PropertyNamingStrategy> class3 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "w]u)Q#=e*~", class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-154.07964790391932));
      assertEquals((-154.07965F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double1 = new Double((-154.07964790391932));
      assertEquals((-154.07964790391932), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      int int0 = Opcodes.ACC_SUPER;
      assertEquals(32, int0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      java.util.Date date0 = TypeUtils.castToDate(integer0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(date0);
      
      double double2 = Double.max(0.0, (-743.81252162));
      assertEquals(0.0, double2, 0.01);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      InstantiationException instantiationException0 = new InstantiationException("Ljava.a}t.Pount");
      assertEquals("java.lang.InstantiationException: Ljava.a}t.Pount", instantiationException0.toString());
      assertEquals("Ljava.a}t.Pount", instantiationException0.getMessage());
      assertNotNull(instantiationException0);
      
      instantiationException0.printStackTrace();
      assertEquals("java.lang.InstantiationException: Ljava.a}t.Pount", instantiationException0.toString());
      assertEquals("Ljava.a}t.Pount", instantiationException0.getMessage());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ljava.a}t.Pount", instantiationException0);
      assertEquals("java.lang.InstantiationException: Ljava.a}t.Pount", instantiationException0.toString());
      assertEquals("Ljava.a}t.Pount", instantiationException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.a}t.Pount", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Ljava.a}t.Pount", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      InstantiationException instantiationException1 = new InstantiationException("Ljava.a}t.Pount");
      assertEquals("Ljava.a}t.Pount", instantiationException1.getMessage());
      assertEquals("java.lang.InstantiationException: Ljava.a}t.Pount", instantiationException1.toString());
      assertFalse(instantiationException1.equals((Object)instantiationException0));
      assertNotNull(instantiationException1);
      
      Integer integer1 = TypeUtils.castToInt(integer0);
      assertEquals(32, (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      int int1 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "org.springframework.util.LinkedCaseInsensitiveMap");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("org.springframework.util.LinkedCaseInsensitiveMap", true);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertEquals((short)27, bigInteger0.shortValue());
      assertEquals((byte)27, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertEquals((short)27, bigInteger1.shortValue());
      assertEquals((byte)27, bigInteger1.byteValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertEquals((short)27, bigInteger0.shortValue());
      assertEquals((byte)27, bigInteger0.byteValue());
      assertEquals((short)27, bigInteger1.shortValue());
      assertEquals((byte)27, bigInteger1.byteValue());
      assertEquals((short)54, bigInteger2.shortValue());
      assertEquals((byte)54, bigInteger2.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Collection collection0 = TypeUtils.createCollection(class1);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(collection0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      Time time0 = TypeUtils.castToSqlTime(bigInteger0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertEquals("00:00:00", time0.toString());
      assertEquals((short)27, bigInteger0.shortValue());
      assertEquals((byte)27, bigInteger0.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(time0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.put("nextException", "nextException");
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(string0);
      
      String string1 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string1);
      assertNotNull(string1);
      
      String string2 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string2);
      assertNotNull(string2);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getMetaClass");
      assertFalse(boolean0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Function<Object, SQLNonTransientConnectionException> function0 = (Function<Object, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      String string3 = File.pathSeparator;
      assertEquals(":", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("w]u)Q=e*~");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)64, (byte)7}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(":");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64("Ljava.lang.AutoCloseable");
      assertEquals(1583300896935897196L, long0);
      
      Locale locale0 = TypeUtils.toLocale("NOT_LIKE");
      assertEquals("not_LIKE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("not", locale0.getLanguage());
      assertEquals("not", locale0.getISO3Language());
      assertEquals("LIKE", locale0.getCountry());
      assertNotNull(locale0);
      
      System.setCurrentTimeMillis(789L);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(957, 2046.6F, 957);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-561));
      assertEquals((-561), (int)integer0);
      assertNotNull(integer0);
      
      MockDate mockDate0 = new MockDate(2531, 2531, (-691));
      assertEquals("Thu Jan 09 00:00:00 GMT 4640", mockDate0.toString());
      assertNotNull(mockDate0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Date> class1 = Date.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertEquals("class java.sql.Date", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      AtomicLong atomicLong0 = new AtomicLong(957);
      assertEquals((short)957, atomicLong0.shortValue());
      assertEquals(957.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(957, atomicLong0.intValue());
      assertEquals(957L, atomicLong0.longValue());
      assertEquals(957.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-67), atomicLong0.byteValue());
      assertEquals("957", atomicLong0.toString());
      assertEquals(957L, atomicLong0.get());
      assertNotNull(atomicLong0);
      
      Boolean boolean2 = TypeUtils.castToBoolean(atomicLong0);
      assertEquals((short)957, atomicLong0.shortValue());
      assertEquals(957.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(957, atomicLong0.intValue());
      assertEquals(957L, atomicLong0.longValue());
      assertEquals(957.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-67), atomicLong0.byteValue());
      assertEquals("957", atomicLong0.toString());
      assertEquals(957L, atomicLong0.get());
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      LinkedHashMap<SQLSyntaxErrorException, MockGregorianCalendar> linkedHashMap0 = new LinkedHashMap<SQLSyntaxErrorException, MockGregorianCalendar>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertEquals("Thu Jan 09 00:00:00 GMT 4640", mockDate0.toString());
      assertNotNull(date0);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(typeArray0[0]);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotSame(class3, class2);
      assertFalse(class3.equals((Object)class2));
      assertNotNull(class3);
      
      Class<ThrowableDeserializer> class4 = ThrowableDeserializer.class;
      boolean boolean3 = TypeUtils.isProxy(class4);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = Double.sum((-184.4749314208996), (-184.4749314208996));
      assertEquals((-368.9498628417992), double0, 0.01);
      
      Double double1 = new Double((-184.4749314208996));
      assertEquals((-184.4749314208996), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-184.4749314208996));
      assertEquals((byte)72, bigDecimal0.byteValue());
      assertEquals((short) (-184), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Random.setNextRandom(105);
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Type type1 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float((-154.07964790391932));
      assertEquals((-154.07965F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double1 = new Double((-154.07964790391932));
      assertEquals((-154.07964790391932), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(bigInteger0);
      
      int int0 = Opcodes.ACC_SUPER;
      assertEquals(32, int0);
      
      double double2 = Double.max(0.0, (-743.81252162));
      assertEquals(0.0, double2, 0.01);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("3&C|u?%px`F");
      assertNotNull(mockNullPointerException0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava/lang/reflect/Type;", "isTrueVolatile", "Ljava/lang/reflect/Type;", (-221759854));
      assertEquals("Ljava/lang/reflect/Type;.isTrueVolatile(Ljava/lang/reflect/Type;)", stackTraceElement0.toString());
      assertEquals("Ljava/lang/reflect/Type;", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("Ljava/lang/reflect/Type;", stackTraceElement0.getFileName());
      assertEquals((-221759854), stackTraceElement0.getLineNumber());
      assertEquals("isTrueVolatile", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      Short short0 = TypeUtils.castToShort(double0);
      assertEquals((short) (-743), (short)short0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotNull(short0);
      
      Class<?> class0 = TypeUtils.loadClass("isTrueVolatile");
      assertNull(class0);
      
      java.util.IdentityHashMap<Rectangle, java.util.Date> identityHashMap0 = new java.util.IdentityHashMap<Rectangle, java.util.Date>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      try { 
        Byte.valueOf("3&C|u?%px`F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3&C|u?%px`F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null, "fastjson.parser.deny");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread.reset();
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread((Runnable) null);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread.dumpStack();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("fastjson.parser.autoTypeAccept");
      assertNotNull(mockNullPointerException0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", (String) null, 37);
      assertNull(stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("fastjson.parser.autoTypeAccept.fastjson.parser.autoTypeAccept(Unknown Source)", stackTraceElement0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement0.getClassName());
      assertEquals(37, stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava/lang/reflect/Type;");
      assertNull(class0);
      
      java.util.IdentityHashMap<Rectangle, java.util.Date> identityHashMap0 = new java.util.IdentityHashMap<Rectangle, java.util.Date>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Locale locale0 = JSON.defaultLocale;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertNotNull(locale1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(locale1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : en
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Locale locale0 = TypeUtils.toLocale("DisableCheckSpecialChar");
      assertEquals("disablecheckspecialchar", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("disablecheckspecialchar", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("yF59z}^\"e,ON");
      assertEquals("yF59z}^\"e,ON", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: yF59z}^\"e,ON", noSuchFieldException0.toString());
      assertNotNull(noSuchFieldException0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("DisableCheckSpecialChar");
      assertEquals("DisableCheckSpecialChar", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: DisableCheckSpecialChar", illegalMonitorStateException0.toString());
      assertNotNull(illegalMonitorStateException0);
      
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<TimeUnit> class2 = TimeUnit.class;
      int int1 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      System.setCurrentTimeMillis(6690600317490212780L);
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("DisableCheckSpecialChar", "yF59z}^\"e,ON", 0);
      assertEquals("java.sql.SQLSyntaxErrorException: DisableCheckSpecialChar", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("yF59z}^\"e,ON", sQLSyntaxErrorException0.getSQLState());
      assertEquals("DisableCheckSpecialChar", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isEnum());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertEquals(17409, class3.getModifiers());
      assertEquals("class java.util.concurrent.TimeUnit", class3.toString());
      assertNotNull(class3);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class<SqlDateDeserializer> class4 = SqlDateDeserializer.class;
      FastjsonASMDeserializer_3_SqlDateDeserializer fastjsonASMDeserializer_3_SqlDateDeserializer0 = (FastjsonASMDeserializer_3_SqlDateDeserializer)parserConfig0.createJavaBeanDeserializer(class4, class0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(12, fastjsonASMDeserializer_3_SqlDateDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(fastjsonASMDeserializer_3_SqlDateDeserializer0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class5 = TypeUtils.loadClass("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder", classLoader1, true);
      assertSame(classLoader1, classLoader0);
      assertNull(class5);
      
      BigDecimal bigDecimal0 = new BigDecimal(6690600317490212780L);
      assertEquals((byte) (-84), bigDecimal0.byteValue());
      assertEquals((short) (-20564), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Class<PropertyNamingStrategy> class6 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bigDecimal0, class6, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("gC=SZ");
      assertEquals("gC=SZ", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread.dumpStack();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("gC=SZ");
      assertNotNull(mockNullPointerException0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) thread0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Thread[TEST_EXECUTION_THREAD_1,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("cb(v\",_mIs9_R");
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      MockThread mockThread0 = new MockThread("syntax error : ");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "syntax error : ");
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("cb(v\",_mIs9_R", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(parserConfig0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte0);
      assertNotNull(byte0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ParserConfig.parserAllFieldToCache(class0, hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(19, hashtable0.size());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertNotNull(type0);
      
      boolean boolean2 = TypeUtils.isNumber("cb(v\",_mIs9_R");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertSame(parameterizedTypeImpl0, type0);
      assertNotNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      int int0 = TypeUtils.getParserFeatures(class2);
      assertEquals(0, int0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Double double0 = new Double(2260.129);
      assertEquals(2260.129, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertNotNull(imageCapabilities1);
      
      ImageCapabilities imageCapabilities2 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities2.isTrueVolatile());
      assertFalse(imageCapabilities2.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities2, imageCapabilities0);
      assertNotSame(imageCapabilities2, imageCapabilities1);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities1));
      assertNotNull(imageCapabilities2);
      
      ImageCapabilities imageCapabilities3 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities3.isTrueVolatile());
      assertFalse(imageCapabilities3.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities0, imageCapabilities3);
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities3, imageCapabilities2);
      assertNotSame(imageCapabilities3, imageCapabilities1);
      assertNotSame(imageCapabilities3, imageCapabilities0);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities2));
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities3.equals((Object)imageCapabilities2));
      assertFalse(imageCapabilities3.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities3.equals((Object)imageCapabilities0));
      assertNotNull(imageCapabilities3);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities0, imageCapabilities3);
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertTrue(boolean1);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities2));
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities3));
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertTrue(boolean1 == boolean0);
      
      Class<Point> class0 = Point.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TypeUtils.clearClassMapping();
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      InternalError internalError0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(internalError0);
  }
}
