/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:47:56 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "x pqQ!?Xm}P\")CG|2!E";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x pqQ!?Xm}P\")CG|2!E");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        spider0.thread((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<script.*?>.*?</script>");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K}94+Lkky^:ZV)T");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      request0.setCharset("");
      Request request1 = request0.setMethod("K}94+Lkky^:ZV)T");
      requestArray0[0] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.extractAndAddRequests((Page) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      int int0 = spider1.getThreadAlive();
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, int0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      phantomJSDownloader0.setThread(2920);
      Spider.Status.values();
      boolean boolean0 = spider3.isExitWhenComplete();
      assertTrue(spider3.isSpawnUrl());
      assertTrue(boolean0);
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor.instance();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      spider0.getScheduler();
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Wqj4zV9j&_P{6Y");
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "illegal encoding ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("illegal encoding ");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("illegal encoding ", (String) null);
      spider0.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "b!.7]4r6e";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider3.get("b!.7]4r6e");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Spider spider3 = spider2.setSpawnUrl(true);
      boolean boolean0 = spider3.isSpawnUrl();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      assertTrue(spider1.isExitWhenComplete());
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.thread(579);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      int int0 = spider4.getThreadAlive();
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jO~X<z@8va?VpPN{");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jO~X<z@8va?VpPN{", "jO~X<z@8va?VpPN{");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      spider1.stop();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jO~X<z@8va?VpPN{";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.extractAndAddRequests((Page) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      Spider spider3 = spider2.setSpawnUrl(true);
      Spider spider4 = spider3.setUUID("us.codecraft.webmagic.Request");
      spider4.startUrls(list0);
      spider4.uuid = "us.codecraft.webmagic.Request";
      spider2.getStartTime();
      // Undeclared exception!
      try { 
        spider0.get("*U/k2$T% Y`l.");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p'G+VrjnV#Px}| L");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "p'G+VrjnV#Px}| L";
      stringArray0[1] = "p'G+VrjnV#Px}| L";
      stringArray0[2] = "p'G+VrjnV#Px}| L";
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      Page page2 = page1.setRawText("b1Le");
      List<Request> list0 = page2.getTargetRequests();
      spider0.startRequest(list0);
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1Q]+fF\"6&pNnL ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("1Q]+fF\"6&pNnL ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      Spider spider2 = spider1.clearPipeline();
      Json json0 = new Json((List<String>) null);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider3 = spider2.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider3.thread((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K}94+Lkky^:ZV)T");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStartTime();
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "jM6t#^_";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setUUID("jM6t#^_");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider0.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(143);
      AtomicInteger atomicInteger0 = new AtomicInteger(143);
      spider0.stat = atomicInteger0;
      phantomJSDownloader0.setThread(2920);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) forkJoinPool0, (-2038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setUUID("jM6t#^_");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider0.setUUID("jM6t#^_");
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider2.setSpiderListeners(linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(143);
      AtomicInteger atomicInteger0 = new AtomicInteger(143);
      spider0.stat = atomicInteger0;
      assertTrue(spider0.isExitWhenComplete());
      
      forkJoinPool0.getRunningThreadCount();
      Request request0 = new Request();
      request0.setUrl("");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider3.getAll((Collection<String>) linkedBlockingDeque0);
      spider4.setExecutorService(forkJoinPool0);
      spider4.getThreadAlive();
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u|.codecraft.webmagic.Requtst");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor.instance();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u|.codecraft.webmagic.Requtst", "jO~X<z@8va?VpPN{");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool.commonPool();
      AtomicInteger atomicInteger0 = new AtomicInteger(143);
      spider0.initComponent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider0.run();
      Page page0 = Page.fail();
      page0.getJson();
      System.setCurrentTimeMillis(143);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      priorityScheduler1.poll(spider1);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("z~*1m&K$^;%:5MwE@A");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1123);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1123);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "z~*1m&K$^;%:5MwE@A";
      stringArray0[1] = "z~*1m&K$^;%:5MwE@A";
      stringArray0[2] = "z~*1m&K$^;%:5MwE@A";
      stringArray0[3] = "z~*1m&K$^;%:5MwE@A";
      stringArray0[4] = "z~*1m&K$^;%:5MwE@A";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider2.setSpiderListeners(linkedList0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(143);
      queueScheduler0.getLeftRequestsCount(spider3);
      AtomicInteger atomicInteger0 = new AtomicInteger(143);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jM6t#^_";
      stringArray0[1] = "jM6t#^_";
      stringArray0[2] = "jM6t#^_";
      stringArray0[3] = "jM6t#^_";
      stringArray0[4] = "jM6t#^_";
      stringArray0[5] = "jM6t#^_";
      spider4.getPageCount();
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor.instance();
      spider0.extractAndAddRequests((Page) null, false);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Wqj4zV9j&_P{6Y");
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.extractAndAddRequests((Page) null, false);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u|.codecraft.webmagic.Requtst");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("jO~X<z@8va?VpPN{");
      Spider spider1 = spider0.setUUID("u|.codecraft.webmagic.Requtst");
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u|.codecraft.webmagic.Requtst", "jO~X<z@8va?VpPN{");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      ForkJoinPool.commonPool();
      ForkJoinPool.commonPool();
      AtomicInteger atomicInteger0 = new AtomicInteger(1000);
      Spider spider3 = spider2.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider3.start();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider4 = spider1.thread(1000);
      spider2.getScheduler();
      spider3.stop();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("BZrN^Azes<'g[E");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("ZDfg(w1", "ZDfg(w1");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      ForkJoinPool forkJoinPool1 = new ForkJoinPool(1000);
      AtomicInteger atomicInteger0 = new AtomicInteger(1000);
      phantomJSDownloader0.setThread(2);
      spider1.setExecutorService(forkJoinPool1);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      QueueScheduler queueScheduler2 = new QueueScheduler();
      spider2.setScheduler(queueScheduler2);
      spider1.run();
      Page page0 = Page.fail();
      Site site0 = Site.me();
      spider0.initComponent();
      site0.setTimeOut(143);
      site0.setSleepTime(5);
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u|.codecraft.webmagic.Requtst");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("jO~X<z@8va?VpPN{");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.setUUID("u|.codecraft.webmagic.Requtst");
      Spider spider2 = spider1.scheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u|.codecraft.webmagic.Requtst", "jO~X<z@8va?VpPN{");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      AtomicInteger atomicInteger0 = new AtomicInteger(488);
      phantomJSDownloader0.setThread(31);
      spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider4 = spider3.setUUID("jO~X<z@8va?VpPN{");
      spider4.getScheduler();
      spider4.stop();
      spider0.sleep(1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Requet");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("BZrN^Azes<'g[E");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider0.scheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jO~X<z@8va?VpPN{", "us.codecraft.webmagic.Requet");
      spider0.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ForkJoinPool.commonPool();
      phantomJSDownloader0.setThread(143);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setUUID("us.codecraft.webmagic.Requet");
      spider0.run();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K}94+Lkky^:ZV)T");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      Request[] requestArray0 = new Request[3];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      Request request0 = new Request(", json=");
      Request request1 = request0.setBinaryContent(false);
      requestArray0[1] = request1;
      Request request2 = request0.setCharset("_cycle_tried_times");
      requestArray0[2] = request2;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u|.codecraft.webmagic.Requtst");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u|.codecraft.webmagic.Requtst", "u|.codecraft.webmagic.Requtst");
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1823);
      AtomicInteger atomicInteger0 = new AtomicInteger(1823);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, "");
      phantomJSDownloader0.setThread(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider3.run();
      spider3.start();
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u|.codecraft.webmagic.Requtst");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u|.codecraft.webmagic.Requtst", "u|.codecraft.webmagic.Requtst");
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1823);
      AtomicInteger atomicInteger0 = new AtomicInteger(1823);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, "");
      phantomJSDownloader0.setThread(0);
      Spider spider3 = spider1.setSpiderListeners(linkedList0);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      Spider spider5 = spider0.setScheduler(queueScheduler0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider2.run();
      spider2.start();
      spider4.setUUID("6^qNn$lXX-\"-");
      spider1.run();
      Page page0 = Page.fail();
      Spider spider6 = Spider.create(simplePageProcessor0);
      spider6.extractAndAddRequests(page0, false);
      spider5.getUUID();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "b!.7]4r6e";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider3.get("b!.7]4r6e");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K}94+Lkky^:ZV)T");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setEmptySleepTime((-2962));
      spider0.stop();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"gib#g0Z&b9n!w)");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "\"gib#g0Z&b9n!w)");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "\"gib#g0Z&b9n!w)");
      Spider spider3 = spider2.setExitWhenComplete(true);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2700);
      ForkJoinPool forkJoinPool1 = new ForkJoinPool(1000);
      AtomicInteger atomicInteger0 = new AtomicInteger(1000);
      Spider spider4 = spider1.clearPipeline();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      spider1.start();
      QueueScheduler queueScheduler2 = new QueueScheduler();
      QueueScheduler queueScheduler3 = new QueueScheduler();
      queueScheduler3.poll(spider1);
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.setUUID("jO~X<z@8va?VpPN{");
      spider4.getScheduler();
      spider3.stop();
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
  }
}
