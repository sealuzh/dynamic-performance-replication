/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:54:27 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      boolean boolean0 = rE2_0.match("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Kaithi");
      int[] intArray0 = rE2_0.findSubmatchIndex("Kaithi");
      assertArrayEquals(new int[] {0, 6}, intArray0);
      assertNotNull(intArray0);
      
      String string0 = RE2.quoteMeta("Kaithi");
      assertEquals("Kaithi", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2(",K.J;");
      int[] intArray0 = rE2_0.findIndex("");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("$VALUES");
      boolean boolean0 = rE2_0.match("$VALUES");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("cr$S y:/?`$");
      int[] intArray0 = rE2_0.findSubmatchIndex("cr$S y:/?`$");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Ug#");
      rE2_0.reset();
      assertEquals("Ug#", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RE2 rE2_0 = RE2.compile("11");
      rE2_0.findUTF8Submatch(byteArray0);
      List<String> list0 = rE2_0.findAll("kF_E]", (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllIndex("", (-4586));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.replaceAll("", "");
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RE2 rE2_0 = RE2.compile("");
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Z$");
      List<int[]> list0 = rE2_0.findAllIndex("Z$", 147);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("u");
      rE2_0.findAllSubmatchIndex("u", (byte)1);
      RE2 rE2_1 = RE2.compilePOSIX("u");
      assertNotSame(rE2_1, rE2_0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2.quoteMeta("RzU\"CWfLR=6");
      RE2 rE2_0 = new RE2("RzU\"CWfLR=6");
      String[] stringArray0 = rE2_0.findSubmatch("RzU\"C\\WfLR=6");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("0`JCyw=UE+>9f*]:X");
      List<String[]> list0 = rE2_0.findAllSubmatch("0`JCyw=UE+>9f*]:X", 2000);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RE2 rE2_0 = RE2.compilePOSIX("Unified_Ideograph");
      rE2_0.toString();
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 32);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("A");
      assertNotNull(rE2_0);
      assertEquals("A", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("A", (byte)0);
      assertNull(list0);
      assertEquals("A", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|");
      assertNotNull(rE2_0);
      assertEquals("|", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("|", "|");
      assertEquals("||", string0);
      assertNotNull(string0);
      assertEquals("|", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("|", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("}TZnh/haJ.&");
      assertNotNull(rE2_0);
      assertEquals("}TZnh/haJ.&", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll(")Gu$G^;;lKQD}O2RY", ")Gu$G^;;lKQD}O2RY");
      assertEquals(")Gu$G^;;lKQD}O2RY", string0);
      assertNotNull(string0);
      assertEquals("}TZnh/haJ.&", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      String string0 = rE2_0.find("can't happen");
      assertEquals("can't happen", string0);
      assertNotNull(string0);
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Z");
      assertNotNull(rE2_0);
      assertEquals("Z", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(list0);
      assertEquals("Z", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("Kaithi");
      assertNotNull(rE2_0);
      assertEquals("Kaithi", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("Kaithi", "Kaithi");
      assertEquals("Kaithi", string0);
      assertNotNull(string0);
      assertEquals("Kaithi", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = new RE2("|");
      assertNotNull(rE2_0);
      assertEquals("|", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-151));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("|", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-3271));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("jM@`Ylf");
      assertNotNull(rE2_0);
      assertEquals("jM@`Ylf", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(byteArray1);
      assertEquals("jM@`Ylf", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("CUL{2<A_Srnl_h");
      assertNotNull(rE2_0);
      assertEquals("CUL{2<A_Srnl_h", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("CUL{2<A_Srnl_h");
      assertTrue(boolean0);
      assertEquals("CUL{2<A_Srnl_h", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertEquals("com.google.re2j.RE2", string0);
      assertNotNull(string0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2("7;b]o;{/\"mm");
      assertNotNull(rE2_0);
      assertEquals("7;b]o;{/\"mm", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("7;b]o;{/\"mm");
      assertEquals("7;b\\]o;\\{/\"mm", string0);
      assertNotNull(string0);
      
      String string1 = rE2_0.find("7;b]o;{/\"mm");
      assertEquals("7;b]o;{/\"mm", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7;b]o;{/\"mm", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("<", "<");
      assertEquals("<<<", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[8];
      intArray0[2] = 0;
      boolean boolean0 = rE2_0.longest;
      assertFalse(boolean0);
      
      String string1 = rE2_0.toString();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("can't happen", "can't happen");
      assertEquals("can't happen", string0);
      assertNotNull(string0);
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2(",K.J;");
      assertNotNull(rE2_0);
      assertEquals(",K.J;", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", (-1193));
      assertNull(list0);
      assertEquals(",K.J;", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", 128);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("L^%]qR", 212, true);
      assertNotNull(rE2_0);
      assertEquals("L^%]qR", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 212);
      assertArrayEquals(new byte[] {(byte) (-71)}, byteArray0);
      assertNull(list0);
      assertEquals("L^%]qR", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 193);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("zzCY%u42JVUoO", 0, false);
      assertNotNull(rE2_0);
      assertEquals("zzCY%u42JVUoO", rE2_0.toString());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 297;
      intArray0[2] = 5;
      boolean boolean0 = rE2_0.match("zzCY%u42JVUoO", (-2), (-2), 5, intArray0, 69687);
      assertArrayEquals(new int[] {5, 297, 5}, intArray0);
      assertFalse(boolean0);
      assertEquals("zzCY%u42JVUoO", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("i");
      assertNotNull(rE2_0);
      assertEquals("i", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("i");
      assertNotNull(stringArray0);
      assertEquals("i", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("|", 212, false);
      assertNotNull(rE2_0);
      assertEquals("|", rE2_0.toString());
      
      RE2 rE2_1 = RE2.compile("|");
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(rE2_1);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("|", rE2_1.toString());
      
      String string0 = rE2_0.toString();
      assertEquals("|", string0);
      assertNotSame(rE2_0, rE2_1);
      assertNotNull(string0);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("|", rE2_0.toString());
      
      int[] intArray0 = new int[10];
      intArray0[2] = 212;
      intArray0[3] = 212;
      intArray0[4] = 0;
      intArray0[9] = 212;
      intArray0[6] = 212;
      intArray0[7] = 212;
      intArray0[4] = 212;
      // Undeclared exception!
      try { 
        rE2_1.match("|", 0, 0, 0, intArray0, 1324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = new RE2("|L6L*v{H+b~g?iU:");
      assertNotNull(rE2_0);
      assertEquals("|L6L*v{H+b~g?iU:", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 2);
      assertNotNull(list0);
      assertEquals("|L6L*v{H+b~g?iU:", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("FF]Lh;pqQ M>y{g");
      assertNotNull(rE2_0);
      assertEquals("FF]Lh;pqQ M>y{g", rE2_0.toString());
      
      int[] intArray0 = new int[4];
      intArray0[3] = 1592;
      intArray0[1] = 857;
      boolean boolean0 = rE2_0.match("FF]Lh;pqQ M>y{g", 1592, 857, 1592, intArray0, 680);
      assertArrayEquals(new int[] {0, 857, 0, 1592}, intArray0);
      assertFalse(boolean0);
      assertEquals("FF]Lh;pqQ M>y{g", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("|");
      assertNotNull(rE2_0);
      assertEquals("|", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals("|", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      byteArray0[1] = (byte)2;
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray1 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = new RE2("y");
      assertNotNull(rE2_0);
      assertEquals("y", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-71);
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte) (-71)}, byteArray0);
      assertFalse(boolean0);
      assertEquals("y", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)106;
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)106}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = new RE2("x=j|");
      assertNotNull(rE2_0);
      assertEquals("x=j|", rE2_0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      String string0 = rE2_0.replaceAll("x=j|", "x=j|");
      assertEquals("x=j||x=j|", string0);
      assertNotNull(string0);
      assertEquals("x=j|", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatch((String) null, 228);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("m|", 212, true);
      assertNotNull(rE2_0);
      assertEquals("m|", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("m|", 2207);
      assertNotNull(list0);
      assertEquals("m|", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      StringBuilder stringBuilder0 = new StringBuilder(4);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("|", 196, false);
      assertNotNull(rE2_0);
      assertEquals("|", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("|");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals("|", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("|", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("|", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 196);
      assertNotNull(list0);
      assertEquals("|", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = RE2.match("Kv>{<", "|");
      assertFalse(boolean0);
      
      int int1 = 2683;
      boolean boolean1 = rE2_0.match("Ojd'6tLKj8n='$`", 0, 2683, 2683, (int[]) null, 0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("|", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean2 = rE2_0.prefixComplete;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.match("Kv>{<", 4, 2683, 2683, intArray0, 2683);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
