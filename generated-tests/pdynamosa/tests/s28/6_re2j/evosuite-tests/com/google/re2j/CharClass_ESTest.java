/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:29:05 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 53;
      intArray0[1] = (-199);
      intArray0[2] = 127984;
      intArray0[3] = (-895);
      intArray0[4] = 0;
      intArray0[5] = (-1413);
      intArray0[6] = (-2529);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {53, (-199), 127984, (-895), 0, (-1413), (-2529)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 53;
      intArray2[1] = 53;
      intArray2[2] = 127984;
      intArray2[3] = 65;
      intArray2[4] = (-199);
      intArray2[5] = (-199);
      intArray2[6] = (-2529);
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {53, (-199), 127984, (-895), 52, (-1413), (-2529)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertEquals(7, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 0);
      assertArrayEquals(new int[] {53, (-199), 127984, (-895), 52, (-1413), (-2529)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertEquals(7, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 119;
      intArray0[1] = (-896);
      intArray0[2] = 7935;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {119, (-896), 7935}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(610, (-68));
      assertArrayEquals(new int[] {119, (-896), 7935}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(3, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {119, (-896), 7935}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(3, intArray0.length);
      
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {119, (-896), 1114111}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertArrayEquals(new int[] {119, (-896), 1114111}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass5 = charClass1.appendTableWithSign(intArray1, (-753));
      assertArrayEquals(new int[] {119, (-896), 1114111}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass5.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-5309));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3099);
      intArray0[1] = 28;
      intArray0[2] = 65;
      int int0 = (-384);
      intArray0[3] = (-384);
      intArray0[4] = 667;
      intArray0[5] = (-8462);
      intArray0[6] = (-2881);
      intArray0[7] = (-458);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-3099), 28, 65, (-384), 667, (-8462), (-2881), (-458)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = 8496;
      intArray0[1] = 8496;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(14, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(34, 34);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(14, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(14, intArray0.length);
      
      String string0 = charClass2.toString();
      assertEquals("[0x0 0x22 0x2130]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(14, intArray0.length);
      
      CharClass charClass3 = charClass2.appendLiteral(8496, 34);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(14, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-749);
      intArray0[1] = (-749);
      intArray0[2] = (-5098);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-5098);
      intArray1[1] = (-5098);
      intArray1[2] = (-5098);
      intArray1[3] = (-5098);
      intArray1[4] = (-5098);
      intArray1[5] = (-5098);
      CharClass charClass1 = new CharClass(intArray1);
      assertArrayEquals(new int[] {(-5098), (-5098), (-5098), (-5098), (-5098), (-5098)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertEquals(6, intArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      String string0 = CharClass.charClassToString(intArray0, (-1421));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-749), (-749), (-5098), 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(string0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(6, intArray0.length);
      
      String string1 = CharClass.charClassToString(intArray2, (-749));
      assertEquals("[]", string1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(0, intArray2.length);
      
      String string2 = charClass1.toString();
      assertEquals("[0xffffec16 0xffffec16 0xffffec16]", string2);
      assertArrayEquals(new int[] {(-5098), (-5098), (-5098), (-5098), (-5098), (-5098)}, intArray1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(string2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(charClass1, charClass0);
      assertEquals(6, intArray1.length);
      
      CharClass charClass2 = charClass1.appendClass(intArray1);
      assertArrayEquals(new int[] {(-5098), (-5098), (-5098), (-5098), (-5098), (-5098)}, intArray1);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(263, (-2527));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange((-946), (-2527));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-2799));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int0 = (-223);
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = (-69);
      String string0 = CharClass.charClassToString(intArray0, (-69));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(263, (-2527));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange((-946), (-2527));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-2799));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111, (-946), (-2527)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      charClass3.appendFoldedRange((-2799), 1259);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 3648;
      intArray0[2] = 3814;
      intArray0[3] = (-1697);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {1, 3648, 3814, (-1697)}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {1, 3648, 3814, (-1697)}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2071;
      intArray0[1] = 64;
      intArray0[2] = (-2320);
      intArray0[3] = 40;
      intArray0[4] = 36;
      intArray0[5] = 1853;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {2071, 64, (-2320), 40, 36, 1853}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-5557);
      intArray0[1] = (-5557);
      int int2 = 0;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-5557), 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 3854;
      CharClass charClass1 = charClass0.appendRange(3854, 3854);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3854;
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 64;
      int int1 = 4257;
      intArray0[2] = 4257;
      int int2 = (-517);
      intArray0[3] = (-517);
      int int3 = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      int int4 = 426;
      intArray0[6] = 426;
      intArray0[7] = 93;
      int int5 = (-1196);
      intArray0[8] = (-1196);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 64, 4257, (-517), 1, 0, 426, 93, (-1196)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(1, 4257);
      assertArrayEquals(new int[] {0, 64, 4257, (-517), 1, 0, 426, 93, (-1196)}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1554);
      intArray0[2] = 68466;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2528);
      int int1 = 3612;
      intArray0[5] = 3612;
      int int2 = 0;
      intArray0[6] = 0;
      intArray0[7] = 65047;
      intArray0[8] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-1554), 68466, 0, (-2528), 3612, 0, 65047, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-371));
      assertArrayEquals(new int[] {0, (-1554), 68466, 0, (-2528), 3612, 0, 65047, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(9, intArray0.length);
      
      int[][] intArray1 = new int[0][4];
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, (-1554), 68466, 0, (-2528), 3612, 0, 65047, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-4819);
      intArray0[1] = 173;
      intArray0[2] = 829;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 173);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[0] = (-1867);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2047;
      intArray0[1] = 6512;
      int int0 = (-3698);
      intArray0[2] = (-3698);
      intArray0[3] = 1576;
      int int1 = 66640;
      intArray0[4] = 66640;
      int int2 = 10780;
      CharClass charClass1 = charClass0.appendFoldedRange((-3698), 66640);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[5] = 10780;
      intArray0[6] = 2955;
      intArray0[7] = 0;
      int int3 = (-347);
      intArray0[8] = (-347);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(290, 290);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 290;
      intArray1[1] = 1242;
      intArray1[2] = 290;
      intArray1[3] = 290;
      intArray1[4] = 290;
      intArray1[5] = 290;
      intArray1[6] = 290;
      intArray1[7] = 290;
      CharClass charClass4 = charClass2.appendClass(intArray1);
      assertArrayEquals(new int[] {290, 1242, 290, 290, 290, 290, 290, 290}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertEquals(8, intArray1.length);
      
      CharClass charClass5 = charClass4.negateClass();
      assertArrayEquals(new int[] {290, 1242, 290, 290, 290, 290, 290, 290}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertEquals(8, intArray1.length);
      
      CharClass charClass6 = charClass5.appendClassWithSign(intArray1, 290);
      assertArrayEquals(new int[] {290, 1242, 290, 290, 290, 290, 290, 290}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass6);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertEquals(8, intArray1.length);
      
      CharClass charClass7 = charClass5.appendRange(290, 1242);
      assertArrayEquals(new int[] {290, 1242, 290, 290, 290, 290, 290, 290}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertEquals(8, intArray1.length);
      
      CharClass charClass8 = charClass2.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {290, 1242, 290, 290, 290, 290, 290, 290}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray1.length);
      
      int[][] intArray2 = new int[6][3];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 290;
      intArray3[1] = (-932);
      intArray3[2] = 1242;
      intArray2[5] = intArray3;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray2, 290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][1];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = (-22);
      intArray1[2] = 74864;
      intArray1[3] = 3141;
      intArray1[4] = (-1643);
      intArray1[5] = 1371;
      intArray1[6] = 2073;
      intArray1[7] = (-432);
      intArray1[8] = (-573);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-432);
      intArray3[1] = (-432);
      intArray3[2] = (-573);
      intArray3[3] = 1077;
      intArray3[4] = 2073;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 2772);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass0.appendFoldedRange(2772, 2772);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass5 = charClass4.negateClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertEquals(2, intArray0.length);
      
      String string0 = charClass3.toString();
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, (-1328));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3206;
      intArray0[1] = (-1252);
      intArray0[2] = (-1051);
      intArray0[3] = (-2267);
      intArray0[4] = 708;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3206, (-1252), (-1051), (-2267), 708}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1252);
      intArray2[1] = (-2267);
      intArray2[2] = (-2267);
      intArray2[3] = 3206;
      intArray2[4] = (-1252);
      intArray2[5] = 3206;
      intArray2[6] = (-1051);
      intArray2[7] = 708;
      intArray2[8] = 3206;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {3206, (-1252), (-1051), (-2267), 1114111}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 293;
      intArray0[1] = (-191);
      int int0 = (-585);
      intArray0[2] = (-585);
      intArray0[3] = 42240;
      intArray0[4] = (-2243);
      intArray0[5] = (-515);
      intArray0[6] = (-1018);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {293, (-191), (-585), 42240, (-2243), (-515), (-1018)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3275;
      intArray0[1] = 91;
      intArray0[2] = 1325;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3275, 91, 1325}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(263, (-2527));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange((-946), (-2527));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-2799));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[][] intArray0 = new int[5][8];
      int[] intArray1 = new int[7];
      intArray1[0] = 128576;
      intArray1[1] = 471;
      intArray1[2] = (-1232);
      intArray1[3] = 66639;
      intArray1[4] = (-582);
      intArray1[5] = 127776;
      intArray1[6] = 1652;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 66639;
      intArray2[1] = 471;
      intArray2[2] = (-582);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1652;
      intArray3[1] = (-925);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 1652;
      intArray4[1] = 471;
      intArray4[2] = 471;
      intArray4[3] = 471;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = (-1232);
      intArray5[1] = (-925);
      intArray5[2] = 471;
      intArray5[3] = (-925);
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[9][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray1[8] = intArray2;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8479;
      intArray0[1] = 3077;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass3.appendRange(768, 0);
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-508);
      intArray0[1] = 66639;
      intArray0[2] = 66639;
      intArray0[3] = 1114112;
      intArray0[4] = 2716;
      intArray0[5] = 43453;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {(-508), 66639, 66639, 1114112, 2716, 43453}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-795);
      CharClass charClass1 = charClass0.appendLiteral(66639, (-795));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[1] = (-130);
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {(-795), (-130)}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2047;
      intArray0[1] = 2047;
      intArray0[2] = 2047;
      intArray0[3] = 1576;
      intArray0[4] = 66640;
      CharClass charClass1 = charClass0.appendFoldedRange((-3698), 66640);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[5] = 10780;
      intArray0[6] = 2955;
      intArray0[7] = 0;
      intArray0[3] = (-347);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-4626), (-1605));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[0][5];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[3];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      int int0 = 65;
      int[][] intArray1 = new int[5][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8479;
      int int0 = 3077;
      intArray0[1] = 3077;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {8479, 3077}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int int0 = (-2);
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass4 = charClass0.appendTableWithSign(intArray1, 620);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 0;
      intArray6[5] = 0;
      intArray6[6] = 0;
      intArray6[7] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray7[0] = 0;
      intArray7[1] = 0;
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray7[5] = 0;
      intArray7[6] = 0;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray8[2] = 0;
      intArray8[3] = 0;
      intArray8[4] = 119638;
      intArray8[5] = 0;
      intArray8[6] = 0;
      intArray8[7] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[1];
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray5));
      
      intArray9[0] = 0;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 755);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(3854, 3854);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3854;
      intArray0[1] = 620;
      intArray0[2] = 3077;
      intArray0[3] = 3077;
      intArray0[4] = 3854;
      intArray0[5] = (-1179);
      intArray0[6] = 3854;
      CharClass charClass2 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3854, 620, 3077, 3077, 3854, (-1179), 3854}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      assertEquals(7, intArray0.length);
      
      CharClass charClass3 = charClass1.appendRange(3854, (-842));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-842);
      intArray1[1] = 0;
      CharClass charClass5 = charClass4.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {(-842), 0}, intArray1);
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass5);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      
      CharClass charClass6 = charClass3.appendRange((-71), 3077);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 417;
      intArray0[1] = (-1528);
      intArray0[2] = 8454;
      intArray0[3] = 12686;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange((-1528), (-1528));
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(65, 91);
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[8];
      intArray1[0] = 91;
      intArray1[1] = 91;
      intArray1[2] = 65;
      intArray1[3] = 65;
      intArray1[4] = 65;
      intArray1[5] = 65;
      intArray1[6] = 65;
      intArray1[7] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 65;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 65;
      intArray3[1] = 91;
      intArray3[2] = 65;
      intArray3[3] = 91;
      intArray3[4] = 65;
      intArray3[5] = 65;
      intArray3[6] = 91;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[3] = 53;
      intArray0[1] = (-168);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 2722);
      charClass2.appendFoldedClass(intArray0);
      int[] intArray1 = charClass2.toArray();
      assertEquals(18, intArray1.length);
      
      charClass1.appendFoldedRange(3633, (-168));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8479;
      intArray0[1] = 3077;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(0, 0);
      CharClass charClass2 = charClass1.cleanClass();
      charClass2.appendNegatedClass(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 2737;
      intArray1[2] = 167;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[2];
      int int0 = (-1863);
      intArray1[0] = (-1863);
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, (-1863));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-314);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-314), 1756);
      charClass1.cleanClass();
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1209;
      intArray0[1] = 3040;
      intArray0[2] = 0;
      intArray0[3] = (-766);
      intArray0[4] = 2005;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(981, 3040);
      CharClass charClass2 = charClass1.appendRange(3040, 187);
      charClass2.appendFoldedRange(3795, 0);
      assertArrayEquals(new int[] {1209, 3040, 0, (-766), 2005, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1593;
      intArray0[1] = (-917);
      intArray0[2] = (-710);
      intArray0[3] = 160;
      intArray0[4] = 0;
      intArray0[5] = 9313;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[1];
      intArray1[0] = 10780;
      CharClass charClass0 = new CharClass(intArray1);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int int0 = 0;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[7];
      intArray1[0] = 2954;
      intArray1[1] = 0;
      intArray1[2] = 2954;
      intArray1[3] = 0;
      intArray1[4] = 2954;
      intArray1[5] = 0;
      intArray1[6] = 0;
      CharClass charClass0 = new CharClass(intArray1);
      CharClass charClass1 = charClass0.appendLiteral(8621, 2954);
      charClass1.negateClass();
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray1, 2954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-767);
      int int0 = 65313;
      intArray0[1] = 65313;
      intArray0[2] = (-5098);
      int int1 = (-242);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3209);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8479;
      intArray0[1] = 8479;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange(6592, 6592);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      charClass2.appendNegatedClass(intArray0);
      // Undeclared exception!
      charClass1.appendFoldedRange(1945, 1114111);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-749);
      intArray0[1] = 65313;
      intArray0[2] = (-5098);
      int int0 = (-242);
      int[] intArray1 = new int[2];
      intArray1[0] = (-242);
      intArray1[1] = (-749);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 3209);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2769);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      String string0 = CharClass.charClassToString((int[]) null, (-2764));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(290, 290);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 290;
      intArray1[1] = 1242;
      intArray1[2] = 290;
      intArray1[3] = 290;
      intArray1[4] = 290;
      intArray1[5] = 290;
      intArray1[6] = 290;
      intArray1[7] = 290;
      CharClass charClass4 = charClass2.appendClass(intArray1);
      CharClass charClass5 = charClass4.negateClass();
      charClass5.appendClassWithSign(intArray1, 290);
      charClass5.appendRange(290, 1242);
      CharClass charClass6 = charClass3.cleanClass();
      charClass3.appendClass(intArray1);
      charClass6.negateClass();
      CharClass charClass7 = charClass1.appendRange(290, 290);
      CharClass charClass8 = charClass7.appendLiteral((-1744), 0);
      CharClass charClass9 = charClass8.appendNegatedClass(intArray0);
      charClass2.appendNegatedClass(intArray1);
      // Undeclared exception!
      charClass9.appendFoldedRange(290, 1720);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 979;
      intArray0[2] = 2883;
      intArray0[3] = 2229;
      intArray0[4] = 4194;
      intArray0[5] = 506;
      intArray0[6] = (-2);
      intArray0[7] = (-120);
      intArray0[8] = 1622;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 1114111;
      intArray0[1] = 498;
      intArray0[2] = 1114111;
      intArray0[3] = 2625;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      charClass1.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3275;
      intArray0[1] = 91;
      intArray0[2] = 1325;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(3275, 3275);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, (-703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 302;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass.charClassToString(intArray0, (-127));
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      CharClass charClass1 = new CharClass(intArray0);
      charClass1.appendLiteral(0, 91);
      CharClass.charClassToString(intArray0, 0);
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
  }
}
