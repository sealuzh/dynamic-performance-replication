/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:50:52 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pipe pipe0 = new Pipe(1937L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.write(realBufferedSource0.buffer);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha1(sink0);
      HashingSink.sha512(sink0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=da39a3ee5e6b4b0d3255bfef95601890afd80709]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      boolean boolean0 = byteString0.equals(byteArray0);
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString.decodeBase64("source == null");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString0.internalArray();
      byteString0.hashCode();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("source exhausted prematurely");
      // Undeclared exception!
      try { 
        byteString0.substring(126);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.EMPTY.indexOf(byteArray0, (int) (byte) (-107));
      ByteString byteString1 = ByteString.encodeUtf8("");
      byteString1.EMPTY.hex();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring(0, (int) (byte) (-107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=dd]", string0);
      
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString.decodeHex("");
      byteString0.size();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("=>ElL]I%G9iXo)=]");
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byteString1.asByteBuffer();
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = null;
      try {
        deflater0 = new Deflater(1114111, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.EMPTY.toString();
      byteString0.sha256();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[size=0]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("string == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      String string0 = "deadline reached";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("deadline reached");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex(")&9]B)$gp8Wor", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.md5();
      byteString2.EMPTY.toString();
      Object object0 = new Object();
      byteString0.equals(object0);
      ByteString byteString3 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was 0x");
      boolean boolean0 = byteString0.endsWith(byteString2);
      assertFalse(boolean0);
      
      boolean boolean1 = byteString1.endsWith(byteArray0);
      byteString2.sha1();
      assertFalse(byteString1.equals((Object)byteString3));
      
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteString byteString4 = ByteString.encodeString("in == null", charset0);
      byteString4.internalArray();
      Object object1 = new Object();
      boolean boolean2 = byteString4.equals(object1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeBase64("data");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.md5();
      byteString2.toAsciiUppercase();
      byteString2.EMPTY.toString();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString3 = realBufferedSource0.readByteString((long) 0);
      ByteString byteString4 = byteString3.toAsciiLowercase();
      assertSame(byteString4, byteString3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pipe pipe0 = new Pipe(1655L);
      pipe0.sourceClosed = false;
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha256(source0);
      ByteString byteString0 = hashingSource0.hash();
      Object object0 = new Object();
      byteString0.equals(object0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-1);
      byteString0.indexOf(byteArray0, 0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-1));
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = byteString1.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int1);
      
      byteString0.indexOf(byteString1, 55);
      boolean boolean0 = byteString1.startsWith(byteString0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString2.sha1();
      byteString2.utf8 = "";
      boolean boolean1 = byteString2.rangeEquals(774, byteArray0, (int) (byte) (-1), (-1734));
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString4 = byteString3.sha256();
      int int2 = byteString4.EMPTY.lastIndexOf(byteArray0, 255);
      assertTrue(int2 == int0);
      
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString2.equals(byteString3);
      assertSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals("?/Ot*>");
      byteString0.utf8 = "?/Ot*>";
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.md5();
      byteString1.hex();
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString2.indexOf(byteString1, 178);
      byteString0.startsWith(byteArray0);
      byteString2.sha1();
      byteString1.sha256();
      byteString2.sha512();
      // Undeclared exception!
      try { 
        byteString2.getByte(285);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 285
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      boolean boolean1 = byteString0.equals("");
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.EMPTY.indexOf(byteArray0, (int) (byte) (-107));
      byteString0.EMPTY.indexOf(byteArray0);
      byteString0.base64();
      byteString0.EMPTY.md5();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-107), (int) (byte) (-107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      byteString0.indexOf(byteArray0);
      ByteString byteString2 = byteString0.md5();
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertTrue(boolean1);
      
      String string0 = byteString0.utf8;
      ByteString byteString3 = byteString2.toAsciiLowercase();
      int int0 = byteString2.indexOf(byteString1, (-589));
      assertEquals(0, int0);
      
      boolean boolean2 = byteString2.startsWith(byteArray0);
      assertFalse(boolean2 == boolean0);
      assertNotSame(byteString2, byteString3);
      assertFalse(byteString2.equals((Object)byteString3));
      
      byteString0.sha1();
      byteString0.sha256();
      String string1 = byteString0.utf8();
      assertNotNull(string1);
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-74);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      boolean boolean1 = byteString0.equals(inflaterSource0);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[0];
      byteString0.EMPTY.startsWith(byteArray0);
      byteString0.equals("");
      ByteString byteString1 = byteString0.sha256();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      ByteString byteString1 = ByteString.encodeUtf8("");
      byteString1.EMPTY.hex();
      byteString1.EMPTY.endsWith(byteArray0);
      byteString0.base64();
      byteString0.EMPTY.md5();
      byte[] byteArray1 = new byte[7];
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.hashCode = 0;
      int int0 = byteString0.indexOf(byteArray0, (-940));
      int int1 = byteString1.lastIndexOf(byteString0);
      assertTrue(int1 == int0);
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = byteString0.equals(byteString1);
      assertTrue(boolean1);
      
      byteString0.sha256();
      int int2 = ByteString.codePointIndexToCharIndex("okio.Timeout", (-940));
      assertEquals(12, int2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.EMPTY.toString();
      int int1 = byteString0.EMPTY.lastIndexOf(byteString1, 114);
      assertEquals(0, int1);
      
      byteString1.indexOf(byteArray0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("O_K@IF{zCys7td>lo");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      byteString1.write(bufferedOutputStream0);
      int int2 = byteString0.lastIndexOf(byteString1);
      assertTrue(int2 == int0);
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      boolean boolean1 = byteString0.equals(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byteString0.sha256();
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(773);
      byteString0.write(byteArrayOutputStream0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = ">mKcSHA256";
      // Undeclared exception!
      try { 
        ByteString.decodeHex(">mKcSHA256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: >
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.hashCode = 0;
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring(25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      String string0 = byteString0.toString();
      assertEquals("[hex=dedddddddddddd]", string0);
      
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("out == null");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.EMPTY.toString();
      int int0 = byteString1.indexOf(byteArray0, 0);
      int int1 = byteString0.lastIndexOf(byteString1);
      assertEquals(0, int1);
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      boolean boolean1 = byteString0.equals(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ByteString byteString2 = byteString1.sha256();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString3 = options0.get(0);
      int int2 = byteString1.compareTo(byteString3);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)97;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toByteArray();
      ByteString byteString1 = byteString0.sha256();
      byteString0.base64Url();
      byteString0.compareTo(byteString1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte)69;
      byteArray1[4] = (byte)97;
      boolean boolean0 = byteString0.rangeEquals(1, byteArray1, 117, 15);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pipe pipe0 = new Pipe(1655L);
      pipe0.sourceClosed = false;
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha256(source0);
      ByteString byteString0 = hashingSource0.hash();
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-1);
      byteString0.indexOf(byteArray0, 0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-1));
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.indexOf(byteString1, 78);
      boolean boolean1 = byteString1.startsWith(byteString0);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString2.sha1();
      byteString2.utf8 = "";
      boolean boolean2 = byteString2.rangeEquals(774, byteArray0, (int) (byte) (-1), (-1734));
      assertFalse(boolean2);
      
      byteString3.sha256();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.sha512();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      int int2 = byteString1.lastIndexOf(byteArray1);
      assertTrue(int2 == int0);
      assertSame(byteString1, byteString2);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.substring(0);
      byteString1.toString();
      byteString1.asByteBuffer();
      byteString2.equals(byteArray0);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString0.sha256();
      ByteString byteString4 = ByteString.decodeBase64("");
      assertNotSame(byteString4, byteString3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.substring(1);
      byteString2.toString();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.asByteBuffer();
      byteString0.equals(byteArray0);
      ByteString byteString4 = new ByteString(byteArray0);
      byteString2.sha256();
      ByteString.decodeBase64("L");
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      ByteString byteString1 = ByteString.encodeUtf8("zVs2d3j>8O%`>8=Q");
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString1.sha1();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteString byteString4 = ByteString.encodeString("zVs2d3j>8O%`>8=Q", charset0);
      byte[] byteArray0 = byteString3.internalArray();
      byteString2.equals("");
      int int0 = byteString2.indexOf(byteArray0);
      assertNotSame(byteString2, byteString1);
      assertTrue(byteString1.equals((Object)byteString4));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(">mcSHA25");
      byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteString.encodeString(">mcSHA25", charset0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      boolean boolean1 = byteString0.equals(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ByteString byteString2 = byteString0.sha256();
      int int0 = byteString1.compareTo(byteString2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.toString();
      byteString1.indexOf(byteString0);
      ByteString byteString2 = byteString1.substring(0);
      byteString2.toString();
      ByteString.decodeBase64("[hex=00]");
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-74);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.EMPTY.hmacSha256(byteString0);
      byteString1.toByteArray();
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals("_p{{kL=QbI");
      byteString0.utf8 = "_p{{kL=QbI";
      int int0 = byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.md5();
      String string0 = byteString1.hex();
      assertEquals("dddde33eeddf5fddddf5dd3e5de3dfdd", string0);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString2.utf8 = "9795c3d4c9518f99651865d487c27195";
      int int1 = byteString2.indexOf(byteString1, 178);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ByteString byteString3 = byteString1.sha256();
      byteString2.endsWith(byteString1);
      byteString3.hmacSha512(byteString0);
      assertNotSame(byteString0, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString1.toString();
      assertEquals("[size=0]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      boolean boolean1 = byteString1.equals("[size=0]");
      assertFalse(boolean1 == boolean0);
      
      ByteString byteString2 = byteString0.sha256();
      int int0 = byteString2.compareTo(byteString1);
      assertEquals(1, int0);
      
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.md5();
      assertTrue(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha1(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.utf8 = "";
      String string0 = byteString0.toString();
      assertEquals("[text=]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)107;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.sha1();
      byteString0.toString();
      byteString1.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[hex=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: [hex=
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (byte) (-57));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -57
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.EMPTY.toString();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      MockPrintStream mockPrintStream0 = new MockPrintStream("+O");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byteString0.write(dataOutputStream0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.hmacSha1(byteString1);
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, 0L, (-532L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-532
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte)41;
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" (to read code point prefixed 0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.read(byteArrayInputStream0, 1);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.sha1();
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)104;
      ByteString byteString1 = new ByteString(byteArray1);
      ByteString byteString2 = new ByteString(byteArray1);
      boolean boolean0 = byteString2.equals(byteString0);
      assertFalse(boolean0);
      assertTrue(byteString2.equals((Object)byteString1));
  }
}
