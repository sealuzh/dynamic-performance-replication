/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:48:08 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("D[4JxXGA8", "'H>U\u00069+JW'ERn");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse(httpUrl0, "&5be%7b");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("&5be%7b", "%0a");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/&5be%7b?%265be%7b=%0a", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("L#XTc*.[G%x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("kB&'G^}Q%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: kB&'G^}Q%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("Coc9Ws");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        HttpUrl.getChecked("VS350np");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for VS350np
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        HttpUrl.getChecked("H.8FbqV4FhcAZ-Y+o");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for H.8FbqV4FhcAZ-Y+o
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        HttpUrl.getChecked("HmacSHA256");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for HmacSHA256
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        HttpUrl.getChecked("isize");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for isize
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("Z`CV1rNp*mc");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        HttpUrl.getChecked("zfcvvHo<`");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for zfcvvHo<`
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("gbUQc+!vf B");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("https:ftp.somefakebutwellformedurl.org/..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"'<>#");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.addEncodedPathSegments("\"GtQY_f>wpt/");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("Rh?Aof");
      assertNotNull(httpUrl1);
      
      int int0 = httpUrl1.querySize();
      assertEquals(1, int0);
      assertEquals("http://foo.bar/Rh?Aof", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("fb{[^x$k-W8D7'@/_7?");
      assertEquals("http://foo.bar/fb%7B[%5Ex$k-W8D7'@/_7?", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z");
      HttpUrl httpUrl1 = httpUrl0.resolve("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z");
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z", httpUrl1.toString());
      assertEquals(7, httpUrl0.pathSize());
      assertEquals(443, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("INVALID_HOST", 0, 6, false);
      assertEquals("INVALI", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encodedPathSegment == null");
      URL uRL0 = mockFile0.toURL();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertEquals(4, httpUrl1.pathSize());
      assertEquals("https://some/fake/but/wellformed/url", httpUrl1.toString());
      assertEquals(443, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("XlSrp;?jBp", 6, 6, "XlSrp;?jBp", false, false, false, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(1911);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("}!$0,QG`]+D", 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 48, 48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.percentDecode((Buffer) null, "MD5", 121, (-1012), true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "", 2802, 1006, false);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(1412);
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "file:/", (-653), 1412, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, (-2255), (-2255), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("}!$0,QG`]+D", 0, 0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", 54, 128, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "{=FLaB'juWcc");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((byte)51);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.pathSegmentsToString(stringBuilder0, linkedList0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("source == this", "source == this", 122, "", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URI uRI0 = MockURI.URI("G1s");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals((Object) null);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals(httpUrl_Builder0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('#');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('2');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "Drfo", 1227, 116, "", true, false, true, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, (String) null, 0, 0, "V0$Kcc1Ha-", false, false, false, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      HttpUrl.canonicalize(buffer0, (String) null, 43, 43, (String) null, true, false, true, false);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "TQsL", (-1785), (-1785), " content=", true, true, true, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("D[4JxXGA8", "D[4JxXGA8", false, true, true, true);
      assertEquals("%44%5B%34%4A%78%58%47%41%38", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("oFoVo\".P%ZW", "https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z", true, false, false, true);
      assertEquals("%6FF%6FV%6F\"%2EP%ZW", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("timeout", "", false, false, false, false);
      assertEquals("timeout", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("", "[size", false, false, true, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 0, 0, "vlsm", false, false, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("^`{|}", (-706), (-706), "^`{|}", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", 2847, 11, "", true, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z");
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null);
      URI uRI1 = MockURI.resolve(uRI0, "https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("", (-6), 82);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((Buffer) null, (String) null, (-1660), 103, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, (-1), (-2739), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@i]+5");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("P/wBt]Q]", "lDzG}*YW", 0, " x6!C", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((Buffer) null, "content == null", (-2136), 460, "content == null", true, true, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("vH`&w[u($", 46, 46, (String) null, false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"'<>#");
      assertNotNull(httpUrl_Builder0);
      
      String string0 = httpUrl_Builder0.toString();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/%22'%3C%3E#", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("dCXG^kJNdE");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("]");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("/I0");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("sjjD:Q");
      assertEquals(80, httpUrl0.port());
      assertEquals(2, httpUrl0.querySize());
      assertNull(httpUrl_Builder0);
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:ftp.somefakebutwellformedurl.org/fooexample", "https:ftp.somefakebutwellformedurl.org/fooexample", "https:ftp.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedFragment();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://ftp.somefakebutwellformedurl.org/fooexample:https:ftp.somefakebutwellformedurl.org/fooexample#https:ftp.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(2, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      httpUrl0.encodedPathSegments();
      assertEquals(2, httpUrl0.querySize());
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPassword();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:///tmp/foo.bar");
      String string0 = httpUrl0.encodedUsername();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", string0);
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.toString();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("FHCRC", "\n");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("\u2026");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\u2026");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("I=x9j%%9z)|B4&pWr");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("hStp:s:mjn&%22g[%e%3c;?<ccesD");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("__,%h#O");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("Z`CV1rNp*mc", 7, 117);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("GMT", (-365), (-365));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("}!$0,QG`]+D");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("I=x9j%%9z)|B4&pWr", false);
      assertEquals("I=x9j%%9z)|B4&pWr", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b%P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b%P
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("jQ9+vI");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(4196);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "+", (URLStreamHandler) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals("http://www.somefakebutwellformedurl.org/+", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"'<>#");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::k,r&i6pZ> #\"e@r:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::k,r&i6pZ> #\"e@r:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("e:2<7uniWOR[k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: e:2<7uniWOR[k
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        HttpUrl.getChecked("k-Lw&#)bs~^");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for k-Lw&#)bs~^
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("AVm3");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        HttpUrl.getChecked("}!$0,QG`]+D");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for }!$0,QG`]+D
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("::");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("#$Y+[");
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("\n");
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"'<>#");
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(70);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org:70/%22'%3C%3E#", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment = "%20%22':;%3c=%3e@[]%5e%60%7b%7d%7c%2f%5c%3f%23";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https:ftp.somefakebutwellformedurl.org/..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("\n", "\n");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter(",djU+k[mC0", "file:/");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("file:/", "'H>U\u00069+JW'ERn");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("file:/", "D[4JxXGA8");
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("9", "8");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllEncodedQueryParameters("8");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("Tp", "name == null");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("&5be%7b", "%0a");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("$SN+w", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("CN,caVs2.j");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/...");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath(".%7deg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: .%7deg
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse((HttpUrl) null, "https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, ".}eg");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1616), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-2188), "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(255, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-834), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(65551);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 65551
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-1387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1387
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("-9223372036854775808");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[hAtp:z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [hAtp:z
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.scheme("https");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("http");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: data
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("aNNv");
      boolean boolean0 = httpUrl1.equals(httpUrl0);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/aNNv", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertTrue(boolean0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:s:mjn&%22g[%3e%3c;e#success");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:s:mjn&%22g[%3e%3c;e#success
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        HttpUrl.getChecked("hStps:s:mjn&%22g[%e%3c;?#succesD");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for hStps:s:mjn&%22g[%e%3c;?#succesD
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("https:s:mjn&%22g[%3e%3c;?#success");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:ftp.somefakebutwellformedurl.org/fooexample", "https:ftp.somefakebutwellformedurl.org/fooexample", "https:ftp.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.newBuilder();
      assertEquals("https://ftp.somefakebutwellformedurl.org/fooexample:https:ftp.somefakebutwellformedurl.org/fooexample#https:ftp.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(2, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-912));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1880689334));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-161));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues((String) null);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      URL uRL0 = MockURL.URL((URL) null, "http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("9#k|6[J");
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals(2, set0.size());
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/ulg$i'1~pj<vw");
      httpUrl0.queryParameter((String) null);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/ulg$i'1~pj%3Cvw", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("Tp", "name == null");
      httpUrl_Builder1.parse(httpUrl0, "&5be%7b");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      httpUrl1.queryParameter("^8}s3- zYqy3CI0");
      assertEquals("http://foo.bar/&5be%7b?Tp=name%20%3D%3D%20null", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      assertNotNull(httpUrl0);
      
      httpUrl0.querySize();
      assertEquals("https://some/fake/but/wellformed/url", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals(4, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z");
      httpUrl0.query();
      assertEquals(7, httpUrl0.pathSize());
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("http://foo.bar/&5be%7b/t%5E%7DqJq?Tp=name%20%3D%3D%20null");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("Tp", "name == null");
      httpUrl_Builder0.parse(httpUrl0, "&5be%7b");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://foo.bar/&5be%7b?Tp=name%20%3D%3D%20null", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      String string0 = httpUrl0.encodedQuery();
      assertEquals("na6b/rda&3?na6b", string0);
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(2, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse(httpUrl0, "&5be%7b");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      httpUrl_Builder0.encodedPassword("; charset=utf-8");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      String string0 = httpUrl1.encodedPassword();
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("; charset=utf-8", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertEquals("%3B%20charset%3Dutf-8", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse(httpUrl0, "&5be%7b");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      httpUrl_Builder0.encodedUsername("CN,caVs2.j");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      httpUrl1.newBuilder("okio.Pipe$PipeSink");
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("CN,caVs2.j", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse(httpUrl0, "&5be%7b");
      httpUrl_Builder0.encodedFragment("(;#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      String string0 = httpUrl1.fragment();
      assertEquals("http://foo.bar/&5be%7b#(;#", httpUrl1.toString());
      assertEquals("(;#", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URL uRL0 = MockURL.URL((URL) null, "http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals("http://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/rda&3?na6b/rda&3?na6b", httpUrl0.toString());
      assertEquals(2, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.host();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      assertNotNull(httpUrl0);
      
      httpUrl0.username();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://some/fake/but/wellformed/url", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.password();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.scheme();
      assertEquals("http", string0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("/fooExample", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/some/fake/but/wellformed/url");
      httpUrl0.isHttps();
      assertEquals("https://some/fake/but/wellformed/url", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.fragment();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z");
      String string0 = httpUrl0.redact();
      assertEquals("https://home/...", string0);
      assertEquals(7, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/2$'knzfd.m:z", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("", "@c");
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }
}
