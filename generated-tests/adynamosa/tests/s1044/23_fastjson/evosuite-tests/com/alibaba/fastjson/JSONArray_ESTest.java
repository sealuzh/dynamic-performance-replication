/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 00:41:50 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(112, fileSystemHandling0);
      JSONObject jSONObject0 = jSONArray1.getJSONObject(112);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 112);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 112);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.lastIndexOf((Object) null);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray2.iterator();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(367, (Object) fileSystemHandling0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(6172);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.toArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(jSONArray0);
      linkedHashSet0.spliterator();
      Class<Feature> class0 = Feature.class;
      jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.add((Object) "3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray0.isEmpty();
      HashMap<Object, Feature> hashMap0 = new HashMap<Object, Feature>();
      jSONArray1.set(112, hashMap0);
      jSONArray1.getSqlDate(23);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.DEFAULT_PARSER_FEATURE = 112;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 2381);
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      int int0 = (-1777);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1777), class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3089;
      Integer integer0 = new Integer(3089);
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36xV_8eR!Xg?<3$vO");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getBoolean(0);
      defaultJSONParser0.resolveReference("1.2.46");
      jSONArray0.getBigDecimal(40);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(40);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1184);
      jSONArray0.lastIndexOf(bufferedInputStream0);
      jSONArray1.getLong(2);
      jSONArray1.getLongValue(112);
      // Undeclared exception!
      try { 
        jSONArray1.addAll((-20), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -20, Size: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36xV_8eR!Xg?<3$vO");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getLong(3089);
      jSONArray0.fluentRemove((Object) defaultJSONParser0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1000), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1000, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, 112);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(112);
      jSONArray0.getInteger(112);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      jSONArray0.set(86, 0);
      jSONArray1.getBooleanValue(3074);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getJSONObject(507);
      jSONArray1.getLongValue(86);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1793), (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1793, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, 112);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(559);
      jSONArray0.getInteger(559);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      jSONArray0.set(86, 0);
      jSONArray0.getLongValue(275);
      jSONArray0.getByte(37);
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals(3090, jSONArray0.size());
      assertEquals(3088, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(112);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      hashMap0.put(")y[N(crP", jSONArray0);
      Integer integer0 = new Integer(0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) hashMap0);
      jSONArray2.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : [{\"$ref\":\"@\"},{\")y[N(crP\":[{\"$ref\":\"@\"},{\"$ref\":\"..\"}]}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(112);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      hashMap0.put(")y[N(crP", jSONArray0);
      jSONArray1.getString(0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType((Type) null);
      int int0 = 83;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-1), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(112);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.setComponentType((Type) null);
      jSONArray1.fluentAdd(0, (Object) jSONArray0);
      JSONArray jSONArray2 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) jSONArray2, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [{\"$ref\":\"@\"},112]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(112);
      jSONArray0.getInteger(3089);
      jSONArray0.getDouble(112);
      jSONArray0.getString(1);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3299, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(112);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      hashMap0.put(")y[N(crP", jSONArray0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        jSONArray1.getObject(112, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(5);
      jSONArray0.iterator();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.componentType = (Type) parameterizedTypeImpl0;
      jSONArray0.getComponentType();
      jSONArray0.parallelStream();
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(72, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      Class<Field> class0 = Field.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("invalid comment", class0, class0, class0, (Field) null, 4644, 0, 2500);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      jSONArray0.contains((Object) null);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.getString(0);
      jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1478);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1478, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.containsAll(jSONArray0);
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      Integer integer0 = new Integer(112);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.isEmpty();
      jSONArray0.getDoubleValue(0);
      jSONArray0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.remove((-619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSONArray0.getObject(59, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J{r8DhW\"l#?-gy");
      jSONArray0.getShort(3089);
      Object object0 = new Object();
      jSONArray0.equals(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.size();
      jSONArray0.add((Object) "1.2.46");
      jSONArray0.addAll((Collection<?>) jSONArray1);
      Object object0 = jSONArray0.remove(1);
      assertEquals("1.2.46", object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(112);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fileSystemHandling0);
      JSONArray[] jSONArrayArray0 = new JSONArray[7];
      jSONArrayArray0[0] = jSONArray0;
      jSONArray0.contains(predicate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(7219);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7219, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray0.isEmpty();
      Integer integer0 = new Integer(112);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray1.removeAll(linkedList0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONArray0.retainAll(set0);
      jSONArray0.contains("/wW,LA^*k");
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject((String) null, (Type) null, parserConfig0, 112, featureArray0);
      jSONArray1.getObject(0, (Type) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashMap0);
      jSONArray1.removeIf(predicate0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3064);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3064);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(29);
      jSONArray1.getLongValue(0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      jSONArray1.getObject(0, class0);
      assertEquals(3089, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray1);
      jSONArray0.removeIf(predicate0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray1.retainAll(linkedList0);
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      Type type0 = null;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject((String) null, (Type) null, parserConfig0, 112, featureArray0);
      jSONArray1.getObject(0, (Type) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashMap0);
      jSONArray1.removeIf(predicate0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      jSONArray0.containsAll(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.containsAll(jSONArray0);
      assertTrue(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 112);
      jSONArray0.add((Object) null);
      jSONArray0.listIterator();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      boolean boolean1 = jSONArray0.retainAll(linkedHashSet0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.indexOf((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray3 = jSONArray0.fluentAdd(0, (Object) jSONArray2);
      assertFalse(jSONArray3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      jSONArray1.getObject(0, (Type) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[2] = (byte)39;
      hashMap0.put("1.2.46", jSONArray0);
      byteArray0[3] = (byte) (-83);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue((byte)39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Class<InputStream> class0 = InputStream.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3073, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3073, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1720, (Object) null);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray0.size();
      jSONArray1.add((Object) null);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(1723, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, 112);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(559);
      jSONArray0.getInteger(559);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 981, 981);
      jSONArray1.remove((Object) null);
      jSONArray0.fluentRetainAll(linkedHashSet0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(set0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(951);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 951, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3095);
      jSONArray0.spliterator();
      jSONArray0.set(3095, integer0);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(559);
      jSONArray0.getInteger(559);
      JSONArray jSONArray1 = new JSONArray(559);
      jSONArray0.getIntValue(3095);
      jSONArray0.getBoolean(947);
      jSONArray0.addAll(3095, (Collection<?>) jSONArray1);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getByte(500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, 112);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(559);
      jSONArray0.getInteger(559);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      jSONArray0.set(86, 0);
      int int0 = 3074;
      jSONArray1.getBooleanValue(3074);
      jSONArray0.getByteValue(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(51068);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51068, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getBoolean(3089);
      int int0 = 40;
      defaultJSONParser0.resolveReference("36xV_8eR!Xg?<3$vO");
      jSONArray0.getBigDecimal(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-815));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(0);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36xV_8eR!Xg?<3$vO");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getBoolean(0);
      defaultJSONParser0.resolveReference("1.2.46");
      jSONArray0.getBigDecimal(40);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) class0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(40);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      jSONArray2.toJSONString();
      jSONArray1.getFloat(112);
      jSONArray2.getByte(0);
      jSONArray3.addAll(0, (Collection<?>) jSONArray2);
      jSONArray1.getJSONObject(82);
      JSONArray jSONArray4 = jSONArray0.fluentAddAll((Collection<?>) jSONArray3);
      jSONArray4.get(0);
      jSONArray3.getString(0);
      assertEquals(24712, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getInteger(0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      jSONArray0.set(0, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue((-1273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      jSONArray1.getObject(0, (Type) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-83);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 167, (byte)38);
      jSONArray1.remove((Object) byteArrayInputStream0);
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(507);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 507, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      jSONArray0.set(3089, integer0);
      Object[] objectArray0 = new Object[0];
      jSONArray0.toArray(objectArray0);
      JSONArray jSONArray1 = new JSONArray(3185);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(112);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, 112);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentAdd(112, (Object) iterator0);
      JSONArray jSONArray5 = jSONArray0.fluentAddAll((Collection<?>) jSONArray4);
      Object object0 = new Object();
      jSONArray0.remove(object0);
      jSONArray5.fluentRetainAll(jSONArray3);
      JSONArray jSONArray6 = new JSONArray();
      jSONArray1.fluentRetainAll(jSONArray3);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1672
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(559);
      assertEquals(3090, jSONArray0.size());
      
      Integer integer1 = new Integer(0);
      jSONArray0.getDouble(3089);
      jSONArray0.getSqlDate(3055);
      jSONArray0.getShort(112);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("T#uJd7n`", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, hashMap0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((Map<? extends String, ? extends String>) treeMap0);
      jSONArray0.getByteValue(3084);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1135));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(112);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36xV_8eR!Xg?<3$vO");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getBoolean(0);
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>(linkedList0);
      jSONArray0.fluentRetainAll(linkedHashSet0);
      ConcurrentSkipListMap<String, JSONArray> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, JSONArray>();
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap1 = new ConcurrentSkipListMap<String, Object>((Map<? extends String, ?>) concurrentSkipListMap0);
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap1);
      jSONObject0.getDate("com.alibaba.fastjson.JSONArray");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(2048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2048, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(559);
      jSONArray0.getInteger(559);
      assertEquals(3090, jSONArray0.size());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((Map<? extends String, ? extends String>) treeMap0);
      jSONArray0.getByteValue(947);
      jSONArray0.fluentRemove(3089);
      assertEquals(3089, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("T#uJd7n`", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, hashMap0);
      jSONArray0.getFloat(959);
      jSONArray1.toArray();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      Class<Integer> class1 = Integer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((Map<? extends String, ? extends String>) concurrentSkipListMap0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, concurrentSkipListMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "T#uJd7n`";
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1, stringArray0);
      javaBeanSerializer1.getType();
      jSONArray0.getObject(3089, (Type) class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("T#uJd7n`", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, hashMap0);
      jSONArray0.getFloat(959);
      jSONArray1.toArray();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      jSONArray1.set(946, pushbackInputStream0);
      jSONArray0.getBooleanValue(1);
      int int0 = jSONArray0.getIntValue(1003);
      assertEquals(6180, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 43;
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36xV_8eR!Xg?<3$vO");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getBoolean(0);
      jSONArray0.getBigDecimal(40);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) class0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(40);
      jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      jSONArray2.getByte(0);
      jSONArray1.getFloatValue(3045);
      // Undeclared exception!
      try { 
        jSONArray1.get((-3807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      jSONArray0.getTimestamp(559);
      jSONArray0.getInteger(559);
      jSONArray0.getDouble(3059);
      jSONArray0.getSqlDate(3055);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRetainAll(list0);
      assertEquals(3090, jSONArray0.size());
      
      jSONArray0.setRelatedArray(list0);
      jSONArray0.getShort(0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      Class<InputStream> class0 = InputStream.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      jSONArray0.getObject(605, type0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2580, 2580);
      jSONArray0.remove((Object) integer0);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray1.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3082);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3082, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 65288;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(65288);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      Class<JSONObject> class1 = JSONObject.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("soEpL,", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("soEpL,", class1, class0, class1, (Field) null, (-1016), 0, 57344);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      jSONArray0.equals((Object) null);
      InputStream[] inputStreamArray0 = new InputStream[0];
      jSONArray0.toArray(inputStreamArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(65288);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65288, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 965;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.indexOf(sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      jSONArray1.getObject(0, (Type) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 167, (byte)38);
      jSONArray1.remove((Object) byteArrayInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(612);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 612, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36xV_8eR!Xg?<3$vO");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getBoolean(0);
      jSONArray0.getBigDecimal(40);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) class0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(40);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      jSONArray1.getFloat(112);
      jSONArray2.getByte(0);
      jSONArray3.addAll(0, (Collection<?>) jSONArray2);
      assertEquals(12356, jSONArray1.size());
      assertEquals(12356, jSONArray3.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      jSONArray1.getObject(0, (Type) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray2.toJavaList(class0);
      jSONArray1.listIterator();
      boolean boolean0 = jSONArray2.containsAll(list0);
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, 0);
      jSONArray0.getSqlDate(3045);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getObject(59, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray0.getDoubleValue((byte)0);
      Locale locale0 = new Locale("36xV_8eR!Xg?<3$vO", "@type", "");
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(set0);
      jSONArray1.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      String string0 = "com.alibaba.fastjson.JSONArray";
      jSONArray0.set((-1), "com.alibaba.fastjson.JSONArray");
      int int0 = 3045;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3045);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3045, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      Function<Object, JSONArray> function0 = (Function<Object, JSONArray>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1914);
      byte byte0 = (byte)9;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.spliterator();
      jSONArray0.set(0, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(3570);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3570, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Function<Object, JSONArray> function0 = (Function<Object, JSONArray>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSONArray0.fluentRemove((Object) function0);
      Integer integer0 = new Integer(1914);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) hashMap0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentSet(0, jSONArray1);
      jSONArray0.set(0, "{}");
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getObject(59, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J{r8DhW\"l#?-gy");
      jSONArray0.getShortValue(3089);
      jSONArray0.toArray();
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getObject(59, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36xV_8eR!Xg?<3$vO");
      jSONReaderScanner0.skipWhitespace();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONArray0.getBoolean(0);
      jSONArray0.getBigDecimal(40);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      Object[] objectArray0 = new Object[0];
      jSONArray0.toArray(objectArray0);
      jSONArray0.set(2318, integer0);
      jSONArray0.getJSONArray(3041);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.clearBit(112);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) bigInteger0);
      jSONArray1.getBigInteger(112);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject("n>", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getObject(59, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J{r8DhW\"l#?-gy");
      jSONArray0.getShort(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      Object[] objectArray0 = new Object[0];
      jSONArray0.toArray(objectArray0);
      jSONArray0.getObject(3089, (Type) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("T#uJd7n`", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, hashMap0);
      jSONArray1.fluentAdd(0, (Object) null);
      jSONArray0.getIntValue(0);
      jSONArray1.getShortValue(0);
      jSONArray0.toArray();
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      Object[] objectArray0 = jSONArray0.toArray();
      jSONArray0.spliterator();
      jSONArray0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      Class<JSONObject> class0 = JSONObject.class;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter2;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter2;
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[6] = (SerializeFilter) simplePropertyPreFilter1;
      jSONArray0.getFloat(3089);
      Class<Integer> class1 = Integer.class;
      jSONArray0.getObject(2001, class1);
      jSONArray0.listIterator();
      jSONArray0.getRelatedArray();
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.getIntValue(3044);
      jSONArray1.get(0);
      jSONArray0.remove(0);
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(3089, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      Object[] objectArray0 = new Object[0];
      jSONArray0.toArray(objectArray0);
      JSONArray jSONArray1 = new JSONArray(3185);
      TreeMap<JSONObject, JSONObject> treeMap0 = new TreeMap<JSONObject, JSONObject>();
      treeMap0.descendingKeySet();
      JSONArray jSONArray2 = jSONArray0.fluentRemove(112);
      // Undeclared exception!
      try { 
        jSONArray2.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(928);
      jSONArray0.getTimestamp(1);
      Integer integer1 = new Integer(0);
      jSONArray0.fluentAdd(3089, (Object) integer1);
      float float0 = jSONArray0.getFloatValue(1);
      assertEquals(3091, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
      
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3089, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      Integer integer1 = new Integer(3054);
      jSONArray0.set(1436, integer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.getJSONObject(589);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getSqlDate(3045);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getObject(59, class0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J{r8DhW\"l#?-gy");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      TreeMap<String, JSONArray> treeMap0 = new TreeMap<String, JSONArray>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(50);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PQ^");
      Class<Object> class0 = Object.class;
      jSONArray0.getObject(3084, class0);
      JSONArray jSONArray1 = new JSONArray(50);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentSet(0, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-1660));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, (Object) null);
      jSONArray2.isEmpty();
      jSONArray1.getComponentType();
      float float0 = new Integer(64);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONArray1;
      jSONArray1.toArray(objectArray0);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray((-1066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1066
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.getFloat(2447);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSONArray> function0 = (Function<Object, JSONArray>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, JSONArray> function1 = unaryOperator0.andThen((Function<? super Object, ? extends JSONArray>) function0);
      function1.apply(unaryOperator0);
      unaryOperator0.andThen((Function<? super Object, ? extends JSONArray>) function1);
      jSONArray0.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(1914);
      jSONArray0.set((-1), (Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lisI");
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      TreeMap<String, JSONArray> treeMap0 = new TreeMap<String, JSONArray>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(50);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PQ^");
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getJSONObject(1437);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      jSONArray1.add(0, (Object) null);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(8206, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8206, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      Class<JSONObject> class0 = JSONObject.class;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullNumberAsZero;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter2;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter1;
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter2;
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[6] = (SerializeFilter) simplePropertyPreFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature3;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature3;
      JSON.toJSONBytes((Object) serializerFeature1, serializeFilterArray0, serializerFeatureArray0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.getObject(33, (Type) class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      jSONArray2.toArray();
      PipedReader pipedReader0 = new PipedReader(3051);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      jSONArray2.getObject(0, (Type) null);
      jSONArray0.removeAll(jSONArray2);
      jSONArray0.listIterator(0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Integer integer0 = new Integer(1);
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      jSONArray1.fluentSet(1214, spliterator0);
      int int0 = 2000;
      MockFile mockFile0 = new MockFile("1.2.46");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      JSON.parseObject("", featureArray0);
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      jSONArray0.set(112, feature0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3062);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3062, Size: 113
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      Integer integer0 = new Integer(0);
      JSONArray jSONArray3 = new JSONArray();
      Spliterator<Object> spliterator0 = jSONArray3.spliterator();
      jSONArray3.set(112, spliterator0);
      // Undeclared exception!
      try { 
        jSONArray2.getBigInteger(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentSet(0, jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-4042));
      jSONArray0.spliterator();
      jSONArray0.set(0, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(870, linkedHashSet0);
      jSONArray1.isEmpty();
      jSONArray1.fluentRemoveAll(linkedHashSet0);
      assertEquals(871, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.spliterator();
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(112);
      jSONArray0.contains(integer0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentSet(2499, integer0);
      Class<Object> class0 = Object.class;
      JSON.toJSONString((Object) jSONArray2);
      JSON.toJavaObject((JSON) jSONArray0, class0);
      boolean boolean0 = jSONArray2.contains(integer0);
      boolean boolean1 = jSONArray1.retainAll(jSONArray0);
      assertEquals(2500, jSONArray0.size());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toString();
      jSONArray1.remove((Object) "[]");
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-2836));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2836
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-3644));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1914);
      jSONArray0.set((-1), (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(8213);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8213, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      Integer integer0 = new Integer(1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) integer0, serializerFeatureArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.set(3089, integer0);
      jSONArray0.getBigInteger(0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(94);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3463);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3463, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-4701));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@type", true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) mockFileOutputStream0, serializerFeatureArray0);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(926);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 926, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(1196);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-2200));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1178);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1178, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = new JSONArray(112);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2958), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      int int0 = 974;
      JSONArray jSONArray1 = jSONArray0.fluentSet(974, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(2529, (Object) fileSystemHandling0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2529, Size: 975
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.set((-1643), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-3615));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3413);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3413, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(323, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 323, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-98));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      jSONArray2.getObject(0, (Type) null);
      assertEquals(1, jSONArray1.size());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(112);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      jSONArray0.fluentSet(1, (Object) null);
      int int0 = jSONArray0.getIntValue(1);
      assertEquals(2, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      Integer integer0 = new Integer(112);
      jSONArray2.indexOf(integer0);
      JSON.toJSONString((Object) jSONArray2);
      jSONArray2.add((Object) integer0);
      jSONArray2.getByte(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getString(101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.lastIndexOf((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      Integer integer0 = new Integer(75);
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-1234), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(112);
      jSONArray0.contains(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray2.get(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NotWriteDefaultValue");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getByte(65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(38);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1821));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      boolean boolean1 = jSONArray1.addAll(0, (Collection<?>) jSONArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65325);
      JSONObject jSONObject0 = new JSONObject(65325, true);
      jSONObject0.getJSONObject("W8NDsr}#");
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(191);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-520));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3073);
      JSONArray jSONArray1 = jSONArray0.fluentSet(78, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((-53));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.CustomMapDeserializer;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      jSONArray0.listIterator();
      Feature feature4 = Feature.AllowUnQuotedFieldNames;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.UseBigDecimal;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.UseObjectArray;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.UseBigDecimal;
      featureArray0[7] = feature7;
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      int int0 = 1620;
      jSONArray0.equals(jSONArray1);
      JSONObject jSONObject0 = new JSONObject(0);
      jSONArray0.add((Object) jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.remove((-1482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(3073);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3073, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      jSONArray0.setComponentType(class0);
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1758));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      Type type0 = jSONArray1.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      String string0 = null;
      JSON.parse((String) null);
      int int0 = 1450;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1450);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1450, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 65316;
      JSONArray jSONArray0 = new JSONArray(65316);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-559), (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -559, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-2773));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Integer integer0 = new Integer((-1));
      jSONArray0.set(3089, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-441));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1620);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1620, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.lastIndexOf(jSONObject0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.containsAll(list0);
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.retainAll(list0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65316);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) hashMap0);
      jSONArray1.fluentSet(112, "DH$jj");
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(1133);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1133, Size: 113
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-384));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 65316;
      JSONArray jSONArray0 = new JSONArray(65316);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1548));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65316);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0xHl<wFI");
      JSONObject jSONObject0 = new JSONObject(65316);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) hashMap0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray2.replaceAll(unaryOperator0);
      jSONArray0.getJSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PrettyFormat");
      int int0 = 2359;
      JSONArray jSONArray0 = new JSONArray(2359);
      String string0 = "%[@&/TdCyY]@#?>XQ";
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.UseBigDecimal;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(2359);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2359, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentRemove((Object) 0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 3043;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) "java.util.List");
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|gg3?h6~v+2V|");
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowISO8601DateFormat;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowISO8601DateFormat;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) parameterizedTypeImpl0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65288);
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.values();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray(112);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65316);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.fluentSet(0, jSONArray1);
      jSONArray0.getJSONArray(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSON.DEFAULT_PARSER_FEATURE = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(622, jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      jSONArray4.fluentClear();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(112, 166);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 166
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Integer integer0 = new Integer(1286);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(integer0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.addAll(1286, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1286, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = (-1333);
      Class<Object> class0 = Object.class;
      JSON.parseArray((String) null, class0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1962));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(112);
      jSONArray0.fluentSet(1196, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1196);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65288);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(65288);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65288, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65316);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      jSONArray1.set(65316, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1381);
      jSONArray0.remove((Object) "6(Qe");
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(556);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 556
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type", 528);
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '7';
      charArray0[2] = '#';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      int int0 = 532;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(532, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 532, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(112);
      JSONArray jSONArray2 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray2.getBigDecimal(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) jSONArray0, 112, serializerFeatureArray0);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.add((-943), (Object) serializerFeature1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -943, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65279);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.fluentPut((String) null, jSONArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) jSONObject1, (-1738), serializerFeatureArray0);
      JSONObject jSONObject2 = jSONObject1.fluentRemove((Object) null);
      jSONObject2.getJSONObject("@type");
      linkedList0.add((JSONObject) null);
      jSONArray0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(65279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65279, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 695;
      int int1 = (-1843);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1843));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type type0 = null;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(112, (Object) "@type");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      int int0 = 1816;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1816, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1816, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.size();
      boolean boolean0 = jSONArray0.add((Object) "1.2.46");
      boolean boolean1 = jSONArray0.addAll((Collection<?>) jSONArray1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      jSONArray0.fluentSet(0, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1569);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1569, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",6P9");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      JSONArray jSONArray1 = new JSONArray(565);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(573);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSON.parse("", 573);
      JSONArray jSONArray1 = jSONArray0.fluentSet(573, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(602);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 602, Size: 574
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentSet(622, jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(9999999);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      JSONArray jSONArray1 = new JSONArray(9999999);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1682));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=?", false);
      int int0 = (-2601);
      Integer integer0 = new Integer((-2601));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[5] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[6] = serializerFeature5;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(3057);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3057, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("T#uJd7n`", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, hashMap0);
      jSONArray1.fluentAdd(0, (Object) null);
      jSONArray0.getIntValue(0);
      jSONArray1.getBoolean(619);
      assertEquals(3091, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(9999999);
      String string0 = "";
      // Undeclared exception!
      try { 
        jSONArray0.getLong(9999999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1333), (-1333));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1333
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      jSONArray1.toString();
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      jSONArray0.remove((Object) feature0);
      jSONArray0.listIterator(0);
      JSONArray jSONArray2 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = 1218;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      JSONArray jSONArray0 = new JSONArray(9986);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1218, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1218, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(112, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 9999999;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "");
      // Undeclared exception!
      jSONArray0.fluentSet(9999999, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 28;
      JSONArray jSONArray0 = new JSONArray(28);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=?", false);
      Integer integer0 = new Integer((-2601));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) integer0, serializerFeatureArray0);
      List<Object> list0 = jSONArray0.subList(0, 0);
      int int0 = jSONArray0.indexOf(list0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 57344;
      // Undeclared exception!
      try { 
        jSONArray0.remove(57344);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57344, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(163);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentSet(112, "1.2.46");
      linkedList0.offerFirst("1.2.46");
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(jSONArray1);
      jSONArray4.setRelatedArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1256;
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(2064);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2064, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = 892;
      JSONArray jSONArray0 = new JSONArray(892);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1798);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1798, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3220);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3220, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      List<Locale.LanguageRange> list0 = jSONArray0.toJavaList(class0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list1);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(0, (Collection<?>) list1);
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray4.get(112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1190);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1190);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1190, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      jSONArray1.fluentClear();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      // Undeclared exception!
      try { 
        JSON.parseArray("1A.Ij<2<`Ce7ZmK-B", typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSON.DEFAULT_PARSER_FEATURE = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-388), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "com.alibaba.fastjson.JSONArray@0000000001");
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(112, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(112);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65316);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) hashMap0);
      jSONArray0.fluentSet(112, jSONArray1);
      jSONArray0.getJSONArray(112);
      assertEquals(113, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject0);
      jSONArray1.fluentRemove((Object) jSONObject0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-98);
      int int0 = (-1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        uTF8Decoder0.detectedCharset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = 65279;
      JSONArray jSONArray0 = new JSONArray(65279);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(65279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65279, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(9999999);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      featureArray0[2] = feature2;
      JSON.parseObject("", featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
