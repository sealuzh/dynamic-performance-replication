/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:20:50 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.sql.JDBCType;
import java.util.List;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.compile.CompilerContext;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.io.VFMemoryStorageFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.table.Table;
import org.h2.value.ValueDecimal;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "i9tu";
      stringArray0[2] = "i9tu";
      stringArray0[3] = "i9tu";
      stringArray0[4] = "i9tu";
      stringArray0[5] = "i9tu";
      String string0 = SQLUtil.innerJoin("i9tu", stringArray0, "IG ", "i9tu", stringArray0);
      assertEquals("IG  as i9tu on i9tu.i9tu = i9tu.i9tu and i9tu.null = i9tu.null and i9tu.i9tu = i9tu.i9tu and i9tu.i9tu = i9tu.i9tu and i9tu.i9tu = i9tu.i9tu and i9tu.i9tu = i9tu.i9tu", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter indexcreate materialized viewselect");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexcreate materialized viewselect", dBSchema0);
      defaultDBTable0.getIndex("alter indexcreate materialized viewselect");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.apache.derby.iapi.services.io.FormatableLongHolder", 73);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "create materialized view", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = stringArray0[1];
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      String string0 = Optimizer.MAX_MEMORY_PER_TABLE;
      String string1 = SQLUtil.normalize("alter table", false);
      assertEquals("alter table", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.normalize("(~W}h(~", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("kf7A{~O~Jv6aiIhYj1", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("RAiu26u$\"/,gGy.gzM");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.getConstraintDescriptorList(true);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RAiu26u$\"/,gGy.gzM", dBSchema0);
      String string0 = TypeId.SQLXML_NAME;
      String string1 = SQLUtil.normalize("RAiu26u$\"/,gGy.gzM", true);
      assertEquals("RAiu26u $ \"/,gGy.gzM\"", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("(drop ta");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderValue("(drop ta");
      assertEquals("'(drop ta'", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_wh6rc)[6)u&N$'L";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("_wh6rc)[6)u&N$'L = '_wh6rc)[6)u&N$'L'", string0);
      
      String string1 = SQLUtil.leftJoin("EZ@:#s}2C&q", stringArray0, "_wh6rc)[6)u&N$'L = '_wh6rc)[6)u&N$'L'", "_wh6rc)[6)u&N$'L", stringArray0);
      assertEquals("left join _wh6rc)[6)u&N$'L = '_wh6rc)[6)u&N$'L' as _wh6rc)[6)u&N$'L on EZ@:#s}2C&q._wh6rc)[6)u&N$'L = _wh6rc)[6)u&N$'L._wh6rc)[6)u&N$'L", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("targetResultSt");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSt");
      String string0 = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_STRING;
      DBDataType dBDataType0 = DBDataType.getInstance(44, "P");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("targetResultSt", defaultDBTable0, dBDataType0, integer0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      DBSchema dBSchema0 = new DBSchema("LTiER TBLE ");
      String string1 = CompilerContext.CONTEXT_ID;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      dBSchema0.getSequences(true);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("targetResultSt P(3) NULL", string2);
      
      String string3 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table targetResultSt", string3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.services.locks.LockFactory");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.derby.iapi.services.locks.LockFactory";
      stringArray0[1] = "execute";
      stringArray0[2] = "org.apache.derby.iapi.services.locks.LockFactory";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("execute", stringBuilder0);
      assertEquals("execute", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "_X>y~W\nHl^`r", (String[]) null, "", "4J_1<_dSROhF){qL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("PRIMARY KEY (, )", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.null", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xSbwHSu%@SrW");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "xSbwHSu%@SrW";
      stringArray0[1] = "JE.(=)aX!}";
      stringArray0[2] = "xSbwHSu%@SrW";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("JE.(=)aX!}", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder(90119);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-86), (CharSequence) stringBuilder0, (-86), 90119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -86
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("L,D8i/s,3U|&%rau");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      SQLUtil.substituteMarkers("L,D8i/s,3U|&%rau", "drop table-", object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeselect$zzt:a$=zm");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L,D8i/s,3U|&%rau";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "L,D8i/s,3U|&%rau", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop table-", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "drop materialized view", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (L,D8i/s,3U|&%rau)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = RawStoreFactory.CRYPTO_OLD_EXTERNAL_KEY_VERIFY_FILE;
      StringBuilder stringBuilder0 = new StringBuilder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/(targetResultSet, targetResultSet, , , , , , targetResultSet, , , , , )");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, stringArray0[7]);
      DBSchema dBSchema0 = new DBSchema("drop materialized viewdefau$t");
      DBSequence dBSequence0 = new DBSequence("verifyOldKey.dat", stringArray0[7], "BLOB");
      dBSequence0.setDoc(", ");
      dBSchema0.addSequence(dBSequence0);
      dBSchema0.getSequences(true);
      String string1 = SQLUtil.normalize("verifyOldKey.dat", true);
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0);
      String string2 = SQLUtil.removeComments("ES*@3dC&\"\"]Lg");
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "c_556fc-0121-c5e6-4e43-";
      stringArray0[8] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "targetResultSet";
      SQLUtil.isDML("targetResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[13];
      stringArray0[0] = "targetResultSet";
      stringArray0[1] = "targetResultSet";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "targetResultSet", false, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("r8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'r8' not found in table 'targetResultSet'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1561);
      PipedWriter pipedWriter0 = new PipedWriter();
      VFMemoryStorageFactory vFMemoryStorageFactory0 = new VFMemoryStorageFactory();
      vFMemoryStorageFactory0.getCanonicalName();
      StringReader stringReader0 = new StringReader("!)3;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("- 0", false);
      DBSchema dBSchema0 = new DBSchema((String) null);
      // Undeclared exception!
      try { 
        dBSchema0.addSequence((DBSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[";
      SQLUtil.leftJoin("[", stringArray0, "executetargetresultset", "org.apache.derby.impl.store.raw.data.StoredRecordHeader", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("selectselect targetresultset(3) null");
      DBColumn dBColumn0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-400), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -400
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "inserttargetresultset";
      stringArray0[1] = "inserttargetresultset";
      stringArray0[2] = "inserttargetresultset";
      stringArray0[3] = "inserttargetresultset";
      stringArray0[4] = "inserttargetresultset";
      stringArray0[5] = "inserttargetresultset";
      stringArray0[6] = "inserttargetresultset";
      stringArray0[7] = "inserttargetresultset";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "inserttargetresultset", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("inserttargetresultset", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "targetre", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT targetre PRIMARY KEY (inserttargetresultset, inserttargetresultset, inserttargetresultset, inserttargetresultset, inserttargetresultset, inserttargetresultset, inserttargetresultset, inserttargetresultset)", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.services.locks.LockFactory");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.derby.iapi.services.locks.LockFactory";
      stringArray0[1] = "execute";
      stringArray0[2] = "org.apache.derby.iapi.services.locks.LockFactory";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.mutatesDataOrStructure("execute");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(47);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "org.apache.derby.iapi.services.locks.LockFactory");
      StringBuilder stringBuilder3 = stringBuilder2.append(684.276546174788);
      StringBuilder stringBuilder4 = stringBuilder3.append('I');
      SQLUtil.addOptionalCondition("org.apache.derby.iapi.services.locks.LockFactory", stringBuilder4);
      assertEquals("CONSTRAINT execute 47org.apache.derby.iapi.services.locks.LockFactory684.276546174788I or org.apache.derby.iapi.services.locks.LockFactory", stringBuilder4.toString());
      assertEquals("CONSTRAINT execute 47org.apache.derby.iapi.services.locks.LockFactory684.276546174788I or org.apache.derby.iapi.services.locks.LockFactory", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBDataType.getInstance(748, "alter session");
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter session";
      stringArray0[2] = "alter session";
      stringArray0[3] = "PFt][$";
      stringArray0[4] = "alter session";
      stringArray0[6] = "alter session";
      stringArray0[8] = "alter session";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("alter session = 'alter session' AND null = null AND alter session = 'alter session' AND PFt][$ = 'PFt][$' AND alter session = 'alter session' AND null = null AND alter session = 'alter session' AND null = null AND alter session = 'alter session'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session = 'alter session' AND null = null AND alter session = 'alter session' AND PFt][$ = 'PFt][$' AND alter session = 'alter session' AND null = null AND alter session = 'alter session' AND null = null AND alter session = 'alter session'");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string1 = SQLUtil.renderValue("K5>~g\"");
      assertEquals("'K5>~g\"'", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1589);
      byteArrayOutputStream0.reset();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1589);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "!)3;";
      objectArray0[2] = (Object) "!)3;";
      objectArray0[3] = (Object) "!)3;";
      objectArray0[4] = (Object) defaultDBTable0;
      objectArray0[5] = (Object) nameSpec0;
      objectArray0[6] = (Object) defaultDBTable0;
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      SQLUtil.mutatesDataOrStructure("create materialized viewselect");
      StringReader stringReader0 = new StringReader("Tr!w @");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",tA|?B_W?}nb4(f*";
      stringArray0[1] = "U%}8~S([AAuA|p~L0o";
      stringArray0[2] = "create materialized viewselect";
      stringArray0[4] = ",tA|?B_W?}nb4(f*";
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[7] = stringArray0[0];
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string0 = NoPutResultSet.NEXT;
      boolean boolean0 = SQLUtil.isDML("updateClob(int,Clob)");
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean1 = SQLUtil.mutatesStructure("drop indexxts4e@9*s>&r");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = new Character('l');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'l'", string0);
      
      boolean boolean0 = SQLUtil.isQuery("drop materialized viewnull");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert-");
      defaultDBTable0.setDoc("insert-");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "insert-";
      stringArray0[1] = "insert-";
      stringArray0[2] = "insert-";
      stringArray0[3] = "insert-";
      stringArray0[4] = "insert-";
      stringArray0[5] = "insert-";
      stringArray0[6] = "insert-";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" DEFAULT ", 40);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("insert-", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-394401928));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.removeComments(".HO3O");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(".HO3O");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#,)9viiONOInW-XD{b", defaultDBTable0, 258, "drop materialized view");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#,)9viiONOInW-XD{b";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      File file0 = FileUtil.canonicalFile("drop materialized view");
      File file1 = FileUtil.canonicalFile(file0);
      MockFile mockFile0 = new MockFile(file1, "updateLong");
      File file2 = mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file2);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      StringBuilder stringBuilder0 = new StringBuilder(258);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesStructure("(, )");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "(, )");
      SQLUtil.addOptionalCondition("CC(M!'!RDz_-mMO", stringBuilder0);
      assertEquals("(, ) or CC(M!'!RDz_-mMO", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isDML("targetResultSet");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(6);
      StringBuilder stringBuilder0 = new StringBuilder(6);
      stringBuilder0.append((-2030.0938F));
      SQLUtil.addRequiredCondition("targetResultSet", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.substituteMarkers("tu~4FtiB", "targetResultSet", sQLUtil0);
      assertEquals("tu~4FtiB", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(6);
      StringBuilder stringBuilder0 = new StringBuilder(6);
      SQLUtil sQLUtil0 = new SQLUtil();
      StringReader stringReader0 = new StringReader("2N86^pIq,Qfv))XUK;+");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 6);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = SQLUtil.normalize("2N86^pIq,Qfv))XUK;+", true);
      assertEquals("2N86 ^ pIq, Qfv)) XUK ; +", string1);
      
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.getSubList((-4));
      System.setCurrentTimeMillis(6);
      boolean boolean0 = SQLUtil.isDDL(" NULL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      VersionNumber versionNumber0 = VersionNumber.valueOf("select$");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select$", "5fNpOR", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("5MUhW$&Ot,-)H'h<V", defaultDatabase0);
      dBCatalog0.getSchema("alter tabledrop materialized viewdefault");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5fNpOR", (DBSchema) null);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5fNpOR", defaultDBTable0, (DBDataType) null, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("5fNpOR", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize("(~W}h(~", false);
      String string0 = Dependable.SEQUENCE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      VFMemoryStorageFactory vFMemoryStorageFactory0 = new VFMemoryStorageFactory();
      vFMemoryStorageFactory0.getCanonicalName();
      JDBCType jDBCType0 = JDBCType.ARRAY;
      jDBCType0.getName();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("updateDouble", 8192);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      boolean boolean0 = SQLUtil.isQuery("CONSTRAINT ");
      assertFalse(boolean0);
      
      DBSequence dBSequence0 = new DBSequence("CONSTRAINT ", ",N<$yz96B2dSx,JJ*", "CONSTRAINT ");
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence CONSTRAINT ", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CONSTRAINT ";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(CONSTRAINT )", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = new Boolean("targetResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "targetResultSet";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("index (1..", defaultDBTable0, 36, "targetResultSet");
      DBDataType dBDataType0 = DBDataType.getInstance(36, "L");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.divideUnsigned(36, 36);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("L", defaultDBTable0, dBDataType0, integer0);
      DBDataType.getInstance(36, "targetResultSet");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execp33at>g(");
      mockPrintWriter0.println(false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("\"8JF;(}8\";Zk_^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: \"8JF;(}8\";Zk_^
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      Boolean boolean0 = new Boolean("targetResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[13];
      stringArray0[1] = "targetResultSet";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBPrimaryKeyConstraint0.equals("targetResultSet");
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("select intotargetresultset");
      dBPrimaryKeyConstraint0.setDoc("BLOB");
      dBSchema0.getTriggers();
      SQLUtil.normalize("targetResultSet", true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("targetResultSet");
      mockPrintWriter0.append('4');
      mockPrintWriter0.flush();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("targetResultSet");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "targetResultSet";
      stringArray0[1] = "targetResultSet";
      stringArray0[2] = "targetResultSet";
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = TypeId.SQLXML_NAME;
      String string1 = SQLUtil.normalize("},&w!?pr#bONd9O/rN", true);
      assertEquals("}, & w ! ? pr # bONd9O / rN", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(targetResultSet, targetResultSet, targetResultSet, , , , , )", string2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "e^&jWm";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e^&jWm";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = "select ";
      SQLUtil.mutatesDataOrStructure("select into");
      StringReader stringReader0 = new StringReader("22501");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("00yA>7F@e3zob");
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderColumnListWithTableName("e^&jWm", stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.isDML("targetRepsultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`9h9cRHn.@ 2");
      boolean boolean0 = false;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`9h9cRHn.@ 2";
      stringArray0[1] = "targetRepsultSet";
      stringArray0[2] = "execute";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "`9h9cRHn.@ 2", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getComponents();
      dBPrimaryKeyConstraint0.equals("CONSTRAINT \"`9h9cRHn.@ 2\" PRIMARY KEY (`9h9cRHn.@ 2, targetRepsultSet, execute)");
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-811));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSPROC_SCHEMA_UUID;
      String string1 = "e^&jWS";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("drop materialized viewtrigger", stringBuilder0);
      StringBuilder stringBuilder2 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder1.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)7;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((byte)7, byteArray0, 0L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      Byte.toString((byte)7);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOBCREATELOCATOR");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, 6, "B9m3@.2F8EfvX!s;()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isDML("targetResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[13];
      stringArray0[0] = "targetResultSet";
      stringArray0[1] = "targetResultSet";
      stringArray0[7] = "targetResultSet";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      dBPrimaryKeyConstraint0.equals((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBPrimaryKeyConstraint0.setDoc("BLOB");
      dBPrimaryKeyConstraint0.setDoc("n");
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = Page.DIAG_PAGE_SIZE;
      System.setCurrentTimeMillis(0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("$F}2xR 6Oa&e7S2 U6", false, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("BLOB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(targetResultSet, targetResultSet, , , , , , targetResultSet, , , , , )");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(targetResultSet, targetResultSet, , , , , , targetResultSet, , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"targetResultSet\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.isDML("targtResul5Set");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "targtResul5Set";
      stringArray0[3] = "targtResul5Set";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.normalize("targtResul5Set", false);
      defaultDBTable0.getPrimaryKeyConstraint();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.isDML("targetResultSt");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSt");
      String string0 = TypeId.REAL_NAME;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "targetResultSt";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "REAL", false, stringArray0);
      String string1 = "LTiERTBLE ";
      DBSchema dBSchema0 = new DBSchema("LTiERTBLE ");
      Boolean boolean0 = new Boolean("REAL");
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      SQLUtil.normalize("-<X&/+F|rqCF", true);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isDDL("drop materialized viewnull");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("targetResultSet");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "targetResultSet";
      stringArray0[1] = "targetResultSet";
      stringArray0[4] = "targetResultSet";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      dBPrimaryKeyConstraint0.equals("targetResultSet");
      StringBuilder stringBuilder0 = new StringBuilder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/(targetResultSet, targetResultSet, , , , , , targetResultSet, , , , , )");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, stringArray0[7]);
      DBSchema dBSchema0 = new DBSchema("targetResultSet");
      DBSequence dBSequence0 = new DBSequence(stringArray0[7], stringArray0[7], "BLPOB");
      dBSchema0.toString();
      dBSequence0.setDoc(", ");
      dBPrimaryKeyConstraint0.setDoc("BLPOB");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte)7;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBTable0.getCheckConstraints();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (targetResultSet, targetResultSet, , , targetResultSet, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("L,D8i/s,3U|&%rau");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      SQLUtil.substituteMarkers("L,D8i/s,3U|&%rau", "drop table-", object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeselect$zzt:a$=zm");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L,D8i/s,3U|&%rau";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "L,D8i/s,3U|&%rau", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop table-", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (L,D8i/s,3U|&%rau)", string0);
      
      String string1 = SQLUtil.typeAndName(dBUniqueIndex0);
      assertEquals("index drop table-", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)7;
      String string0 = Table.TABLE_LINK;
      Boolean boolean0 = new Boolean(false);
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      String string1 = SQLUtil.normalize("ES*@3dC&\"\"]Lg", false);
      assertEquals("ES * @ 3dC & \"\" ] Lg", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder("ES * @ 3dC & \"\" ] Lg");
      String string2 = SQLUtil.renderColumnListWithTableName("V3WLshU", stringArray0);
      assertEquals("V3WLshU.null, V3WLshU.null, V3WLshU.null, V3WLshU.null, V3WLshU.null, V3WLshU.null, V3WLshU.null, V3WLshU.null, V3WLshU.null", string2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      Boolean boolean0 = new Boolean("targetResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[13];
      stringArray0[1] = "targetResultSet";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBPrimaryKeyConstraint0.equals("targetResultSet");
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("select intotargetresultset");
      dBPrimaryKeyConstraint0.setDoc("BLOB");
      dBSchema0.getTriggers();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("targetResultSet");
      mockPrintWriter0.append('4');
      mockPrintWriter0.flush();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize("targetResultSet");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = SQLUtil.leftJoin("BLOB", stringArray0, "minus", "+h!rDBDu.7;I]", stringArray0);
      assertEquals("left join minus as +h!rDBDu.7;I] on BLOB.null = +h!rDBDu.7;I].null and BLOB.targetResultSet = +h!rDBDu.7;I].targetResultSet and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null and BLOB.null = +h!rDBDu.7;I].null", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("insertnc-fjs\"wtyp5_d", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      System.setCurrentTimeMillis(0L);
      DBDataType dBDataType0 = DBDataType.getInstance((-209961085), "7FA>C%$Tdm");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7FA>C%$Tdm", (DBTable) null, dBDataType0, integer0, integer0);
      Integer.compareUnsigned(90066, (-209961085));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultDBColumn0.setSize(integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = new Boolean("targetResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "targetResultSet";
      stringArray0[1] = "targetResultSet";
      stringArray0[4] = "targetResultSet";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      dBPrimaryKeyConstraint0.equals("targetResultSet");
      StringBuilder stringBuilder0 = new StringBuilder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/(targetResultSet, targetResultSet, , , , , , targetResultSet, , , , , )");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, stringArray0[7]);
      DBSchema dBSchema0 = new DBSchema("targetResultSet");
      DBSequence dBSequence0 = new DBSequence(stringArray0[7], stringArray0[7], "BLPOB");
      dBSchema0.toString();
      dBSequence0.setDoc(", ");
      dBPrimaryKeyConstraint0.setDoc("BLPOB");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)7;
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("targetResultSet", dBSchema0);
      defaultDBTable1.getCheckConstraints();
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("targetResultSet = 'targetResultSet' AND targetResultSet = 'targetResultSet' AND null = null AND null = null AND targetResultSet = 'targetResultSet' AND null = null AND null = null AND null = null AND null = null", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("targetResultSet", true, defaultDBTable0, "targetResultSet");
      String string1 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK targetResultSet", string2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.isDML("targetResultSet");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/(targetResultSet, targetResultSet, , , , , , targetResultSet, , , , , )");
      Boolean boolean0 = new Boolean("targetResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("targetResultSet");
      String[] stringArray0 = new String[13];
      stringArray0[1] = "targetResultSet";
      Boolean boolean1 = new Boolean(false);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.equals("targetResultSet");
      dBPrimaryKeyConstraint0.setDoc("B=OB");
      DBCatalog dBCatalog0 = new DBCatalog("rename=qd]");
      SQLUtil.normalize("PRIMARY KEY (, targetResultSet, , , , , , , , , , , )", true);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SQLUtil.normalize("m<aCBCM<15=P!:%'@F", true);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Boolean boolean0 = new Boolean(" /* ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" /* ");
      String[] stringArray0 = new String[13];
      boolean boolean1 = true;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.equals(stringArray0[1]);
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("select intotargetresultset");
      String string0 = "update";
      dBSchema0.isIdentical(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setDoc("update");
      dBPrimaryKeyConstraint0.setDoc(stringArray0[1]);
      dBSchema0.getTriggers();
      // Undeclared exception!
      SQLUtil.mutatesStructure(" /* ");
  }
}
