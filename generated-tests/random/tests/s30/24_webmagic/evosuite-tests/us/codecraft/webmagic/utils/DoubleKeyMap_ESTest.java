/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:43:30 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, HashMap<String, Integer>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Integer> hashMap1 = doubleKeyMap0.remove((String) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Object object0 = doubleKeyMap0.put("|_4p", (String) null, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Object object0 = doubleKeyMap0.get((String) null, "_");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Integer, Object>>(class0);
      Map<Object, HashMap<Integer, Object>> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, Object>>(0);
      HashMap<Object, Map<HashMap<String, Object>, Object>> hashMap1 = new HashMap<Object, Map<HashMap<String, Object>, Object>>(hashMap0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, Object>(hashMap1, class0);
      Object object0 = new Object();
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<Map<HashMap<String, Object>, Object>, Object>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Map<HashMap<String, Object>, Object>, Object>, Map<Object, Object>>();
      HashMap<Map<HashMap<String, Object>, Object>, Object> hashMap1 = new HashMap<Map<HashMap<String, Object>, Object>, Object>();
      HashMap<HashMap<Object, String>, Map<Object, Integer>> hashMap2 = new HashMap<HashMap<Object, String>, Map<Object, Integer>>(0);
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>(hashMap2);
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Object>, Object, Object>(hashMap0, class0);
      doubleKeyMap1.remove(hashMap1, (Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>((Map<Object, Map<String, Object>>) null);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(object0, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Map<HashMap<String, Object>, Object>, Map<Object, Map<HashMap<String, Object>, Object>>> hashMap0 = new HashMap<Map<HashMap<String, Object>, Object>, Map<Object, Map<HashMap<String, Object>, Object>>>();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, Object, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, Object, Map<HashMap<String, Object>, Object>>(hashMap0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>((Map<Integer, Map<Object, String>>) null);
      HashMap<HashMap<String, Object>, Object> hashMap1 = new HashMap<HashMap<String, Object>, Object>();
      Map<HashMap<Object, HashMap<HashMap<String, Integer>, Map<HashMap<Map<HashMap<String, Object>, Object>, String>, Integer>>>, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((Map<HashMap<String, Object>, Object>) hashMap1, (Object) map0, (Map<HashMap<String, Object>, Object>) hashMap1);
      doubleKeyMap0.remove((Map<HashMap<String, Object>, Object>) hashMap1, (Object) doubleKeyMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, Map<Integer, String>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<Integer, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Integer, String>(hashMap0, class0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      hashMap0.put(hashMap1, hashMap2);
      Integer integer0 = new Integer(1);
      String string0 = doubleKeyMap0.get(hashMap1, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Map<HashMap<Object, String>, Map<HashMap<String, Object>, Object>>> hashMap0 = new HashMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Map<HashMap<Object, String>, Map<HashMap<String, Object>, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, HashMap<Object, String>, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, HashMap<Object, String>, Map<HashMap<String, Object>, Object>>(hashMap0, class0);
      HashMap<Map<HashMap<String, Object>, Object>, Integer> hashMap1 = new HashMap<Map<HashMap<String, Object>, Object>, Integer>();
      Map<HashMap<Object, String>, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.remove(hashMap1);
      assertNull(map0);
  }
}
