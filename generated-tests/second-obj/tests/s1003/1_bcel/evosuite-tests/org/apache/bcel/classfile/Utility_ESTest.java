/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:39:11 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.MethodParameter;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.format((-473), (-473), false, 'x');
      assertEquals("-473", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("53fE9:-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 53fE9:-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (-1355), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = Utility.isSet((-2652), 8192);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2613), (int) (byte) (-112));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    f2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.isSet(0, 3955);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 226, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.isSet(68, 68);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, 137);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qe^f>rqdg%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qe^f>rqdg%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NuZ9ujXJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NuZ9ujXJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.typeOfSignature("JB^g jf?62#qy4]R{e\"");
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean0);
      
      String string0 = Utility.format(148, 148, true, 'U');
      assertEquals("148UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.getSignature("int");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "I", "int");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      Utility.typeOfSignature("[]");
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 2684;
      Utility.isSet(2684, 90);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.getSignature("'v3/TI'\"$ku[viGw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[viGw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("]got_w", stringArray0);
      try { 
        Utility.methodSignatureReturnType("]got_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]got_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "%Z[|(6Qt7[HL";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("%Z[|(6Qt7[HL", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[|(6Qt7[HL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      String string1 = Constants.ILLEGAL_OPCODE;
      String string2 = Utility.methodTypeToSignature("<illegal type>", (String[]) null);
      assertEquals("()L<illegal;", string2);
      
      String string3 = Utility.compactClassName("T `jIxx{P1M|e*");
      assertEquals("T `jIxx{P1M|e*", string3);
      
      int int0 = Utility.setBit((-3876), 11);
      assertEquals((-1828), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Signature.translate("L>;V");
      Utility.getSignature("9");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L>;V";
      stringArray0[1] = ">";
      String string0 = Utility.methodTypeToSignature(">", stringArray0);
      assertEquals("(LL>;V;L>;)L>;", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Constant[] constantArray0 = null;
      byte[] byteArray0 = new byte[9];
      Utility.clearBit((byte)0, (byte)0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[0];
      Utility.printArray(objectArray0, false, true);
      Utility.convertString("'");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("88pn/1DNQTC5?W");
      Object[] objectArray1 = new Object[2];
      objectArray1[1] = (Object) byteArray0;
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.replace("5[!k?2e", "(=l/koqy", "(=l/koqy");
      Utility.convertString("uBI\"H.=X^f'*1j");
      try { 
        Utility.typeOfSignature("uBI\"H.=X^f'*1j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: uBI\"H.=X^f'*1j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CJhPN");
      String string0 = Utility.classOrInterface(105);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-93);
      Utility.toHexString(byteArray0);
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("bastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.convertString("Float");
      assertEquals("Float", string0);
      
      byte[] byteArray0 = new byte[3];
      String string1 = Utility.fillup("`'W*}%<(3/$/c5%bL]", 5, true, 'P');
      assertEquals("`'W*}%<(3/$/c5%bL]", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u008A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ifnull");
      mockPrintWriter0.append((CharSequence) "ifnull");
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = Utility.clearBit((-2906), (-427));
      assertEquals((-2100058), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.methodSignatureReturnType("A>~XyCS.GPph(OI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A>~XyCS.GPph(OI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3844));
      constantMethodType0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3094, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      Utility.codeToString(byteArray0, constantPool0, (-1447), 243);
      Utility.format((-3402), (-3402), false, ';');
      Utility.compactClassName("<illegal type>", "<illegal type>", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.convertString("eArw~D&N`!_rO!BQYR");
      boolean boolean0 = true;
      Utility.compactClassName("aG`)h&J6 iw^HE8", "", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("eArw~D&N`!_rO!BQYR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `eArw~D&N`!_rO!BQYR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.classOrInterface(92);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.convertString("53fE9:-");
      byte byte0 = Constants.ATTR_RUNTIMEINVISIBLE_ANNOTATIONS;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("class");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('c');
      assertTrue(boolean0);
      
      String string0 = Utility.format((-1667), (-1667), false, 'r');
      String string1 = Utility.replace("s6/]oFjS=|C%rmK", "s6/]oFjS=|C%rmK", "-1667");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.replace("2m3aK", "2m3aK", "2m3aK");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2m3aK");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-528), 1618);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(47);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[2] = (byte) (-35);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, 2397);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1399), (-1399));
      Utility.compactClassName("short", false);
      Utility.searchOpcode("putStatic");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putStatic", "short", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dcmpg");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1259), (int) (byte)120, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 596;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 596, (-3206));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.replace("eArw~D&N`!_rO!BQYR", "a<%w)Xqw*", "W");
      Utility.convertString("P/1F+oB0UyXW96=p<");
      Utility.classOrInterface(184);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P/1F+oB0UyXW96=p<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P/1F+oB0UyXW96=p<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-47);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)78;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      Utility.setBit((-1491), (byte)17);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)78;
      byteArray2[0] = (byte)17;
      byteArray2[2] = (byte) (-47);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)78;
      byteArray3[1] = (byte) (-47);
      byteArray3[2] = (byte)17;
      byteArray3[3] = (byte)78;
      // Undeclared exception!
      Utility.codeToString(byteArray3, (ConstantPool) null, (int) (byte) (-47), 1, false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-62);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2107), (-2107));
      assertEquals("0:    fastore\n1:    monitorenter\n", string0);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-62)}, byteArray0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("0:    fastore\n1:    monitorenter\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-121));
      assertEquals("0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-121), (byte) (-121), (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "shor";
      stringArray0[1] = "0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n";
      stringArray0[2] = "0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n";
      stringArray0[0] = "0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n";
      stringArray0[5] = "0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n";
      String string1 = Utility.printArray((Object[]) stringArray0, true);
      assertEquals("{0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n, 0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n, 0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n, null, null, 0:    nop\n1:    i2d\n2:    i2d\n3:    nop\n4:    nop\n, null, null}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("B1OV,H@hL$2v]c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B1OV,H@hL$2v]c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = null;
      int int0 = 2326;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2326, 2326, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[8];
      byte byte0 = (byte) (-73);
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(",", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.signatureToString("Fj'S", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit((-1028), (-1028));
      assertEquals((-1028), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Fj'S";
      objectArray0[1] = (Object) "Q";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("Fj'S, Q, null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Utility.replace("eArw~D&N`!_rO!BQYR", "pP1n*60(1H#O;", "j");
      assertEquals("eArw~D&N`!_rO!BQYR", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("P/1F+o%B0UyXW96=p<");
      assertEquals("P/1F+o%B0UyXW96=p<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = Utility.clearBit(64, 891);
      assertEquals(64, int0);
      
      String string0 = Utility.accessToString((-463), true);
      assertEquals("public final abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JB^g jf?62#qy4]R{e\"");
      assertEquals((byte)11, byte0);
      
      String string0 = Utility.signatureToString("JB^g jf?62#qy4]R{e\"");
      assertEquals("long", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("The filter must not be null", "v.7QC|n|83$)d", "long");
      assertEquals("The filter must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfMethodSignature("IVXhmB6#X/eKjnY}jPI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IVXhmB6#X/eKjnY}jPI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)67;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)101, (byte) (-34), (byte) (-72), (byte)72, (byte)67}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, 120, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.bcel.classfile.Constant");
      assertEquals("org.apache.bcel.classfile.Constant", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      String string0 = Utility.replace("org.apache.bcel.classfile.Constant", "&gd`55*J*,", "java.lang.");
      assertEquals("org.apache.bcel.classfile.Constant", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)109;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("93 ce cb 6d", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-50), (byte) (-53), (byte)109}, byteArray0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (int) (byte)109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)93}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantLong constantLong0 = new ConstantLong((byte)93);
      assertEquals(93L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-50);
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte)93;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-50), (int) (byte)93);
      assertEquals("0:    <illegal opcode>\n1:    ixor\n2:    ixor\n3:    dup2_x1\n", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-126), (byte) (-126), (byte)93}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-83);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-83);
      byteArray1[4] = (byte) (-83);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83), (byte)0, (byte)0, (byte) (-83), (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 216, (-1932));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JU_o1D!");
      assertEquals((byte)11, byte0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(=l/koqy");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3179), (-528));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    return\n", string0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "5=9KEpUJ5k";
      String string1 = "invokestatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("G[-sHX<j^^$|-4aWXNR", "5=9KEpUJ5k", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G[-sHX<j^^$|-4aWXNR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("org.apache.commons.io.filefilter.OrFileFilter", stringArray0);
      assertEquals("()Lorg/apache/commons/io/filefilter/OrFileFilter;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte) (-108);
      String string0 = Utility.classOrInterface((-2977));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "checkcast");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      int int0 = (-2460);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-412), 609);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("short", "short", false);
      assertEquals("short", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)114;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2975), (-507));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-36);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-71), (byte) (-93), (byte) (-36)}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1226));
      assertEquals("0:    if_icmpne\t\t#-18013\n3:    <illegal opcode>\n", string0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-71), (byte) (-93), (byte) (-36)}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(30);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(30, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-15);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 144);
      assertEquals("0:    <illegal opcode>\n1:    castore\n2:    <illegal opcode>\n", string0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)85, (byte) (-15)}, byteArray0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n1:    castore\n2:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    castore
         // 2:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 3515;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-113);
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("d2l", string0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertNotNull(string0);
      
      try { 
        byteSequence0.readBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.replace("eArw~D&N`!_rO!BQYR", "eArw~D&N`!_rO!BQYR", "j");
      assertEquals("j", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("j");
      assertEquals("j", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "j", " skipped");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "org.apche.commons.io.fil1filter.OrFileFilter";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("org.apche.commons.io.fil1filter.OrFileFilter", stringArray0);
      assertEquals("()Lorg/apche/commons/io/fil1filter/OrFileFilter;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureToString("()Lorg/apche/commons/io/fil1filter/OrFileFilter;", "()Lorg/apche/commons/io/fil1filter/OrFileFilter;", "()Lorg/apche/commons/io/fil1filter/OrFileFilter;");
      assertEquals("()Lorg/apche/commons/io/fil1filter/OrFileFilter; org.apche.commons.io.fil1filter.OrFileFilter ()Lorg/apche/commons/io/fil1filter/OrFileFilter;()", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Pattern.quote("()Lorg/apche/commons/io/fil1filter/OrFileFilter;");
      assertEquals("\\Q()Lorg/apche/commons/io/fil1filter/OrFileFilter;\\E", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      try { 
        Utility.methodSignatureArgumentTypes("Q()Lorg/apche/commons/io/fil1filter/OrFileFilter;E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q()Lorg/apche/commons/io/fil1filter/OrFileFilter;E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("L';V");
      assertEquals("'", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)85;
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[gMp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `gMp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1948));
      assertEquals((-1948), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType((-1948));
      assertEquals((-1948), constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a7", string0);
      assertArrayEquals(new byte[] {(byte) (-89)}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 752, (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("($5=UYCjpZ", "($5=UYCjpZ", "($5=UYCjpZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$5=UYCjpZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)28;
      byteArray0[3] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)120, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("N^A\"bn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N^A\"bn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(",-Wy_3(OCe/6GmP,+");
      assertEquals(",-Wy_3(OCe/6GmP,+", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[2] = (byte)96;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)62;
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1355), (int) (byte) (-71), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-104);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[3] = (byte)18;
      byteArray1[1] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray1[5] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-40), (int) (byte)18, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.replace("2m3aK", "2m3aK", "2m3aK");
      assertEquals("2m3aK", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("2m3aK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2m3aK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(47);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(47, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = "<Any exception>(0)";
      String[] stringArray0 = new String[19];
      stringArray0[0] = "<Any exception>(0)";
      boolean boolean0 = true;
      String string1 = Utility.compactClassName("<Any exception>(0)", true);
      assertEquals("<Any exception>(0)", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), 118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Utility.classOrInterface((byte)32);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (-1261));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ">\t";
      stringArray0[2] = ">\t";
      stringArray0[4] = ">\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(">\t", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = (byte)93;
      byte byte1 = (byte) (-60);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte) (-60)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("##.\"X@hGMhAi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ##.\"X@hGMhAi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.convertString("Float");
      assertEquals("Float", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)7;
      String string1 = Utility.classOrInterface((byte)31);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)7);
      assertEquals("7:    nop\n8:    nop\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)125, (byte)31, (byte)31, (byte)7, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      boolean boolean0 = Utility.isSet((byte)13, 9973);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1436), 53, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "88pn/1DNQTC5?W";
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[3] = (Object) "88pn/1DNQTC5?W";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("java.lang.Object@1cc83d53, null, null, 88pn/1DNQTC5?W, null, null, null, null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("88pn/1DNQTC5?W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 88pn/1DNQTC5?W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("-N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)31}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (-3153));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<Any exception>(0)";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "2m3aK";
      String string1 = Utility.replace("2m3aK", "2m3aK", "2m3aK");
      assertEquals("2m3aK", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte byte0 = Constants.ITEM_InitObject;
      assertEquals((byte)6, byte0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = true;
      String string2 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte) (-54), false);
      assertEquals("3:    athrow\n4:    iload_0\n5:    breakpoint\n6:    astore_1\n", string0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)82, (byte) (-65), (byte)26, (byte) (-54), (byte)76}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.classOrInterface((byte)113);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)67;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Pattern.quote("-m%dIR*(J@");
      assertEquals("\\Q-m%dIR*(J@\\E", string0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null, true, true);
      assertNull(string1);
      
      byte byte0 = Utility.typeOfSignature("Z`L");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)63, (byte)12, (byte)46, (byte) (-67), (byte)67}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(16140, constantMethodType0.getDescriptorIndex());
      assertArrayEquals(new byte[] {(byte)63, (byte)12, (byte)46, (byte) (-67), (byte)67}, byteArray0);
      assertNotNull(constantMethodType0);
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals("iaload", string0);
      assertArrayEquals(new byte[] {(byte)63, (byte)12, (byte)46, (byte) (-67), (byte)67}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "Object";
      try { 
        Utility.methodSignatureReturnType("Object", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Object'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.replace("eArw~D&N`!_rO!BQYR", "pP1n*60(1H#O;", "j");
      assertEquals("eArw~D&N`!_rO!BQYR", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("P/1F+o%B0UyXW96=p<");
      assertEquals("P/1F+o%B0UyXW96=p<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, 2194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(",-Wy_3(OCe/6GmP,+");
      assertEquals(",-Wy_3(OCe/6GmP,+", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      String string0 = Utility.replace("O'", ",-Wy_3(OCe/6GmP,+", (String) null);
      assertEquals("O'", string0);
      assertNotNull(string0);
      
      String string1 = "org.apache.bcel.classfile.Utility";
      String string2 = Utility.convertString("FGesEkq-");
      assertEquals("FGesEkq-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("b5", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray0);
      assertNotNull(string3);
      
      int int0 = (-3456);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2343), (-3456));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = " read ";
      String string1 = "impdep1";
      String string2 = Utility.compactClassName(" read ", "impdep1", false);
      assertEquals(" read ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.getSignature(" read ");
      assertEquals("Lread;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName("impdep1", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.getSignature("MCl7]nAmz");
      assertEquals("LMCl7]nAmz;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LMCl7]nAmz;");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.fillup("LMCl7]nAmz;", (-18), false, 'y');
      assertEquals("LMCl7]nAmz;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("LMCl7]nAmz;", false);
      assertNotNull(byteArray0);
      
      String string2 = Utility.compactClassName("LMCl7]nAmz;", false);
      assertEquals("LMCl7]nAmz;", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.getSignature("ifnull");
      assertEquals("Lifnull;", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ukzo'pF0V<YyK");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.fillup("e", (-18), true, 'K');
      assertEquals("e", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("Lifnull;", false);
      assertArrayEquals(new byte[] {(byte)76, (byte)105, (byte)102, (byte)110, (byte)117, (byte)108, (byte)108, (byte)59}, byteArray0);
      assertNotNull(byteArray0);
      
      String string2 = Utility.compactClassName("YB4M4RF;|msrmou?", false);
      assertEquals("YB4M4RF;|msrmou?", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = (-1068);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (-1068));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[5] = (byte) (-78);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (-2796));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("3l", false);
      assertArrayEquals(new byte[] {(byte)51, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3l");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("3l");
      assertEquals("3l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1445, (-490), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.fillup("ifnull", 75, true, '8');
      assertEquals("ifnull888888888888888888888888888888888888888888888888888888888888888888888", string0);
      assertNotNull(string0);
      
      String string1 = "areturn";
      byte[] byteArray0 = Utility.decode("areturn", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("breakpoint");
      assertEquals("Lbreakpoint;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("Lbreakpoint;");
      assertEquals("Lbreakpoint;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte byte0 = Utility.typeOfSignature("Lbreakpoint;");
      assertEquals((byte)14, byte0);
      
      byte byte1 = Constants.ITEM_Bogus;
      assertEquals((byte)0, byte1);
      assertFalse(byte1 == byte0);
      
      byte byte2 = Constants.ATTR_SOURCE_FILE;
      assertEquals((byte)0, byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      
      Object[] objectArray0 = new Object[19];
      objectArray0[1] = (Object) "Lbreakpoint;";
      String string2 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6024, 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1948));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-1948), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-1948), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-1948), constantMethodType1.getDescriptorIndex());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertNotNull(constantMethodType1);
      
      ConstantMethodType constantMethodType2 = (ConstantMethodType)constantMethodType1.clone();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-1948), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-1948), constantMethodType1.getDescriptorIndex());
      assertEquals((-1948), constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType2);
      assertNotSame(constantMethodType1, constantMethodType2);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertNotSame(constantMethodType2, constantMethodType0);
      assertNotSame(constantMethodType2, constantMethodType1);
      assertNotNull(constantMethodType2);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, (int) (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.getSignature("O!P)xG)Y3*W0p");
      assertEquals("LO!P)xG)Y3*W0p;", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 71, (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("*$#J/kS1}R", false);
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)74, (byte)47, (byte)107, (byte)83, (byte)49, (byte)125, (byte)82}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)74, (byte)47, (byte)107, (byte)83, (byte)49, (byte)125, (byte)82}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)74, (byte)47, (byte)107, (byte)83, (byte)49, (byte)125, (byte)82}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.mark(104);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)74, (byte)47, (byte)107, (byte)83, (byte)49, (byte)125, (byte)82}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("aload_0", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)74, (byte)47, (byte)107, (byte)83, (byte)49, (byte)125, (byte)82}, byteArray0);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("'");
      assertEquals("'", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-873), (int) (byte) (-112));
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("![hzGwvc");
      assertEquals("![hzGwvc", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.convertString("CgjtJd,7R frx");
      assertEquals("CgjtJd,7R frx", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = Utility.replace("j", "$iJdkl>SdyIQ", "(`lr");
      assertEquals("j", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, 1681);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 71, (int) (byte) (-112));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P7vh.Cn1");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, 580, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)79;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.classOrInterface((-2977));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2977), (-3804));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.replace("eArw~D&N`!_rO!BQYR", "a<%w)Xqw*", "j");
      assertEquals("eArw~D&N`!_rO!BQYR", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("P/1F+oB0UyXW96=p<");
      assertEquals("P/1F+oB0UyXW96=p<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "j";
      objectArray0[2] = (Object) "eArw~D&N`!_rO!BQYR";
      objectArray0[3] = (Object) "eArw~D&N`!_rO!BQYR";
      objectArray0[5] = (Object) "P/1F+oB0UyXW96=p<";
      objectArray0[6] = (Object) "j";
      try { 
        Utility.typeOfSignature("P/1F+oB0UyXW96=p<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P/1F+oB0UyXW96=p<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Pattern.quote("float");
      assertEquals("\\Qfloat\\E", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-43);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-43)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-43)}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 18, (int) (byte)89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.format((-1895), (-632), true, 'L');
      assertEquals("-1895", string0);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("eArw~D&N`!_rO!BQYR", (-18), true, 'L');
      assertEquals("eArw~D&N`!_rO!BQYR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 1662);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1172), (-1172));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byte byte0 = Utility.typeOfSignature("B&5zS9");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[0] = (byte)94;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Pattern.quote("-m%dIR*(J@");
      assertEquals("\\Q-m%dIR*(J@\\E", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = Utility.setBit(76, 76);
      assertEquals(4172, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 175, (int) (byte)123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-24), 170);
      assertEquals("0:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("0:    nop\n");
      assertEquals("0:    nop\\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.fillup("if$null", (byte) (-79), true, '8');
      assertEquals("if$null", string0);
      assertNotNull(string0);
      
      try { 
        Utility.decode("if$null", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-36);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$b2$dc$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-36), (byte)0}, byteArray0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("$A$b2$dc$A", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-36), (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      try { 
        Utility.typeOfSignature("$A$b2$dc$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$b2$dc$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-56);
      ConstantPool constantPool0 = null;
      int int0 = (-1781);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (-1781));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "<Any exception>(0)";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<Any exception>(0)";
      boolean boolean0 = Utility.isSet(47, 50);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("<Any exception>(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Any exception>(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1172), (-1172));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-6);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      String string0 = Utility.replace("lastore", "lastore", "lastore");
      assertEquals("lastore", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("D/");
      assertEquals((byte)7, byte0);
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)84}, byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "<clinit>";
      objectArray0[3] = (Object) "<clinit>";
      objectArray0[4] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("<clinit>");
      assertEquals("<clinit>", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      String string0 = Utility.replace("Illegal type: ", "}-H&Ut", "\t\t");
      assertEquals("Illegal type: ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte)119, (byte)88}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("pop2", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)88, (byte)119, (byte)88}, byteArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)8;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-76);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1045, 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2159), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Pattern.quote("float");
      assertEquals("\\Qfloat\\E", string0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null, true, false);
      assertNull(string1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Pattern.quote("sOWTwyRe|IC@L'cF\"j");
      assertEquals("\\QsOWTwyRe|IC@L'cF\"j\\E", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid StackMap offset: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)10;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid StackMap offset: ", true);
      assertEquals("int", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",Wy3(OCe/6GmP,9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Wy3(OCe/6GmP,9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("4w!$ P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4w!$ P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.methodSignatureReturnType("C", true);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      String string1 = "e.xoD*1V$l:.";
      String string2 = "double";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<T'a+Gfg2J-a(t<}kJ]", "e.xoD*1V$l:.", "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <T'a+Gfg2J-a(t<}kJ]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = true;
      byteArray0[0] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("10 00", string0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      int int0 = 792;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2091, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Uv;,C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Uv;,C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)113;
      byteArray0[0] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Pattern.quote("-m%dIR*(J@");
      assertEquals("\\Q-m%dIR*(J@\\E", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)123;
      Constant[] constantArray0 = new Constant[0];
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Pattern.quote("-m%dIR*(J@");
      assertEquals("\\Q-m%dIR*(J@\\E", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      String string1 = Utility.classOrInterface((-3876));
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-3804), (-1392));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    dup_x2\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertNotNull(string2);
      
      String string3 = Utility.signatureToString("Z7");
      assertEquals("boolean", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      try { 
        Utility.typeOfSignature("0:    dup_x2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dup_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-67);
      String string0 = "27k\\/";
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)33;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-67);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-67), (byte) (-67)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-2213), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("T^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(179, 200);
      assertEquals(179, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(200, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(179, 84);
      assertEquals(179, constantInvokeDynamic0.getClassIndex());
      assertEquals(84, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(179, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantFieldref constantFieldref1 = (ConstantFieldref)constantFieldref0.copy();
      assertEquals(179, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(200, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(200, constantFieldref1.getNameAndTypeIndex());
      assertEquals(179, constantFieldref1.getClassIndex());
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref0);
      assertNotNull(constantFieldref1);
      
      ConstantInteger constantInteger0 = new ConstantInteger(185);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(185, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1483.7589));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1483.7589), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 200, 179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ifnull");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ifnull");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "R_Z95x7t'IuQ$F&cR";
      try { 
        Utility.typeOfSignature("R_Z95x7t'IuQ$F&cR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R_Z95x7t'IuQ$F&cR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("Invalid StackMap offset: ");
      assertEquals((byte)10, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("H3VsIo_Zy", "La8;V", "new", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H3VsIo_Zy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("org.apache.commons.io.filefilter.OrFileFilter", false);
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-1);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-156), (-3432));
      assertEquals("0:    impdep2\n1:    impdep2\n2:    lastore\n3:    impdep2\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)80, (byte) (-1)}, byteArray0);
      assertNotNull(string1);
      
      byte byte0 = Utility.typeOfSignature("Cz0o@mjXQ^");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.replace("m'", "? super ", ";#x,ZQ U:");
      assertEquals("m'", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("CyP@pC");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.compactClassName("m'", ";#x,ZQ U:", false);
      assertEquals("m'", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)19;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 269);
      assertEquals("0:    sipush\t\t4864\n", string0);
      assertArrayEquals(new byte[] {(byte)17, (byte)19, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("11 13 00", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)17, (byte)19, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      String string2 = Utility.getSignature("0:    sipush\t\t4864\n");
      assertEquals("L0:;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3844));
      assertEquals((-3844), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertEquals((-3844), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-3844), constantMethodType1.getDescriptorIndex());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertNotNull(constantMethodType1);
      
      ConstantMethodType constantMethodType2 = (ConstantMethodType)constantMethodType0.clone();
      assertEquals((-3844), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertEquals((-3844), constantMethodType2.getDescriptorIndex());
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType0, constantMethodType2);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType2, constantMethodType0);
      assertNotSame(constantMethodType2, constantMethodType1);
      assertNotNull(constantMethodType2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1208, (int) (byte) (-53));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("@w7TY5Y]8|=U6QGKm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @w7TY5Y]8|=U6QGKm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Utility.convertString("P/1F+oB0UyXW96=p<");
      assertEquals("P/1F+oB0UyXW96=p<", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface(4603);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    athrow
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Pattern.quote("-m%dIR*(J@");
      assertEquals("\\Q-m%dIR*(J@\\E", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)77;
      try { 
        Utility.typeOfSignature("YG;SnXM,Fz-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YG;SnXM,Fz-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 122;
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2440), (int) (byte) (-105));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2l
         // 1:    dcmpl
         // 2:    dcmpl
         // 3:    dcmpl
         // 4:    dcmpl
         // 5:    dcmpl
         // 6:    dcmpl
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = Utility.setBit(520, 520);
      assertEquals(776, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 814, (-893), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Pattern.quote("-m%dIR*(J@");
      assertEquals("\\Q-m%dIR*(J@\\E", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      try { 
        Utility.typeOfSignature("G8#:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G8#:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warniny: Pddig b}te !=  in ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("H-!,E.`nJ6h(m_G[-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H-!,E.`nJ6h(m_G[-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = (-2977);
      String string0 = Utility.classOrInterface(239);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 239, (-1936));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)123;
      String string0 = Utility.classOrInterface(396);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("EBuk0.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EBuk0.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.fillup("if$null", (byte) (-79), true, '8');
      assertEquals("if$null", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("if$null", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)33, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), 1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.classOrInterface(2643);
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("interface", "return", "interface");
      assertEquals("interface", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("interface");
      assertEquals("interface", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.convertString("return");
      assertEquals("return", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)24;
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("a5 18", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-91), (byte)24}, byteArray0);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("\"~2r{)B5F=+RAm& ", "R_Z95x7t'IuQ$F&cR", "\"~2r{)B5F=+RAm& ");
      assertEquals("\"~2r{)B5F=+RAm& ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        Utility.typeOfSignature("/{'p[2T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /{'p[2T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      String string0 = "goto_w";
      String string1 = Utility.compactClassName("goto_w");
      assertEquals("goto_w", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (-3445));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "MzLQAh8uv-L%EJ`dF/";
      String string1 = Utility.replace("epxj8~O1JGE&", "MzLQAh8uv-L%EJ`dF/", "char");
      assertEquals("epxj8~O1JGE&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("org.apache.bcel.classfile.Utility");
      assertEquals("org.apache.bcel.classfile.Utility", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.methodSignatureReturnType("bU-goyv*9z4)IT", true);
      assertEquals("int", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    daload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-10);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)60, (byte)60, (byte) (-10)}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 119, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        Utility.typeOfSignature(").C4[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ).C4[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3844));
      assertEquals((-3844), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertEquals((-3844), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-3844), constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertNotNull(constantMethodType1);
      
      ConstantMethodType constantMethodType2 = new ConstantMethodType((-3844));
      assertEquals((byte)16, constantMethodType2.getTag());
      assertEquals((-3844), constantMethodType2.getDescriptorIndex());
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType2);
      
      ClassPath classPath0 = new ClassPath("D");
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, "D");
      assertTrue(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath1);
      assertFalse(classPath0.equals((Object)classPath1));
      assertTrue(classPath1.equals((Object)classPath0));
      assertNotSame(classPath0, classPath1);
      assertNotSame(classPath1, classPath0);
      assertNotNull(syntheticRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(classPath0.equals((Object)classPath1));
      assertTrue(classPath1.equals((Object)classPath0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotSame(classPath0, classPath1);
      assertNotSame(classPath1, classPath0);
      assertNotNull(javaClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = Utility.decode("D", false);
      assertArrayEquals(new byte[] {(byte)68}, byteArray0);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, (int) (byte)2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fe2,[d4+pi],?K");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string0 = Utility.getSignature("GYQlpl*nt(F9/Rb");
      assertEquals("LGYQlpl*nt(F9/Rb;", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("LGYQlpl*nt(F9/Rb;");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.setBit((-2284), 2489);
      assertEquals((-2284), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.getSignature("breakpoint");
      assertEquals("Lbreakpoint;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("Lbreakpoint;");
      assertEquals("Lbreakpoint;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface(345);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.classOrInterface(7);
      assertEquals("class", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.replace("^c:u$sBPVsh", ";.s=141Q(\u0001QD%", "R_Z95x7t'IuQ$F&cR");
      assertEquals("^c:u$sBPVsh", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      byte byte0 = Utility.typeOfSignature("Lbreakpoint;");
      assertEquals((byte)14, byte0);
      
      byte byte1 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte1);
      assertFalse(byte1 == byte0);
      
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Utility.classOrInterface(211);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      String string1 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[2] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 71, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(47);
      assertEquals(47, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1085, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Pddig byte !=  in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Pddig byte !=  in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte byte0 = (byte) (-79);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 1511;
      try { 
        Utility.typeOfSignature("*$#J/k1}6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $#J/k1}6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*);Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: );Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(74);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(74, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(84);
      assertEquals(84, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      
      constantMethodType1.setDescriptorIndex(74);
      assertEquals(74, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType1, constantMethodType0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("aa aa", string0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86)}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5206, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (int) (byte)88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 269);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-99), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 12, 3386, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = Utility.isSet(0, 0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = constantMethodType0.toString();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 0)", string0);
      assertNotNull(string0);
      
      constantMethodType0.setDescriptorIndex(0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    wide\t(wide)\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-60)}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("lreturn", true);
      assertEquals("lreturn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("}G@xA:>C:");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "1f";
      try { 
        Utility.typeOfSignature("1f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)123;
      byteArray0[8] = (byte)85;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, 178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Utility.classOrInterface(2643);
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface(2643);
      assertEquals("interface", string1);
      assertNotNull(string1);
      
      String string2 = Utility.convertString("interface");
      assertEquals("interface", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "%'ZpN";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("%'ZpN", false);
      assertArrayEquals(new byte[] {(byte)37, (byte)39, (byte)90, (byte)112, (byte)78}, byteArray0);
      assertNotNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "%'ZpN";
      objectArray0[2] = (Object) "interface";
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      String string4 = Utility.getSignature("interface");
      assertEquals("Linterface;", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2643, 16384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)9;
      byteArray0[3] = (byte) (-76);
      byte byte0 = Utility.typeOfSignature("SV");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.signatureToString("SV");
      assertEquals("short", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-7);
      byte byte0 = (byte)2;
      byteArray0[4] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 595, (int) (byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)1, (byte) (-34), (byte)0, (byte)24, (byte)34, (byte)96, (byte) (-9)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(49665, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)1, (byte) (-34), (byte)0, (byte)24, (byte)34, (byte)96, (byte) (-9)}, byteArray0);
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(49665, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(49665, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertTrue(constantString1.equals((Object)constantString0));
      assertArrayEquals(new byte[] {(byte) (-62), (byte)1, (byte) (-34), (byte)0, (byte)24, (byte)34, (byte)96, (byte) (-9)}, byteArray0);
      assertNotNull(constantString1);
      
      constantArray0[0] = (Constant) constantString1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(56832, constantInterfaceMethodref0.getClassIndex());
      assertEquals(6178, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)1, (byte) (-34), (byte)0, (byte)24, (byte)34, (byte)96, (byte) (-9)}, byteArray0);
      assertNotNull(constantInterfaceMethodref0);
      
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(43, 43);
      assertEquals(43, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(43, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertEquals(43, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(43, constantMethodref0.getNameAndTypeIndex());
      assertEquals(43, constantMethodref1.getNameAndTypeIndex());
      assertEquals(43, constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass((byte)34);
      assertEquals(34, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(7, byteSequence0.getIndex());
      assertEquals("iadd", string0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)1, (byte) (-34), (byte)0, (byte)24, (byte)34, (byte)96, (byte) (-9)}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)93;
      String string0 = Utility.methodSignatureReturnType("C", true);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)93);
      assertEquals("0:    nop\n1:    nop\n2:    dup2_x1\n3:    <illegal opcode>\n4:    dup2_x1\n5:    nop\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte) (-50), (byte)93, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)93, (-896));
      assertEquals((-896), constantFieldref0.getNameAndTypeIndex());
      assertEquals(93, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte) (-50), (byte)93, (byte)0}, byteArray0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        Utility.typeOfMethodSignature("k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantPool constantPool0 = null;
      String string0 = "{/G]VK2:s_uSH%o";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{/G]VK2:s_uSH%o");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2828, 2828, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = Utility.isSet(0, 3955);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 181, 3955);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ArsH%p7)EA!djts*b");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.classOrInterface((byte) (-59));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2371, 147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-102);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte) (-88);
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 216, (-553));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, (-1392));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleParameterAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      String string0 = Utility.replace("\"", "\"", "\"");
      assertEquals("\"", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        Utility.typeOfSignature("!P<H%W.;x<oHG~c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P<H%W.;x<oHG~c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("*$#J/kS1}R", false);
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)74, (byte)47, (byte)107, (byte)83, (byte)49, (byte)125, (byte)82}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*$#J/kS1}R");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, (-926), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.getSignature("eArwW#D&N`_rO!BQYR");
      assertEquals("LeArwW#D&N`_rO!BQYR;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("j");
      assertEquals("j", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("j", "eArwW#D&N`_rO!BQYR", "eArwW#D&N`_rO!BQYR");
      assertEquals("j", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.convertString("j");
      assertEquals("j", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("a4", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("MCl7]nAmz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MCl7]nAmz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.signatureToString("DC+9LL:`B@4qN0;sJ#`", true);
      assertEquals("double", string0);
      assertNotNull(string0);
      
      short short0 = Constants.MULTIANEWARRAY_QUICK;
      assertEquals((short)223, short0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)107;
      byteArray0[7] = (byte) (-65);
      byteArray0[4] = (byte)60;
      byteArray0[6] = (byte) (-86);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)97;
      String string0 = "MCl7]nAmz";
      String string1 = Utility.getSignature("MCl7]nAmz");
      assertEquals("LMCl7]nAmz;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LMCl7]nAmz;");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("MCl7]nAmz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MCl7]nAmz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.classOrInterface(197);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-59);
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-59), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 164, (int) (byte) (-59));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "{/VK2:s_uSH%o";
      String string1 = "%.%xmW+%DQ;l5In1";
      try { 
        Utility.typeOfSignature("%.%xmW+%DQ;l5In1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %.%xmW+%DQ;l5In1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "float";
      String string1 = Pattern.quote("float");
      assertEquals("\\Qfloat\\E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) null, true, false);
      assertNull(string2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("arraylength", "(\"", true);
      assertEquals("arraylength", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("arraylength");
      assertEquals("arraylength", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface(498);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.getSignature("arraylength");
      assertEquals("Larraylength;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Utility.methodTypeToSignature("(\"", (String[]) null);
      assertEquals("()L(\";", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = Utility.methodSignatureReturnType("V", true);
      assertEquals("void", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = Utility.methodTypeToSignature("()L(\";", (String[]) null);
      assertEquals("()L()L(\";;", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = Utility.getSignature("freturn");
      assertEquals("Lfreturn;", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      int int0 = 0;
      byte[] byteArray1 = Utility.decode("newarray", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)110, (byte)101, (byte)119, (byte)97, (byte)114, (byte)114, (byte)97, (byte)121}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ConstantClass constantClass0 = new ConstantClass((byte) (-118));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-118), constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-118), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals((-118), constantClass1.getNameIndex());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$8a$A$A$8a$A$A$A$A$A$A", string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-118), (byte)0, (byte)0, (byte) (-118), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = 1658;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 201, 1658);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 2651;
      short short0 = Constants.LALOAD;
      assertEquals((short)47, short0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(k =tt*zAb^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `k =tt*zAb^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-25);
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)20, (byte) (-25), (byte)20, (byte) (-25)}, byteArray0);
      
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-25), (int) (byte) (-81));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byte byte1 = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-112);
      byte byte2 = (byte) (-16);
      byteArray0[4] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-16), (int) (byte) (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = "\"~2r{)B5F=+RAm& ";
      String string2 = Utility.methodSignatureReturnType("\"~2r{)B5F=+RAm& ");
      assertEquals("byte", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("L';V");
      assertEquals("'", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-7);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-82);
      byteArray0[3] = (byte) (-106);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{/G]VK2:s_uSH%io");
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 1346);
      assertEquals("0:    <illegal opcode>\n1:    freturn\n2:    nop\n3:    fcmpg\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-82), (byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(388);
      assertEquals("protected transient native", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("?3F'<PY7lzhPsc0Y", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.convertString("?3F'<PY7lzhPsc0Y");
      assertEquals("?3F\\'<PY7lzhPsc0Y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, (-864), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-67);
      byteArray0[0] = (byte) (-47);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-67), (byte)0}, byteArray0);
      
      String string0 = Utility.getSignature("MCl7]nAmz");
      assertEquals("LMCl7]nAmz;", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LMCl7]nAmz;");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.fillup("wg\"}`r3[x>e++{}L", 735, false, '$');
      assertEqualswg\"}`r3[x>e++{}L", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "long";
      byte[] byteArray1 = Utility.decode("long", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)108, (byte)111, (byte)110, (byte)103}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string3 = Utility.compactClassName("newarray", false);
      assertEquals("newarray", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)119, (-18));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(",-Wy_3(OCe/6GmP,+");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals(",-Wy_3(OCe/6GmP,+", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[0] = (byte)124;
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1500, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)114;
      byteArray0[2] = (byte) (-112);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)9, (byte) (-112), (byte) (-76), (byte)8, (byte) (-10), (byte)114, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 71, 2303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.classOrInterface(2643);
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("interface", "return", "interface");
      assertEquals("interface", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("interface");
      assertEquals("interface", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.convertString("return");
      assertEquals("return", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("3d 3d", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte)61, (byte)61}, byteArray0);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("R_Z95x7t'IuQ$F&cR", ", ", "<init>");
      assertEquals("R_Z95x7t'IuQ$F&cR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("XR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "C7]nmz";
      String string1 = Utility.getSignature("C7]nmz");
      assertEquals("LC7]nmz;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)7;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-28), (-365));
      assertEquals("0:    iconst_4\n1:    astore\t\t%228\n3:    iadd\n4:    aaload\n5:    iconst_4\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)7, (byte)58, (byte) (-28), (byte)96, (byte)50, (byte)7}, byteArray0);
      assertNotNull(string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("07 3a e4 60 32 07", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)7, (byte)58, (byte) (-28), (byte)96, (byte)50, (byte)7}, byteArray0);
      assertNotNull(string3);
      
      String string4 = Utility.getSignature("?imM.K");
      assertEquals("L?imM/K;", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = "dstore_3";
      String string6 = Utility.getSignature("dstore_3");
      assertEquals("Ldstore_3;", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      short short0 = Utility.searchOpcode("3\"s");
      assertEquals((short) (-1), short0);
      
      String string7 = "(bytes = ";
      try { 
        Utility.typeOfMethodSignature("(bytes = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (bytes = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte byte0 = (byte)37;
      byte byte1 = (byte)29;
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1358, (int) (byte)37, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (int) (byte)38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byte byte0 = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)102;
      byte byte1 = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Utility.replace("eArw~D&N`!_rO!BQYR", "a<%w)Xqw*", "a<%w)Xqw*");
      assertEquals("eArw~D&N`!_rO!BQYR", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("P/1F+oB0UyXW96=p<");
      assertEquals("P/1F+oB0UyXW96=p<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "eArw~D&N`!_rO!BQYR";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)42;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("2a 95 2e 2a 95 a4 18 2a 2a", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)42, (byte) (-107), (byte)46, (byte)42, (byte) (-107), (byte) (-92), (byte)24, (byte)42, (byte)42}, byteArray0);
      assertNotNull(string2);
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), 2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$84", string0);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Class must notbe nul");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$84", string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      assertNotNull(string1);
      
      byte[] byteArray1 = Utility.decode("$84", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureArgumentTypes("$84");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $84
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Constant[] constantArray0 = null;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 235, 4240, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U;f s^9Hl");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)51}, byteArray0);
      
      String string0 = Utility.convertString("U;f s^9Hl");
      assertEquals("U;f s^9Hl", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1037, 360, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-64);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65535, (int) (byte) (-64), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-1569));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S-N");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.signatureToString("[I(wm,nQHEcS");
      assertEquals("int[]", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-112);
      boolean boolean0 = true;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("S-N", "[I(wm,nQHEcS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"[I(wm,nQHEcS\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      String string0 = Utility.convertString("?  xtendsQ");
      assertEquals("?  xtendsQ", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("?  xtendsQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?  xtendsQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Utility.convertString("Float");
      assertEquals("Float", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Float");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("'");
      assertEquals("\\'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 144, 144, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(47);
      assertEquals(47, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rBONp~4q`c");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 104, 60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 0, 311);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpge\t\t#5163
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      String string0 = "~ArsH%p7)EA!djts*b";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ArsH%p7)EA!djts*b");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        Utility.methodSignatureReturnType("~ArsH%p7)EA!djts*b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EA!djts*b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-40);
      byte byte0 = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 3848);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)22, (byte) (-111), (byte) (-97)}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, 2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1948));
      assertEquals((-1948), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType((-1948));
      assertEquals((-1948), constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      
      ConstantMethodType constantMethodType2 = (ConstantMethodType)constantMethodType1.clone();
      assertEquals((-1948), constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-1948), constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType1, constantMethodType2);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertNotSame(constantMethodType2, constantMethodType1);
      assertNotSame(constantMethodType2, constantMethodType0);
      assertNotNull(constantMethodType2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("9a", string0);
      assertArrayEquals(new byte[] {(byte) (-102)}, byteArray0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("9a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = null;
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)20, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RD1Uk2b+0Qbx_%Nk", false);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 25, 1514);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, 83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte byte0 = (byte) (-71);
      String string0 = Utility.getSignature("O!P)xG)Y3*W0p");
      assertEquals("LO!P)xG)Y3*W0p;", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("O!P)xG)Y3*W0p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O!P)xG)Y3*W0p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = "\\n";
      String string1 = Utility.compactClassName("\n", true);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, 3595);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "org.apache.commons.io.fil1filter.OrFileFilter";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("org.apache.commons.io.fil1filter.OrFileFilter", stringArray0);
      assertEquals("()Lorg/apache/commons/io/fil1filter/OrFileFilter;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureToString("()Lorg/apache/commons/io/fil1filter/OrFileFilter;", "()Lorg/apache/commons/io/fil1filter/OrFileFilter;", "()Lorg/apache/commons/io/fil1filter/OrFileFilter;");
      assertEquals("()Lorg/apache/commons/io/fil1filter/OrFileFilter; org.apache.commons.io.fil1filter.OrFileFilter ()Lorg/apache/commons/io/fil1filter/OrFileFilter;()", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Pattern.quote("()Lorg/apache/commons/io/fil1filter/OrFileFilter;");
      assertEquals("\\Q()Lorg/apache/commons/io/fil1filter/OrFileFilter;\\E", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byte byte0 = (byte) (-15);
      byteArray0[8] = (byte) (-15);
      byteArray0[2] = (byte)0;
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()Lorg/apache/commons/io/fil1filter/OrFileFilter;");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string4 = Utility.compactClassName("multianewarray", "()Lorg/apache/commons/io/fil1filter/OrFileFilter;", false);
      assertEquals("multianewarray", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YItDBa#^}<X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YItDBa#^}<X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte1 = (byte) (-67);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, (int) (byte) (-122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = "H[L+T^/KNpw";
      try { 
        Utility.typeOfSignature("H[L+T^/KNpw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H[L+T^/KNpw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-36);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2119, (int) (byte)119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(183, 183);
      assertEquals(183, int0);
      
      String string0 = Utility.format(183, 183, false, '1');
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111183", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111183", false);
      assertNotNull(byteArray0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111183", "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111183", false);
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111183", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)79;
      byte byte0 = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)72;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[5] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)27;
      String string0 = Utility.accessToString((int) (byte)27, true);
      assertEquals("public private static final", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-2), (int) (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    freturn
         // 1:    iflt\t\t#-22353
         // 4:    freturn
         // 5:    freturn
         // 6:    freturn
         // 7:    impdep1
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "*&|cNTx";
      try { 
        Utility.typeOfSignature("*&|cNTx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &|cNTx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte) (-78), (byte) (-78));
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("The array of suffixes must not be null");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.signatureToString("J^qq", true);
      assertEquals("long", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("N7*c!St'V", "int", "impdep2");
      assertEquals("N7*c!St'V", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("jsr_w", true);
      assertEquals("jsr_w", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      String string0 = "Ayo,ZMfU'Nu3mRCKn";
      try { 
        Utility.typeOfSignature("Ayo,ZMfU'Nu3mRCKn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ayo,ZMfU'Nu3mRCKn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.convertString("53fE9:-");
      assertEquals("53fE9:-", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("53fE9:-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 53fE9:-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)92;
      String string0 = Utility.classOrInterface((byte)43);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1301), 12);
      assertEquals("0:    aload_1\n1:    fsub\n2:    dup2\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)43, (byte)102, (byte)92}, byteArray0);
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("0:    aload_1\n1:    fsub\n2:    dup2\n");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)102;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)43, (byte)102, (byte)92}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)92, (byte)102}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)9;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b7 09", string0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)9}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_String");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("K`FB2Aa*!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K`FB2Aa*!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-99);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("L", string0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "L";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureReturnType("[B@7c5f68bd, [B@7c5f68bd, L", true);
      assertEquals("byte[]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.compactClassName("anewarray", false);
      assertEquals("anewarray", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.accessToString((int) (byte)76, true);
      assertEquals("protected static volatile", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("X~Q8a:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X~Q8a:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)86, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)86, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (-386), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byte byte0 = Constants.CONSTANT_Class;
      assertEquals((byte)7, byte0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-62), (int) (byte)7, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    monitorenter\n1:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("0:    monitorenter\n1:    nop\n", false);
      assertEquals("0:    monitorenter\n1:    nop\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = Utility.convertString("\t\t#");
      assertEquals("\t\t#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("KTx$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KTx$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (int) (byte) (-98));
      assertEquals("0:    nop\n1:    ifle\t\t#-25087\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0:    nop\n1:    ifle\t\t#-25087\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      stringArray0[1] = "0:    nop\n1:    ifle\t\t#-25087\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      stringArray0[2] = "0:    nop\n1:    ifle\t\t#-25087\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), 16384);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    nop\n1:    ifle\t\t#-25087\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string3 = Utility.accessToString(16384);
      assertEquals("enum", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n1:    ifle\t\t#-25087\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    ifle\t\t#-25087
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = Utility.getSignature("LMbXDd0y&[C*\"u](~NI");
      assertEquals("[LLMbXDd0y&;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)57, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = true;
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      byteArray0[1] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      MockFile mockFile0 = new MockFile("-ri,_; QP");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("-ri,_; QP", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("-ri,_; QP", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)72}, byteArray1);
      assertNotNull(byteSequence0);
      
      MockFile mockFile1 = new MockFile("", "w<");
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals("w<", mockFile1.getName());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/w<", mockFile1.toString());
      assertEquals("/", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockFile mockFile2 = new MockFile(mockFile0, "{null, null, null,");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("-ri,_; QP", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("-ri,_; QP", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/-ri,_; QP/{null, null, null,", mockFile2.toString());
      assertTrue(mockFile2.isFile());
      assertEquals(0L, mockFile2.lastModified());
      assertFalse(mockFile2.canWrite());
      assertFalse(mockFile2.canExecute());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertEquals(0L, mockFile2.length());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertFalse(mockFile2.isDirectory());
      assertFalse(mockFile2.canRead());
      assertFalse(mockFile2.exists());
      assertTrue(mockFile2.isAbsolute());
      assertEquals("{null, null, null,", mockFile2.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/-ri,_; QP", mockFile2.getParent());
      assertFalse(mockFile2.isHidden());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertNotNull(mockFile2);
      
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("00 48", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)72}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("%;", "invokedynamic", true);
      assertEquals("%;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("G*a']j>-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G*a']j>-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-71);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-71);
      byteArray0[5] = (byte) (-34);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.accessToString((int) (byte) (-71));
      assertEquals("public static final synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = Constants.OPCODE_NAMES;
      assertNotNull(stringArray0);
      
      String string1 = Utility.format(1728, (-3469), false, 'Q');
      assertEquals("1728", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "*j\"\"KG3I#w?'S)3";
      String string3 = Utility.compactClassName("*j\"\"KG3I#w?'S)3", false);
      assertEquals("*j\"\"KG3I#w?'S)3", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      try { 
        Utility.typeOfSignature(".} iUcr0EvjY*M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .} iUcr0EvjY*M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)111;
      byteArray0[1] = (byte)111;
      byte byte1 = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-93);
      int int0 = 63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 63, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
