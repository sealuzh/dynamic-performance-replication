/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:00:23 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(304);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-333), "RunFimeVgsibleAnkotations", "RunFimeVgsibleAnkotations", "RunFimeVgsibleAnkotations", "RunFimeVgsibleAnkotations");
      Attribute attribute0 = new Attribute("RunFimeVgsibleAnkotations");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-301), "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2941));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2941), "RuntimeVisibleAnkotations", "()=JT-", "RuntimeVisibleAnkotations", "()=JT-");
      int int0 = Frame.FLOAT;
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("()=JT-", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-315), "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations");
      Attribute attribute0 = new Attribute("RuntimeVisibleAnkotations");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12((-315), 1);
      ByteVector byteVector2 = byteVector1.putByte((-315));
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-262), "RuntimeVisible?nkotaUions", "RuntimeVisible?nkotaUions", "RuntimeVisible?nkotaUions", "RuntimeVisible?nkotaUions");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-128), "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
      
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 7, "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "", "RuntimeVisibleAnkotations");
      int int1 = fieldWriter1.getSize();
      assertEquals(24, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-301), "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("RuntimeVisibleAnkotations", true);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("RuntimeVisibleAnkotations", true);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-262), "RuntimeVisible?nkotaUions", "RuntimeVisible?nkotaUions", "RuntimeVisible?nkotaUions", "RuntimeVisible?nkotaUions");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("RuntimeVisible?nkotaUions", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-301), "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations");
      fieldWriter0.visitAnnotation("RuntimeVisibleAnkotations", false);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = classWriter0.pool;
      fieldWriter0.getSize();
      ByteVector byteVector2 = new ByteVector(4096);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-902));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-506), "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", (String) null, "RuntimeVisibleAnkotations");
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-530));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 8, "=.;egZM", "", (String) null, "");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(16);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ConstantValue";
      stringArray0[1] = "sRX(U&yH|!H6pt";
      stringArray0[2] = "RuntimeVisibleAnkotations";
      classWriter0.visit((-301), (-301), "RuntimeVisibleAnkotations", "ConstantValue", "ConstantValue", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-301), "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations", "RuntimeVisibleAnkotations");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }
}
