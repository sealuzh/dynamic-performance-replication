/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:08:58 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" DEFAULT ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table create table  (\n)", charArrayWriter0.toString());
      assertEquals(30, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncaten>ccf#;\"6\"$sex1>{", (DBTable) null, 109, "");
      StringBuilder stringBuilder0 = new StringBuilder(109);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--");
      DBDataType dBDataType0 = DBDataType.getInstance(90008, "drop materialized viewforeign key");
      Integer integer0 = new Integer(90008);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", defaultDBTable0, dBDataType0, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "--", true, "--");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DROP MATERIALIZED VIEWFOREIGN KEY(90008)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.leftJoin("delete", stringArray0, "call", (String) null, stringArray0);
      assertEquals("left join call as null on delete.null = null.null and delete.null = null.null and delete.null = null.null and delete.null = null.null and delete.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("'", stringArray0, "", "user.name: ", stringArray0);
      assertEquals("left join  as user.name:  on '.null = user.name: .null and '.null = user.name: .null and '.null = user.name: .null and '.null = user.name: .null and '.null = user.name: .null and '.null = user.name: .null and '.null = user.name: .null and '.null = user.name: .null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("null.null", (String) null, stringArray0, "updatet", "#,jrbL&", stringArray0);
      assertEquals("null.null join updatet as #,jrbL& on ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("()", stringArray0, "select into", "select into.(), select into.select into", stringArray0);
      assertEquals("select into as select into.(), select into.select into on ().null = select into.(), select into.select into.null and ().null = select into.(), select into.select into.null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/1|@kXVX{2RD|tWQ19Q", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      String[] stringArray0 = new String[8];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "O", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT O ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "execute", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(2332);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT execute ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getNCharacterStream(String)");
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, dBPrimaryKeyConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = "XSDG1.D";
      stringArray0[4] = "XSDG1.D";
      SQLUtil.join("XSDG1.D", "XSDG1.D", stringArray0, "XSDG1.D", "XSDG1.D", stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.isQuery("into");
      SQLUtil.removeComments("org.apache.derby.impl.sql.compile.JavaValueNode");
      SQLUtil.renderValue("2wWR?\"cXkKj");
      String string0 = "A[dbtpeA!+cm0; ";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "daT@4Fe%k+0ZLm";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create materialized viewnull");
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RL+*OwjgA");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DRDA_ID", true, (String[]) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized viewnull", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized viewnull\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("alter indexalter materialized view");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter tabledelete");
      streamTokenizer0.nval = 688.0;
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = "%BsbTzYZ}x]U|[-";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("\"U_{3u-Pa", true);
      int int0 = 4580;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rRVR{>/rKmOm");
      SQLUtil.normalize(",*/Rod^b|gf6-Dimd", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",*/Rod^b|gf6-Dimd");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.normalize("(l.S1Xkj]}'x{K>, reS65, org.apache.derby.impl.services.locks.LockSpace)", true);
      long long0 = 143L;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("ny#@c,,ydYErK", true);
      assertEquals(" ny # @ c,, ydYErK", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "sx9:f5Du[?Qj[/4'7}";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , sx9:f5Du[?Qj[/4'7})", string0);
      
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.normalize(stringArray0[2], boolean0);
      assertEquals("sx9 : f5  Du [ ? Qj [ / 4 '7}'", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.normalize("Y3", false);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc((String) null);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
      assertNotNull(string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getComponents();
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.ownerDotComponent(dBCatalog0);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R[~>cTqU?M");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "R[~>cTqU?M", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "R[~>cTqU?M");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Integer integer0 = RawTransaction.ABORT;
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", true, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("XBCXF.S");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPackage dBPackage0 = new DBPackage("tc", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("drop table;w;-2vx]b6fnnrnl%c", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("tc.drop table;w;-2vx]b6fnnrnl%c", string0);
      
      boolean boolean0 = SQLUtil.isQuery(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("constraint", stringBuilder0);
      SQLUtil.addOptionalCondition("update", stringBuilder1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Puf^1;W(LZp$g>Izv}");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("renamealter table5", stringBuilder0);
      BasicDatabase basicDatabase0 = new BasicDatabase();
      String string0 = "alter materialized view";
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(447);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      stringBuilder1.append(447);
      StringBuilder stringBuilder2 = stringBuilder1.insert(2, (CharSequence) "preparing transaction xid = ");
      SQLUtil.addRequiredCondition("preparing transaction xid = ", stringBuilder2);
      assertEquals("44preparing transaction xid = 7 and preparing transaction xid = ", stringBuilder2.toString());
      assertEquals("44preparing transaction xid = 7 and preparing transaction xid = ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "b.#Y*hc{+a";
      SQLUtil.renderColumnListWithTableName("b.#Y*hc{+a", stringArray0);
      SQLUtil.join("", "b.#Y*hc{+a.b.#Y*hc{+a, b.#Y*hc{+a.b.#Y*hc{+a, b.#Y*hc{+a.b.#Y*hc{+a", stringArray0, "|Ifa", " NOT", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      int int0 = (-1301);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.leftJoin("c", stringArray0, "c", "c", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "c", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("'#lwFjm).", true, "d.`:rvlUM", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cache_ty", false, (String[]) null);
      Integer.getInteger("create table");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY ()", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.isDDL("mvc@_O;W>pA!E");
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isQuery("select into");
      boolean boolean0 = true;
      String string0 = "create tablealter materialized view";
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.mutatesStructure("exec42y94");
      VersionNumber versionNumber0 = null;
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.isDDL("b'5gYy1}[~U{");
      String string0 = "delete";
      SQLUtil.mutatesDataOrStructure("delete");
      long long0 = 32L;
      String string1 = "getString(String)";
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "select * from ";
      SQLUtil.mutatesDataOrStructure("select * from ");
      String string1 = "";
      String string2 = "}3tN ai ";
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "alter table5";
      SQLUtil.mutatesDataOrStructure("alter table5");
      // Undeclared exception!
      try { 
        DBDataType.getInstance(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "alter session";
      SQLUtil.mutatesDataOrStructure("alter session");
      String string1 = "bw=76ty";
      String[] stringArray0 = null;
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Character character0 = new Character('`');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'`'", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Avd2PX|t@Luie");
      String[] stringArray0 = new String[5];
      stringArray0[3] = "Avd2PX|t@Luie";
      stringArray0[4] = "Avd2PX|t@Luie";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-2596);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n)u$d]7}#pJn");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n)u$d]7}#pJn";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM n)u$d]7}#pJn WHERE n)u$d]7}#pJn = 'n)u$d]7}#pJn'", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table n)u$d]7}#pJn", string1);
      assertNotNull(string1);
      
      boolean boolean0 = SQLUtil.isQuery("n)u$d]7}#pJn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(727, "=pl$'&");
      Integer integer0 = new Integer(335544609);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessioncreate tablecs4d", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter sessioncreate tablecs4d =PL$'&(335544609) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--");
      DBDataType dBDataType0 = DBDataType.getInstance(90008, "drop materialized viewforeign key");
      Integer integer0 = new Integer(90008);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", defaultDBTable0, dBDataType0, integer0);
      int int0 = (-2054281738);
      Integer.divideUnsigned(897, (-2054281738));
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "--", true, "--");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      defaultDBColumn0.setFractionDigits(integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition(string0, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n)u$d]7}#pJn");
      DBDataType dBDataType0 = DBDataType.getInstance((-543), "select$7h6$x0");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString(5);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("n)u$d]7}#pJn", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("n)u$d]7}#pJn");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isProcedureCall("wjLF909E>");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table n)u$d]7}#pJn (\n\tn)u$d]7}#pJn SELECT$7H6$X0(3,3) DEFAULT n)u$d]7}#pJn NULL\n)", stringWriter0.toString());
      
      SQLUtil.typeAndName(defaultDBTable0);
      boolean boolean0 = SQLUtil.isQuery("n)u$d]7}#pJn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("COLUMNDEFAULTID");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JvB*lm as ?IF/Z[sG^jYZeBU on JvB*lm.JvB*lm = ?IF/Z[sG^jYZeBU.JvB*lm and JvB*lm.JvB*lm = ?IF/Z[sG^jYZeBU.JvB*lm", defaultDBTable0, 336330818, "alter index");
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.addLast((DBColumn) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "hckOkSLUM[RA";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "hckOkSLUM[RA", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("hckOkSLUM[RA", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "uiHz");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hckOkSLUM[RA", dBTable0, dBDataType0, integer0, integer1);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("hckOkSLUM[RA", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("S9@KYE]FQ\"E[", "79!", "S9@KYE]FQ\"E[");
      assertEquals("S9@KYE]FQ\"E[", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(505, "S9@KYE]FQ\"E[");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S9@KYE]FQ\"E[", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w(;l/.j>IH<ub";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "S9@KYE]FQ\"E[", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("w(;l/.j>IH<ub", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("S9@KYE]FQ\"E[", dBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("w(;l/.j>IH<ub", defaultDBTable0, (-1745), "9A,]&ppIh<YU");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn((String) null, dBTable0, dBDataType0);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn3;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn2;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("S9@KYE]FQ\"E[, S9@KYE]FQ\"E[, S9@KYE]FQ\"E[, w(;l/.j>IH<ub, S9@KYE]FQ\"E[, null, w(;l/.j>IH<ub", string1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tc";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3133);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println((double) 3133);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      SQLUtil.isQuery(stringArray0[0]);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'tc' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n)u$d]7}#pJn");
      DBDataType dBDataType0 = DBDataType.getInstance((-543), "select$7h6$x0");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString(5);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("n)u$d]7}#pJn", defaultDBTable0, dBDataType0, integer0, integer1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("--");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "INSERT INTO INFORMATION_SCHEMA.LOBS(ID, BYTE_COUNT, TABLE) SELECT ?, BYTE_COUNT, ? FROM INFORMATION_SCHEMA.LOBS WHERE ID = ?";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("INSERT INTO INFORMATION_SCHEMA.LOBS(ID, BYTE_COUNT, TABLE) SELECT ?, BYTE_COUNT, ? FROM INFORMATION_SCHEMA.LOBS WHERE ID = ?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ID\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (-3488), "&4(JWo4[BzO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: &4(JWo4[BzO
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null");
      int int0 = 2540;
      String string0 = "km[()-Rfw2{m;0TlC";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("null", defaultDBTable0, 2540, "km[()-Rfw2{m;0TlC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "U^O_[6";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ROLLBACK", true, "U^O_[6", "ROLLBACK");
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCheckConstraint0.equals("ROLLBACK");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      int int0 = (-64416996);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getNCharacterStream(String)");
      DBDataType dBDataType0 = DBDataType.getInstance((-401451625), "cdL");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{pM-=76NPOqD+n9`", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isProcedureCall("'");
      System.setCurrentTimeMillis((-5803L));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SQLUtil.isDML(" DEFAULT ");
      String[] stringArray0 = new String[8];
      stringArray0[6] = "6zCIW!$=q %q3wIc%WB";
      stringArray0[7] = "FZkG+4QaOzO!";
      SQLUtil.innerJoin("6zCIW!$=q %q3wIc%WB", stringArray0, "@zi^i5U_w", (String) null, stringArray0);
      Random.setNextRandom(1167);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DBDataType.getInstance(90008, "drop materialized viewforeign key");
      Integer integer0 = new Integer(90008);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "--";
      stringArray0[2] = "DROP MATERIALIZED VIEWFOREIGN KEY(90008,90008)";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "op_prepare ";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
