/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:21:54 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Object object0 = new Object();
      doubleKeyMap1.get(object0);
      Object object1 = doubleKeyMap0.get("", "Sx-;U(^ELJh^}d{A");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      doubleKeyMap0.remove(object0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) "i`C&mjMK 3N>Yq.`3s", (Map<Object, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      doubleKeyMap0.remove(object0, (Object) class0);
      Integer integer0 = new Integer((-1589));
      doubleKeyMap0.put((Object) integer0, (Object) integer0, (Object) hashMap0);
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer1 = new Integer(3828);
      doubleKeyMap1.get(integer1);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(class1);
      Object object1 = new Object();
      Object object2 = new Object();
      doubleKeyMap2.get(object1, object2);
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>();
      Integer integer2 = new Integer((-1589));
      doubleKeyMap3.put("7S5-Q*F?=p$Wuv", (Object) integer2, (Object) doubleKeyMap1);
      Integer integer3 = new Integer((-1589));
      doubleKeyMap3.get("7S5-Q*F?=p$Wuv", (Object) integer3);
      doubleKeyMap2.get((Object) null);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap4 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer4 = new Integer(0);
      Map<Object, String> map0 = doubleKeyMap4.get(integer4);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>(class0);
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(map0);
      Object object0 = new Object();
      doubleKeyMap2.remove(object0, "3.AjL>{WOt+Di");
      Integer integer0 = new Integer(947);
      doubleKeyMap2.get((Object) integer0);
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      doubleKeyMap3.put((Object) map0, (Object) hashMap0, integer0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap4 = new DoubleKeyMap<Object, Object, Object>();
      Object object1 = new Object();
      DoubleKeyMap<String, Object, Object> doubleKeyMap5 = new DoubleKeyMap<String, Object, Object>();
      Integer integer1 = new Integer(0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Integer integer2 = new Integer(0);
      doubleKeyMap3.put((Object) hashMap1, (Object) integer2, integer1);
      HashMap<Integer, Map<Integer, String>> hashMap2 = new HashMap<Integer, Map<Integer, String>>(0, 947);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap6 = new DoubleKeyMap<Integer, Integer, String>(hashMap2, class0);
      Map<String, Map<Object, String>> map1 = doubleKeyMap6.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap7 = new DoubleKeyMap<String, Object, String>(map1);
      String string0 = doubleKeyMap7.remove("", (Object) hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(map0, class1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap3 = new DoubleKeyMap<Object, Object, String>(class1);
      doubleKeyMap3.remove((Object) doubleKeyMap0);
      doubleKeyMap2.remove((Object) hashMap0, (Object) hashMap0);
      doubleKeyMap1.remove("");
      doubleKeyMap1.put("IbpT wK#{<Z", (Object) doubleKeyMap3, "");
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap4 = new DoubleKeyMap<String, Object, Object>(hashMap1, class0);
      doubleKeyMap4.remove("");
      doubleKeyMap4.remove((String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      doubleKeyMap1.remove("<Uip7s", object1);
      doubleKeyMap3.remove((Object) doubleKeyMap4, (Object) null);
      Integer integer0 = new Integer(218);
      doubleKeyMap1.newMap();
      Object object2 = new Object();
      Object object3 = new Object();
      doubleKeyMap2.put(object3, (Object) null, (Object) null);
      DoubleKeyMap<String, String, String> doubleKeyMap5 = new DoubleKeyMap<String, String, String>();
      Object object4 = new Object();
      doubleKeyMap2.remove(object3, object4);
      doubleKeyMap2.get((Object) hashMap0, (Object) "");
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<Object, Object>> map0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(map0, class1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap3 = new DoubleKeyMap<Object, Object, String>(class1);
      doubleKeyMap2.remove((Object) hashMap0, (Object) hashMap0);
      doubleKeyMap1.remove("IbpT wK#{<Z");
      doubleKeyMap1.put("IbpT wK#{<Z", (Object) doubleKeyMap3, "");
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap4 = new DoubleKeyMap<String, Object, Object>(hashMap1, class0);
      doubleKeyMap4.remove("IbpT wK#{<Z");
      doubleKeyMap4.remove((String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      doubleKeyMap1.remove("IbpT wK#{<Z", (Object) doubleKeyMap3);
      Object object3 = new Object();
      doubleKeyMap3.remove((Object) "<Uip7s", object3);
      Integer integer0 = new Integer(1);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap5 = new DoubleKeyMap<Object, Object, Integer>();
      doubleKeyMap1.newMap();
      Object object4 = new Object();
      Integer integer1 = new Integer(218);
      doubleKeyMap5.put((Object) hashMap0, (Object) class1, (Integer) null);
      doubleKeyMap5.newMap();
      doubleKeyMap5.put((Object) hashMap1, (Object) null, integer1);
      Object object5 = new Object();
      doubleKeyMap2.put((Object) hashMap0, (Object) null, (Object) hashMap0);
      DoubleKeyMap<String, String, String> doubleKeyMap6 = new DoubleKeyMap<String, String, String>();
      Object object6 = doubleKeyMap2.remove((Object) null, (Object) integer1);
      assertNull(object6);
  }
}
