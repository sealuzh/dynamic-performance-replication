/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:54:27 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = new RE2("WKyI]{");
      boolean boolean0 = rE2_0.match("WKyI]{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)16);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("2<;");
      rE2_0.findIndex("com.google.re2j.RE2");
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RE2.quoteMeta("C#$");
      assertEquals("C#\\$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAllSubmatch("", 457);
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("", "<(");
      assertEquals("<(", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-1400));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("A");
      assertEquals("A", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[9];
      List<String> list0 = rE2_0.findAll("A", (-3476));
      assertEquals("A", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("6+HNmW?UKf'0uxgew%a");
      assertEquals("6+HNmW?UKf'0uxgew%a", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("6+HNmW?UKf'0uxgew%a", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("6+HNmW?UKf'0uxgew%a");
      assertEquals("6+HNmW?UKf'0uxgew%a", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Malayalam");
      assertEquals("Malayalam", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 12);
      assertEquals("Malayalam", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 11);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        RE2.match("~(ml*g", "~(ml*g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `~(ml*g`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", 1017);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[4];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean0 = rE2_0.match("", 1339, 865, 865, intArray0, 865);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("|V^");
      assertEquals("|V^", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("|V^", rE2_0.toString());
      assertNotNull(machine0);
      
      String string0 = rE2_0.replaceFirst("8Ll\"U8{5%[.b?%0S\"r", "|V^");
      assertEquals("|V^8Ll\"U8{5%[.b?%0S\"r", string0);
      assertEquals("|V^", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = new RE2("G@3,yJL'T!~wNbvKm");
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 231);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("H~+N7:]AQp`Ju.v");
      assertEquals("H~+N7:]AQp`Ju.v", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("H~+N7:]AQp`Ju.v", (-1231));
      assertEquals("H~+N7:]AQp`Ju.v", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RE2.quoteMeta("z");
      assertEquals("z", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = RE2.compileImpl("z", 1, true);
      assertEquals("z", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("z", 1);
      assertEquals("z", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", string0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("6+HNmW?UKf'0uxgew%a");
      assertEquals("6+HNmW?UKf'0uxgew%a", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("6+HNmW?UKf'0uxgew%a", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("6+HNmW?UKf'0uxgew%a", "rune1 ");
      assertEquals("6+HNmW?UKf'0uxgew%a", string0);
      assertEquals("6+HNmW?UKf'0uxgew%a", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("4");
      assertEquals("4", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[7];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)4);
      assertEquals("4", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(list0);
      
      rE2_0.reset();
      assertEquals("4", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("[:^upper:]");
      assertEquals("[:^upper:]", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertEquals("[:^upper:]", rE2_0.toString());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = new RE2(">>P");
      assertEquals(">>P", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[2];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertEquals(">>P", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNull(list0);
      
      byteArray0[1] = (byte) (-42);
      rE2_0.prefixUTF8 = byteArray0;
      assertEquals(">>P", rE2_0.toString());
      
      String string0 = RE2.quoteMeta(">>P");
      assertEquals(">>P", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("W-6a%1+'=VLny~,*.J");
      assertEquals("W-6a%1+'=VLny~,*.J", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("W-6a%1+'=VLny~,*.J");
      assertFalse(boolean0);
      assertEquals("W-6a%1+'=VLny~,*.J", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("1");
      assertEquals("1", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("1", "1");
      assertEquals("1", string0);
      assertEquals("1", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("fXB'@oze%Ea,Mk|1<*");
      assertEquals("fXB'@oze%Ea,Mk|1<*", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("^x00-x{10FFFF}", "^x00-x{10FFFF}");
      assertEquals("^x00-x{^x00-x{10FFFF}0FFFF}", string0);
      assertEquals("fXB'@oze%Ea,Mk|1<*", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("G@3,yJL'T!~wNbvKm");
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Tagbanwa");
      assertEquals("Tagbanwa", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("6B");
      assertEquals("", string0);
      assertEquals("Tagbanwa", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("TQ?,u^");
      assertEquals("TQ?,u^", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 1662);
      assertEquals("TQ?,u^", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("-*A'Aq\"Q4*V/a& ");
      assertEquals("-*A'Aq\"Q4*V/a& ", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
      assertEquals("-*A'Aq\"Q4*V/a& ", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[23];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(byteArray1);
      
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("n");
      assertEquals("n", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("K(5| ]Dc8KsU", 720);
      assertEquals("n", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-113));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertNotNull(list0);
      
      String string0 = rE2_0.toString();
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("\"3J73h+`hP-|");
      assertEquals("\"3J73h+`hP-|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("A", "3\"H:/?&U");
      assertEquals("3\"H:/?&UA3\"H:/?&U", string0);
      assertEquals("\"3J73h+`hP-|", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", (-115));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("TQ?,u^");
      assertEquals("TQ?,u^", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("TQ?,u^", 2);
      assertEquals("TQ?,u^", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("");
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(",:6Z=Yzne'\"<u@m!");
      assertEquals(",:6Z=Yzne'\"<u@m!", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("");
      assertEquals(",:6Z=Yzne'\"<u@m!", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 18;
      intArray0[1] = (int) (byte) (-128);
      intArray0[2] = (int) (byte) (-128);
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      boolean boolean0 = rE2_0.match("", (byte) (-128), (byte) (-128), (byte) (-128), intArray0, 6);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {18, (-128), (-128), 2, 2, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2254);
      // Undeclared exception!
      try { 
        rE2_0.match("", (-2254), (-2254), 0, intArray0, 1418);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertEquals("", rE2_0.toString());
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[2];
      List<int[]> list0 = rE2_0.findAllIndex("", 343);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<byte[]> list1 = rE2_0.findAllUTF8(byteArray0, 343);
      assertEquals("", rE2_0.toString());
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(list1);
      
      String string0 = rE2_0.toString();
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      
      String string1 = rE2_0.replaceFirst("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals("", rE2_0.toString());
      assertNotNull(string1);
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      RE2 rE2_1 = RE2.compileImpl("wg(:=Nz?4}]Aml", 343, true);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("wg(:=Nz?4}]Aml", rE2_1.toString());
      assertNotNull(rE2_1);
      
      Machine machine0 = rE2_1.get();
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("wg(:=Nz?4}]Aml", rE2_1.toString());
      assertNotNull(machine0);
      
      Machine machine1 = rE2_0.get();
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(machine1, machine0);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(machine1.equals((Object)machine0));
      assertEquals("", rE2_0.toString());
      assertNotNull(machine1);
      
      RE2 rE2_2 = RE2.compileImpl("", 343, true);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertEquals("", rE2_2.toString());
      assertNotNull(rE2_2);
      
      int[] intArray0 = rE2_1.findUTF8Index(byteArray0);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(rE2_1, rE2_2);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(rE2_1.equals((Object)rE2_2));
      assertEquals("wg(:=Nz?4}]Aml", rE2_1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNull(intArray0);
      
      RE2 rE2_3 = RE2.compile("");
      assertNotSame(rE2_3, rE2_0);
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_1);
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertEquals("", rE2_3.toString());
      assertNotNull(rE2_3);
      
      RE2 rE2_4 = RE2.compilePOSIX("");
      assertNotSame(rE2_4, rE2_0);
      assertNotSame(rE2_4, rE2_2);
      assertNotSame(rE2_4, rE2_1);
      assertNotSame(rE2_4, rE2_3);
      assertFalse(rE2_4.equals((Object)rE2_0));
      assertFalse(rE2_4.equals((Object)rE2_2));
      assertFalse(rE2_4.equals((Object)rE2_1));
      assertFalse(rE2_4.equals((Object)rE2_3));
      assertEquals("", rE2_4.toString());
      assertNotNull(rE2_4);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertNotSame(rE2_0, rE2_3);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertNotSame(rE2_0, rE2_4);
      assertFalse(rE2_0.equals((Object)rE2_3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(rE2_0.equals((Object)rE2_4));
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)71;
      int[] intArray1 = rE2_4.findUTF8Index(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(rE2_4, rE2_0);
      assertNotSame(rE2_4, rE2_2);
      assertNotSame(rE2_4, rE2_1);
      assertNotSame(rE2_4, rE2_3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(rE2_4.equals((Object)rE2_0));
      assertFalse(rE2_4.equals((Object)rE2_2));
      assertFalse(rE2_4.equals((Object)rE2_1));
      assertFalse(rE2_4.equals((Object)rE2_3));
      assertEquals("", rE2_4.toString());
      assertArrayEquals(new byte[] {(byte)71, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      
      boolean boolean0 = rE2_3.matchUTF8(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(rE2_3, rE2_0);
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_1);
      assertNotSame(rE2_3, rE2_4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertFalse(rE2_3.equals((Object)rE2_4));
      assertTrue(boolean0);
      assertEquals("", rE2_3.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      List<String[]> list2 = rE2_4.findAllSubmatch("43x^|\"+,T2`Pi*~", (-8));
      assertNotSame(rE2_4, rE2_0);
      assertNotSame(rE2_4, rE2_2);
      assertNotSame(rE2_4, rE2_1);
      assertNotSame(rE2_4, rE2_3);
      assertFalse(rE2_4.equals((Object)rE2_0));
      assertFalse(rE2_4.equals((Object)rE2_2));
      assertFalse(rE2_4.equals((Object)rE2_1));
      assertFalse(rE2_4.equals((Object)rE2_3));
      assertEquals(16, list2.size());
      assertFalse(list2.isEmpty());
      assertEquals("", rE2_4.toString());
      assertNotNull(list2);
      
      List<byte[][]> list3 = rE2_4.findAllUTF8Submatch(byteArray0, (-8));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(rE2_4, rE2_0);
      assertNotSame(rE2_4, rE2_2);
      assertNotSame(rE2_4, rE2_1);
      assertNotSame(rE2_4, rE2_3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(rE2_4.equals((Object)rE2_0));
      assertFalse(rE2_4.equals((Object)rE2_2));
      assertFalse(rE2_4.equals((Object)rE2_1));
      assertFalse(rE2_4.equals((Object)rE2_3));
      assertEquals(3, list3.size());
      assertFalse(list3.isEmpty());
      assertEquals("", rE2_4.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(list3);
      
      RE2 rE2_5 = RE2.compilePOSIX(" -Apx#e");
      assertNotSame(rE2_5, rE2_0);
      assertNotSame(rE2_5, rE2_2);
      assertNotSame(rE2_5, rE2_1);
      assertNotSame(rE2_5, rE2_3);
      assertNotSame(rE2_5, rE2_4);
      assertFalse(rE2_5.equals((Object)rE2_0));
      assertFalse(rE2_5.equals((Object)rE2_2));
      assertFalse(rE2_5.equals((Object)rE2_1));
      assertFalse(rE2_5.equals((Object)rE2_3));
      assertFalse(rE2_5.equals((Object)rE2_4));
      assertEquals(" -Apx#e", rE2_5.toString());
      assertNotNull(rE2_5);
      
      boolean boolean1 = rE2_4.match("iCsv5|k.'k7N^,", 5, 586, 0, (int[]) null, (byte)71);
      assertNotSame(rE2_4, rE2_0);
      assertNotSame(rE2_4, rE2_2);
      assertNotSame(rE2_4, rE2_1);
      assertNotSame(rE2_4, rE2_3);
      assertNotSame(rE2_4, rE2_5);
      assertTrue(boolean1 == boolean0);
      assertFalse(rE2_4.equals((Object)rE2_0));
      assertFalse(rE2_4.equals((Object)rE2_2));
      assertFalse(rE2_4.equals((Object)rE2_1));
      assertFalse(rE2_4.equals((Object)rE2_3));
      assertFalse(rE2_4.equals((Object)rE2_5));
      assertTrue(boolean1);
      assertEquals("", rE2_4.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|<N<z");
      assertEquals("|<N<z", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("|<N<z", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("|<N<z", (-154));
      assertEquals("|<N<z", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("|<N<z", rE2_0.toString());
      assertNotNull(machine0);
  }
}
