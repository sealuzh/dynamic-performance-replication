/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:44:55 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.RegexSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%9 ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("%9 ");
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%9 ", "%9 ");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("%9 ", "%9 ");
      spider2.downloader(phantomJSDownloader1);
      Page.fail();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "%9 ";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Wa0f#)L.9");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("Wa0f#)L.9");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      spider1.getCollectorPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*Q:w*d_r?^djQZs");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      forkJoinPool0.toString();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      Spider spider4 = spider3.addUrl(stringArray0);
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ".html";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".html");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jvfsUx=m)>EzAP5NO");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider3 = spider2.startUrls(linkedList0);
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("q\"skPF9`jg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(837, threadFactory0);
      scheduledThreadPoolExecutor0.getPoolSize();
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ej5iI&g<\"h>>n%oR?n");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(31, 31, 31, timeUnit0, linkedTransferQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ej5iI&g<\"h>>n%oR?n";
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 2);
      spider1.getStatus();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VRI/&[|ir#g");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("6Z$orA=R\"H!T[.C");
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider0.getThreadAlive();
      FilePipeline filePipeline0 = new FilePipeline();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Request request0 = new Request("2$Y;FSE");
      request0.setBinaryContent(true);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      spider1.getPageCount();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList1);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.start();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        spider1.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AC");
      Spider spider0 = new Spider(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(";&l^j3aH1`&", ";&l^j3aH1`&");
      phantomJSDownloader0.setRetryNum(230);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler(queueScheduler0);
      Page.fail();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("vHi\"T'`Ct");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.getStartTime();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("vHi\"T'`Ct");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.vHi\"T'`Ct
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        spider1.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".uls.txt");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setEmptySleepTime(3419);
      Page.fail();
      spider0.scheduler(priorityScheduler0);
      Page page0 = Page.fail();
      assertNull(page0.getRawText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("B");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[8];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("B");
      Object object0 = new Object();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider0.getThreadAlive();
      linkedBlockingQueue0.toArray();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("|),>I(");
      spider0.getSpiderListeners();
      boolean boolean0 = linkedBlockingQueue0.add("|),>I(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("q\"skPF9`jg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(837, threadFactory0);
      scheduledThreadPoolExecutor0.getPoolSize();
      spider0.extractAndAddRequests((Page) null, false);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!]L@K,0PGd)? 3o},");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(31);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!]L@K,0PGd)? 3o},";
      stringArray0[1] = "!]L@K,0PGd)? 3o},";
      stringArray0[2] = "!]L@K,0PGd)? 3o},";
      stringArray0[4] = "!]L@K,0PGd)? 3o},";
      stringArray0[5] = "!]L@K,0PGd)? 3o},";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g4");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "g4";
      stringArray0[2] = "&,";
      stringArray0[4] = "g4";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider1.startUrls(list0);
      Spider spider3 = spider2.setUUID("'X;U_d&'dXm$@Wxw1");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider3.pipeline(consolePipeline0);
      boolean boolean0 = spider4.isExitWhenComplete();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%9 ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("`~eVr;`/xM_0n15J");
      spider1.clearPipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("e,CrJG6[r#NZ=Brv");
      Request request0 = new Request();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider1.getUUID();
      Request request1 = new Request("");
      Request request2 = request1.setMethod(" error");
      request0.setBinaryContent(false);
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".urls.txt");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedHashSet<Request> linkedHashSet0 = new LinkedHashSet<Request>();
      LinkedList<Request> linkedList0 = new LinkedList<Request>(linkedHashSet0);
      spider0.getScheduler();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ej5iI&g<\"h>>n%oR?n");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(31, 31, 31, timeUnit0, linkedTransferQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ej5iI&g<\"h>>n%oR?n";
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 2);
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      threadPoolExecutor0.isTerminating();
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "[2";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[2");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider0.getThreadAlive();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("|),>I(");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      linkedBlockingQueue0.add("|),>I(");
      linkedBlockingQueue0.toArray();
      spider0.getSite();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      Spider spider2 = spider1.thread(2);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("b6c,!XLOB,]'IAoQF/U", "rq=EpxS>2WIDg");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "b6c,!XLOB,]'IAoQF/U";
      stringArray0[2] = "b6c,!XLOB,]'IAoQF/U";
      stringArray0[3] = "rq=EpxS>2WIDg";
      stringArray0[4] = "qd<]p,ELcB?@;6";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%9 ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%9 ", "%9 ");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("%9 ", "%9 ");
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      spider2.initComponent();
      Page.fail();
      spider0.spawnUrl = true;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "%9 ";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D$.ff=%rdfQ:f");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      assertTrue(spider2.isExitWhenComplete());
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("D$.ff=%rdfQ:f", "(@6[Bg|.T}GtL\"er");
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider5 = spider4.setSpiderListeners(linkedList1);
      boolean boolean0 = spider5.isSpawnUrl();
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-H`\" DqeVA/)");
      page0.toString();
      spider0.isSpawnUrl();
      Page page1 = page0.setSkip(true);
      page1.setCharset("");
      // Undeclared exception!
      try { 
        spider1.sleep((-2258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "BZA=hyz'\"aqM_R";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("BZA=hyz'\"aqM_R");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("BZA=hyz'\"aqM_R");
      int int0 = 0;
      Spider.Status spider_Status0 = spider0.getStatus();
      spider_Status0.getValue();
      Spider.Status.fromValue(1952);
      spider1.start();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      Site site0 = spider0.site;
      Site site1 = site0.setDomain("");
      spider0.site = site1;
      linkedBlockingQueue0.add("hTo");
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("q\"skPF9`jg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".uls.txt");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = ", method='";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", method='", ".uls.txt");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.run();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".uls.txt";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("L {C!4uqJtElyfQ");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("|),>I(");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.stop();
      Page page0 = new Page();
      page0.setSkip(false);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VRI/&[|ir#g");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("VRI/&[|ir#g");
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("VRI/&[|ir#g", "VRI/&[|ir#g");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1);
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.getUUID();
      Spider spider2 = spider0.setSpawnUrl(false);
      spider2.getPageCount();
      assertFalse(spider0.isSpawnUrl());
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) linkedBlockingQueue0);
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      spider3.setPipelines(list0);
      spider0.runAsync();
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "5)N5Rd0ug] -`)&3";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5)N5Rd0ug] -`)&3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Scheduler scheduler0 = null;
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      spider2.setSpawnUrl(true);
      spider2.sleep(1950);
      Request request0 = new Request("5)N5Rd0ug] -`)&3");
      Request request1 = request0.setUrl("5)N5Rd0ug] -`)&3");
      Request request2 = request1.setPriority(1950);
      request2.setBinaryContent(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider4 = spider3.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider4.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VRI/&[|ir#g");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VRI/&[|ir#g");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("VRI/&[|ir#g");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("VRI/&[|ir#g");
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("VRI/&[|ir#g", "java.io.tmpdir");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("java.io.tmpdir", "Mz(Hz/VlBL,ev!uy");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Page.fail();
      String string0 = "";
      spider2.scheduler((Scheduler) null);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      Spider.Status spider_Status1 = Spider.Status.Init;
      spider_Status1.getValue();
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "f7LHp#-i5!#'$6zdx");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      Spider spider2 = spider1.setUUID("");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2348);
      Spider spider3 = spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 2348);
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider5 = spider4.pipeline(multiPagePipeline0);
      spider5.downloader(phantomJSDownloader0);
      spider5.run();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "f7LHp#-i5!#'$6zdx";
      stringArray0[1] = "";
      stringArray0[2] = "f7LHp#-i5!#'$6zdx";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider0.isSpawnUrl();
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      spider2.pipeline(jsonFilePipeline0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 5);
      Spider spider4 = spider3.setUUID("&.{2,5};|&#.{2,5};");
      spider4.runAsync();
      spider0.clearPipeline();
      String string0 = "#89^YCdm}n";
      String string1 = "[\\w]+://";
      String string2 = "Ld1[E0;4'U,\"\\L{*t7";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("&.{2,5};|&#.{2,5};", "Ld1[E0;4'U,\"L{*t7");
      String string3 = "process request ";
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("process request ", "[w]+://");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      spider3.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".uls.txt");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".uls.txt");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(".uls.txt", "us.codecraft.webmagic.Spider");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      spider3.run();
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      int int0 = ObjectStreamConstants.baseWireHandle;
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("q$6eP4W-e+q{K");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".uls.txt");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(".uls.txt", ", method='");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      spider2.run();
      Spider spider3 = spider0.thread(391);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", method='";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
