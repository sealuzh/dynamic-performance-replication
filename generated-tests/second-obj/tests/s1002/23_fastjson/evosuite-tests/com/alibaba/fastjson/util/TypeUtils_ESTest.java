/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:45:06 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      typeArray0[0] = type0;
      Class<Long> class0 = Long.TYPE;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@62a90d9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      TreeMap<StackTraceElementDeserializer, String> treeMap0 = new TreeMap<StackTraceElementDeserializer, String>();
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.cast((Object) treeMap0, class0, parserConfig0);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.loadClass("I");
      TypeUtils.castToString("I");
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "I", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Short short0 = new Short((short)493);
      Class<SQLWarning> class2 = SQLWarning.class;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("DnX9f");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("}%Ia(~", illegalThreadStateException0);
      Class<SQLWarning> class3 = SQLWarning.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class2, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", class1.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NULL");
      TypeUtils typeUtils0 = new TypeUtils();
      Class<?> class0 = TypeUtils.loadClass("ha");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      String string1 = "false";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("<DC<|Gcg8Srb");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<DC<|Gcg8Srb\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>(84, 84);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      Class<TimeZone> class0 = TimeZone.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.toLocale("-!9ez*");
      TypeUtils.castToBytes("-!9ez*");
      Class<Double> class0 = Double.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = TypeUtils.decapitalize("L");
      assertEquals("l", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.getClassFromMapping("mJL >5");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.decapitalize("mJL >5");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hm0uD/Rj|bJ]NGeWp");
      TypeUtils.isNumber("false");
      ThreadGroup threadGroup0 = new ThreadGroup("false");
      MockThread mockThread0 = new MockThread();
      MockThread.interrupted();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "@~5=", 524L);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<ClassLoader> class0 = ClassLoader.class;
      ClassLoader.getSystemClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiConsumer<String, Object> biConsumer1 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer1);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Field> class1 = Field.class;
      TypeUtils.loadClass("fastjson.parser.deny", classLoader1, true);
      TypeUtils.toLocale("Hm0uD/Rj|bJ]NGeWp");
      TypeUtils.decapitalize("YWM7q5Y}&$?ko6");
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.fnv1a_64("U?<,dgr_");
      TypeUtils.loadClass("U?<,dgr_");
      TypeUtils.castToBoolean((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "^s_o6Ep\"&;3l@Z0:f";
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("^s_o6Ep\"&;3l@Z0:f", "o");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(84);
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>(hashtable0);
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      ThreadGroup threadGroup0 = new ThreadGroup("^s_o6Ep\"&;3l@Z0:f");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KzP),TC.<wuUyS");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Throwable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>(hashtable0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.replace("+XWSI.,|&k", "getNaN");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.isKotlin(class0);
      Class<NumberFormat> class1 = NumberFormat.class;
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(class0);
      Class<Double> class2 = Double.TYPE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<NumberFormatException> class0 = NumberFormatException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@9a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.isNumber("isshortValue");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<NumberFormat> class0 = NumberFormat.class;
      TypeUtils.isProxy(class0);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Rectangle[x=0,y=0,width=0,height=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.loadClass("ishashCode");
      TypeUtils.castToString("ishashCode");
      Charset.defaultCharset();
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getCollectionItemClass(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.getClassFromMapping("ishashCode");
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.getClassFromMapping("java.lang.String@0000000001");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.EnumerationSerializer", (ClassLoader) null);
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(float0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 84;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(84);
      BiFunction<SQLException, Object, Collator> biFunction0 = (BiFunction<SQLException, Object, Collator>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("javaNtime.OffsetateTime");
      String string0 = "gd'm";
      ThreadGroup threadGroup0 = new ThreadGroup("gd'm");
      MockThread mockThread0 = new MockThread(threadGroup0, "U;#H0");
      TypeUtils.castToBigInteger((Object) null);
      Class<StackOverflowError> class0 = StackOverflowError.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.isNumber("!SreCP%CrKch;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "(J$T=ZU3%\\(>c#uo+";
      ThreadGroup threadGroup0 = new ThreadGroup("(J$T=ZU3%(>c#uo+");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("(J$T=ZU3%(>c#uo+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (J$T=ZU3%(>c#uo+
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "(J$T=ZU3%\\(>c#uo+";
      ThreadGroup threadGroup0 = new ThreadGroup("(J$T=ZU3%(>c#uo+");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, "(J$T=ZU3%(>c#uo+");
      threadGroup0.checkAccess();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "(J$T=ZU3%(>c#uo+");
      ClassLoader.getSystemClassLoader();
      System.setCurrentTimeMillis((-1344L));
      TypeUtils.loadClass("(J$T=ZU3%(>c#uo+");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      Constructor<DateFormatSymbols>[] constructorArray0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("[S", "-`,]]");
      linkedHashMap0.put("[S", "P");
      linkedHashMap0.put("[S", "Ljava.awt.Font");
      MockDate mockDate0 = new MockDate(41, 999999, (-100), 999999, 41);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      TypeUtils.loadClass("]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      TypeUtils.castToDouble((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.isNumber("-`,]]");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "-`,]]", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.awt.Color", "&g=;y4B;+Ze7j%?F08", identityHashMap0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      TypeUtils.isHibernateInitialized(sQLClientInfoException0);
      TypeUtils.fnv1a_64_lower("PaS%9  l<]qN `~");
      String string0 = TypeUtils.decapitalize("/p");
      assertEquals("/p", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("()Ljava/lang/String;", "lexer", "_J5FxOm8", (-3193));
      InterruptedException interruptedException0 = new InterruptedException();
      Class<Byte> class0 = Byte.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(123);
      Class<Timestamp> class0 = Timestamp.class;
      jSONObject0.getBooleanValue("qwh~wM%q;kkC~*]`}6");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("-8%4LJU");
      String string0 = "G6[;},93W_[Qt1},";
      TypeUtils.getClassFromMapping("G6[;},93W_[Qt1},");
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("-8%4LJU");
      illegalAccessError0.getSuppressed();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("G6[;},93W_[Qt1},");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'Q'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("isisAccelerated");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(noSuchFieldException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchFieldException: isisAccelerated
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToString((Object) null);
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("W5Sx}HG ", (String) null, (String) null, 4316);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.castToString((Object) null);
      Class<Timestamp> class1 = Timestamp.class;
      Timestamp timestamp0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@68f98c81
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setClassAssertionStatus("list", false);
      classLoader1.setPackageAssertionStatus("list", true);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("list", classLoader1, true);
      TypeUtils.isGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("list");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : list
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("-!9ez*");
      TypeUtils.castToBytes("-!9ez*");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : -!9ez*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BitSet bitSet0 = new BitSet(65);
      bitSet0.set(68, false);
      BitSet bitSet1 = new BitSet();
      bitSet0.set(65, false);
      bitSet0.clear();
      bitSet0.andNot(bitSet1);
      bitSet0.clear();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>(84, 84);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("EcOA", "EcOA", indexOutOfBoundsException0);
      Collator collator0 = Collator.getInstance();
      weakHashMap0.put(sQLRecoverableException0, collator0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLRecoverableException: EcOA
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.castToSqlDate((Object) null);
      Class<Integer> class0 = Integer.TYPE;
      int int0 = Opcodes.GOTO;
      TypeUtils.getCollectionItemClass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang.Cloneable", "java.lang.Cloneable", 167);
      sQLTransientConnectionException0.spliterator();
      sQLTransientConnectionException0.spliterator();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLTransientConnectionException: java.lang.Cloneable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.isNumber("-`,]]");
      Class<Method> class0 = Method.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>(38, Float.POSITIVE_INFINITY);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      Byte byte0 = new Byte((byte)53);
      weakHashMap0.get(byte0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("getNextException");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("-`,]]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -`,]]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Character> class0 = Character.class;
      TypeUtils.isProxy(class0);
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isshortValue");
      TypeUtils.isNumber("isshortValue");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("isshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : isshortValue
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.clear();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach((-677L), biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = new ThreadGroup("$");
      MockThread mockThread0 = new MockThread("$");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "$", (-4127L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.DateCodec", classLoader0, false);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("(J$T=ZU3%(>c#uo+");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vsu_h");
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RJ%!^4+34");
      BitSet bitSet0 = new BitSet(65);
      BitSet bitSet1 = new BitSet();
      bitSet1.clear();
      bitSet1.andNot(bitSet0);
      bitSet1.clear();
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.getParserFeatures(class0);
      JSONObject jSONObject0 = new JSONObject(65, false);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      BatchUpdateException batchUpdateException0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
      assertEquals(0, batchUpdateException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.getClassFromMapping("V>}~=&;^CR[DIzm");
      TypeUtils.isHibernateInitialized((Object) null);
      Dimension dimension0 = new Dimension(19, 19);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.awt.Dimension[width=19,height=19]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("o", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.unwrapOptional((Type) null);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("nextException");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(outOfMemoryError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("()Ljava/lang/String;", "lexer", "_J5FxOm8", (-3193));
      InterruptedException interruptedException0 = new InterruptedException();
      Class<Byte> class0 = Byte.TYPE;
      ThreadGroup threadGroup0 = new ThreadGroup("lexer");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "aMGf~&j.@kt!.$\"/gNX", (-3193));
      MockThread mockThread2 = new MockThread();
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      classLoader0.getParent();
      Class<?> class1 = TypeUtils.loadClass("_J5FxOm8", classLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("$_;", "$_;", "$_;", 85);
      InterruptedException interruptedException0 = new InterruptedException();
      ThreadGroup threadGroup0 = new ThreadGroup("DQGMAWT->vm)>Vc\"!n");
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup1 = new ThreadGroup("kn-ZH9");
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "lexer");
      MockThread mockThread0 = new MockThread(threadGroup2, thread0);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, " not found", 85);
      MockThread mockThread2 = new MockThread();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader1, false);
      String string0 = TypeUtils.decapitalize("kn-ZH9");
      assertEquals("kn-ZH9", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      StackTraceElement stackTraceElement0 = new StackTraceElement("DnX9f", "[/E<", "boo", (-2754));
      InterruptedException interruptedException0 = new InterruptedException();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Class<Byte> class1 = Byte.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      ThreadGroup threadGroup0 = new ThreadGroup("i-(");
      MockThread mockThread0 = new MockThread("i-(");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "c?SsF`*4D>k...", (-1L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      Insets insets0 = new Insets(97, 97, 97, (-221));
      TypeUtils.castToByte((Object) null);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach((-677L), biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, hashtable0, true, propertyNamingStrategy0);
      TypeUtils.isNumber("$");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      TypeUtils.castToFloat((Object) null);
      TypeUtils.getParserFeatures(class1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("$");
      ParsePosition parsePosition0 = new ParsePosition(0);
      mockSimpleDateFormat0.parse("unclosed str", parsePosition0);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) thread0);
      TypeUtils.fnv1a_64_lower("X@j_\"<uDn}RM6p*");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      TypeUtils.getClass((Type) class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.parser.deserializer.OptionalCodec");
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.parser.deserializer.OptionalCodec", classLoader1);
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "can not cast to boolean, value : ");
      classLoader0.getParent();
      TypeUtils.fnv1a_64_lower("I@.00");
      TypeUtils.getSerializeFeatures(class0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("com.alibaba.fastjson.parser.deserializer.OptionalCodec");
      TypeUtils.unwrapOptional(class2);
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("com.alibaba.fastjson.parser.deserializer.OptionalCodec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isProxy(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Method> class0 = Method.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      TypeUtils.getCollectionItemClass(type0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, type0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@399ae902
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      Charset.defaultCharset();
      Class<InternalError> class1 = InternalError.class;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("fastjson.parser.autoTypeAccept");
      Long long0 = new Long(1099511628211L);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) long0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getParserFeatures(class0);
      Class<Short> class1 = Short.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class2);
      TypeUtils.isNumber("Ljava.util.concurrent.ConcurrentSkipListMap");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isNumber("Saxmz^Q'rF!LH<9]v");
      ThreadGroup threadGroup0 = new ThreadGroup("Saxmz^Q'rF!LH<9]v");
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup1 = new ThreadGroup("org.springframework.cglib.proxy.Factory");
      ParserConfig parserConfig0 = ParserConfig.global;
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"fastMatchToken\":12}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      MockThread mockThread0 = new MockThread("Ljava.util.concurrent.ConcurrentSkipListMap");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "Ljava.util.concurrent.ConcurrentSkipListMap");
      mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.util.concurrent.ConcurrentSkipListMap");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      TypeUtils.cast((Object) null, (Type) parameterizedTypeImpl0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("!7", "!7");
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      Class<Object> class1 = Object.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      TypeUtils.createCollection(class1);
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError((String) null);
      illegalAccessError0.fillInStackTrace();
      TypeUtils.castToChar((Object) null);
      Class<?> class3 = TypeUtils.getClass((Type) class2);
      Dimension dimension0 = new Dimension(78, 78);
      Dimension dimension1 = new Dimension((-2058367919), (-2078975360));
      Dimension dimension2 = new Dimension((-2058367919), 917);
      Rectangle rectangle0 = new Rectangle(dimension2);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<?> class4 = TypeUtils.getRawClass(class0);
      assertSame(class4, class3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      ThreadGroup threadGroup0 = new ThreadGroup("i-(");
      MockThread mockThread0 = new MockThread("i-(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "c?SsF`*4D>k...", (-1L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>();
      Collator.getInstance();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "i-(", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : i-(
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 84;
      Class<Short> class0 = Short.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentHashMap0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("Ljava.util.concurrent.ConcurrentSkipListMap");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      aSMClassLoader0.setPackageAssertionStatus("Ljava.util.concurrent.ConcurrentSkipListMap", true);
      TypeUtils.loadClass("fastjson.parser.deny", (ClassLoader) aSMClassLoader0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "hashCode", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread0 = new MockThread("Ljava.util.concurrent.ConcurrentSkipListMap");
      MockThread mockThread1 = new MockThread(mockThread0);
      mockThread0.run();
      mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass(".`LWj^t[Aa");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(".`LWj^t[Aa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : .`LWj^t[Aa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.awt.ColoE", "&g=;y4B;+Ze7j%?F08", identityHashMap0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      MockFile mockFile0 = new MockFile("*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.flush();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      mockPrintStream0.format(locale0, "i", (Object[]) stackTraceElementArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.awt.ColoE", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getParserFeatures(class0);
      Class<Short> class1 = Short.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class2);
      TypeUtils.isNumber("Ljava.util.concurrent.ConcurrentSkipListMap");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isNumber("Saxmz^Q'rF!LH<9]v");
      ThreadGroup threadGroup0 = new ThreadGroup("Saxmz^Q'rF!LH<9]v");
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup1 = new ThreadGroup("org.springframework.cglib.proxy.Factory");
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "org.springframework.cglib.proxy.Factory", 1325L);
      Class<Double> class3 = Double.TYPE;
      Object object0 = new Object();
      TypeUtils.loadClass("org.springframework.cglib.proxy.Factory");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) threadGroup0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("(J$T=ZU3%(>c#uo+");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vsu_h");
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RJ%!^4+34");
      BitSet bitSet0 = new BitSet(65);
      BitSet bitSet1 = new BitSet();
      bitSet1.andNot(bitSet0);
      bitSet1.clear();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("RJ%!^4+34");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("ishashCode");
      TypeUtils.castToString("ishashCode");
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Charset.defaultCharset();
      Class<InternalError> class1 = InternalError.class;
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      Class<InternalError> class3 = InternalError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class3, jSONType0);
      TypeUtils.getCollectionItemClass(class2);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class3;
      typeArray0[1] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SimpleDateFormat> class4 = SimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class4);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@8b040e9e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "lexer";
      StackTraceElement stackTraceElement0 = new StackTraceElement("()Ljava/lang/String;", "lexer", "_J5FxOm8", (-3193));
      InterruptedException interruptedException0 = new InterruptedException();
      SQLWarning sQLWarning0 = new SQLWarning("j6TPpz.UMh", "()Ljava/lang/String;");
      sQLWarning0.addSuppressed(interruptedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("lexer", interruptedException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("lexer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"lexer\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hm0uD/Rj|bJ]NGeWp");
      TypeUtils.isNumber("false");
      ThreadGroup threadGroup0 = new ThreadGroup("false");
      MockThread mockThread0 = new MockThread();
      MockThread.interrupted();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "@#~5/=h", 524L);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      Class<ClassLoader> class0 = ClassLoader.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiConsumer<String, Object> biConsumer1 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer1);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("Tm!Aohgf@;e6>UF");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("csh", noSuchMethodException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("illegal ref", "rbAP_K", (Map<String, ClientInfoStatus>) null, mockIllegalStateException0);
      AtomicLong atomicLong0 = new AtomicLong(3550L);
      TypeUtils.castToSqlDate(atomicLong0);
      ParserConfig parserConfig0 = new ParserConfig();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!j2.@Ic_*z<%ed");
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("#&.7?4t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : #&.7?4t
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach((-677L), biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      TypeUtils.decapitalize("");
      String string0 = "=^,v";
      TypeUtils.fnv1a_64("=^,v");
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("=^,v");
      ParserConfig parserConfig0 = new ParserConfig();
      InstantiationError instantiationError0 = new InstantiationError();
      Class<FieldInfo> class0 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) instantiationError0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("WriteClassName");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vsu_Ch");
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "MM/dd/yyyy HH:mm:ss";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WriteClassName");
      Map<String, String> map0 = null;
      Class<Timestamp> class0 = Timestamp.class;
      Class<Float> class1 = Float.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      Class<?> class2 = TypeUtils.getRawClass(class1);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[2]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.util.concurrent.ConcurrentSkipListMap");
      Map<String, String> map0 = null;
      Class<Properties> class0 = Properties.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], (Type) null);
      // Undeclared exception!
      try { 
        Date.valueOf("n2 dyBd{f2r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "[C";
      TypeUtils.fnv1a_64_lower("[C");
      TypeUtils.clearClassMapping();
      System.setCurrentTimeMillis((-1808L));
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "h3RdGE8K%U", fieldArray0);
      Class<Locale> class1 = Locale.class;
      Field[] fieldArray1 = new Field[8];
      fieldArray1[0] = null;
      fieldArray1[1] = null;
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      Class<MockJapaneseDate> class3 = MockJapaneseDate.class;
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class2, class3, class3, field0, (-263), 11, (-1130091716));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "WriteClssName";
      TypeUtils.decapitalize((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("WriteClssName");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : WriteClssName
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "ishashCode";
      TypeUtils.loadClass("ishashCode");
      TypeUtils.castToString("ishashCode");
      Charset.defaultCharset();
      Class<InternalError> class0 = InternalError.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[3]);
      ParserConfig parserConfig0 = ParserConfig.global;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vsu_h");
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread0 = new MockThread("(J8T=pU3u>c#uo");
      MockThread mockThread1 = new MockThread(mockThread0, "Vsu_h");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ThreadGroup threadGroup0 = new ThreadGroup("java.nio.file.Path");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "Vsu_h");
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "aB8ynLyd");
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>();
      Collator.getInstance();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Byte byte0 = new Byte((byte)13);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("Vsu_h");
      Insets insets0 = new Insets((-12473307), 0, (byte)13, 10);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"bottom\":13,\"left\":0,\"right\":10,\"top\":-12473307}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      byte byte0 = (byte)54;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      String string0 = "i-(";
      MockThread mockThread0 = null;
      try {
        mockThread0 = new MockThread((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      Class<Method> class1 = Method.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0);
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.compatibleWithFieldName");
      MockThread mockThread0 = new MockThread("WvH5");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Y\"|]MSNq&#BmEuS%}9", (-1L));
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.getParent();
      WeakHashMap<SQLRecoverableException, Collator> weakHashMap0 = new WeakHashMap<SQLRecoverableException, Collator>();
      Collator.getInstance();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ParserConfig parserConfig0 = null;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, (String) null, 10, 91, 0, 10, 1621, (-3481), 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      String string0 = "i-(";
      MockThread mockThread0 = new MockThread("i-(");
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      MockThread mockThread1 = new MockThread("i-(");
      Collator.getInstance();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "i-(", (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Method> class0 = Method.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0, (Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<InternalError> class2 = InternalError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      TypeUtils.getCollectionItemClass(class0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(genericArrayType0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class4;
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("d@r8]");
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Point");
      MockThread mockThread0 = new MockThread();
      TypeUtils.castToDate((Object) null);
      InterruptedException interruptedException0 = new InterruptedException();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.toLocale("O^xA^");
      TypeUtils.clearClassMapping();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("getUpdateCounts");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      aSMDeserializerFactory0.classLoader.setPackageAssertionStatus("org.springframework.security.core.context.SecurityContextImpl", false);
      TypeUtils.loadClass("", (ClassLoader) aSMClassLoader0, false);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToEnum((Object) "", class1, parserConfig0);
      // Undeclared exception!
      try { 
        JSON.parseArray("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Method> class0 = Method.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<InternalError> class2 = InternalError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      TypeUtils.getCollectionItemClass(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToBigDecimal((Object) null);
      Class<Annotation> class3 = Annotation.class;
      Class<OptionalCodec> class4 = OptionalCodec.class;
      TypeUtils.getAnnotation((Class<?>) class4, class3);
      TypeUtils.getParserFeatures(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.awt.ColoE", "&g=;y4B;+Ze7j%?F08", identityHashMap0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      MockFile mockFile0 = new MockFile("*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.flush();
      mockFile0.delete();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      mockPrintStream0.format(locale0, "i", (Object[]) stackTraceElementArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<Calendar> class1 = Calendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.awt.ColoE", (Type) class2, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.awt.ColoE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<String> class0 = String.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      TypeUtils.isNumber("+@*5_Po5 H/{[TY");
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("+@*5_Po5 H/{[TY", classLoader0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1293;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      NumberFormatException numberFormatException0 = new NumberFormatException((String) null);
      ConcurrentHashMap<Short, Method> concurrentHashMap0 = new ConcurrentHashMap<Short, Method>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.awt.ColoE", "&g=;y4B;+Ze7j%?F08", identityHashMap0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      MockFile mockFile0 = new MockFile("*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.flush();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      mockPrintStream0.format(locale0, "i", (Object[]) stackTraceElementArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<Integer> class1 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.awt.ColoE", (Type) class2, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.awt.ColoE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.isNumber("-`,]]");
      Byte byte0 = new Byte((byte) (-103));
      TypeUtils.castToDate(byte0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TypeUtils typeUtils0 = new TypeUtils();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Time> class1 = Time.class;
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        Time.valueOf("-`,]]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("(J$T=ZU3%(>c#uo+");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vsu_h");
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread0 = new MockThread("(J$T=ZU3%(>c#uo+");
      MockThread mockThread1 = new MockThread(mockThread0, "Vsu_h");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.getParent();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer((-1988084588));
      TypeUtils.castToBoolean(integer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(95, 95, 39, 39, 39);
      TypeUtils.castToDate(mockGregorianCalendar0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      TreeMap<StackTraceElementDeserializer, String> treeMap0 = new TreeMap<StackTraceElementDeserializer, String>();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockIllegalAccessException0);
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLSyntaxErrorException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Character> class0 = Character.class;
      TypeUtils.unwrapOptional(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.getClassFromMapping("X");
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.getClassFromMapping("C.}_8ZjYFl$L");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("X", (ClassLoader) null);
      TypeUtils.castToBigDecimal(identityHashMap0);
      String string0 = "7b)'u$cA&xgOz";
      Locale locale0 = TypeUtils.toLocale("7b)'u$cA&xgOz");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("},_", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"},_\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockThread.currentThread();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadGroup threadGroup0 = new ThreadGroup("x");
      MockThread mockThread0 = new MockThread(threadGroup0, "^P7kS.WxYgf?A~I");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "t)x;ALZ!Y]S-cU-kh");
      mockThread2.run();
      mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      Class<Annotation> class0 = Annotation.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.time.Instant", "C");
      Class<RenderingHints> class2 = RenderingHints.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashMap0, true);
      TypeUtils.isKotlin(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1795836997), (-1795836997), 37, 20, 55296, 55296);
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("/EY4Hs9j?s&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Class<Float> class0 = Float.TYPE;
      Class<Properties> class1 = Properties.class;
      TimeZone.getAvailableIDs();
      System.setCurrentTimeMillis(1290L);
      ClassLoader.getSystemClassLoader();
      System.setCurrentTimeMillis(1290L);
      Class<Float> class2 = Float.TYPE;
      TypeUtils.getGenericParamType(class1);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      String string0 = "lineNumber";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]E0mF~", "lineNumber", linkedHashMap0, batchUpdateException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("]E0mF~", map0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      try { 
        Integer.valueOf("]E0mF~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]E0mF~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "-`,]]";
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("fs", "-`,]]");
      linkedHashMap0.put("#|3='g", "ava.awt.Font");
      MockDate mockDate0 = new MockDate(41, 999999, (-100), 999999, 41);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("fs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : fs
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = " n<`m[";
      ThreadGroup threadGroup0 = new ThreadGroup(" n<`m[");
      MockThread mockThread0 = new MockThread(threadGroup0, "^;r`N");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread1 = new MockThread(mockThread0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.loadClass("^;r`N");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("N,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Character> class0 = Character.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Class<TimeUnit> class1 = TimeUnit.class;
      TypeUtils.isProxy(class1);
      TypeUtils.loadClass("[B");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Long> class2 = Long.class;
      JavaBeanInfo.getBuilderClass(class2, jSONType0);
      TypeUtils.isNumber("org.springframework.cglib.proxy.Factory");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.computeGetters(class0, map0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.replace("Z:H", "create instance error, ");
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      int int0 = (-247);
      Integer integer0 = new Integer((-247));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -247
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, true);
      TypeUtils.decapitalize("8'4kl;zr=<c>G");
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getCollectionItemType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("8'4kl;zr=<c>G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 8'4kl;zr=<c>G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = "com.alibaba.fastjson.util.TypeUtils";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.TypeUtils");
      TypeUtils.isNumber("!VimzZ~o aHDV");
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.util.TypeUtils");
      MockThread.interrupted();
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Throwable throwable0 = null;
      Hashtable<Float, PropertyProcessableDeserializer> hashtable1 = new Hashtable<Float, PropertyProcessableDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.castToInt((Object) null);
      TypeUtils.castToString((Object) null);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isPath(class0);
      Short short0 = new Short((short) (-71));
      TypeUtils.castToFloat(short0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Class<InternalError> class0 = InternalError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Class<Method> class1 = Method.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache(",BoX.", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo(",BoX.", class0, class1, class0, (Field) null, 1536, 1827, 27);
      fieldInfo0.getDeclaredClass();
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.getCollectionItemClass((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClassFromMapping("`P ;u1I F&VfvV4 ");
      TypeUtils.toLocale("_}.L FH");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Point> class0 = Point.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer((-1952257860));
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("false");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<Rectangle> class0 = Rectangle.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      String string1 = "to";
      ThreadGroup threadGroup0 = new ThreadGroup("to");
      BigDecimal bigDecimal0 = new BigDecimal((-247L));
      Class<TimeZone> class1 = TimeZone.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigDecimal0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.TimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      linkedHashMap0.getOrDefault(mockThaiBuddhistDate0, "SUPPRESSED_SENTINEL");
      linkedHashMap0.put("R", "is");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<Float, PropertyProcessableDeserializer> hashtable0 = new Hashtable<Float, PropertyProcessableDeserializer>();
      Short short0 = new Short((short)5);
      Long long0 = TypeUtils.castToLong(short0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("SUPPRESSED_SENTINEL", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("SUPPRESSED_SENTINEL", sQLRecoverableException0);
      Point point0 = new Point();
      Integer integer0 = new Integer(102);
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte(long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThread mockThread0 = new MockThread();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<Float, PropertyProcessableDeserializer> hashtable0 = new Hashtable<Float, PropertyProcessableDeserializer>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1934176825), (-646), (-646), (byte)54, (-1934176825));
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(numberFormatException0);
      mockGregorianCalendar0.after(sQLTransientConnectionException0);
      TypeUtils.castToShort((Object) null);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      java.util.IdentityHashMap<StringCharacterIterator, PageAttributes> identityHashMap0 = new java.util.IdentityHashMap<StringCharacterIterator, PageAttributes>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
