/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:35:35 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("1*]", 0, "1*]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("4", 5);
      int int1 = HttpHeaders.skipWhitespace("4", 4);
      assertTrue(int1 == int0);
      
      int int2 = HttpHeaders.skipUntil("B=|>K", 4, "4");
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      long long0 = HttpHeaders.contentLength(headers1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@[e?bLD}_";
      stringArray0[1] = "@[e?bLD}_";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "@[e?bLD}_");
      assertEquals(0, list0.size());
      
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Im6hUiB]6]FCo'gOQm";
      stringArray0[1] = "\"'<>#&=";
      stringArray0[2] = "Vary";
      stringArray0[3] = "Im6hUiB]6]FCo'gOQm";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      long long0 = HttpHeaders.contentLength(headers1);
      assertEquals(1, headers1.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("4", 5);
      assertEquals(4, int0);
      
      int int1 = HttpHeaders.skipWhitespace("+([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 4);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vary";
      String string0 = "szcp\"tqoqtqy;";
      stringArray0[1] = "szcp\"tqoqtqy;";
      stringArray0[2] = "szcp\"tqoqtqy;";
      stringArray0[3] = "vary";
      stringArray0[4] = "vary";
      stringArray0[5] = "vary";
      stringArray0[6] = "vary";
      stringArray0[7] = "vary";
      Headers headers0 = Headers.of(stringArray0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(headers0, headers0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x7f at 0 in vary value: szcp\"tqoqtqy;
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1*]";
      stringArray0[1] = "1*]";
      stringArray0[2] = "Content-Length";
      stringArray0[3] = "Content-Length";
      stringArray0[4] = "z}h{xr k5u8z2hqb/jc";
      stringArray0[5] = "Content-Length";
      stringArray0[6] = "Content-Length";
      stringArray0[7] = "Content-Length";
      Headers headers0 = Headers.of(stringArray0);
      headers0.newBuilder();
      headers0.toString();
      headers0.names();
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpHeaders.skipWhitespace("\r", 8);
      HttpHeaders.parseSeconds("-92337203685477508", 8);
      HttpUrl httpUrl0 = HttpUrl.parse("-92337203685477508");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("S% =l)", "S% =l)");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.getDate("S% =l)");
      headers0.toString();
      HttpHeaders.parseChallenges(headers0, "S% =l)");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("%{ =l)", 0);
      assertEquals(0, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("%{ =l)", "%{ =l)");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.getDate("%{ =l)");
      hashMap0.put("%{ =l)", "%{ =l)");
      headers0.names();
      headers0.name(0);
      headers0.toString();
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.put("%{ =l)", "%{ =l): %{ =l)\n");
      int int1 = HttpHeaders.parseSeconds("923372036854775808", 0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap1);
      HttpUrl.parse("%{ =l)");
      CookieJar cookieJar1 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar1, (HttpUrl) null, headers0);
      int int2 = HttpHeaders.skipUntil("source == null", 942, "source == null");
      assertEquals(942, int2);
  }
}
