/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:01:20 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.services.io.ArrayInputStream;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.tools.Recover;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayInputStream arrayInputStream0 = new ArrayInputStream();
      String string0 = SQLUtil.normalize("kyalGb\"(aaO", false);
      String string1 = SQLUtil.renderValue(arrayInputStream0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "a<Bx)_-2C(#$c";
      SQLUtil.normalize("a<Bx)_-2C(#$c", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("'>!7i}zYO", false);
      assertEquals("'>!7i}zYO'", string0);
      
      String string1 = SQLUtil.renderValue("'>!7i}zYO'");
      assertEquals("''>!7i}zYO''", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("not received: op is ");
      String string0 = SQLUtil.normalize("mN-$E~#", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mN-$E~#");
      String string1 = SQLUtil.removeComments("not received: op is ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.isDML("/nGpmsHp{");
      TableContainer tableContainer0 = new TableContainer("#>C|GX?o");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/nGpmsHp{", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/nGpmsHp{";
      stringArray0[1] = "/nGpmsHp{";
      stringArray0[2] = "/nGpmsHp{";
      stringArray0[3] = "#>C|GX?o";
      stringArray0[4] = "#>C|GX?o";
      stringArray0[5] = "/nGpmsHp{";
      stringArray0[6] = "/nGpmsHp{";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '/nGpmsHp{' has no foreign key with the columns (/nGpmsHp{, /nGpmsHp{, /nGpmsHp{, #>C|GX?o, #>C|GX?o, /nGpmsHp{, /nGpmsHp{)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = SQLUtil.isDML("drop index");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "u6;!D=|'yPlZ";
      SQLUtil.isDDL("u6;!D=|'yPlZ");
      String string1 = "O\\6VFFV]$<`].p";
      SQLUtil.mutatesDataOrStructure("O\u0006VFFV]$<`].p");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      TableContainer tableContainer0 = new TableContainer("u6;!D=|'yPlZ");
      String string2 = "As";
      tableContainer0.getTable("As");
      String string3 = "aP&hD+%D_s@r1b+ND";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("aP&hD+%D_s@r1b+ND");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename#\"g/njbgc[!u^rxb");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      String string0 = SQLUtil.renderValue(valueDecimal0);
      assertEquals("0", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("+^w\"W:2qa,uXJ\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("GA;}#EdzT`Gl$JH!FV");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderValue("GA;}#EdzT`Gl$JH!FV");
      assertEquals("'GA;}#EdzT`Gl$JH!FV'", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.removeComments("select+z");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select+z");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create unique index");
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique index");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("^a.HHuN3");
      Boolean boolean0 = SQLUtil.mutatesStructure("^a.HHuN3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "u_R,5./LajA8F";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(u_R,5./LajA8F)", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("u_R,5./LajA8F", stringArray0);
      assertEquals("u_R,5./LajA8F.u_R,5./LajA8F", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`C=|((XMOIqipwoR";
      stringArray0[1] = "KE,;u:!c*x<zb";
      stringArray0[2] = "`C=|((XMOIqipwoR";
      SQLUtil.join("`C=|((XMOIqipwoR", "`C=|((XMOIqipwoR", stringArray0, ";!J#", "`C=|((XMOIqipwoR", stringArray0);
      String string0 = "H1%A3A\"+??d91]xV";
      SQLUtil.leftJoin("`C=|((XMOIqipwoR", stringArray0, "`C=|((XMOIqipwoR join ;!J# as `C=|((XMOIqipwoR on `C=|((XMOIqipwoR.`C=|((XMOIqipwoR = `C=|((XMOIqipwoR.`C=|((XMOIqipwoR and `C=|((XMOIqipwoR.KE,;u:!c*x<zb = `C=|((XMOIqipwoR.KE,;u:!c*x<zb and `C=|((XMOIqipwoR.`C=|((XMOIqipwoR = `C=|((XMOIqipwoR.`C=|((XMOIqipwoR", "H1%A3A\"+??d91]xV", stringArray0);
      SQLUtil.leftJoin("", stringArray0, "`C=|((XMOIqipwoR", "0", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("^a.HHuN3");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("^a.HHuN3", stringArray0, "^a.HHuN3", "^a.HHuN3", stringArray0);
      assertEquals("left join ^a.HHuN3 as ^a.HHuN3 on ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("execlob undate", true);
      assertEquals("execlob undate", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "execlob undate";
      String string1 = SQLUtil.innerJoin("execlob undate", stringArray0, "execlob undate", "execlob undate", stringArray0);
      assertEquals("execlob undate as execlob undate on execlob undate.execlob undate = execlob undate.execlob undate", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(execlob undate)", string2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "update";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "update";
      stringArray0[5] = "update";
      stringArray0[6] = "update";
      stringArray0[7] = "update";
      String string0 = SQLUtil.join("", "update", stringArray0, "", "", stringArray0);
      assertEquals(" as  on update.update = .update and update. = . and update. = . and update. = . and update.update = .update and update.update = .update and update.update = .update and update.update = .update", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1166), "");
      Integer integer0 = new Integer(0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" (0,0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(439, "alter tablenclob");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablenclob", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter tablenclob ALTER TABLENCLOB(3) NULL", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("alter tablenclob", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("bi@;5=$_.6$'-D]*x");
      boolean boolean0 = SQLUtil.isQuery("CONSTRAINT ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bi@;5=$_.6$'-D]*x";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("bi@;5=$_.6$'-D]*x = 'bi@;5=$_.6$'-D]*x'", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = Dependable.ACTIVATION;
      boolean boolean0 = SQLUtil.isDDL("Activation");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "-";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      SQLUtil.renderColumnListWithTableName("-", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string1 = "FCS";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuilder0.append(stringBuffer0);
      defaultDBTable0.getIndexes();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2, '\'');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1);
      SQLUtil.addRequiredCondition("delete#bq!_4}h|q=rcu%gv{", stringBuilder0);
      assertEquals("delete#bq!_4}h|q=rcu%gv{", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      SQLUtil.renderValue((Object) null);
      SQLUtil.isProcedureCall("*dt>Li<~D");
      SQLUtil.normalize("*dt>Li<~D", true);
      SQLUtil.isQuery("SELECT * FROM ");
      SQLUtil.renderValue((Object) null);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.isQuery("select into");
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("select into");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'select into'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = "4&?ApN";
      SQLUtil.parseColumnTypeAndSize("4&?ApN");
      String string1 = "3'N!3*RECsav$";
      TableContainer tableContainer0 = new TableContainer("3'N!3*RECsav$");
      String string2 = "";
      tableContainer0.getTable("");
      tableContainer0.getComponents();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (DBDataType) null, (Integer) (-4), (Integer) (-4));
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("P", true, "'8R2bG]PurKPk", "P");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|RO.+u^";
      stringArray0[1] = "";
      stringArray0[2] = "|RO.+u^";
      String string0 = SQLUtil.join("|RO.+u^", "|RO.+u^", stringArray0, "", "|RO.+u^", stringArray0);
      assertEquals("|RO.+u^ join  as |RO.+u^ on |RO.+u^.|RO.+u^ = |RO.+u^.|RO.+u^ and |RO.+u^. = |RO.+u^. and |RO.+u^.|RO.+u^ = |RO.+u^.|RO.+u^", string0);
      
      boolean boolean0 = SQLUtil.isDDL("|RO.+u^");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hd4I?7+h#9");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rundll32", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (|RO.+u^, , |RO.+u^)", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " on ");
      SQLUtil.addOptionalCondition(" on ", stringBuilder0);
      assertEquals(" on  or  on ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.isProcedureCall("LOB update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t\"ibHq9";
      stringArray0[1] = "t\"ibHq9";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "t\"ibHq9", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("t\"ibHq9", stringBuilder0);
      SQLUtil.addRequiredCondition("t\"ibHq9", stringBuilder1);
      int int0 = 75;
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = ';';
      charArray0[2] = '7';
      charArray0[3] = 'e';
      char char0 = '\'';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(75, '~');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(")9;G%W9u'BaC*K\"");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars(0, 4263);
      streamTokenizer0.slashSlashComments(false);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop materialized view", (String[]) null, "drop materialized view", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("=b*QO/#", false);
      assertEquals("= b * QO / #", string0);
      
      String string1 = SQLUtil.renderValue("=b*QO/#");
      assertEquals("'=b*QO/#'", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("=b*QO/#", false);
      assertEquals("= b * QO / #", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      String string1 = SQLUtil.substituteMarkers("= b * QO / #", "= b * QO / #", "=b*QO/#");
      assertEquals("'=b*QO/#'", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      String string0 = "alter table|ro.+u^";
      SQLUtil.normalize("alter table|ro.+u^", false);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "LOB update";
      SQLUtil.isProcedureCall("LOB update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      String string1 = "&F(OecS*-OAQU94";
      DBDataType dBDataType0 = DBDataType.getInstance(11, "&F(OecS*-OAQU94");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&F(OecS*-OAQU94", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.innerJoin("rename|ro.+u^", stringArray0, "&F(OecS*-OAQU94", "rename|ro.+u^", stringArray0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1994091956));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      boolean boolean0 = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = ' ';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(995, charArray0, 995, 2155);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 995
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|RO.+u^";
      stringArray0[1] = "";
      stringArray0[2] = "|RO.+u^";
      SQLUtil.join("|RO.+u^", "|RO.+u^", stringArray0, "", "|RO.+u^", stringArray0);
      SQLUtil.isDDL("|RO.+u^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hd4I?7+h#9");
      SQLUtil.isQuery("@~69N1Y{90Tt,wnh!U");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT  PRIMARY KEY (, , , )", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string1);
      
      String string2 = SQLUtil.renderValue("");
      assertEquals("''", string2);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT call FOREIGN KEY (, , , ) REFERENCES (, , , )", string3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLUtil.removeComments("");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete=*=tqkh}isws", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isQuery("k/c9+AX");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "oo{>uQg-k$iy;U";
      stringArray0[1] = "k/c9+AX";
      stringArray0[2] = "oo{>uQg-k$iy;U";
      stringArray0[3] = "oo{>uQg-k$iy;U";
      stringArray0[4] = "k/c9+AX";
      stringArray0[5] = "k/c9+AX";
      stringArray0[6] = "oo{>uQg-k$iy;U";
      stringArray0[7] = "k/c9+AX";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("oo{>uQg-k$iy;U", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = MockFile.createTempFile("k/c9+AX", "XCL16.S");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter1);
      SQLUtil.isQuery("o\u0006vffv]$<`");
      String string0 = "B9b3pcV};M}0mU;";
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize(")9;G%W9u'BaC*K\"", true);
      assertEquals(") 9 ; G % W9u 'BaC*K\"'", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("WZgHK.^Hi)#/i\"");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName("- ");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , , - )", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = '' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.isQuery(")9;G%W9u'BaC*K\"");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" |{7F8420cJk`)0", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" |{7F8420cJk`)0", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = " |{7F8420cJk`)0";
      stringArray0[2] = null;
      stringArray0[3] = " |{7F8420cJk`)0";
      stringArray0[4] = " |{7F8420cJk`)0";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.renderValue(stringArray0[7]);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.renderValue("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 231, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Hex$ttu+:Kqc9TwHA", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("dP,VDet:DxHK1");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "left", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "select into>oe2?t<,e";
      boolean boolean0 = true;
      SQLUtil.normalize("select into>oe2?t<,e", true);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select into > oe2 ? t <, e", "select into>oe2?t<,e", (VersionNumber) null);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("select into > oe2 ? t <, e", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'select into > oe2 ? t <, e'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(19, "l");
      Integer integer0 = new Integer(2546);
      TableContainer tableContainer0 = new TableContainer(".");
      TableContainer tableContainer1 = new TableContainer("selectbh^u^pui", tableContainer0);
      tableContainer1.getTable("a<Bx)_-2C(#$c");
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", (DBTable) null, dBDataType0, integer2, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(". L(0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("=*=tqkH}Isws");
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBSchema dBSchema0 = new DBSchema("selectbh^u^p");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+z", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "selectbh^u^p";
      stringArray0[1] = "+z";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "6gR4c!q+t'R-.1Pal;J", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6gR4c!q+t'R-.1Pal;J");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("+z", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("constraint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_$UQ6+k-zk");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBSchema dBSchema0 = new DBSchema("<4Am:/N2]");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("fywl0v", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "'e";
      stringArray0[3] = "";
      stringArray0[4] = "fywl0v";
      stringArray0[5] = "fywl0v";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "'e", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , 'e, , fywl0v, fywl0v)", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(")9;G%W9u'BaC*K\"");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars(0, 4263);
      streamTokenizer0.slashSlashComments(false);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      streamTokenizer0.lowerCaseMode(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop materialized view";
      pipedReader0.skip(0L);
      stringArray0[1] = "CREATE MATERIALIZED VIEW-0?N(IM>KR";
      stringArray0[2] = ")9;G%W9u'BaC*K\"";
      stringArray0[3] = null;
      stringArray0[4] = ")9;G%W9u'BaC*K\"";
      stringArray0[5] = ")9;G%W9u'BaC*K\"";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CREATE MATERIALIZED VIEW-0?N(IM>KR", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("update=*=tqkh}isws");
      mockPrintWriter0.println((-4));
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("drop materialized view", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getArray(");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("truncate#i/arw");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDBTable0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) nameSpec0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("getArray(", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBDataType.getInstance((-476), "^a.HHuN3");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.normalize("N\"np.NYjKYTf?Tj", true);
      assertEquals("N \"np.NYjKYTf?Tj\"", string0);
      
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-476), "^a.HHuN3");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-476));
      Integer.sum((-476), (-476));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^a.HHuN3", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("^a.HHuN3 ^A.HHUN3(2,-476) NULL");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(";(4(^TL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ;(4(^TL
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" as ", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(39, " as ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "J.oe";
      String string0 = SQLUtil.renderColumnListWithTableName("J.oe", stringArray0);
      assertEquals("J.oe.J.oe, J.oe.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("J.oe");
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table J.oe", string1);
      
      String string2 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM J.oe WHERE J.oe = 'J.oe' AND null = null", string2);
      
      Integer integer0 = new Integer(5);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string3 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT ; ", string3);
      
      String string4 = SQLUtil.renderValue("SELECT * FROM J.oe WHERE J.oe = 'J.oe' AND null = null");
      assertEquals("'SELECT * FROM J.oe WHERE J.oe = 'J.oe' AND null = null'", string4);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7p*=2C", false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(1146, "");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("constraint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint0.getName());
  }
}
