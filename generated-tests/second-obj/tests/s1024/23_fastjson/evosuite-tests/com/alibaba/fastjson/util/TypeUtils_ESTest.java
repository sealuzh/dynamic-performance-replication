/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:20:56 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.TemporalAdjuster;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TreeMap<Character, ChoiceFormat> treeMap0 = new TreeMap<Character, ChoiceFormat>();
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils.cast((Object) treeMap0, class0, parserConfig0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.isNumber("toString");
      LinkedHashMap<MockCalendar, NumberFormat> linkedHashMap0 = new LinkedHashMap<MockCalendar, NumberFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      String string0 = "p#Z47fI38-1~qa`j9<";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) propertyNamingStrategy0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLException> class0 = SQLException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      TypeUtils.computeGetters(class1, map0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      String string0 = "p#Z47fI38-1~qa`j9<";
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      String string1 = "9WCWOXkS<if?QE='c{";
      NavigableMap<String, String> navigableMap0 = treeMap0.headMap("p#Z47fI38-1~qa`j9<", false);
      treeMap0.lowerEntry("9WCWOXkS<if?QE='c{");
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) navigableMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Collator> class0 = Collator.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">>z e:QE*/X/?");
      TypeUtils.getClassFromMapping("2@G*9-");
      Class<NegativeArraySizeException> class1 = NegativeArraySizeException.class;
      TypeUtils.getSerializeFeatures(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o", ".0");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.loadClass("illegal json creator");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      Type[] typeArray0 = new Type[0];
      Class<Long> class1 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "Ux";
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string1 = "L";
      TypeUtils.loadClass("L");
      Class<Integer> class1 = Integer.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      TreeMap<IndexOutOfBoundsException, SimpleTimeZone> treeMap0 = new TreeMap<IndexOutOfBoundsException, SimpleTimeZone>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      String string0 = "Oh %}2H7z";
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<String> class0 = String.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) parameterizedTypeImpl0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      TypeUtils.isHibernateInitialized(sqlDateDeserializer0);
      Class<NumberFormat> class0 = NumberFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.headMap("9WCWOXkS<if?QE='c{", true);
      treeMap0.lowerEntry("9WCWOXkS<if?QE='c{");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeUtils.isNumber("Ljava.awt.Font");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.castToString(class0);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mJ\t+2+~jEE");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPDeserializer0.deserialze(defaultJSONParser0, (Type) class0, (Object) "Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal jsonp : 
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      TypeUtils.loadClass("p#Z47fI38-1~qa`j9<", (ClassLoader) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyProcessableDeserializer0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "org.hibernate.Hibernate");
      MockThread mockThread0 = new MockThread("create instance error, class ");
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "create instance error, class ");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("create instance error, class ", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Object> class0 = Object.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.loadClass("long");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.clearDeserializers();
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) type0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Object> class0 = Object.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.loadClass("long");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getRawClass(class0);
      System.setCurrentTimeMillis(2048L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLException> class0 = SQLException.class;
      Class<SQLException> class1 = SQLException.class;
      parserConfig0.initJavaBeanDeserializers((Class<?>[]) null);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.isTransient((Method) null);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      timeUnit0.toSeconds((-1610L));
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (Type) class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = ParserConfig.DENY_PROPERTY;
      treeMap0.put("9WCWOXkS<if?QE='c{", "9WCWOXkS<if?QE='c{");
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9WCWOXkS<if?QE='c{", (String) null, 1001);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransactionRollbackException: 9WCWOXkS<if?QE='c{
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.loadClass("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      Class<BigInteger> class1 = BigInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) javaBeanDeserializer0, class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.aliba\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass("Ux", (ClassLoader) null);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToBigInteger((Object) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("Ux", hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.castToBigDecimal((Object) null);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ThreadGroup threadGroup0 = new ThreadGroup("file relative path not support.");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      MockThread mockThread1 = new MockThread(mockThread0, "_rL4Bu:oL(<#Y2~R6z");
      mockThread0.getContextClassLoader();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean2 = TypeUtils.isHibernateInitialized(timeUnit0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      boolean boolean3 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.isKotlin(class0);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Rectangle");
      MockThread mockThread0 = new MockThread("Ljava.lang.AutoCloseable");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Oh %}2H7z");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      threadGroup0.setDaemon(false);
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Thread[] threadArray0 = new Thread[4];
      threadArray0[0] = (Thread) mockThread1;
      MockThread mockThread2 = new MockThread(mockThread0);
      threadArray0[1] = (Thread) mockThread2;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[3] = (Thread) mockThread1;
      threadGroup0.enumerate(threadArray0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils.loadClass("Ljava.lang.AutoCloseable", classLoader0);
      TypeUtils.createCollection(class2);
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.instrumentation.InstrumentingClassLoader@2360890a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.loadClass("L");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.clearDeserializers();
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Ux", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.getClassFromMapping("clazz is null");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, true, propertyNamingStrategy0);
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.getISOCountries();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLException> class0 = SQLException.class;
      Class<SQLException> class1 = SQLException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      TreeMap<IndexOutOfBoundsException, SimpleTimeZone> treeMap1 = new TreeMap<IndexOutOfBoundsException, SimpleTimeZone>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<IndexOutOfBoundsException, SimpleTimeZone> treeMap0 = new TreeMap<IndexOutOfBoundsException, SimpleTimeZone>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Short.toUnsignedLong((short)102);
      ThreadGroup threadGroup0 = new ThreadGroup("java.util.concurrent.ConcurrentSkipListMap");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "java.util.concurrent.ConcurrentSkipListMap");
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Currency> class0 = Currency.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, ":k&:24s_F%xe}-d", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("Pv4`MbTIy|$bCGP ", class0, class0, class0, (Field) null, (-2401), (-477), 561);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(fieldInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Pv4`MbTIy|$bCGP 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("[byte");
      Class<Double> class1 = Double.TYPE;
      TypeUtils.getCollectionItemClass(class1);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Bx~qHemS'zIWB", "Bx~qHemS'zIWB", weakHashMap0, (Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLClientInfoException: Bx~qHemS'zIWB
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Constructor<SQLDataException>[] constructorArray0 = (Constructor<SQLDataException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      TypeUtils.castToShort((Object) null);
      Short.toUnsignedLong((short)23);
      TypeUtils.fnv1a_64_lower("l^4xXQA44Y,Z0Eccg");
      TypeUtils.castToString((Object) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.isNumber("L");
      Boolean boolean0 = new Boolean(true);
      Boolean.getBoolean("0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean.getBoolean("L");
      TypeUtils.castToInt(boolean0);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.fillInStackTrace();
      sQLDataException0.getSuppressed();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      sQLDataException0.getSuppressed();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.loadClass((String) null);
      TreeMap<IndexOutOfBoundsException, SimpleTimeZone> treeMap0 = new TreeMap<IndexOutOfBoundsException, SimpleTimeZone>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isNumber("M#c;d![(2*|T:uWI-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isNumber("");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      TypeUtils.isProxy(class2);
      Byte byte0 = new Byte((byte)65);
      Float float0 = new Float((-2763.6192));
      TypeUtils.isHibernateInitialized(float0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      TypeUtils.loadClass("f{=u1R8");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAutoTypeSupport(false);
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) treeMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      verifyError0.printStackTrace();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(verifyError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<?> class1 = TypeUtils.loadClass("Ux");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("isspliterator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"isspliterator\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      Boolean boolean0 = new Boolean(false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      TypeUtils.toLocale("getMetaClass");
      Float.sum(0.0F, 0.0F);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLException sQLException0 = new SQLException("845hS@vo Q`vDir!");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("yXx,.UTv", sQLException0);
      sQLTransientConnectionException0.getSuppressed();
      sQLTransientConnectionException0.addSuppressed(sQLException0);
      TypeUtils.castToString(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: 845hS@vo Q`vDir!
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.isKotlin(class0);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(hashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class1, treeMap0, false, propertyNamingStrategy0);
      hashMap0.put("illegal setter", "");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      parserConfig0.createJavaBeanDeserializer(class2, class2);
      Class<SimpleDateFormat>[] classArray0 = (Class<SimpleDateFormat>[]) Array.newInstance(Class.class, 3);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("fastjson.parser.autoTypeAccept").when(biFunction0).apply(any() , any());
      treeMap0.compute("java/lang/Object", biFunction0);
      Class<SimpleDateFormat> class3 = SimpleDateFormat.class;
      classArray0[0] = class3;
      Class<SimpleDateFormat> class4 = SimpleDateFormat.class;
      classArray0[1] = class4;
      treeMap0.put("", "fastjson.parser.autoTypeAccept");
      parserConfig0.initJavaBeanDeserializers(classArray0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy1;
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      bufferCapabilities0.clone();
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bufferCapabilities0, class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      sQLDataException0.fillInStackTrace();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Properties properties0 = new Properties();
      TypeUtils.getGenericParamType(class0);
      parserConfig0.getDeserializer(class0, (Type) null);
      parserConfig0.configFromPropety(properties0);
      sQLDataException0.getSuppressed();
      InternalError internalError0 = new InternalError();
      internalError0.fillInStackTrace();
      InternalError internalError1 = new InternalError("fastjson.parser.deny");
      internalError1.fillInStackTrace();
      internalError0.getLocalizedMessage();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.decapitalize("4L");
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      Class<ChoiceFormat> class2 = ChoiceFormat.class;
      OptionalCodec optionalCodec0 = new OptionalCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) optionalCodec0, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      MockThread mockThread0 = new MockThread("create instance error, class ");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Oh %}2H7z");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      threadGroup0.setDaemon(false);
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Thread[] threadArray0 = new Thread[9];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread0;
      Class<PageAttributes> class0 = PageAttributes.class;
      Map<String, String> map0 = null;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \";Ljava/lang/reflect/Type;Ljava/lang/Object;)V\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.loadClass("f{=u1R8");
      Class<MessageFormat> class1 = MessageFormat.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("f{=u1R8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.isNumber("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(true);
      parserConfig1.setAutoTypeSupport(false);
      parserConfig0.setAutoTypeSupport(true);
      Class<Collator> class1 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.autoTypeSupport");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "fastjson.parser.autoTypeAccept");
      Thread[] threadArray0 = new Thread[3];
      MockThread mockThread0 = new MockThread();
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      MockThread mockThread1 = new MockThread(threadGroup0, "ofnj");
      threadArray0[2] = (Thread) mockThread1;
      threadGroup1.enumerate(threadArray0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", classLoader1);
      TypeUtils.createCollection(class2);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@e8b0b0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(true);
      parserConfig1.setAutoTypeSupport(false);
      parserConfig0.setAutoTypeSupport(true);
      Class<Collator> class0 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.autoTypeSupport");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "fastjson.parser.autoTypeAccept");
      Thread[] threadArray0 = new Thread[3];
      MockThread mockThread0 = new MockThread();
      threadArray0[0] = (Thread) mockThread0;
      ParserConfig parserConfig2 = new ParserConfig(false);
      TypeUtils typeUtils0 = new TypeUtils();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isNumber("");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToBigDecimal((Object) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.decapitalize("Lorg.springfamewrk.util.LinkedMultiValueMap");
      TypeUtils.isNumber("");
      Boolean boolean0 = new Boolean(true);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getParserFeatures(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Lorg.springfamewrk.util.LinkedMultiValueMap", "");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      Properties properties0 = new Properties();
      InstantiationException instantiationException0 = new InstantiationException();
      properties0.values();
      ConcurrentHashMap<String, String> concurrentHashMap2 = new ConcurrentHashMap<String, String>();
      concurrentHashMap2.equals(properties0);
      NumberFormatException numberFormatException0 = new NumberFormatException("Lorg.springfamewrk.util.LinkedMultiValueMap");
      TypeUtils.castToDate((Object) null);
      TypeUtils.getCollectionItemType(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(21, false);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      BiFunction<Object, Object, IllegalArgumentException> biFunction0 = (BiFunction<Object, Object, IllegalArgumentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(numberFormatException0).when(biFunction0).apply(any() , any());
      jSONObject0.compute("7WO dl", biFunction0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      jSONObject0.getByteValue((String) null);
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      parserConfig0.addDeny(")_=kSFC:=Dyf^<");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      String string0 = null;
      JSONArray jSONArray0 = new JSONArray();
      TypeUtils.isNumber("1.2.46");
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Short.toUnsignedLong((short)102);
      TypeUtils.fnv1a_64_lower(" not found");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("}Y0tHT28! DG]V<&Gc", "}Y0tHT28! DG]V<&Gc", hashMap0, securityException0);
      securityException0.initCause(sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}Y0tHT28! DG]V<&Gc", securityException0);
      concurrentHashMap0.equals(sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLClientInfoException0);
      Integer integer0 = new Integer((short)102);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "org.hibernate.Hibernate");
      MockThread mockThread0 = new MockThread("create instance error, class ");
      Class<Dimension> class0 = Dimension.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Locale locale0 = Locale.ITALIAN;
      JSON.parseArray((String) null);
      TypeUtils.isNumber("isgetStrength");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeUtils.isKotlin(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLTransientException0);
      TypeUtils.castToString(mockIllegalStateException0);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("org.evosuite.runtime.mock.java.lang.MockIllegalStateException@0000000001");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'G';
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 1, parserConfig0, 989);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      TypeUtils.castToSqlTime((Object) null);
      typeArray0[1] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("has", "has", hashMap0, securityException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("TODO : ", classLoader0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.loadClass("f{=u1R8");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("boolean").when(biFunction0).apply(any() , any());
      treeMap0.compute("YLr$J{0l8{cI", biFunction0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class1 = SQLException.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      classArray0[4] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[6] = class4;
      classArray0[7] = class1;
      Class<SQLException> class5 = SQLException.class;
      classArray0[8] = class5;
      // Undeclared exception!
      try { 
        parserConfig0.initJavaBeanDeserializers(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm deserializer error, java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.unwrapOptional(class0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(61);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      BiFunction<Object, String, ChoiceFormat> biFunction0 = (BiFunction<Object, String, ChoiceFormat>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Consumer<ChoiceFormat> consumer0 = (Consumer<ChoiceFormat>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach((long) 61, (BiFunction<? super String, ? super String, ? extends ChoiceFormat>) biFunction0, (Consumer<? super ChoiceFormat>) consumer0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("create instance eror, lass ");
      TypeUtils.isNumber("");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.isKotlin(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Properties properties0 = new Properties();
      concurrentHashMap0.equals(class0);
      Class<MessageFormat> class1 = MessageFormat.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, true);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      MockDate mockDate0 = new MockDate();
      TypeUtils.castToDate(mockDate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Point");
      MockThread mockThread0 = new MockThread(threadGroup0, "Ljava.awt.Point");
      mockThread0.run();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread.reset();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      parserConfig0.setAutoTypeSupport(false);
      Class<Collator> class0 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, (PropertyNamingStrategy) null, false);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = " not found";
      Short.toUnsignedLong((short)102);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" not found", " not found");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      concurrentHashMap1.mappingCount();
      Properties properties0 = new Properties();
      InstantiationException instantiationException0 = new InstantiationException();
      concurrentHashMap1.equals(instantiationException0);
      NumberFormatException numberFormatException0 = new NumberFormatException(" not found");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(" not found");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value :  not found
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Class<Field> class1 = Field.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      TypeUtils.getClassFromMapping("p#Z47f38!1~qaj9<");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.equals("p#Z47f38!1~qaj9<");
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) concurrentHashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.isNumber(")Ljava/lang/Object;");
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) ")Ljava/lang/Object;", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 25);
      TypeUtils.castToString((Object) null);
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLTimeoutException: java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      threadGroup0.checkAccess();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      TypeUtils.toLocale("create instance error, class ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils.getCollectionItemClass(type0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.createCollection(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.loadClass("PL&ELY*2Z_#^|'@X3");
      Properties properties0 = new Properties();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@7c4cd138
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(",-Z/Wr.sW");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(",-Z/Wr.sW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 25);
      TypeUtils.castToString((Object) null);
      Class<Boolean> class1 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject(11, true);
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class2, (ParserConfig) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      Type[] typeArray0 = new Type[4];
      Class<?> class3 = TypeUtils.getClass((Type) genericArrayType0);
      typeArray0[0] = (Type) class3;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) genericArrayType0;
      Type type0 = TypeUtils.unwrapOptional(typeArray0[1]);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@6832ea3e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("}Y0tHT28! DG]V<&Gc", "}Y0tHT28! DG]V<&Gc", hashMap0, securityException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}Y0tHT28! DG]V<&Gc", securityException0);
      TypeUtils.castToBigDecimal(hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.getClassFromMapping("null");
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, type0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Ljava.util.concurrent.ConcurrentSkipListMap");
      parameterizedTypeImpl0.getTypeName();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@749d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      Locale.getISOCountries();
      TypeUtils.toLocale("Lorg.springframework.util.LinkedMultiValueMap");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("@^xjCmz.", "Lorg.springframework.util.LinkedMultiValueMap");
      identityHashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", (String) null);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToShort((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      AtomicInteger atomicInteger0 = new AtomicInteger((-2517));
      atomicInteger0.decrementAndGet();
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-2517)).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      atomicInteger0.getAndAccumulate((-866), intBinaryOperator0);
      TypeUtils.castToString(atomicInteger0);
      TypeUtils.getAnnotation((Class<?>) class1, class1);
      TypeUtils.toLocale("!-@t,m,kl#5esy:");
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      TypeUtils.toLocale(")P0)V");
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(class1).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1651);
      intArray0[1] = (-2517);
      intArray0[2] = (-2518);
      intArray0[3] = (-866);
      intArray0[4] = 33;
      intArray0[5] = (-2518);
      intArray0[6] = (-2518);
      intArray0[7] = (-2518);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.util.concurrent.atomic.AtomicInteger@0000000001", ")P0)V", intArray0);
      MockException mockException0 = new MockException("(Ljava/lang/Object;Ljava/lang/Object;)", batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      Locale.getISOCountries();
      TypeUtils.toLocale("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.getParserFeatures(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("@^xjCmz.", "Lorg.springframework.util.LinkedMultiValueMap");
      identityHashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", (String) null);
      TypeUtils.isProxy(class0);
      identityHashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", "xUo(p@T#N'-K<?@;\"f{");
      TypeUtils.isHibernateInitialized((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToString(identityHashMap0);
      TypeUtils.castToLong((Object) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 25);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TypeUtils.castToString((Object) null);
      Class<Boolean> class1 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, (String) null);
      weakHashMap0.put((String) null, "WriteEnumUsingName");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject(11, true);
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getRawClass(class1);
      Class<SecurityException> class2 = SecurityException.class;
      TypeUtils.isPath(class2);
      TypeUtils.getClass(type0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "create instance error, class ");
      mockThread0.getContextClassLoader();
      threadGroup0.setDaemon(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Short.toUnsignedLong((short)102);
      Short.toUnsignedLong((short)102);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      Properties properties0 = new Properties();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Object> class0 = Object.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      identityHashMap0.compute(" not found", biFunction0);
      identityHashMap0.put("getgetLocalizedMessage", "unicodeLocaleAttributes");
      TypeUtils.isProxy(class0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      TypeUtils.isHibernateInitialized(outOfMemoryError0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("9WCWOXkS<if?QE='c{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 9WCWOXkS<if?QE='c{
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Date> class1 = Date.class;
      Hashtable<String, String> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<String, String>((-1728622532), (-1644.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1728622532
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("a");
      TypeUtils.isHibernateInitialized(mockSimpleDateFormat0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.headMap("getEndInclusive", true);
      treeMap0.lowerEntry("a");
      treeMap0.put("a", "vendorCode");
      treeMap0.put("9WCWOXkS<if?QE='c{", "9WCWOXkS<if?QE='c{");
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      TypeUtils.isHibernateInitialized("a");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.createCollection(class1);
      Class<IllegalAccessError> class2 = IllegalAccessError.class;
      TypeUtils.isKotlin(class2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Mock for GenericArrayType, hashCode: 526928124
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.toLocale("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.getParserFeatures(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", "IgnoreErrorGetter");
      Class<Object> class1 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      TypeUtils.decapitalize((String) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.createCollection(parameterizedTypeImpl0);
      InstantiationError instantiationError0 = new InstantiationError("com.alibaba.fastjson.parser.ParserConfig");
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Jdk8DateCodec> class3 = Jdk8DateCodec.class;
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, (JavaBeanInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ZDenD|,^g`q", (String) null);
      Class<NullPointerException> class1 = NullPointerException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0, true);
      TreeSet<Dimension> treeSet0 = new TreeSet<Dimension>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(65, 65, 27, (-2405), (-1721179179), 27);
      TypeUtils.castToDate(mockGregorianCalendar0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      concurrentHashMap0.equals(noClassDefFoundError0);
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0, false);
      TreeMap<IndexOutOfBoundsException, SimpleTimeZone> treeMap0 = new TreeMap<IndexOutOfBoundsException, SimpleTimeZone>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      String string0 = "create instance error, class ";
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      MockThread mockThread0 = new MockThread(threadGroup0, "create instance error, class ");
      String string1 = "Oh %}2H7z";
      MockThread mockThread1 = new MockThread(threadGroup0, "create instance error, class ");
      mockThread1.getContextClassLoader();
      StackTraceElement stackTraceElement0 = new StackTraceElement("95R}W?up,BXiannre", "(Ljava/lang/String;)I", "scanDate", (-1146));
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"className\":\"95R}W?up,BXi\\u007Fannre\",\"fileName\":\"scanDate\",\"lineNumber\":-1146,\"methodName\":\"(Ljava/lang/String;)I\",\"nativeMethod\":false}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TypeUtils.isNumber(")Ljava/lang/Object;");
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      MockThread mockThread0 = new MockThread("create instance error, class ");
      threadGroup0.getParent();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, ")Ljava/lang/Object;");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      threadGroup0.setDaemon(false);
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept");
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("SHORT_STANDALONE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SHORT_STANDALONE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      TypeUtils.loadClass("p#Z47fI38-1~qa`j9<", (ClassLoader) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("p#Z47fI38-1~qa`j9<", "p#Z47fI38-1~qa`j9<");
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      identityHashMap0.put("ymn", (String) null);
      TypeUtils.isProxy(class1);
      Double double0 = new Double(3.0);
      TypeUtils.castToSqlDate(double0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.isNumber("C@l5KT*9|:klgt6");
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.getSerializeFeatures(class0);
      Method method0 = null;
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<java.sql.Date> class1 = java.sql.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) fileSystemHandling0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.testdata.FileSystemHandling@65a819d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava/lang/Class;");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      MockThread mockThread0 = new MockThread("create instance error, class ");
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.getGenericParamType(parameterizedTypeImpl1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("create instance error, class ");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl2 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeUtils.unwrapOptional(parameterizedTypeImpl1);
      ParameterizedTypeImpl parameterizedTypeImpl3 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, class0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      parameterizedTypeImpl3.getTypeName();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Class<?> class1 = TypeUtils.getClass((Type) parameterizedTypeImpl3);
      ParameterizedTypeImpl parameterizedTypeImpl4 = new ParameterizedTypeImpl((Type[]) null, class1, parameterizedTypeImpl2);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bufferCapabilities0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"backBufferCapabilities\":{\"accelerated\":false,\"trueVolatile\":false},\"flipContents\":{},\"frontBufferCapabilities\":{\"$ref\":\"$.backBufferCapabilities\"},\"fullScreenRequired\":false,\"multiBufferAvailable\":false,\"pageFlipping\":true}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(21, false);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      BiFunction<Object, Object, IllegalArgumentException> biFunction0 = (BiFunction<Object, Object, IllegalArgumentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(numberFormatException0).when(biFunction0).apply(any() , any());
      jSONObject0.compute("7WO dl", biFunction0);
      jSONObject0.getByteValue((String) null);
      TypeUtils.isTransient((Method) null);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "@type", fieldArray0);
      TypeUtils.decapitalize("yyyy-MM-dd HH:mm:ss");
      TypeUtils.isHibernateInitialized((Object) null);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("can not cast to char, value : ", weakHashMap0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(true);
      parserConfig1.setAutoTypeSupport(false);
      parserConfig0.setAutoTypeSupport(true);
      Class<Collator> class1 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.autoTypeSupport");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "fastjson.parser.autoTypeAccept");
      Thread[] threadArray0 = new Thread[3];
      MockThread mockThread0 = new MockThread();
      threadArray0[0] = (Thread) mockThread0;
      Class<SQLException> class2 = SQLException.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      TreeMap<IndexOutOfBoundsException, SimpleTimeZone> treeMap0 = new TreeMap<IndexOutOfBoundsException, SimpleTimeZone>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(true);
      parserConfig1.propertyNamingStrategy = parserConfig1.propertyNamingStrategy;
      parserConfig1.setAutoTypeSupport(false);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ParserConfig parserConfig2 = new ParserConfig(false);
      TypeUtils typeUtils0 = new TypeUtils();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.mock.java.lang.MockThrowable: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.max(1.0, 2515.253389141981);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : 1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      JobAttributes.DestinationType jobAttributes_DestinationType0 = JobAttributes.DestinationType.PRINTER;
      JobAttributes.DialogType jobAttributes_DialogType0 = JobAttributes.DialogType.COMMON;
      JobAttributes.MultipleDocumentHandlingType jobAttributes_MultipleDocumentHandlingType0 = JobAttributes.MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES;
      int[][] intArray0 = new int[7][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 1201;
      intArray1[2] = 1201;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 1201;
      intArray2[1] = 1201;
      intArray2[2] = (-329);
      intArray2[3] = 0;
      intArray2[4] = 1201;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = (-329);
      intArray3[1] = 110;
      intArray3[2] = (-329);
      intArray3[3] = 112;
      intArray3[4] = 1201;
      intArray3[5] = 0;
      intArray3[6] = 1201;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 0;
      intArray4[1] = 1201;
      intArray4[2] = 1201;
      intArray4[3] = 110;
      intArray4[4] = 1201;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = (-58);
      intArray5[1] = 122;
      intArray5[2] = (-329);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 110;
      intArray6[1] = (-329);
      intArray6[2] = 112;
      intArray6[3] = 112;
      intArray6[4] = (-329);
      intArray6[5] = 112;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      intArray0[6] = intArray7;
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.ONE_SIDED;
      JobAttributes jobAttributes0 = null;
      try {
        jobAttributes0 = new JobAttributes(1201, (JobAttributes.DefaultSelectionType) null, jobAttributes_DestinationType0, jobAttributes_DialogType0, "N!(L~&q,_g)kpzvCC", 0, 1201, jobAttributes_MultipleDocumentHandlingType0, intArray0, "N!(L~&q,_g)kpzvCC", jobAttributes_SidesType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid value for attribute defaultSelection
         //
         verifyException("java.awt.JobAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava/lang/Class;");
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      MockThread mockThread0 = new MockThread("create instance error, class ");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Oh %}2H7z");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      threadGroup0.setDaemon(false);
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Thread[] threadArray0 = new Thread[9];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[4] = (Thread) mockThread0;
      threadArray0[5] = (Thread) mockThread0;
      Type type1 = TypeUtils.getGenericParamType(type0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("fastjson.parser.deny");
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = (Type) class0;
      TypeUtils.isGenericParamType(type0);
      typeArray0[3] = type1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 42, json : \"java.sql.SQLFeatureNotSupportedException\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "org.hibernate.Hibernate");
      Boolean boolean0 = new Boolean(false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      TypeUtils.castToInt((Object) null);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      MockThread mockThread0 = new MockThread((Runnable) null, "L");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1, "create instance error, class ");
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.instrumentation.InstrumentingClassLoader@2360890a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short.toUnsignedLong((short)102);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      concurrentHashMap1.mappingCount();
      InstantiationException instantiationException0 = new InstantiationException();
      concurrentHashMap1.equals(instantiationException0);
      NumberFormatException numberFormatException0 = new NumberFormatException(" go found");
      TypeUtils.castToSqlDate((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(" go found");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" go found\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      TypeUtils.isPath(class0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      TypeUtils.toLocale("getMetaClass");
      TypeUtils.loadClass("CalendarType");
      TreeMap<IndexOutOfBoundsException, SimpleTimeZone> treeMap0 = new TreeMap<IndexOutOfBoundsException, SimpleTimeZone>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.toLocale("");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      threadGroup0.checkAccess();
      threadGroup0.setDaemon(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(hashtable0);
      identityHashMap0.put("|", "parse error : ");
      identityHashMap0.put("getSuppressed", "8rrf{#_1kAgl;9");
      TreeMap<java.sql.Date, Jdk8DateCodec> treeMap0 = new TreeMap<java.sql.Date, Jdk8DateCodec>();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.isHibernateInitialized(noSuchFieldException0);
      TypeUtils.castToString("E");
      Point point0 = new Point(4231, 67);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {|=parse error : , getSuppressed=8rrf{#_1kAgl;9}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass("Ux", (ClassLoader) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToDouble((Object) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToChar((Object) null);
      TypeUtils.getClassFromMapping("RO![");
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[P-", (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short.toUnsignedLong((short)117);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" not found", " not found");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.getGenericParamType((Type) null);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException(" not found");
      SecurityException securityException0 = new SecurityException();
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Short short0 = new Short((short)117);
      TypeUtils.castToByte(short0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("addSuppressed", classLoader1, false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Collator.getInstance();
      MockFile mockFile0 = new MockFile("(m,@l:");
      TypeUtils.getClassFromMapping("byte");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava/lang/Class;");
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      MockThread mockThread0 = new MockThread("create instance error, class ");
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("fastjson.parser.autoTypeSupport");
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, type0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeSupport");
      parameterizedTypeImpl1.getTypeName();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("fastjson.parser.deny", false);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, parameterizedTypeImpl1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      String string0 = "Ljava.util.conc:rrent.ConcurrentSkipListSet";
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.util.conc:rrent.ConcurrentSkipListSet");
      Thread[] threadArray0 = new Thread[0];
      threadGroup0.enumerate(threadArray0);
      ThreadGroup threadGroup1 = new ThreadGroup("Ljava.util.conc:rrent.ConcurrentSkipListSet");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, false, (PropertyNamingStrategy) null);
      TypeUtils.isHibernateInitialized(threadGroup0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("org.hibernate.Hibernate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.hibernate.Hibernate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 6);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      TypeUtils.castToString(numberDeserializer0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.parser.deserializer.NumberDeserializer@0000000001", "gethashCode");
      weakHashMap0.put((String) null, "com.alibaba.fastjson.parser.deserializer.NumberDeserializer@0000000001");
      Class<Object> class0 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject(6, false);
      Long long0 = new Long(0L);
      TypeUtils.castToShort(long0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 25);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TypeUtils.castToString((Object) null);
      Class<Boolean> class1 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, (String) null);
      weakHashMap0.put((String) null, "WriteEnumUsingName");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject(11, true);
      jSONObject0.fluentPut((String) null, (Object) null);
      jSONObject0.getShort((String) null);
      TypeUtils.castToSqlDate((Object) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(class1);
      Class<SecurityException> class2 = SecurityException.class;
      TypeUtils.isPath(class2);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Collator> class0 = Collator.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">>z e:QE*/X/?");
      TypeUtils.getClassFromMapping("2@G*9-");
      Class<NegativeArraySizeException> class1 = NegativeArraySizeException.class;
      TypeUtils.getSerializeFeatures(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o", ".0");
      TypeUtils.getClass((Type) class0);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.unwrapOptional(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat(" not found");
      parameterizedTypeImpl0.getTypeName();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, (Type) null, parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) " not found", (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("has", "has", hashMap0, securityException0);
      ThreadGroup threadGroup0 = new ThreadGroup("has");
      threadGroup0.setDaemon(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(hashMap1);
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      identityHashMap1.put("fastjson.parser.autoTypeAccept", ";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      identityHashMap1.put("has", "fastjson.parser.autoTypeSupport");
      TreeMap<java.sql.Date, Jdk8DateCodec> treeMap0 = new TreeMap<java.sql.Date, Jdk8DateCodec>();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.isHibernateInitialized("|");
      TypeUtils.castToString(treeMap0);
      Point point0 = new Point(67, 999999);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      Double double0 = new Double(0.0);
      TypeUtils.castToInt(double0);
      TypeUtils.getClassFromMapping("java.util.TreeMap@0000000150");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short)97);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("W$|5Te{i/O!", "W$|5Te{i/O!", (short)97);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.cast((Object) short0, class0, parserConfig0);
      TypeUtils.getCollectionItemClass(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ThreadGroup threadGroup0 = new ThreadGroup("create instance error, class ");
      threadGroup0.checkAccess();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      TypeUtils.toLocale("Spp8`'Y0_;VB^%vrS");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(hashtable0);
      Class<Boolean> class0 = Boolean.class;
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      TypeUtils.getClassFromMapping("Lorg.springframework.util.LinkedMultiValueMap");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig1 = ParserConfig.global;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">>z e:QE*/X/?", "fastjson.parser.deny", 0);
      ConcurrentHashMap<StackTraceElementDeserializer, MockJapaneseDate> concurrentHashMap0 = new ConcurrentHashMap<StackTraceElementDeserializer, MockJapaneseDate>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ParserConfig parserConfig2 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ">>z e:QE*/X/?", (Type) null, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
