/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:43:45 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit((SimpleCharStream) null, 47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 14, 1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(14, simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[10];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals("\u0000", token1.toString());
      assertEquals(1, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 629, 629);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals(629, token0.endLine);
      assertEquals("L", token0.toString());
      assertEquals(629, token0.beginLine);
      assertEquals(629, token0.beginColumn);
      assertEquals(629, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 'D', 'D');
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("`]J2sECXxJ[|:%,~NJ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals("`", token0.toString());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curChar = '[';
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals("\u0000", token0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 'X', 'X');
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getBeginLine());
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(88, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getEndLine());
      assertEquals("X", token0.toString());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(88, token0.beginColumn);
      assertEquals(88, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(88, token0.endLine);
      assertEquals(88, token0.beginLine);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(89, simpleCharStream0.getColumn());
      assertEquals(89, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getBeginLine());
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(88, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token1.kind);
      assertEquals(89, token1.beginColumn);
      assertEquals(89, token1.endColumn);
      assertEquals(88, token1.beginLine);
      assertEquals(88, token1.endLine);
      
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader1, (-3890), (-3890));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals((-3890), simpleCharStream0.getEndColumn());
      assertEquals((-3890), simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-3890), token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals((-3890), token0.beginLine);
      assertEquals((-3890), token0.endColumn);
      assertEquals((-3890), token0.beginColumn);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3889), simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals((-3889), simpleCharStream0.getEndColumn());
      assertEquals((-3889), simpleCharStream0.getColumn());
      assertEquals("_", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-3889), token1.endColumn);
      assertEquals((-3890), token1.beginLine);
      assertEquals((-3889), token1.beginColumn);
      assertEquals((-3890), token1.endLine);
      assertEquals(16, token1.kind);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', 'L', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', 'L', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', 'L', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[", token0.toString());
      assertArrayEquals(new char[] {'[', 'L', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new char[] {'[', 'L', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("L", token1.toString());
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', 'L', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '[', '[', '7', '\u0000', '[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '[', '[', '7', '\u0000', '[', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '[', '[', '7', '\u0000', '[', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertArrayEquals(new char[] {'\u0000', '[', '[', '7', '\u0000', '[', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new char[] {'\u0000', '[', '[', '7', '\u0000', '[', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[[", token1.toString());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '[', '[', '7', '\u0000', '[', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(lineNumberReader0);
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(charArrayReader0);
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertNotNull(lineNumberReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(lineNumberReader0, 1, 33);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(33, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(33, simpleCharStream0.getEndColumn());
      assertEquals(33, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[", token0.toString());
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(33, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(33, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(33, simpleCharStream0.getEndColumn());
      assertEquals(33, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(33, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(33, simpleCharStream0.getEndColumn());
      assertEquals(33, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager2);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(34, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(34, simpleCharStream0.getEndColumn());
      assertEquals(34, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(34, token1.endColumn);
      assertEquals(34, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.line = (int) (byte) (-1);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("\uFFFD", token0.toString());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals((-1), token0.endLine);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token1.toString());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals((-1), token1.endLine);
      assertEquals(16, token1.kind);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)4);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-3890), 21);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(21, simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals(21, simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals(21, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-3890), token0.beginLine);
      assertEquals((-3890), token0.endLine);
      assertEquals(21, token0.beginColumn);
      assertEquals(21, token0.endColumn);
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(21, simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals(21, simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals(21, simpleCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(22, simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals(22, simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals(22, simpleCharStream0.getEndColumn());
      assertEquals("_", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(22, token1.endColumn);
      assertEquals(22, token1.beginColumn);
      assertEquals((-3890), token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals((-3890), token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[14];
      charArray0[3] = '?';
      charArray0[1] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '_', (-3890));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3890), simpleCharStream0.getEndColumn());
      assertEquals(95, simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getColumn());
      assertEquals(95, simpleCharStream0.getBeginLine());
      assertEquals(95, simpleCharStream0.getEndLine());
      assertEquals((-3890), simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals((-3890), token0.endColumn);
      assertEquals(95, token0.endLine);
      assertEquals(95, token0.beginLine);
      assertEquals((-3890), token0.beginColumn);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-3890), simpleCharStream0.getEndColumn());
      assertEquals(95, simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getColumn());
      assertEquals(95, simpleCharStream0.getBeginLine());
      assertEquals(95, simpleCharStream0.getEndLine());
      assertEquals((-3890), simpleCharStream0.getBeginColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3889), simpleCharStream0.getEndColumn());
      assertEquals(95, simpleCharStream0.getLine());
      assertEquals((-3889), simpleCharStream0.getBeginColumn());
      assertEquals(95, simpleCharStream0.getBeginLine());
      assertEquals((-3889), simpleCharStream0.getColumn());
      assertEquals(95, simpleCharStream0.getEndLine());
      assertEquals("_", token1.toString());
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3889), token1.endColumn);
      assertEquals(95, token1.beginLine);
      assertEquals((-3889), token1.beginColumn);
      assertEquals(95, token1.endLine);
      assertEquals(16, token1.kind);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = '>';
      charArray0[4] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'i', 'i', '>', '_'}, charArray0);
      assertNotNull(charArrayReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'i', 'i', '>', '_'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader1, 'i', (-3890));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', 'i', 'i', '>', '_'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)4);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', 'i', 'i', '>', '_'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals((-3890), simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getEndColumn());
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getColumn());
      assertEquals("\u0000", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'i', 'i', '>', '_'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3890), token0.beginColumn);
      assertEquals(105, token0.beginLine);
      assertEquals((-3890), token0.endColumn);
      assertEquals(105, token0.endLine);
      assertEquals(16, token0.kind);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3889), simpleCharStream0.getColumn());
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals((-3889), simpleCharStream0.getEndColumn());
      assertEquals((-3889), simpleCharStream0.getBeginColumn());
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals("i", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', 'i', 'i', '>', '_'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(105, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals((-3889), token1.beginColumn);
      assertEquals(105, token1.beginLine);
      assertEquals((-3889), token1.endColumn);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals((-3888), simpleCharStream0.getColumn());
      assertEquals((-3888), simpleCharStream0.getBeginColumn());
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals((-3888), simpleCharStream0.getEndColumn());
      assertEquals("i", token2.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'\u0000', 'i', 'i', '>', '_'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(105, token2.beginLine);
      assertEquals((-3888), token2.endColumn);
      assertEquals((-3888), token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(105, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-3890), (-3890));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3890), simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getEndColumn());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals("[", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-3890), token0.endColumn);
      assertEquals((-3890), token0.beginLine);
      assertEquals((-3890), token0.beginColumn);
      assertEquals((-3890), token0.endLine);
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-3890), simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getEndColumn());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals((-3889), simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3889), simpleCharStream0.getEndColumn());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals((-3889), simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(16, token1.kind);
      assertEquals((-3890), token1.beginLine);
      assertEquals((-3890), token1.endLine);
      assertEquals((-3889), token1.endColumn);
      assertEquals((-3889), token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader1, (-3890), (-3890), 5);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3889), simpleCharStream0.getEndColumn());
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3890), simpleCharStream0.getBeginColumn());
      assertEquals((-3889), simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.kind);
      assertEquals((-3890), token0.beginLine);
      assertEquals((-3890), token0.beginColumn);
      assertEquals((-3889), token0.endColumn);
      assertEquals((-3890), token0.endLine);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3888), simpleCharStream0.getEndColumn());
      assertEquals((-3888), simpleCharStream0.getColumn());
      assertEquals((-3888), simpleCharStream0.getBeginColumn());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-3888), token1.endColumn);
      assertEquals((-3890), token1.beginLine);
      assertEquals((-3890), token1.endLine);
      assertEquals((-3888), token1.beginColumn);
      assertEquals(16, token1.kind);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3887), simpleCharStream0.getEndColumn());
      assertEquals((-3887), simpleCharStream0.getBeginColumn());
      assertEquals((-3887), simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals("\u0000", token2.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3890), token2.beginLine);
      assertEquals((-3887), token2.beginColumn);
      assertEquals((-3890), token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals((-3887), token2.endColumn);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3887), simpleCharStream0.getEndColumn());
      assertEquals((-3887), simpleCharStream0.getBeginColumn());
      assertEquals((-3887), simpleCharStream0.getColumn());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals("\u0000", token3.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3887), token3.beginColumn);
      assertEquals((-3890), token3.beginLine);
      assertEquals((-3890), token3.endLine);
      assertEquals(16, token3.kind);
      assertEquals((-3887), token3.endColumn);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertEquals((-3890), simpleCharStream0.getLine());
      assertEquals((-3886), simpleCharStream0.getColumn());
      assertEquals((-3886), simpleCharStream0.getEndColumn());
      assertEquals((-3890), simpleCharStream0.getBeginLine());
      assertEquals((-3890), simpleCharStream0.getEndLine());
      assertEquals((-3886), simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token4.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3886), token4.beginColumn);
      assertEquals((-3886), token4.endColumn);
      assertEquals(16, token4.kind);
      assertEquals((-3890), token4.beginLine);
      assertEquals((-3890), token4.endLine);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[3] = '[';
      charArray0[3] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      
      jVCParserTokenManager0.curLexState = 1;
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("A", token2.toString());
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)4, (byte)4, (byte)4}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)4, (byte)4, (byte)4}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)4, (byte)4, (byte)4}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)4, (byte)4, (byte)4}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token0.toString());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)4, (byte)4, (byte)4}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 1, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("[[", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[[", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.beginLine);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token2.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = 'L';
      charArray0[1] = '?';
      charArray0[2] = '0';
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[3] = (byte) (-126);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 8, 3881, 17);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3881, simpleCharStream0.getColumn());
      assertEquals(3881, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(3881, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals("`", token0.toString());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(8, token0.beginLine);
      assertEquals(3881, token0.beginColumn);
      assertEquals(3881, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(8, token0.endLine);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3881, simpleCharStream0.getColumn());
      assertEquals(3881, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(3881, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals("`", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3882, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(3882, simpleCharStream0.getEndColumn());
      assertEquals(3882, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(token1);
      assertEquals(8, token1.beginLine);
      assertEquals(3882, token1.beginColumn);
      assertEquals(3882, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(8, token1.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3882, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(3882, simpleCharStream0.getEndColumn());
      assertEquals(3882, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(jVCParserTokenManager3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token2 = jVCParserTokenManager3.jjFillToken();
      assertEquals("", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3882, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(3882, simpleCharStream0.getEndColumn());
      assertEquals(3882, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(token2);
      assertEquals(8, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(8, token2.beginLine);
      assertEquals(3882, token2.endColumn);
      assertEquals(3882, token2.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token3 = jVCParserTokenManager2.getNextToken();
      assertEquals("\u0000", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3883, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(3883, simpleCharStream0.getEndColumn());
      assertEquals(3883, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager3);
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager3));
      assertNotNull(token3);
      assertEquals(3883, token3.beginColumn);
      assertEquals(16, token3.kind);
      assertEquals(8, token3.beginLine);
      assertEquals(3883, token3.endColumn);
      assertEquals(8, token3.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      
      Token token4 = jVCParserTokenManager2.getNextToken();
      assertEquals("\uFFFD", token4.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(3884, simpleCharStream0.getEndColumn());
      assertEquals(3884, simpleCharStream0.getBeginColumn());
      assertEquals(3884, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager3);
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager3));
      assertNotNull(token4);
      assertEquals(3884, token4.beginColumn);
      assertEquals(16, token4.kind);
      assertEquals(8, token4.beginLine);
      assertEquals(3884, token4.endColumn);
      assertEquals(8, token4.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)1}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)1}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)1}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token0.toString());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)1}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[3] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertNotNull(jVCParserTokenManager2);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager2.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager1));
      assertNotNull(jVCParserTokenManager3);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager3);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertArrayEquals(new char[] {'[', '[', '[', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager3));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '\"';
      charArray0[2] = ';';
      charArray0[5] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', '\"', ';', '\u0000', '\u0000', '!'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {']', '\"', ';', '\u0000', '\u0000', '!'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {']', '\"', ';', '\u0000', '\u0000', '!'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("]", token0.toString());
      assertArrayEquals(new char[] {']', '\"', ';', '\u0000', '\u0000', '!'}, charArray0);
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new char[] {']', '\"', ';', '\u0000', '\u0000', '!'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager2 = null;
      try {
        jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, (-1725));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1725. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(lineNumberReader0);
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertNotNull(lineNumberReader1);
      
      LineNumberReader lineNumberReader2 = new LineNumberReader(lineNumberReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertEquals(0, lineNumberReader2.getLineNumber());
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertFalse(lineNumberReader2.equals((Object)lineNumberReader0));
      assertFalse(lineNumberReader2.equals((Object)lineNumberReader1));
      assertNotNull(lineNumberReader2);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(lineNumberReader0, 1, 93);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals("]", token0.toString());
      assertNotSame(lineNumberReader0, lineNumberReader2);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(93, token0.endColumn);
      assertEquals(93, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(93, simpleCharStream0.getColumn());
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(94, simpleCharStream0.getColumn());
      assertEquals(94, simpleCharStream0.getEndColumn());
      assertEquals(94, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token1.toString());
      assertNotSame(lineNumberReader0, lineNumberReader2);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(94, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(94, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      int int0 = 21;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 8, 4);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals("[", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(8, token0.endLine);
      assertEquals(8, token0.beginLine);
      assertEquals(4, token0.beginColumn);
      
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
