/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:06:10 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("", "wrong proto type map ", "");
      String string0 = doubleKeyMap0.remove("", "wrong proto type map ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(3567);
      doubleKeyMap0.put((Integer) null, (Object) integer0, object0);
      Object object1 = doubleKeyMap0.put((Integer) null, (Object) integer0, (Object) null);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Integer, Integer>> hashMap0 = new HashMap<Integer, Map<Integer, Integer>>();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>(hashMap0, class0);
      Integer integer0 = new Integer((-4475));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, hashMap1);
      Map<Integer, Integer> map0 = doubleKeyMap0.get(integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0);
      Integer integer0 = new Integer((-1543));
      doubleKeyMap0.put("", integer0, "");
      Map<Integer, String> map0 = doubleKeyMap0.get("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Integer, Object, Map<HashMap<String, String>, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Map<HashMap<String, String>, Integer>>();
      Map<String, String> map0 = doubleKeyMap1.newMap();
      String string0 = doubleKeyMap0.remove((Object) map0, (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      String string0 = doubleKeyMap0.remove((Integer) null, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<String, String>, Integer>, Integer, HashMap<Object, Map<HashMap<String, String>, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, String>, Integer>, Integer, HashMap<Object, Map<HashMap<String, String>, Integer>>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer(583);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      HashMap<Object, Map<Object, Map<HashMap<String, String>, Integer>>> hashMap0 = new HashMap<Object, Map<Object, Map<HashMap<String, String>, Integer>>>();
      DoubleKeyMap<Object, Object, Map<HashMap<String, String>, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<HashMap<String, String>, Integer>>(hashMap0);
      Map<Object, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      Object object0 = new Object();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = doubleKeyMap0.put(object0, object0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null);
      String string0 = doubleKeyMap0.get((Object) null, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Map<HashMap<String, String>, Integer>>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Map<HashMap<String, String>, Integer>>, Object>();
      DoubleKeyMap<Object, HashMap<Object, Integer>, HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Integer>, HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>>();
      Map<HashMap<Object, Integer>, HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      HashMap<Object, Map<HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>, Object>>();
      DoubleKeyMap<Object, HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>, Object>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) hashMap0, (HashMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>>) null, (Object) doubleKeyMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<HashMap<String, String>, Integer>, Map<String, String>> hashMap0 = new HashMap<Map<HashMap<String, String>, Integer>, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<String, String>, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, String>, Integer>, String, String>(hashMap0, class0);
      HashMap<HashMap<String, String>, Integer> hashMap1 = new HashMap<HashMap<String, String>, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<HashMap<String, String>, Integer>) hashMap1, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, Object>, HashMap<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, HashMap<Object, Integer>>((Map<Object, Map<HashMap<String, Object>, HashMap<Object, Integer>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<String, String>, Integer>, Integer, HashMap<Object, Map<HashMap<String, String>, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, String>, Integer>, Integer, HashMap<Object, Map<HashMap<String, String>, Integer>>>();
      Map<Integer, HashMap<Object, Map<HashMap<String, String>, Integer>>> map0 = doubleKeyMap0.remove((Map<HashMap<String, String>, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.get((HashMap<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put(":O?0", ":O?0", ":O?0");
      String string0 = doubleKeyMap0.remove(":O?0", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.get(object0, (Object) ".fe(S/.1i|sDy!{X*B");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Integer integer0 = new Integer(2741);
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.get((Object) integer0, (Object) doubleKeyMap0);
      assertNull(string0);
  }
}
