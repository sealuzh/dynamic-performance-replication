/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:34:56 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.ProtectedProperties;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ICSSearchAlgorithm.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals("8034", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains((-1));
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", arrayList0, 0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(0);
      assertTrue(boolean0);
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      Attribute attribute0 = new Attribute((String) null, 0);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      Instances instances0 = new Instances("@end", arrayList0, 2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("@end", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      Attribute attribute0 = new Attribute((String) null, 2630);
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertEquals(2630, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances((String) null, arrayList0, 1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertEquals(2630, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1);
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertEquals(2630, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      
      iCSSearchAlgorithm0.m_instances = instances0;
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals((-1), iCSSearchAlgorithm0.m_instances.classIndex());
      assertEquals(0, iCSSearchAlgorithm0.m_instances.size());
      assertEquals(0.0, iCSSearchAlgorithm0.m_instances.sumOfWeights(), 0.01);
      assertFalse(iCSSearchAlgorithm0.m_instances.checkForStringAttributes());
      assertNull(iCSSearchAlgorithm0.m_instances.relationName());
      assertEquals(0, iCSSearchAlgorithm0.m_instances.numInstances());
      assertEquals(2, iCSSearchAlgorithm0.m_instances.numAttributes());
      
      String[] stringArray0 = iCSSearchAlgorithm0.getOptions();
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(stringArray0);
      
      boolean[][] booleanArray0 = new boolean[0][9];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(22, 76, 1, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      iCSSearchAlgorithm0.setMaxCardinality((-942));
      assertEquals((-942), iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      
      Attribute attribute0 = new Attribute("\tFull class name of filter to use, followed\n\tby filter options.\n\teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"", (-942));
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals((-942), attribute0.index());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals((-942), attribute0.index());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      Instances instances0 = new Instances("date", arrayList0, 2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("date", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1);
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertNotNull(iCSSearchAlgorithm0);
      
      iCSSearchAlgorithm0.setMaxCardinality(1176);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("14th In<vrn,tional JointCConference on Articial I2telligence", arrayList0, 1176);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("14th In<vrn,tional JointCConference on Articial I2telligence", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("14th In<vrn,tional JointCConference on Articial I2telligence", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertNotNull(protectedProperties0);
      
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertFalse(attribute0.isString());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isDate());
      assertEquals((-1), attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isNumeric());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertFalse(attribute0.isString());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isDate());
      assertEquals((-1), attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isNumeric());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      boolean[][] booleanArray0 = new boolean[20][8];
      boolean boolean1 = arrayList1.add("real");
      assertTrue(boolean1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(boolean1 == boolean0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.existsSepSet(1, 34, 4, booleanArray0);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertNull(iCSSearchAlgorithm_SeparationSet0);
      
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertNotNull(iCSSearchAlgorithm0);
      
      iCSSearchAlgorithm0.setMaxCardinality((-942));
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals((-942), iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      
      Attribute attribute0 = new Attribute("\tFull class name of filter to use, followed\n\tby filter options.\n\teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"", (-942));
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-942), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(1, attribute0.ordering());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList arrayList1 = (ArrayList)arrayList0.clone();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-942), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(1, attribute0.ordering());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      Instances instances0 = new Instances("date", arrayList0, 2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("date", instances0.relationName());
      assertNotNull(instances0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1);
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(1, attribute0.ordering());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2);
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(1, attribute0.ordering());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      BayesNet bayesNet0 = new BayesNet();
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertNotNull(bayesNet0);
      
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      iCSSearchAlgorithm0.setMaxCardinality(1176);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("14th In<vrn,tional JointCConference on Articial I2telligence", arrayList0, 1176);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numAttributes());
      assertEquals("14th In<vrn,tional JointCConference on Articial I2telligence", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numAttributes());
      assertEquals("14th In<vrn,tional JointCConference on Articial I2telligence", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertNotNull(protectedProperties0);
      
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNominal());
      assertEquals(1, attribute0.type());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNominal());
      assertEquals(1, attribute0.type());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean[][] booleanArray0 = new boolean[4][7];
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[4] = true;
      booleanArray1[8] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[2] = true;
      booleanArray1[3] = true;
      booleanArray2[4] = true;
      booleanArray2[6] = true;
      booleanArray0[2] = booleanArray2;
      booleanArray0[3] = booleanArray0[1];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.existsSepSet(2, 1, 3, booleanArray0);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertNull(iCSSearchAlgorithm_SeparationSet0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      iCSSearchAlgorithm0.setMaxCardinality((-942));
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals((-942), iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      
      Attribute attribute0 = new Attribute("\tFull class name of filter to use, followed\n\tby filter options.\n\teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"");
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList arrayList1 = (ArrayList)arrayList0.clone();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      
      Instances instances0 = new Instances("date", arrayList0, 2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("date", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertTrue(boolean3);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertNotNull(iCSSearchAlgorithm0);
      
      iCSSearchAlgorithm0.setMaxCardinality(1176);
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("14th In<vrn,tional JointCConference on Articial I2telligence", arrayList0, 1176);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("14th In<vrn,tional JointCConference on Articial I2telligence", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("14th In<vrn,tional JointCConference on Articial I2telligence", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertNotNull(protectedProperties0);
      
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isRegular());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isRegular());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean1 = properties0.remove((Object) instances0, (Object) "14th In<vrn,tional JointCConference on Articial I2telligence");
      assertFalse(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("14th In<vrn,tional JointCConference on Articial I2telligence", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean[][] booleanArray0 = new boolean[4][7];
      boolean[] booleanArray1 = new boolean[12];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      Attribute attribute1 = new Attribute("date");
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isAveragable());
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.isNumeric());
      assertEquals((-1), attribute1.index());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertTrue(attribute1.hasZeropoint());
      assertFalse(attribute1.isRelationValued());
      assertEquals(1, attribute1.ordering());
      assertFalse(attribute1.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isDate());
      assertEquals(0, attribute1.numValues());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute1);
      
      boolean boolean2 = arrayList0.add(attribute1);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isAveragable());
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.isNumeric());
      assertEquals((-1), attribute1.index());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertTrue(attribute1.hasZeropoint());
      assertFalse(attribute1.isRelationValued());
      assertEquals(1, attribute1.ordering());
      assertFalse(attribute1.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isDate());
      assertEquals(0, attribute1.numValues());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      booleanArray1[4] = true;
      booleanArray1[8] = true;
      booleanArray0[0] = booleanArray1;
      booleanArray1[8] = true;
      booleanArray0[1] = booleanArray1;
      booleanArray0[2] = booleanArray1;
      booleanArray0[3] = booleanArray1;
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet1 = iCSSearchAlgorithm0.existsSepSet(2, 1, 3, booleanArray0);
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertNull(iCSSearchAlgorithm_SeparationSet1);
      
      String string0 = iCSSearchAlgorithm0.getRevision();
      assertEquals("8034", string0);
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(1176, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertNotNull(string0);
  }
}
