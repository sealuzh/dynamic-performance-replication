/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:27:46 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.9691815396072343E-6);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.9691822E-6F, float0, 0.01F);
      assertEquals(1.9691822970511495E-6, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2880, 2880);
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      double double0 = rationalNumber1.doubleValue();
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((-2.147483647E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836468050056E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals("-2147483647", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.6421275833854452E-8);
      String string0 = rationalNumber0.toString();
      assertEquals("1/37848286 (0)", string0);
      assertEquals(2.6421275721706393E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.4982650927540817E-4);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("3/12008 (0)", string1);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-2.498334443704197E-4), rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1516.5);
      assertEquals(3033, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(0L, 3033);
      assertEquals(1, rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1455), (-1455));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2514L));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2514.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.14748364898532E9));
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1976.0075440911437);
      rationalNumber0.intValue();
      String string0 = rationalNumber0.toString();
      assertEquals("199577/101 (1,976.01)", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1976, int0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1976.009900990099, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1L), (-2147483667L));
      String string0 = rationalNumber0.toString();
      assertEquals("1/-2147483629 (-0)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483667L), (-2147483667L));
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      
      RationalNumber rationalNumber2 = new RationalNumber(1, (-1));
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-24L), (-24L));
      rationalNumber0.toDisplayString();
      rationalNumber0.doubleValue();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483671L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483671, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483648L, 2147483648L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertEquals("-1", string0);
      
      RationalNumber rationalNumber2 = new RationalNumber(1, (-1));
      rationalNumber2.negate();
      String string1 = rationalNumber1.toDisplayString();
      assertEquals("-1", string1);
      
      String string2 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string2);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1, 2147483648L);
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      assertEquals(4.6566128730773926E-10, rationalNumber4.doubleValue(), 0.01);
  }
}
