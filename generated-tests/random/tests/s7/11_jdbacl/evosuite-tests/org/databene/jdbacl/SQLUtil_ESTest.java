/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:02:50 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.db.Database;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.SessionRemote;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowInputBinary;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.getUniqueConstraints(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "6T>K/]N2U";
      stringArray0[2] = "6T>K/]N2U";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "6T>K/]N2U", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("6T>K/]N2U");
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^k>}Bv 4$biOg<c\"Q");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.isDML("6T>K/]N2U");
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-133);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "null.null";
      stringArray0[2] = null;
      dBSchema0.equals(dBCatalog0);
      stringArray0[3] = null;
      stringArray0[4] = "null.null";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "null.null");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.leftJoin(stringArray0[0], stringArray0, stringArray0[2], "]_lK1re_$}4", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("?T37nDkck");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "LAST_MODIFICATION BIGINT";
      stringArray1[2] = "";
      stringArray1[3] = "LAST_MODIFICATION BIGINT";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("LAST_MODIFICATION BIGINT", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DataStore dataStore0 = new DataStore("");
      VirtualFile virtualFile0 = new VirtualFile("", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertSame(nameSpec1, nameSpec0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("{vQ>Wb|*%r9G");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{vQ>Wb|*%r9G";
      stringArray0[1] = "{vQ>Wb|*%r9G";
      stringArray0[2] = "0ZA,!KXXA";
      stringArray0[3] = "{vQ>Wb|*%r9G";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "({vQ>Wb|*%r9G, {vQ>Wb|*%r9G, 0ZA,!KXXA, {vQ>Wb|*%r9G)", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Illegal column type format: ", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("SELECT * FROM ", 45);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Integer integer0 = RawTransaction.ABORT;
      dBDataType0.isAlpha();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sele", dBTable0, dBDataType0, integer0, integer1);
      SQLUtil.substituteMarkers("sele", "{vQ>Wb|*%r9G", defaultDBColumn0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.isQuery("truncate");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "sele");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      SQLUtil.addRequiredCondition("hsqldb.cache_size_scale", stringBuilder1);
      assertEquals("selefalse and hsqldb.cache_size_scale", stringBuilder1.toString());
      assertEquals("selefalse and hsqldb.cache_size_scale", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bSUYU{";
      stringArray0[1] = "constraint";
      stringArray0[2] = ":__%Ocs";
      stringArray0[3] = "callselectchecking if rs is updateable";
      stringArray0[4] = "CURRENT_ROLE";
      stringArray0[5] = "x";
      stringArray0[6] = "org.h2.expression.Expression";
      stringArray0[7] = "For empty collections, a componentType needs to be specified.";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9X[82");
      defaultDBTable0.getCheckConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("constraint", defaultDBTable0, 0, "For empty collections, a componentType needs to be specified.");
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isDDL("For empty collections, a componentType needs to be specified.");
      Random.setNextRandom(1077);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile(" as ", "org.h2.expression.Expression");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      mockFileWriter0.append('+');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.isProcedureCall("bSUYU{");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DBCatalog dBCatalog0 = new DBCatalog("java.lang.Object@879c112");
      DBSchema dBSchema0 = new DBSchema("java.lang.Object@879c112", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.lang.Object@879c112", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-345706640), "java.lang.Object@879c112");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBSchema0.getSequences(true);
      int int0 = 228;
      defaultDBTable0.getIndex("c],FaHJ\"n$");
      Integer integer1 = new Integer(228);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("java.lang.Object@879c112", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("JAVA.LANG.OBJECT@879C112(2,228)");
      String string0 = "alter index";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "JAVA.LANG.OBJECT@879C112(2,228)");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-345706640), 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -345706640
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCatalog dBCatalog0 = new DBCatalog("C'");
      DBSchema dBSchema0 = new DBSchema("DELETE FROM INFORMATION_SCHEMA.LOB_DATA D WHERE BLOCK IN(SELECT M.BLOCK FROM INFORMATION_SCHEMA.LOB_MAP M WHERE LOB = ?) AND NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.LOB_MAP M WHERE M.BLOCK = D.BLOCK AND M.LOB <> ?)", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DELETE FROM INFORMATION_SCHEMA.LOB_DATA D WHERE BLOCK IN(SELECT M.BLOCK FROM INFORMATION_SCHEMA.LOB_MAP M WHERE LOB = ?) AND NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.LOB_MAP M WHERE M.BLOCK = D.BLOCK AND M.LOB <> ?)", dBSchema0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("DELETE FROM INFORMATION_SCHEMA.LOB_DATA D WHERE BLOCK IN(SELECT M.BLOCK FROM INFORMATION_SCHEMA.LOB_MAP M WHERE LOB = ?) AND NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.LOB_MAP M WHERE M.BLOCK = D.BLOCK AND M.LOB <> ?)", defaultDBTable0, 0, "DELETE FROM INFORMATION_SCHEMA.LOB_DATA D WHERE BLOCK IN(SELECT M.BLOCK FROM INFORMATION_SCHEMA.LOB_MAP M WHERE LOB = ?) AND NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.LOB_MAP M WHERE M.BLOCK = D.BLOCK AND M.LOB <> ?)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SELECT M.BLOCK FROM INFORMATION_SCHEMA.LOB_MAP M WHERE LOB = ?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 122;
      DBDataType dBDataType0 = DBDataType.getInstance(122, "!4@b[Fd6HMY10,");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!4@b[Fd6HMY10,", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("!4@b[Fd6HMY10,");
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = "rtt'}%_ia_]<";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!4@b[Fd6HMY10, !4@B[FD6HMY10,(2) DEFAULT !4@b[Fd6HMY10, NULL";
      stringArray0[1] = "";
      stringArray0[2] = "rtt'}%_ia_]<";
      stringArray0[3] = "rtt'}%_ia_]<";
      stringArray0[4] = "!4@b[Fd6HMY10,";
      SQLUtil.leftJoin("rtt'}%_ia_]<", stringArray0, "updatertt'}%_ia_]<we(", "rtt'}%_ia_]<", stringArray0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      try { 
        Integer.parseUnsignedInt("truncatertt'}%_ia_]<we(", 122);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 122 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.mutatesDataOrStructure("select into");
      DBSchema dBSchema0 = new DBSchema("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into", dBSchema0);
      int int0 = (-728);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ":5]&K`R&_:~*r=";
      SQLUtil.normalize(":5]&K`R&_:~*r=", false);
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("exec");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(": 5 ] & K ` R & _ : ~ * r =", dBSchema0);
      DBDataType dBDataType0 = null;
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = Integer.getInteger("s9tX7xih7X`(c", integer0);
      Integer integer2 = new Integer(4001);
      Integer.remainderUnsigned(382, 4001);
      Integer.toUnsignedLong(4001);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y?H5,Ic}{kU", defaultDBTable0, (DBDataType) null, integer1, integer2);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      SQLUtil.isProcedureCall("into");
      String string1 = "$9e+h5g?8!";
      try { 
        Integer.valueOf("$9e+h5g?8!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$9e+h5g?8!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(", ");
      jMXPrincipal0.equals((Object) null);
      jMXPrincipal0.toString();
      jMXPrincipal0.equals(", ");
      SQLUtil.renderValue(jMXPrincipal0);
      SQLUtil.normalize(", ", true);
      SQLUtil.normalize("*/", true);
      SQLUtil.isDDL("\"|{d?H^;Ym8 Me");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("rename", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iogdv(", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("JMXPrincipal:  , ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "delete:";
      stringArray0[2] = "t~d>|V]^J(l8l%wT";
      stringArray0[3] = "setTimestamp(String,Timestamp,Calendar)";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("CLOB = 'CLOB' AND delete: = 'delete:' AND t~d>|V]^J(l8l%wT = 't~d>|V]^J(l8l%wT' AND setTimestamp(String,Timestamp,Calendar) = 'setTimestamp(String,Timestamp,Calendar)'", string0);
      
      SQLUtil.removeComments("t~d>|V]^J(l8l%wT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete:");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint1);
      assertNotNull(string1);
      assertEquals("unique constraint constraint", string1);
      
      System.setCurrentTimeMillis(4L);
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(CLOB, delete:, t~d>|V]^J(l8l%wT, setTimestamp(String,Timestamp,Calendar))", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";1=ZgK0V\"'UKIe<4G", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";1=ZgK0V\"'UKIe<4G";
      stringArray0[1] = ";1=ZgK0V\"'UKIe<4G";
      stringArray0[2] = null;
      stringArray0[3] = "#l(: y,Yk";
      stringArray0[4] = "Unknown constraint type: ";
      stringArray0[5] = "#l(: y,Yk";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "#l(: y,Yk", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte) (-16);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertSame(nameSpec1, nameSpec0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+8=f].}");
      boolean boolean0 = SQLUtil.isProcedureCall("+8=f].}");
      assertFalse(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("+8=f].}", false, "update", "update");
      dBCheckConstraint0.equals("update");
      dBCheckConstraint0.setName("+8=f].}");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("+8=f].}");
      dBCheckConstraint0.equals(jMXPrincipal0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT +8=f].} CHECK update", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" rU*d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " rU*d";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "S";
      stringArray0[2] = " rU*d";
      stringArray0[3] = " rU*d";
      stringArray0[4] = "sS7X*bGY3";
      stringArray0[5] = " rU*d";
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "sS7X*bGY3", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("xRZ0N&", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[3];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = "S";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.normalize("aZM\"ZhupmMX", true);
      assertEquals("aZM \"ZhupmMX\"", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.mutatesStructure(",o@<g/w09Xo%sKV)^");
      System.setCurrentTimeMillis(0L);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",o@<g/w09Xo%sKV)^");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = ",o@<g/w09Xo%sKV)^";
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.normalize(",o@<g/w09Xo%sKV)^", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create unique indexexecute");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append("SQLXML");
      StringBuilder stringBuilder3 = stringBuilder2.append('1');
      SQLUtil.addRequiredCondition("create unique indexexecute", stringBuilder3);
      assertEquals("create unique indexexecute and nullSQLXML1 and create unique indexexecute", stringBuilder2.toString());
      assertEquals("create unique indexexecute and nullSQLXML1 and create unique indexexecute", stringBuilder3.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create materialized view";
      stringArray0[1] = "create materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create materialized view", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.typeAndName(dBTable0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inne", dBTable0, (DBDataType) null, integer0);
      int int0 = (-2226);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2226));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Random.setNextRandom((-514593460));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-18);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select into");
      SQLUtil.renderValue((Object) null);
      Object object0 = new Object();
      SQLUtil.substituteMarkers("ZP", "m!m", object0);
      SQLUtil.mutatesStructure("callcall");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized viewinsertc`'!zkeljnykd", false, "null", "cl");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("callcall", stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      assertEquals("false and callcallCONSTRAINT \"create materialized viewinsertc`'!zkeljnykd\" ", stringBuilder2.toString());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "select into";
      stringArray0[1] = "ZP";
      stringArray0[2] = "cl";
      stringArray0[3] = "m!m";
      stringArray0[4] = "cl";
      stringArray0[5] = "cl";
      stringArray0[6] = "LOB";
      String string0 = SQLUtil.join("create materialized viewinsertc`'!zkeljnykd", "ZP", stringArray0, "DXxj", "*/", stringArray0);
      assertEquals("create materialized viewinsertc`'!zkeljnykd join DXxj as */ on ZP.select into = */.select into and ZP.ZP = */.ZP and ZP.cl = */.cl and ZP.m!m = */.m!m and ZP.cl = */.cl and ZP.cl = */.cl and ZP.LOB = */.LOB", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "\")", "\")");
      assertEquals("", string0);
      
      String string1 = SQLUtil.removeComments(" /*--hide--*/");
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("60");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execute");
      SQLUtil.isQuery("|Qhl-<dk%*sD.l$rz#");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "|Qhl-<dk%*sD.l$rz#";
      stringArray0[6] = "|Qhl-<dk%*sD.l$rz#";
      stringArray0[7] = ",";
      stringArray0[8] = "|Qhl-<dk%*sD.l$rz#";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "zH";
      stringArray1[1] = ",";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("create tableand", stringArray0, "|Qhl-<dk%*sD.l$rz#", "EV?,U6KYHhI9LmO", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("Cph\"duH}");
      boolean boolean0 = true;
      SQLUtil.normalize("Cph\"duH}", true);
      DBSchema dBSchema0 = new DBSchema("=eL=u !_cI:q&cl");
      dBSchema0.getTable("");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Cph \"duH}\"", true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "alter materialized view";
      StringBuilder stringBuilder0 = new StringBuilder(2);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter index()", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((float) 2);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-2013666157), 'o');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "/*";
      SQLUtil.normalize("/*", false);
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/*");
      int int0 = 5;
      String string1 = "b";
      // Undeclared exception!
      try { 
        stringBuilder0.replace((-2037), 5, "b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2037
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "create table";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create table");
      String string1 = "%x=+`-g.-q";
      SQLUtil.normalize("%x=+`-g.-q", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "%x=+`-g.-q");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3935, (double) 3935);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3935
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", defaultDBTable0, 1410, "select");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isDDL("(b$evghk'9k");
      SQLUtil.isDDL("SELECT");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("select");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(b$evghk'9k";
      stringArray0[1] = "(b$evghk'9k";
      stringArray0[2] = "(b$evghk'9k";
      stringArray0[3] = "";
      stringArray0[4] = "select SELECT NULL";
      stringArray0[5] = "(b$evghk'9k";
      stringArray0[6] = "SELECT";
      stringArray0[7] = "select SELECT NULL";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      defaultDBColumn0.addUkConstraint((DBUniqueConstraint) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$ZD");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      DBDataType dBDataType0 = DBDataType.getInstance(4, "i`1')&h<om");
      DBDataType.getInstance(4, "7|Jo]]D3^@F1");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".R5fr\"g]08=n*=~$c=", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer(4);
      Integer.sum(1793, 4);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Random.setNextRandom(4);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".R5fr\"g]08=n*=~$c=";
      stringArray0[1] = "$ZD";
      stringArray0[2] = "i`1')&h<om";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "alter session";
      SQLUtil.mutatesDataOrStructure("alter session");
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "drop materialized viewwgg``@oephqq";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("drop materialized viewwgg``@oephqq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'drop materialized viewwgg``@oephqq' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      stringArray0[2] = "create table ";
      stringArray0[3] = "create table ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create materialized viewi{pf");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "create materialized viewi{pf";
      stringArray1[1] = "create materialized viewi{pf";
      stringArray1[2] = "create table ";
      stringArray1[3] = "create materialized viewi{pf";
      stringArray1[4] = "create table ";
      stringArray1[5] = "create materialized viewi{pf";
      stringArray1[6] = "create table ";
      stringArray1[7] = "create materialized viewi{pf";
      stringArray1[8] = "create table ";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      stringArray0[4] = "create table ";
      stringArray0[5] = "create table ";
      stringArray0[6] = "create table ";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("create table ", false, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames((String[]) null);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create table \" PRIMARY KEY ()", string0);
      
      String string1 = SQLUtil.renderValue(dBNonUniqueIndex0);
      assertEquals("create table  (create table , create table , create table , create table , create table , create table , create table )", string1);
      
      String string2 = SQLUtil.renderColumnListWithTableName("Ve>VUG!vf_['3", stringArray0);
      assertEquals("Ve>VUG!vf_['3.create table , Ve>VUG!vf_['3.create table , Ve>VUG!vf_['3.create table , Ve>VUG!vf_['3.create table , Ve>VUG!vf_['3.create table , Ve>VUG!vf_['3.create table , Ve>VUG!vf_['3.create table ", string2);
      
      String string3 = SQLUtil.renderValue("create table ");
      assertEquals("'create table '", string3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "create unique index";
      StringBuilder stringBuilder0 = new StringBuilder(2109);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create unique index", stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "create unique index");
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-146215657), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -146215657
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(");$n+.MU^?ah");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "select into";
      stringArray0[1] = ");$n+.MU^?ah";
      stringArray0[2] = ");$n+.MU^?ah";
      stringArray0[3] = ");$n+.MU^?ah";
      stringArray0[4] = "OFFSET";
      stringArray0[5] = "+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(");$n+.MU^?ah", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (select into, );$n+.MU^?ah, );$n+.MU^?ah, );$n+.MU^?ah, OFFSET, +) REFERENCES );$n+.MU^?ah(select into, );$n+.MU^?ah, );$n+.MU^?ah, );$n+.MU^?ah, OFFSET, +)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("vACK6gAw^/sgb*t7|");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Y-<]z}");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("u,", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "vACK6gAw^/sgb*t7|", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "call");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "call");
      Random.setNextRandom((-2));
      SQLUtil.normalize(">si@RnG/f", false);
      SQLUtil.isProcedureCall("call");
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder(">si@RnG/f");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = '~';
      charArray0[2] = 'A';
      charArray0[3] = 'H';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X?6";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("X?6", true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT X?6 FOREIGN KEY (X?6) REFERENCES (X?6)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "insertc`'!zkeljnykd";
      SQLUtil.mutatesDataOrStructure("insertc`'!zkeljnykd");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = null;
      Character character0 = Character.valueOf('C');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("insertc`'!zkeljnykd", (String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "+qmkKfi(G)'T";
      SQLUtil.normalize("+qmkKfi(G)'T", false);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintDescriptors((TableDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("1{(hkS");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog 1{(hkS", string0);
      assertNotNull(string0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("1{(hkS", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1{(hkS";
      stringArray0[1] = "1{(hkS";
      stringArray0[2] = "P8C{+a+iJ+Y";
      stringArray0[3] = "T";
      stringArray0[4] = "catalog 1{(hkS";
      stringArray0[5] = "{nWRl";
      stringArray0[6] = "catalog 1{(hkS";
      stringArray0[7] = "1{(hkS";
      stringArray0[8] = "1{(hkS";
      String string2 = SQLUtil.join("{nWRl", "P8C{+a+iJ+Y", stringArray0, "1{(hkS", "1{(hkS", stringArray0);
      assertEquals("{nWRl join 1{(hkS as 1{(hkS on P8C{+a+iJ+Y.1{(hkS = 1{(hkS.1{(hkS and P8C{+a+iJ+Y.1{(hkS = 1{(hkS.1{(hkS and P8C{+a+iJ+Y.P8C{+a+iJ+Y = 1{(hkS.P8C{+a+iJ+Y and P8C{+a+iJ+Y.T = 1{(hkS.T and P8C{+a+iJ+Y.catalog 1{(hkS = 1{(hkS.catalog 1{(hkS and P8C{+a+iJ+Y.{nWRl = 1{(hkS.{nWRl and P8C{+a+iJ+Y.catalog 1{(hkS = 1{(hkS.catalog 1{(hkS and P8C{+a+iJ+Y.1{(hkS = 1{(hkS.1{(hkS and P8C{+a+iJ+Y.1{(hkS = 1{(hkS.1{(hkS", string2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("b");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2867, "Q/)pxzD4'6{M");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D?uh4VxC3KLA", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary0);
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLobDb valueLobDb0 = ValueLobDb.createTempBlob(rowInputBinary0, 873L, sessionRemote0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "- 0";
      stringArray0[2] = "z^";
      stringArray0[3] = "- 0";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "- 0";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "z^", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pg8d;h";
      stringArray0[1] = "'m";
      stringArray0[2] = "pg8d;h";
      stringArray0[3] = "pg8d;h";
      stringArray0[4] = "pg8d;h";
      SQLUtil.join("pg8d;h", "pg8d;h", stringArray0, "pg8d;h", "pg8d;h", stringArray0);
      SQLUtil.normalize("pg8d;h", true);
      SQLUtil.isQuery("'m");
      SQLUtil.typeAndName((DBObject) null);
      String string0 = SQLUtil.join("pg8d;h", "drop table,", stringArray0, "pg8d;h", "pg8d;h join pg8d;h as pg8d;h on pg8d;h.pg8d;h = pg8d;h.pg8d;h and pg8d;h.'m = pg8d;h.'m and pg8d;h.pg8d;h = pg8d;h.pg8d;h and pg8d;h.pg8d;h = pg8d;h.pg8d;h and pg8d;h.pg8d;h = pg8d;h.pg8d;h", stringArray0);
      SQLUtil.parseColumnTypeAndSize("pg8d;h");
      SQLUtil.removeComments(string0);
      String string1 = "x5nJgR(AwqiQ";
      SQLUtil.removeComments("x5nJgR(AwqiQ");
      SQLUtil.renderColumnNames(stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("(pg8d;h, 'm, pg8d;h, pg8d;h, pg8d;h)");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "pg8d;h", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("pg8d;h join pg8d;h as pg8d;h on pg8d;h.pg8d;h = pg8d;h.pg8d;h and pg8d;h.'m = pg8d;h.'m and pg8d;h.pg8d;h = pg8d;h.pg8d;h and pg8d;h.pg8d;h = pg8d;h.pg8d;h and pg8d;h.pg8d;h = pg8d;h.pg8d;h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("org.h2.command.ddl.SchemaCommand");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "selectupdate";
      SQLUtil.join((String) null, "BLOBSETBYTES", stringArray0, "org.apache.derby.impl.sq", "selectupdate", stringArray0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      String string1 = "g&)x";
      // Undeclared exception!
      try { 
        errorMessages0.getNCharacterStream("g&)x");
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNCharacterStream(Ljava/lang/String;)Ljava/io/Reader; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.dml.ExecuteProcedure";
      stringArray0[1] = "org.h2.command.dml.ExecuteProcedure";
      String string0 = SQLUtil.leftJoin("org.h2.command.dml.ExecuteProcedure", stringArray0, "org.h2.command.dml.ExecuteProcedure", "execute", stringArray0);
      assertEquals("left join org.h2.command.dml.ExecuteProcedure as execute on org.h2.command.dml.ExecuteProcedure.org.h2.command.dml.ExecuteProcedure = execute.org.h2.command.dml.ExecuteProcedure and org.h2.command.dml.ExecuteProcedure.org.h2.command.dml.ExecuteProcedure = execute.org.h2.command.dml.ExecuteProcedure", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("org.h2.command.dml.ExecuteProcedure");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[0];
      String string1 = SQLUtil.renderColumnNames(stringArray1);
      assertEquals("()", string1);
      
      boolean boolean1 = SQLUtil.isProcedureCall("U;$,:IedD=j|");
      assertFalse(boolean1);
      
      SQLUtil.renderColumnListWithTableName("}Qpv%+", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r$EOtFjyR0mrI4[7DF");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.h2.command.dml.RunScriptCommand", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop table", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(90073, "org.h2.command.dml.RunScriptCommand");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.command.dml.ExecuteProcedure", dBTable0, dBDataType0, (Integer) null, (Integer) null);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.h2.command.dml.ExecuteProcedure ORG.H2.COMMAND.DML.RUNSCRIPTCOMMAND NULL", string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2J}9!l)\"Z";
      stringArray0[1] = "2J}9!l)\"Z";
      stringArray0[2] = "2J}9!l)\"Z";
      stringArray0[3] = "2J}9!l)\"Z";
      stringArray0[4] = "2J}9!l)\"Z";
      stringArray0[5] = "2J}9!l)\"Z";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "2J}9!l)\"Z", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CLOB", false, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setDoc(" is not supposed to be null");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBPrimaryKeyConstraint0.setName("CLOB");
      dBUniqueIndex0.setDoc("inner");
      dBPrimaryKeyConstraint0.setName((String) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("2J}9!l)\"Z", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("2J}9!l)\"Z");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      String string0 = "vW3nW*";
      defaultDBTable0.getForeignKeyConstraint(stringArray0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "SELECT * FROM ";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "SELECT * FROM ";
      stringArray0[4] = "SELECT * FROM ";
      stringArray0[5] = "SELECT * FROM ";
      stringArray0[6] = "SELECT * FROM ";
      stringArray0[7] = "M0";
      stringArray0[8] = "SELECT * FROM ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("SELECT * FROM ", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" FOREIGN KEY (SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , M0, SELECT * FROM ) REFERENCES SELECT * FROM (SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , M0, SELECT * FROM )", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tabledrop tablepg8d;hntf{nll-.");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create tabledrop tablepg8d;hntf{nll-.";
      stringArray0[1] = "create tabledrop tablepg8d;hntf{nll-.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create tabledrop tablepg8d;hntf{nll-.", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (create tabledrop tablepg8d;hntf{nll-., create tabledrop tablepg8d;hntf{nll-.) REFERENCES create tabledrop tablepg8d;hntf{nll-.(create tabledrop tablepg8d;hntf{nll-., create tabledrop tablepg8d;hntf{nll-.)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "exec";
      stringArray0[1] = "`%(ssg'YLT*}b8CS&";
      String string0 = SQLUtil.renderColumnListWithTableName("`%(ssg'YLT*}b8CS&", stringArray0);
      assertEquals("`%(ssg'YLT*}b8CS&.exec, `%(ssg'YLT*}b8CS&.`%(ssg'YLT*}b8CS&", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "PNx.&E%6FF4P^}(5";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "PNx.&E%6FF4P^}(5");
      int int0 = 7;
      stringBuilder0.appendCodePoint(7);
      stringBuilder0.append((CharSequence) "PNx.&E%6FF4P^}(5");
      stringBuilder0.append(true);
      stringBuilder0.append((CharSequence) "PNx.&E%6FF4P^}(5", 7, 7);
      stringBuilder0.insert(7, (CharSequence) "PNx.&E%6FF4P^}(5", 7, 7);
      stringBuilder0.chars();
      SQLUtil.addOptionalCondition("PNx.&E%6FF4P^}(5", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PNx.&E%6FF4P^}(5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: PNx.&E%6FF4P^}(5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "i`1')&h<omttzyge";
      SQLUtil.mutatesDataOrStructure("i`1')&h<omttzyge");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter materialized viewdrop index";
      stringArray0[1] = "KkpqPC";
      stringArray0[2] = "alter materialized viewdrop index";
      stringArray0[3] = "alter materialized viewdrop index";
      stringArray0[4] = "alter materialized viewdrop index";
      stringArray0[5] = "alter materialized viewdrop index";
      stringArray0[6] = "alter materialized viewdrop index";
      String string0 = SQLUtil.renderColumnListWithTableName("alter materialized viewdrop index", stringArray0);
      assertEquals("alter materialized viewdrop index.alter materialized viewdrop index, alter materialized viewdrop index.KkpqPC, alter materialized viewdrop index.alter materialized viewdrop index, alter materialized viewdrop index.alter materialized viewdrop index, alter materialized viewdrop index.alter materialized viewdrop index, alter materialized viewdrop index.alter materialized viewdrop index, alter materialized viewdrop index.alter materialized viewdrop index", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "%yxY%}vST4aUdZ\\lr";
      DBCatalog dBCatalog0 = new DBCatalog("Wi9nH_'/1y8-(}$a");
      String string1 = "This statement is already closed.";
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("This statement is already closed.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'This statement is already closed.'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQLUtil.innerJoin("", stringArray0, "", (String) null, stringArray0);
      SQLUtil.isDML("p?=VaK~!Tn:'zvSDT");
      String string0 = "58";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "alter indexdrop index";
      stringArray1[1] = "58";
      stringArray1[2] = "";
      SQLUtil.join("alter indexdrop index", "58", stringArray0, "", "alter indexdrop index", stringArray1);
      SQLUtil.join("exec", "", stringArray1, "drop index", "", stringArray1);
      SQLUtil.innerJoin("NY%", stringArray0, "", "alter indexdrop index", stringArray0);
      DBTable dBTable0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(" AND ");
      boolean boolean1 = SQLUtil.isDDL("drop index");
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema(" AND ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index", dBSchema0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "drop index";
      stringArray1[4] = " AND ";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray1);
      assertEquals("SELECT * FROM drop index WHERE  = '' AND  = '' AND  = '' AND drop index = 'drop index' AND  AND  = ' AND '", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("nUNX>W", defaultDBTable0, 3380, "org.apache.xpath.XPath");
      defaultDBColumn0.getForeignKeyConstraint();
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "\")", "\")");
      assertEquals("", string0);
      
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("QxbUDM};u", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("org.firebirdsql.jca.FBManagedConnectionFactory", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string1 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals(".QxbUDM};u", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("register");
      DBSequence dBSequence0 = null;
      try {
        dBSequence0 = new DBSequence("n}IV#64'}o-HvAF", dBSchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      String string0 = "7AlQ:[Lenf";
      GenericLanguageConnectionContext genericLanguageConnectionContext0 = null;
      try {
        genericLanguageConnectionContext0 = new GenericLanguageConnectionContext((ContextManager) null, (TransactionController) null, genericLanguageFactory0, genericLanguageConnectionFactory0, (Database) null, "7AlQ:[Lenf", 2, "7AlQ:[Lenf", "$V+vrzo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.context.ContextImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("o73}d}s\" DNIm*>");
      SQLUtil.removeComments("o73}d}s\" DNIm*>");
      SQLUtil.renderValue("o73}d}s\" DNIm*>");
      String string0 = "delete$u7a2sel0u&%";
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("selectb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'selectb'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cT`'!ZKejnYKD";
      stringArray0[1] = "c09s!guz";
      stringArray0[2] = "p?=vak";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = "p?=vak";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("qj");
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      SQLUtil.parseColumnTypeAndSize("p?=vak");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("cT`'!ZKejnYKD");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qj", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "call";
      stringArray0[1] = "call";
      stringArray0[2] = "call";
      stringArray0[3] = "Zskh[N5A4Se";
      stringArray0[4] = "call";
      stringArray0[5] = "call";
      stringArray0[6] = "Zskh[N5A4Se";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Zskh[N5A4Se", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Zskh[N5A4Se PRIMARY KEY (call, call, call, Zskh[N5A4Se, call, call, Zskh[N5A4Se)", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Random.setNextRandom(242);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "xb-u@w-H<`W1";
      stringArray0[1] = "alter session";
      stringArray0[2] = "|]GW9ui";
      stringArray0[3] = "y.vY/rthBa:aQ$~";
      stringArray0[4] = "d;";
      stringArray0[5] = "8:Pf&";
      stringArray0[6] = "[vLqdJ1:)$+j2z(";
      stringArray0[7] = "create unique index";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = SQLUtil.renderValue("d;");
      assertEquals("'d;'", string0);
      
      SQLUtil.parseColumnTypeAndSize("d;");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\u00D8\u0002\uFFFF\u0001\u00D9\u000B\uFFFF\u0001\u00D7\u0001\u00DA");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("qf(m`n1[k[e;mG3w", "bootPassword");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "8:Pf&");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(xb-u@w-H<`W1, alter session, |]GW9ui, y.vY/rthBa:aQ$~, d;, 8:Pf&, [vLqdJ1:)$+j2z(, create unique index)", string1);
      
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("\u0001\u00D8\u0002\uFFFF\u0001\u00D9\u000B\uFFFF\u0001\u00D7\u0001\u00DA", string2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Character character0 = Character.valueOf('3');
      SQLUtil.renderValue(character0);
      DBTable dBTable0 = null;
      int int0 = 374;
      String string0 = "insertpdqu.am&b\"1";
      DBDataType dBDataType0 = DBDataType.getInstance(374, "insertpdqu.am&b\"1");
      Integer integer0 = new Integer(374);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'3'", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setName("create tablem*g|y");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" rU*d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " rU*d";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "S";
      stringArray0[2] = " rU*d";
      stringArray0[3] = " rU*d";
      stringArray0[4] = "sS7X*bGY3";
      stringArray0[5] = " rU*d";
      stringArray0[6] = null;
      String[] stringArray1 = new String[3];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = "S";
      String string0 = SQLUtil.normalize("sS7X*bGY3", true);
      assertEquals("sS7X * bGY3", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1845010554), "END_EXE_TIME");
      Integer integer0 = new Integer(2750);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("constraint", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("constraint END_EXE_TIME(2750,2750) NULL", string0);
      
      defaultDBColumn0.setName("drop materialized viewb");
      String string1 = SQLUtil.normalize("constraint END_EXE_TIME(2750,2750) NULL", false);
      assertEquals("constraint END_EXE_TIME (2750, 2750) NULL", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "END_EXE_TIME";
      stringArray0[1] = "constraint END_EXE_TIME (2750, 2750) NULL";
      stringArray0[2] = "F,w&mqSbYQ>E:";
      stringArray0[3] = "constraint END_EXE_TIME (2750, 2750) NULL";
      stringArray0[4] = "F,w&mqSbYQ>E:";
      stringArray0[5] = "F,w&mqSbYQ>E:";
      stringArray0[6] = "<";
      String string2 = SQLUtil.leftJoin("F,w&mqSbYQ>E:", stringArray0, "END_EXE_TIME", "constraint END_EXE_TIME(2750,2750) NULL", stringArray0);
      assertEquals("left join END_EXE_TIME as constraint END_EXE_TIME(2750,2750) NULL on F,w&mqSbYQ>E:.END_EXE_TIME = constraint END_EXE_TIME(2750,2750) NULL.END_EXE_TIME and F,w&mqSbYQ>E:.constraint END_EXE_TIME (2750, 2750) NULL = constraint END_EXE_TIME(2750,2750) NULL.constraint END_EXE_TIME (2750, 2750) NULL and F,w&mqSbYQ>E:.F,w&mqSbYQ>E: = constraint END_EXE_TIME(2750,2750) NULL.F,w&mqSbYQ>E: and F,w&mqSbYQ>E:.constraint END_EXE_TIME (2750, 2750) NULL = constraint END_EXE_TIME(2750,2750) NULL.constraint END_EXE_TIME (2750, 2750) NULL and F,w&mqSbYQ>E:.F,w&mqSbYQ>E: = constraint END_EXE_TIME(2750,2750) NULL.F,w&mqSbYQ>E: and F,w&mqSbYQ>E:.F,w&mqSbYQ>E: = constraint END_EXE_TIME(2750,2750) NULL.F,w&mqSbYQ>E: and F,w&mqSbYQ>E:.< = constraint END_EXE_TIME(2750,2750) NULL.<", string2);
  }
}
