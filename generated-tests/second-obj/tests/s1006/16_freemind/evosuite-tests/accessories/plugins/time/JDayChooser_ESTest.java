/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:22:39 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.TransferHandler;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.util.CSSConstants;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xml.serializer.SerializerTrace;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.interfaces.TileSource;
import org.openstreetmap.gui.jmapviewer.tilesources.BingAerialTileSource;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.DocumentType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = Color.GREEN;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertSame(date1, date0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(228, color0.getGreen());
      assertEquals(210, color0.getRed());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(238, color0.getBlue());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      ActionEvent actionEvent0 = new ActionEvent(fileSystemHandling0, 160, "ph!m^HS", 160, 160);
      assertEquals(160, actionEvent0.getID());
      assertEquals("ph!m^HS", actionEvent0.getActionCommand());
      assertEquals(160L, actionEvent0.getWhen());
      assertEquals(160, actionEvent0.getModifiers());
      assertNotNull(actionEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.testdata.FileSystemHandling cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      boolean boolean0 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      String string0 = jDayChooser0.getToolTipText();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNull(string0);
      
      jDayChooser0.focusGained((FocusEvent) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.focusLost((FocusEvent) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertNotNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Color color0 = Color.magenta;
      assertEquals((-65281), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      jDayChooser0.weekdayForeground = color0;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals((-65281), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-65281), jDayChooser0.weekdayForeground.getRGB());
      assertEquals(255, jDayChooser0.weekdayForeground.getAlpha());
      assertEquals(0, jDayChooser0.weekdayForeground.getGreen());
      assertEquals(255, jDayChooser0.weekdayForeground.getBlue());
      assertEquals(255, jDayChooser0.weekdayForeground.getRed());
      assertEquals(1, jDayChooser0.weekdayForeground.getTransparency());
      
      int int0 = SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS;
      assertEquals(11, int0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      Color color0 = Color.white;
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(boolean0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      XmlDocument xmlDocument0 = new XmlDocument();
      assertEquals("#document", xmlDocument0.getNodeName());
      assertFalse(xmlDocument0.hasAttributes());
      assertEquals(0, xmlDocument0.getLength());
      assertEquals((short)9, xmlDocument0.getNodeType());
      assertFalse(xmlDocument0.hasChildNodes());
      assertNull(xmlDocument0.getNamespaceURI());
      assertFalse(xmlDocument0.isReadonly());
      assertNull(xmlDocument0.getSystemId());
      assertNotNull(xmlDocument0);
      
      DocumentType documentType0 = xmlDocument0.getDoctype();
      assertEquals("#document", xmlDocument0.getNodeName());
      assertFalse(xmlDocument0.hasAttributes());
      assertEquals(0, xmlDocument0.getLength());
      assertEquals((short)9, xmlDocument0.getNodeType());
      assertFalse(xmlDocument0.hasChildNodes());
      assertNull(xmlDocument0.getNamespaceURI());
      assertFalse(xmlDocument0.isReadonly());
      assertNull(xmlDocument0.getSystemId());
      assertNull(documentType0);
      
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      assertNotNull(dOMImplementation0);
      
      GenericDocument genericDocument0 = new GenericDocument((DocumentType) null, dOMImplementation0);
      assertEquals((short)9, genericDocument0.getNodeType());
      assertEquals("#document", genericDocument0.getNodeName());
      assertFalse(genericDocument0.getEventsEnabled());
      assertFalse(genericDocument0.isReadonly());
      assertNull(genericDocument0.getNamespaceURI());
      assertFalse(genericDocument0.hasChildNodes());
      assertNotNull(genericDocument0);
      
      Locale locale0 = genericDocument0.getLocale();
      assertEquals((short)9, genericDocument0.getNodeType());
      assertEquals("#document", genericDocument0.getNodeName());
      assertFalse(genericDocument0.getEventsEnabled());
      assertFalse(genericDocument0.isReadonly());
      assertNull(genericDocument0.getNamespaceURI());
      assertFalse(genericDocument0.hasChildNodes());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(90, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(164, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      JButton jButton0 = new JButton("day");
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertNotNull(jButton0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, int0);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      JPopupMenu jPopupMenu0 = new JPopupMenu((String) null);
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertNotNull(jPopupMenu0);
      
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      
      Color color0 = jDayChooser0.selectedColor;
      assertEquals(160, color0.getRed());
      assertEquals(160, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getBlue());
      assertEquals((-6250336), color0.getRGB());
      assertNotNull(color0);
      
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(160, color0.getRed());
      assertEquals(160, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getBlue());
      assertEquals((-6250336), color0.getRGB());
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setIgnoreRepaint(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      ContainerListener containerListener1 = AWTEventMulticaster.remove(containerListener0, (ContainerListener) null);
      assertNotNull(containerListener1);
      assertSame(containerListener1, containerListener0);
      
      ContainerListener containerListener2 = AWTEventMulticaster.remove(containerListener1, containerListener1);
      assertNull(containerListener2);
      assertSame(containerListener1, containerListener0);
      
      jDayChooser0.addContainerListener((ContainerListener) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setSundayForeground((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setDayBordersVisible(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      Timestamp timestamp0 = new Timestamp(2521L);
      assertEquals(521000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:02.521", timestamp0.toString());
      assertNotNull(timestamp0);
      
      Timestamp timestamp1 = (Timestamp)jDayChooser0.setMaxSelectableDate(timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(521000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:02.521", timestamp0.toString());
      assertEquals(521000000, timestamp1.getNanos());
      assertEquals("1970-01-01 00:00:02.521", timestamp1.toString());
      assertNotNull(timestamp1);
      assertSame(timestamp0, timestamp1);
      assertSame(timestamp1, timestamp0);
      
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertSame(date0, date1);
      assertSame(date1, date0);
      
      Date date2 = jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertNotNull(date2);
      assertSame(date2, date0);
      assertSame(date2, date1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      String string0 = CSSConstants.CSS_GREEN_VALUE;
      assertEquals("green", string0);
      assertNotNull(string0);
      
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.DOCUMENT_MODAL;
      assertEquals(Dialog.ModalityType.DOCUMENT_MODAL, dialog_ModalityType0);
      
      Dialog.ModalityType[] dialog_ModalityTypeArray0 = Dialog.ModalityType.values();
      assertNotNull(dialog_ModalityTypeArray0);
      
      Dialog.ModalityType[] dialog_ModalityTypeArray1 = Dialog.ModalityType.values();
      assertFalse(dialog_ModalityTypeArray1.equals((Object)dialog_ModalityTypeArray0));
      assertNotNull(dialog_ModalityTypeArray1);
      assertNotSame(dialog_ModalityTypeArray1, dialog_ModalityTypeArray0);
      
      Dialog.ModalityType[] dialog_ModalityTypeArray2 = Dialog.ModalityType.values();
      assertFalse(dialog_ModalityTypeArray2.equals((Object)dialog_ModalityTypeArray0));
      assertFalse(dialog_ModalityTypeArray2.equals((Object)dialog_ModalityTypeArray1));
      assertNotNull(dialog_ModalityTypeArray2);
      assertNotSame(dialog_ModalityTypeArray2, dialog_ModalityTypeArray0);
      assertNotSame(dialog_ModalityTypeArray2, dialog_ModalityTypeArray1);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-6029312), color0.getRGB());
      assertNotNull(color0);
      
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-6029312), color0.getRGB());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNull(jButton0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMonth(247);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertNotNull(jMonthChooser0);
      
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultTreeCellRenderer0);
      
      Color color0 = jDayChooser0.sundayForeground;
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      float[] floatArray0 = color0.getRGBComponents((float[]) null);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(floatArray0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Color color1 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(164, color1.getRed());
      assertEquals((-6029312), color1.getRGB());
      assertNotNull(color1);
      assertSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      jDayChooser0.setCalendar(calendar0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((-3697));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",nt");
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(31);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Color color0 = Color.GREEN;
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      Color color1 = Color.getColor("accessories.plugins.time.JDayChooser$1", color0);
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16711936), color1.getRGB());
      assertEquals(255, color1.getGreen());
      assertNotNull(color1);
      assertSame(color0, color1);
      assertSame(color1, color0);
      
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jMonthChooser0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      Color color0 = synthToolBarUI0.getFloatingColor();
      assertNull(color0);
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, int0);
      
      jDayChooser0.list();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      MockDate mockDate0 = new MockDate(10023, (-772), 10023, 0, 1, 10023);
      assertEquals("Mon Feb 08 02:48:03 GMT 11886", mockDate0.toString());
      assertNotNull(mockDate0);
      
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Mon Feb 08 02:48:03 GMT 11886", mockDate0.toString());
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Canada", string0);
      assertNotNull(string0);
      
      String string1 = locale0.getScript();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(2);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Color color0 = synthToolBarUI0.getFloatingColor();
      assertNull(color0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jDayChooser0.setMaxDayCharacters(4);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-2674), "13", 1231);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      Color color0 = Color.blue;
      assertEquals(255, color0.getAlpha());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(164, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16754012), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertEquals(90, color1.getGreen());
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      assertNotSame(color1, color0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      boolean boolean1 = jDayChooser_DecoratorButton0.hasFocus();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Graphics graphics0 = jDayChooser_DecoratorButton0.getGraphics();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNull(graphics0);
      
      boolean boolean2 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Timestamp timestamp0 = new Timestamp(2531L);
      assertEquals(531000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:02.531", timestamp0.toString());
      assertNotNull(timestamp0);
      
      Timestamp timestamp1 = (Timestamp)jDayChooser0.setMaxSelectableDate(timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(531000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:02.531", timestamp0.toString());
      assertEquals(531000000, timestamp1.getNanos());
      assertEquals("1970-01-01 00:00:02.531", timestamp1.toString());
      assertNotNull(timestamp1);
      assertSame(timestamp0, timestamp1);
      assertSame(timestamp1, timestamp0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      assertFalse(boolean0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setYear(24);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Boolean boolean1 = new Boolean("day");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      MockDate mockDate1 = new MockDate(13, (-2420), 24, 9999, 13, 24);
      assertEquals("Wed Jul 13 15:13:24 GMT 1712", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      jDayChooser0.setSelectableDateRange(mockDate0, timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(531000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:02.531", timestamp0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertSame(timestamp0, timestamp1);
      assertNotSame(mockDate0, mockDate1);
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1598), (-2274L), (-1598), (-1598), 's');
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals((-2147483646), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-1600), keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals((-1598), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals('s', keyEvent0.getKeyChar());
      assertEquals((-1598), keyEvent0.getID());
      assertTrue(keyEvent0.isControlDown());
      assertEquals((-2274L), keyEvent0.getWhen());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals((-2147483646), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-1600), keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals((-1598), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals('s', keyEvent0.getKeyChar());
      assertEquals((-1598), keyEvent0.getID());
      assertTrue(keyEvent0.isControlDown());
      assertEquals((-2274L), keyEvent0.getWhen());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setForeground((Color) null);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, (ContainerListener) null);
      assertNotNull(containerListener1);
      assertSame(containerListener1, containerListener0);
      
      ContainerListener containerListener2 = AWTEventMulticaster.remove(containerListener1, containerListener1);
      assertNull(containerListener2);
      assertSame(containerListener1, containerListener0);
      
      jDayChooser0.addContainerListener((ContainerListener) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertNotNull(defaultCaret0);
      
      defaultCaret0.setBounds((-123), (-123), 25, 1);
      assertEquals(25, defaultCaret0.width);
      assertEquals((-123), defaultCaret0.y);
      assertEquals((-123), defaultCaret0.x);
      assertEquals(1, defaultCaret0.height);
      assertEquals(25.0, defaultCaret0.getWidth(), 0.01);
      assertEquals((-122.0), defaultCaret0.getMaxY(), 0.01);
      assertFalse(defaultCaret0.isEmpty());
      assertEquals((-122.5), defaultCaret0.getCenterY(), 0.01);
      assertEquals((-123.0), defaultCaret0.getMinY(), 0.01);
      assertEquals((-98.0), defaultCaret0.getMaxX(), 0.01);
      assertEquals((-123.0), defaultCaret0.getMinX(), 0.01);
      assertEquals((-110.5), defaultCaret0.getCenterX(), 0.01);
      assertEquals((-123.0), defaultCaret0.getX(), 0.01);
      assertEquals((-123.0), defaultCaret0.getY(), 0.01);
      assertEquals(1.0, defaultCaret0.getHeight(), 0.01);
      
      jDayChooser0.removeMouseListener(defaultCaret0);
      assertEquals(25, defaultCaret0.width);
      assertEquals((-123), defaultCaret0.y);
      assertEquals((-123), defaultCaret0.x);
      assertEquals(1, defaultCaret0.height);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(25.0, defaultCaret0.getWidth(), 0.01);
      assertEquals((-122.0), defaultCaret0.getMaxY(), 0.01);
      assertFalse(defaultCaret0.isEmpty());
      assertEquals((-122.5), defaultCaret0.getCenterY(), 0.01);
      assertEquals((-123.0), defaultCaret0.getMinY(), 0.01);
      assertEquals((-98.0), defaultCaret0.getMaxX(), 0.01);
      assertEquals((-123.0), defaultCaret0.getMinX(), 0.01);
      assertEquals((-110.5), defaultCaret0.getCenterX(), 0.01);
      assertEquals((-123.0), defaultCaret0.getX(), 0.01);
      assertEquals((-123.0), defaultCaret0.getY(), 0.01);
      assertEquals(1.0, defaultCaret0.getHeight(), 0.01);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(90, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-123));
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.addListeners(25);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(1841);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeSet<Character> treeSet0 = new TreeSet<Character>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(4);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser0.setYear(4);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Box box0 = Box.createVerticalBox();
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusCycleRoot());
      assertNotNull(box0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-895), 4, (-1437625606), 33, 'n');
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals((-2147483590), keyEvent0.getModifiers());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-895), keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(4L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('n', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-1437625664), keyEvent0.getModifiersEx());
      assertNotNull(keyEvent0);
      
      String string0 = keyEvent0.paramString();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals((-2147483590), keyEvent0.getModifiers());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-895), keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(4L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('n', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-1437625664), keyEvent0.getModifiersEx());
      assertEquals("unknown type,keyCode=33,keyText=Page Up,keyChar='n',modifiers=Ctrl+Alt+Alt Graph+Button1,extModifiers=Ctrl+Alt+Shift+Button3+Button5+Button6+Button7+Button8+Button9+Button12+Button15+Button17+Button19,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = keyEvent0.paramString();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals((-2147483590), keyEvent0.getModifiers());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-895), keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(4L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('n', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-1437625664), keyEvent0.getModifiersEx());
      assertTrue(string1.equals((Object)string0));
      assertEquals("unknown type,keyCode=33,keyText=Page Up,keyChar='n',modifiers=Ctrl+Alt+Alt Graph+Button1,extModifiers=Ctrl+Alt+Shift+Button3+Button5+Button6+Button7+Button8+Button9+Button12+Button15+Button17+Button19,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser(true);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(14, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertNotNull(jDayChooser0);
          
          boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "4");
          assertFalse(boolean0);
          
          jDayChooser0.setDay(423);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertEquals(28, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          
          jDayChooser0.setMonth(247);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(31, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          
          boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(31, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(boolean1 == boolean0);
          assertTrue(boolean1);
          
          FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 423);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(31, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(focusEvent0.isTemporary());
          assertEquals(423, focusEvent0.getID());
          assertNotNull(focusEvent0);
          
          jDayChooser0.focusLost(focusEvent0);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(31, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(focusEvent0.isTemporary());
          assertEquals(423, focusEvent0.getID());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      Color color0 = jDayChooser1.getWeekdayForeground();
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals((-16754012), color0.getRGB());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(color0);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      System.setCurrentTimeMillis((-1666L));
      JDayChooser jDayChooser2 = new JDayChooser(true);
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertNotNull(jDayChooser2);
      
      System.setCurrentTimeMillis('6');
      JDayChooser jDayChooser3 = new JDayChooser();
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertEquals(1, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertNotNull(jDayChooser3);
      
      jDayChooser3.setYear(35);
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertEquals(1, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser2);
      
      boolean boolean1 = jDayChooser2.isDayBordersVisible();
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertTrue(boolean1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser1);
      
      Image image0 = jDayChooser3.createImage(457, (-2072));
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertEquals(1, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertNull(image0);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser2);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser3, 228, (-1666L), 33, 35, 'M');
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertEquals(1, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(35, keyEvent0.getKeyCode());
      assertEquals(228, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('M', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-1666L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(33, keyEvent0.getModifiers());
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertNotNull(keyEvent0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      jDayChooser3.initDecorations();
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertEquals(1, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser2);
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 457, (-1666L), (-2072), 35, 'M');
      assertFalse(keyEvent1.isShiftDown());
      assertFalse(keyEvent1.isControlDown());
      assertEquals(35, keyEvent1.getKeyCode());
      assertEquals(457, keyEvent1.getID());
      assertEquals((-2112), keyEvent1.getModifiersEx());
      assertTrue(keyEvent1.isAltDown());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals('M', keyEvent1.getKeyChar());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals((-1666L), keyEvent1.getWhen());
      assertFalse(keyEvent1.isConsumed());
      assertEquals((-2147483608), keyEvent1.getModifiers());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertNotNull(keyEvent1);
      
      String string0 = keyEvent1.paramString();
      assertFalse(keyEvent1.isShiftDown());
      assertFalse(keyEvent1.isControlDown());
      assertEquals(35, keyEvent1.getKeyCode());
      assertEquals(457, keyEvent1.getID());
      assertEquals((-2112), keyEvent1.getModifiersEx());
      assertTrue(keyEvent1.isAltDown());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals('M', keyEvent1.getKeyChar());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals((-1666L), keyEvent1.getWhen());
      assertFalse(keyEvent1.isConsumed());
      assertEquals((-2147483608), keyEvent1.getModifiers());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertEquals("unknown type,keyCode=35,keyText=End,keyChar='M',modifiers=Alt+Alt Graph,extModifiers=Meta+Ctrl+Alt+Shift+Alt Graph+Button1+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertNotNull(string0);
      assertNotSame(keyEvent1, keyEvent0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertNotSame(jDayChooser1, jDayChooser2);
      
      jDayChooser2.setSize(32, 12);
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser1);
      
      jDayChooser1.keyPressed(keyEvent0);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertEquals(1, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(35, keyEvent0.getKeyCode());
      assertEquals(228, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('M', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-1666L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(33, keyEvent0.getModifiers());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertFalse(keyEvent0.equals((Object)keyEvent1));
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertNotSame(keyEvent0, keyEvent1);
      
      Date date0 = jDayChooser2.getMaxSelectableDate();
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertNotNull(date0);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser1);
      
      Date date1 = jDayChooser2.setMinSelectableDate(date0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date1.toString());
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertNotNull(date1);
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      char char0 = '6';
      Boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      
      Color color0 = jDayChooser1.getWeekdayForeground();
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(color0);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      System.setCurrentTimeMillis((-1666L));
      System.setCurrentTimeMillis('6');
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("Error setting document", vetoableChangeListener0);
      assertEquals("Error setting document", vetoableChangeListenerProxy0.getPropertyName());
      assertNotNull(vetoableChangeListenerProxy0);
      
      jDayChooser1.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals("Error setting document", vetoableChangeListenerProxy0.getPropertyName());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      int int0 = 34;
      int int1 = 3472;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 60000L, 3472, 34, '6');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(34, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(60000L, keyEvent0.getWhen());
      assertEquals(34, keyEvent0.getID());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(16, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('6', keyEvent0.getKeyChar());
      assertEquals(3456, keyEvent0.getModifiersEx());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(keyEvent0);
      
      String string0 = keyEvent0.paramString();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(34, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(60000L, keyEvent0.getWhen());
      assertEquals(34, keyEvent0.getID());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(16, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('6', keyEvent0.getKeyChar());
      assertEquals(3456, keyEvent0.getModifiersEx());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals("unknown type,keyCode=34,keyText=Page Down,keyChar='6',modifiers=Button1,extModifiers=Meta+Ctrl+Button1+Button2,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertNotNull(string0);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      int int2 = 37;
      jDayChooser1.setSize(3472, 37);
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Canada", string0);
      assertNotNull(string0);
      
      String string1 = locale0.getScript();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      TreeSet<Character> treeSet0 = new TreeSet<Character>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jDayChooser0.setMaxDayCharacters(2);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser0.setYear(2);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.day = 10112;
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean3 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      Image image0 = jDayChooser0.createImage(33, 33);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNull(image0);
      
      Image image1 = jDayChooser0.createImage(3, 3);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNull(image1);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10112, 33, 65, 90, '0');
      assertEquals(33L, keyEvent0.getWhen());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(90, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('0', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(10112, keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(keyEvent0);
      
      String string2 = keyEvent0.paramString();
      assertEquals(33L, keyEvent0.getWhen());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(90, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('0', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(10112, keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("unknown type,keyCode=90,keyText=Z,keyChar='0',modifiers=Shift,extModifiers=Shift,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string2);
      assertNotNull(string2);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      String string3 = keyEvent0.paramString();
      assertEquals(33L, keyEvent0.getWhen());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(90, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('0', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(10112, keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("unknown type,keyCode=90,keyText=Z,keyChar='0',modifiers=Shift,extModifiers=Shift,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string3);
      assertNotNull(string3);
      
      jDayChooser0.setSize(935, 15);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(33L, keyEvent0.getWhen());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(90, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('0', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(10112, keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(10112, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, int0);
      
      int int1 = 207;
      jDayChooser0.setYear(207);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(boolean0);
      
      char char0 = '0';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 207, 36, 40, '0');
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8448, keyEvent0.getModifiersEx());
      assertEquals(36, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('0', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(207L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertNotNull(keyEvent0);
      
      Boolean boolean1 = new Boolean("day");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8448, keyEvent0.getModifiersEx());
      assertEquals(36, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('0', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(207L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(21, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      keyEvent0.consume();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8448, keyEvent0.getModifiersEx());
      assertEquals(36, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('0', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getID());
      assertEquals(207L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      Color color0 = Color.getColor("day");
      assertNull(color0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 36);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(21, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(36, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(focusEvent0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(jDayChooser_DecoratorButton0);
      
      try { 
        jDayChooser_DecoratorButton0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      TransferHandler transferHandler0 = jDayChooser1.getTransferHandler();
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNull(transferHandler0);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      Rectangle rectangle0 = jDayChooser1.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(rectangle0);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(boolean1);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 33, (byte)38, '9');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(keyEvent0);
      
      String string0 = keyEvent0.paramString();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals("unknown type,keyCode=38,keyText=Up,keyChar='9',modifiers=Shift+Alt Graph,extModifiers=Shift+Alt Graph,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertNotNull(string0);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(7, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      System.setCurrentTimeMillis(1607L);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      assertNotNull(sVGGeneratorContext_GraphicContextDefaults0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(7, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(7, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals(0, int0);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 5, (-663), 5, 5, 0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-663,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-663,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(7, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(jDayChooser_DecoratorButton0);
      
      ClonePlugin clonePlugin0 = new ClonePlugin();
      assertNull(clonePlugin0.getName());
      assertNotNull(clonePlugin0);
      
      boolean boolean2 = jDayChooser1.isWeekOfYearVisible();
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(jDayChooser1, jDayChooser0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      TransferHandler transferHandler0 = new TransferHandler("day");
      assertNotNull(transferHandler0);
      
      Rectangle rectangle0 = jDayChooser1.getVisibleRect();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(rectangle0);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(boolean1);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      assertEquals(TileSource.TileUpdate.IfNoneMatch, bingAerialTileSource0.getTileUpdate());
      assertTrue(bingAerialTileSource0.requiresAttribution());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.toString());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getTermsOfUseURL());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getAttributionImageURL());
      assertEquals("png", bingAerialTileSource0.getExtension());
      assertNull(bingAerialTileSource0.getTermsOfUseText());
      assertEquals(256, bingAerialTileSource0.getTileSize());
      assertEquals("png", bingAerialTileSource0.getTileType());
      assertEquals("http://go.microsoft.com/?linkid=9710837", bingAerialTileSource0.getAttributionLinkURL());
      assertEquals(22, bingAerialTileSource0.getMaxZoom());
      assertEquals(0, bingAerialTileSource0.getMinZoom());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.getName());
      assertNotNull(bingAerialTileSource0);
      
      BufferedImage bufferedImage0 = (BufferedImage)bingAerialTileSource0.getAttributionImage();
      assertEquals(TileSource.TileUpdate.IfNoneMatch, bingAerialTileSource0.getTileUpdate());
      assertTrue(bingAerialTileSource0.requiresAttribution());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.toString());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getTermsOfUseURL());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getAttributionImageURL());
      assertEquals("png", bingAerialTileSource0.getExtension());
      assertNull(bingAerialTileSource0.getTermsOfUseText());
      assertEquals(256, bingAerialTileSource0.getTileSize());
      assertEquals("png", bingAerialTileSource0.getTileType());
      assertEquals("http://go.microsoft.com/?linkid=9710837", bingAerialTileSource0.getAttributionLinkURL());
      assertEquals(22, bingAerialTileSource0.getMaxZoom());
      assertEquals(0, bingAerialTileSource0.getMinZoom());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.getName());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(93, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(93, bufferedImage0.getWidth());
      assertEquals(29, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(29, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      
      ImageIcon imageIcon0 = new ImageIcon(bufferedImage0);
      assertEquals(TileSource.TileUpdate.IfNoneMatch, bingAerialTileSource0.getTileUpdate());
      assertTrue(bingAerialTileSource0.requiresAttribution());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.toString());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getTermsOfUseURL());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getAttributionImageURL());
      assertEquals("png", bingAerialTileSource0.getExtension());
      assertNull(bingAerialTileSource0.getTermsOfUseText());
      assertEquals(256, bingAerialTileSource0.getTileSize());
      assertEquals("png", bingAerialTileSource0.getTileType());
      assertEquals("http://go.microsoft.com/?linkid=9710837", bingAerialTileSource0.getAttributionLinkURL());
      assertEquals(22, bingAerialTileSource0.getMaxZoom());
      assertEquals(0, bingAerialTileSource0.getMinZoom());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.getName());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(93, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(93, bufferedImage0.getWidth());
      assertEquals(29, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(29, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(imageIcon0);
      
      JButton jButton0 = new JButton("day", imageIcon0);
      assertEquals(TileSource.TileUpdate.IfNoneMatch, bingAerialTileSource0.getTileUpdate());
      assertTrue(bingAerialTileSource0.requiresAttribution());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.toString());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getTermsOfUseURL());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getAttributionImageURL());
      assertEquals("png", bingAerialTileSource0.getExtension());
      assertNull(bingAerialTileSource0.getTermsOfUseText());
      assertEquals(256, bingAerialTileSource0.getTileSize());
      assertEquals("png", bingAerialTileSource0.getTileType());
      assertEquals("http://go.microsoft.com/?linkid=9710837", bingAerialTileSource0.getAttributionLinkURL());
      assertEquals(22, bingAerialTileSource0.getMaxZoom());
      assertEquals(0, bingAerialTileSource0.getMinZoom());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.getName());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(93, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(93, bufferedImage0.getWidth());
      assertEquals(29, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(29, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jButton0);
      
      jDayChooser0.selectedDay = jButton0;
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(TileSource.TileUpdate.IfNoneMatch, bingAerialTileSource0.getTileUpdate());
      assertTrue(bingAerialTileSource0.requiresAttribution());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.toString());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getTermsOfUseURL());
      assertEquals("http://opengeodata.org/microsoft-imagery-details", bingAerialTileSource0.getAttributionImageURL());
      assertEquals("png", bingAerialTileSource0.getExtension());
      assertNull(bingAerialTileSource0.getTermsOfUseText());
      assertEquals(256, bingAerialTileSource0.getTileSize());
      assertEquals("png", bingAerialTileSource0.getTileType());
      assertEquals("http://go.microsoft.com/?linkid=9710837", bingAerialTileSource0.getAttributionLinkURL());
      assertEquals(22, bingAerialTileSource0.getMaxZoom());
      assertEquals(0, bingAerialTileSource0.getMinZoom());
      assertEquals("Bing Aerial Maps", bingAerialTileSource0.getName());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(93, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(93, bufferedImage0.getWidth());
      assertEquals(29, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(29, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.selectedDay.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.isFocusCycleRoot());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.selectedDay.getIgnoreRepaint());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 33, (byte)38, '9');
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(keyEvent0);
      
      String string0 = keyEvent0.paramString();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals("unknown type,keyCode=38,keyText=Up,keyChar='9',modifiers=Shift+Alt Graph,extModifiers=Shift+Alt Graph,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertNotNull(string0);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      System.setCurrentTimeMillis(1607L);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      assertNotNull(sVGGeneratorContext_GraphicContextDefaults0);
      
      Font font0 = sVGGeneratorContext_GraphicContextDefaults0.getFont();
      assertNull(font0);
      
      keyEvent0.consume();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      JDayChooser jDayChooser2 = new JDayChooser(false);
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(1, jDayChooser2.getDay());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertNotNull(jDayChooser2);
      
      jDayChooser2.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(1, jDayChooser2.getDay());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals(0, int0);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      AlphaComposite alphaComposite0 = AlphaComposite.SrcOut;
      assertEquals(1.0F, alphaComposite0.getAlpha(), 0.01F);
      assertEquals(7, alphaComposite0.getRule());
      assertNotNull(alphaComposite0);
      
      sVGGeneratorContext_GraphicContextDefaults0.setComposite(alphaComposite0);
      assertEquals(1.0F, alphaComposite0.getAlpha(), 0.01F);
      assertEquals(7, alphaComposite0.getRule());
      
      boolean boolean2 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser1);
  }
}
