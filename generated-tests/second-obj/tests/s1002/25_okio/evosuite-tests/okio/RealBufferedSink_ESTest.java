/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:00:45 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSink_ESTest extends RealBufferedSink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pipe pipe0 = new Pipe(1025L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.flush();
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-4536));
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).write(realBufferedSink0.buffer, (long) (-4536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pipe pipe0 = new Pipe(1025L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      pipe0.sourceClosed = true;
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("size=%s offset=%s byteCount=%s", charset0);
      realBufferedSink0.writeUtf8CodePoint((-147));
      realBufferedSink0.toString();
      realBufferedSink0.writeInt(1128);
      try { 
        realBufferedSink0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // source is closed
         //
         verifyException("okio.Pipe$PipeSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeShort((-1));
      realBufferedSink1.timeout();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-1));
      BufferedSink bufferedSink1 = realBufferedSink0.writeDecimalLong((-1445L));
      assertSame(bufferedSink1, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      pipe0.sinkClosed = true;
      realBufferedSink0.writeIntLe(86);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null, (-2553), (int) (byte) (-89));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      BufferedSink bufferedSink1 = realBufferedSink0.writeByte(14);
      assertSame(bufferedSink1, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      pipe0.sinkClosed = true;
      int int0 = 86;
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(86);
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8CodePoint(1370);
      HashingSource hashingSource0 = HashingSource.sha1(((RealBufferedSink) bufferedSink0).buffer);
      bufferedSink1.flush();
      hashingSource0.hash();
      hashingSource0.delegate();
      try { 
        bufferedSink1.write((Source) realBufferedSink0.buffer, (long) 86);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(590L);
      // Undeclared exception!
      try { 
        bufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8((String) null, (-2433), (-2433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeIntLe(86);
      realBufferedSink0.writeUtf8CodePoint(86);
      Timeout timeout0 = realBufferedSink0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(1025L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = pipe0.buffer;
      realBufferedSink0.writeAll(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeIntLe(1908874353);
      realBufferedSink0.timeout();
      realBufferedSink0.emit();
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(3434L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      ((RealBufferedSink) bufferedSink0).close();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(byteArray0, (int) (byte) (-89), (int) (byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeByte((-1408));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      ((RealBufferedSink) bufferedSink0).close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      // Undeclared exception!
      try { 
        realBufferedSink0.write(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      ((RealBufferedSink) bufferedSink0).close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        bufferedSink0.writeShortLe((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeHexadecimalUnsignedLong(590L);
      realBufferedSink0.buffer();
      realBufferedSink0.writeLong(590L);
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      Source source0 = hashingSource0.delegate();
      try { 
        realBufferedSink0.write(source0, 3620L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(590L);
      realBufferedSink0.buffer();
      bufferedSink0.writeLong(590L);
      BufferedSink bufferedSink1 = realBufferedSink0.write((Source) buffer1, (-1L));
      assertSame(bufferedSink1, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeIntLe(86);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      hashingSource0.delegate();
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(86);
      BufferedSink bufferedSink1 = realBufferedSink0.writeHexadecimalUnsignedLong(86);
      assertSame(bufferedSink1, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeByte((-1408));
      realBufferedSink0.close();
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.offset = buffer_UnsafeCursor0.offset;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.emit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeLongLe(328L);
      realBufferedSink0.writeAll(buffer0);
      realBufferedSink0.flush();
      realBufferedSink0.flush();
      realBufferedSink0.writeIntLe(86);
      buffer0.writeLong(86);
      int int0 = (-979);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint((-979));
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource0.hash();
      hashingSource0.delegate();
      bufferedSink0.writeUtf8CodePoint(64);
      try { 
        realBufferedSink0.write((Source) buffer0, 8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      long long0 = 8L;
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(8L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.writeAll(realBufferedSink0.buffer);
      realBufferedSink1.flush();
      realBufferedSink1.flush();
      realBufferedSink0.writeIntLe((-1));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      int int0 = 1908874353;
      // Undeclared exception!
      try { 
        realBufferedSink2.writeUtf8CodePoint(1908874353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 71c71c71
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.flush();
      HashingSource.sha256(realBufferedSink0.buffer);
      realBufferedSink0.timeout();
      realBufferedSink0.writeDecimalLong((-529L));
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.buffer.emit();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.close();
      HashingSource.sha1(realBufferedSink1.buffer);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      HashingSource.sha1(buffer0);
      hashingSource0.delegate();
      Pipe pipe1 = new Pipe(1);
      Buffer buffer2 = pipe0.buffer;
      String string0 = "";
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8(")", 2333, (-969));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.size = 3430L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeLong(505L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pipe pipe0 = new Pipe(347L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeHexadecimalUnsignedLong((-7L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(3430L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.close();
      HashingSource.sha1(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        bufferedSink0.writeIntLe(45);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(328L);
      realBufferedSink0.writeAll(buffer0);
      realBufferedSink0.flush();
      bufferedSink0.writeShortLe(2146036556);
      HashingSource hashingSource0 = HashingSource.sha1(((RealBufferedSink) bufferedSink0).buffer);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.delegate();
      bufferedSink0.write((Source) realBufferedSink0.buffer, (long) (-1094));
      HashingSource.sha1(buffer1);
      hashingSource0.hash();
      hashingSource0.delegate();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink1 = realBufferedSink1.write((Source) hashingSource0, (long) (-1094));
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink1);
      realBufferedSink1.timeout();
      buffer0.indexOf(byteString0, 3427L);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        bufferedSink0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        realBufferedSink1.writeUtf8("sink == null");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.size = 3430L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.close();
      realBufferedSource0.require(505L);
      realBufferedSource0.buffer();
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink1.close();
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink1.writeLongLe(3430L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(328L);
      realBufferedSink0.writeAll(buffer0);
      realBufferedSink0.flush();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8CodePoint(0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink2.buffer);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.delegate();
      HashingSource.hmacSha256(((RealBufferedSink) bufferedSink1).buffer, byteString0);
      BufferedSink bufferedSink2 = realBufferedSink1.write((Source) ((RealBufferedSink) bufferedSink0).buffer, (long) (-1629));
      realBufferedSink1.timeout();
      buffer1.indexOf(byteString0, (long) 0);
      realBufferedSink1.writeInt(45);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(bufferedSink2);
      realBufferedSink3.close();
      // Undeclared exception!
      try { 
        realBufferedSink1.writeShort(45);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      ((RealBufferedSink) bufferedSink0).close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)41;
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8CodePoint((-949));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Pipe pipe0 = new Pipe(3430L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.size = 3430L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Pipe pipe0 = new Pipe(1025L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("size=%s offset=%s byteCount=%s", charset0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint((-147));
      realBufferedSink0.toString();
      realBufferedSink0.writeInt(1128);
      realBufferedSink0.close();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.writeLong(58L);
      BufferedSink bufferedSink1 = realBufferedSink1.writeDecimalLong(30L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink1);
      realBufferedSink2.emitCompleteSegments();
      realBufferedSink1.outputStream();
      realBufferedSink1.toString();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((Source) realBufferedSink1.buffer, 15L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Pipe pipe0 = new Pipe(1025L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.flush();
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((Buffer) null, 1025L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      pipe0.sinkClosed = true;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(buffer1);
      realBufferedSink2.close();
      HashingSource.sha1(buffer1);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink4.buffer);
      hashingSource0.read(realBufferedSink0.buffer, 8192L);
      hashingSource0.hash();
      hashingSource0.delegate();
      RealBufferedSink realBufferedSink5 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink3.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      realBufferedSink5.writeAll(buffer2);
      realBufferedSink3.writeShortLe(2093796556);
      realBufferedSink4.writeLong(848L);
      Charset charset0 = Charset.defaultCharset();
      int int0 = 1;
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("d9;0#0Mk3uC(u%wXL", 1, 1, charset0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink2);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-1729));
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(bufferedSink0);
      RealBufferedSink realBufferedSink5 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink3.buffer);
      realBufferedSource0.require(0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink3.buffer);
      Buffer buffer1 = realBufferedSource1.buffer();
      GzipSource gzipSource0 = new GzipSource(realBufferedSink3.buffer);
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink6 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink2.timeout();
      RealBufferedSink realBufferedSink7 = new RealBufferedSink(realBufferedSink2);
      RealBufferedSink realBufferedSink8 = new RealBufferedSink(buffer1);
      long long0 = (-1098L);
      // Undeclared exception!
      try { 
        bufferedSink0.writeDecimalLong(10000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 3434L;
      Pipe pipe0 = new Pipe(3434L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      gzipSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      ((RealBufferedSink) bufferedSink0).close();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)41;
      byteArray0[1] = (byte)41;
      byte byte1 = (byte) (-89);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeInt((byte) (-89));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer0.writeDecimalLong(3138L);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeUtf8("source == this");
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      buffer0.indexOf((byte)36, (long) (byte)36);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      hashingSource0.hash();
      realBufferedSink0.writeLong(8L);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink1);
      HashingSource hashingSource1 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource0.close();
      hashingSource1.hash();
      hashingSource0.delegate();
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(realBufferedSink2.buffer);
      realBufferedSink4.write((Source) realBufferedSink0.buffer, 4L);
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      RealBufferedSink realBufferedSink5 = new RealBufferedSink(buffer1);
      US_ASCII uS_ASCII1 = (US_ASCII)Charset.defaultCharset();
      realBufferedSink5.writeString("size=%s offset=%s byteCount=%s", (Charset) uS_ASCII1);
      realBufferedSink0.close();
      RealBufferedSink realBufferedSink6 = (RealBufferedSink)realBufferedSink2.writeUtf8CodePoint((-147));
      realBufferedSink0.close();
      realBufferedSink5.write(buffer1, (long) 19);
      // Undeclared exception!
      try { 
        realBufferedSink6.writeString("source == this", 1, 2143256317, (Charset) uS_ASCII0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2143256317 > 14
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pipe pipe0 = new Pipe(1025L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("size=%s offset=%s byteCount=%s", charset0);
      realBufferedSink0.writeUtf8CodePoint((-147));
      realBufferedSink0.toString();
      BufferedSink bufferedSink1 = realBufferedSink0.writeInt(1128);
      realBufferedSink0.close();
      Buffer buffer0 = new Buffer();
      realBufferedSink0.write((Source) ((RealBufferedSink) bufferedSink0).buffer, (long) (-147));
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Charset charset1 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        bufferedSink1.writeString("buffer(okio.Pipe$PipeSink@8)", charset1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }
}
