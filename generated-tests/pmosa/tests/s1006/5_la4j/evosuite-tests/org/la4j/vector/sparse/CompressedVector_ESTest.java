/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:28:58 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom((-347));
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      compressedVector0.slice(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-258));
      CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.nonZeroIterator();
      compressedVector0.norm();
      compressedVector0.blankOfLength(37);
      compressedVector0.swapElements(32, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(17, 17);
      compressedVector0.swapElements((-3815), 1377);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toString();
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("OX^:q=PJ3iiNi0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = new CompressedVector(1365, 1957, doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(1957);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      MockRandom mockRandom0 = new MockRandom(27);
      // Undeclared exception!
      try { 
        CompressedVector.random(27, (double) 27, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1166L));
      // Undeclared exception!
      try { 
        CompressedVector.random((-4), 0.0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -4
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(48);
      mockRandom0.nextFloat();
      mockRandom0.nextFloat();
      mockRandom0.doubles();
      mockRandom0.doubles(0L, 0.0, (double) 48);
      CompressedVector.random(48, 0.0, (java.util.Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 7);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("s`>R*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3);
      compressedVector0.setAll(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-44.75);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(2974.831041563008);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1210);
      assertEquals(1210, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      compressedVector0.setAll(3);
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(15, 15);
      compressedVector0.spliterator();
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      int[] intArray0 = new int[5];
      intArray0[0] = 9;
      intArray0[1] = 10;
      intArray0[2] = (-379);
      intArray0[3] = 10;
      intArray0[4] = 9;
      CompressedVector compressedVector0 = new CompressedVector(9, 10, doubleArray0, intArray0);
      compressedVector0.setAll(1.0);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2769.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 13;
      CompressedVector compressedVector0 = new CompressedVector(13);
      compressedVector0.toBinary();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.apply(vectorOperation0);
      compressedVector1.euclideanNorm();
      compressedVector0.manhattanNorm();
      compressedVector1.getOrElse(0, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector1.setAll(13.0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(13, 13.0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      compressedVector0.setAll(3);
      boolean boolean0 = compressedVector0.nonZeroAt(2);
      assertEquals(3, compressedVector0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(1108);
      Long long0 = new Long(1108);
      hashMap0.put(integer0, long0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2973);
      assertEquals(3.363605785401951E-4, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.getOrElse(5, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 9;
      double double0 = (-3112.653930436506);
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        CompressedVector.random(9, (-3112.653930436506), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      compressedVector0.add((double) 1);
      compressedVector0.set(1, (-5080.33331114));
      assertEquals(0.03125, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 7;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-3156), vectorFunction0);
      int int1 = 0;
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      compressedVector0.getOrElse(0, 7);
      VectorVectorOperation<Byte> vectorVectorOperation0 = (VectorVectorOperation<Byte>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      mockRandom0.nextInt(2102744405);
      // Undeclared exception!
      try { 
        Vector.random((-3156), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(13);
      byte[] byteArray0 = compressedVector0.toBinary();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      Integer integer0 = new Integer(13);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.apply(vectorOperation0);
      compressedVector1.euclideanNorm();
      compressedVector0.manhattanNorm();
      compressedVector1.getOrElse(0, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector1.setAll(13.0);
      CompressedVector.fromBinary(byteArray0);
      compressedVector0.eachNonZero((VectorProcedure) null);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(3, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      int[] intArray0 = new int[5];
      intArray0[0] = 9;
      intArray0[1] = 10;
      CompressedVector compressedVector0 = new CompressedVector(2959, 461, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Short.compare((short)2341, (short)461);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList1);
      CompressedVector.zero(1880);
      Vector.constant((short)461, 2728.68);
      boolean boolean0 = compressedVector0.nonZeroAt((-2118850532));
      assertFalse(boolean0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.isZeroAt((-778));
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer((-420));
      Float float0 = new Float((float) (-420));
      hashMap0.put(integer0, float0);
      int int0 = 5;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = Integer.valueOf(5);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(13);
      compressedVector0.toBinary();
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      compressedVector0.swapElements(1994091958, 2080374784);
      double[] doubleArray1 = null;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(0.0);
      // Undeclared exception!
      try { 
        compressedVector1.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1054), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 715;
      doubleArray0[1] = (double) 715;
      doubleArray0[2] = (double) 715;
      doubleArray0[3] = (double) 715;
      doubleArray0[4] = (double) 715;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.norm();
      compressedVector0.blankOfLength(715);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(15);
      Float float0 = new Float((float) 715);
      hashMap0.put(integer0, float0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 715);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-258));
      linkedList0.add(short0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((short) (-258), vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10);
      compressedVector0.setAll(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-563), vectorFunction0);
      assertEquals(10, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      compressedVector0.setAll(3);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-266);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 1;
      int[] intArray0 = new int[4];
      intArray0[0] = (-266);
      intArray0[1] = (-266);
      intArray0[2] = (-266);
      intArray0[3] = 3772;
      CompressedVector compressedVector1 = new CompressedVector(3772, 3, doubleArray0, intArray0);
      compressedVector1.swapElements((-266), 3);
      assertArrayEquals(new int[] {(-266), (-266), 3, 3772}, intArray0);
      assertArrayEquals(new double[] {0.0, 3.0, (-266.0), 3.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 715;
      doubleArray0[1] = (double) 715;
      doubleArray0[3] = (double) 715;
      doubleArray0[4] = (double) 715;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.norm();
      compressedVector0.blankOfLength(715);
      compressedVector0.swapElements(0, 29);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1, 1);
      compressedVector0.setAll(1);
      compressedVector0.swapElements(2495, (-1033));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(13);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      Integer.getInteger("i=Us");
      compressedVector1.euclideanNorm();
      double double0 = compressedVector1.manhattanNorm();
      assertEquals(52.0, double0, 0.01);
      
      double double1 = compressedVector1.getOrElse(0, (-4176.638));
      assertEquals((-4176.638), double1, 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(4, compressedVector2.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.norm();
      compressedVector0.swapElements(32, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll((-1.0));
      compressedVector0.set(0, 0);
      assertEquals(0.96875, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap1, 26);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 715;
      doubleArray0[1] = (double) 715;
      doubleArray0[3] = (double) 715;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.norm();
      compressedVector0.blankOfLength(720);
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(2145.0, double0, 0.01);
      
      compressedVector0.swapElements((-2335), 720);
      compressedVector0.swapElements(715, 37);
      assertEquals(3, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 715;
      doubleArray0[1] = (double) 715;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.norm();
      compressedVector0.blankOfLength(715);
      compressedVector0.swapElements(37, (-1962));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1962), 3136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.norm();
      compressedVector0.swapElements(32, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll((-1.0));
      compressedVector0.set(0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      compressedVector0.swapElements((-3810), 16);
      assertEquals(0.96875, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-63), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.setAll(32);
      compressedVector0.set(29, 0);
      compressedVector0.swapElements((-1190), 0);
      assertEquals(0.96875, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.nonZeroIterator();
      compressedVector0.blankOfLength(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)37, 309.37, (double)32, (double)0, (-4758.3464)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector0 = compressedVector0.transform(vectorFunction0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.blankOfLength(32);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.eachNonZero(vectorProcedure0);
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copyOfLength(32);
      compressedVector1.nonZeroAt((-1630));
      compressedVector2.set(26, 37);
      // Undeclared exception!
      try { 
        vector0.updateAt(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(32, 32);
      compressedVector0.norm();
      compressedVector0.swapElements(32, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll((-1.0));
      compressedVector0.set(0, (-3686.91711417));
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-1660));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2);
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, (-50));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.norm();
      compressedVector0.swapElements(0, 1976);
      compressedVector0.setAll(32);
      compressedVector0.set(0, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0.96875, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(7);
      compressedVector0.setAll(1.0);
      compressedVector0.swapElements(5, 5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(6, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(27);
      compressedVector0.norm();
      compressedVector0.swapElements(27, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll((-1.0));
      compressedVector0.set(0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      compressedVector0.set(0, 0.0);
      assertEquals(0.9629629629629629, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3066);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-3810);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (-3066);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-3066);
      intArray0[3] = 0;
      intArray0[4] = 0;
      CompressedVector compressedVector1 = new CompressedVector(27, (-3066), doubleArray0, intArray0);
      compressedVector1.setAll(2058.15);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(60);
      Integer integer0 = new Integer(60);
      compressedVector0.swapElements(60, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll((-1.0));
      compressedVector0.set(0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      compressedVector0.swapElements((-3810), 16);
      compressedVector0.swapElements(48, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(59, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.setAll(32);
      compressedVector0.set(29, 0);
      Vector vector0 = compressedVector0.copy();
      compressedVector0.add(vector0);
      compressedVector0.subtract((double) 29);
      compressedVector0.swapElements(176, 32);
      assertEquals(31, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements(854, 854);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.toMatrixMarket();
      compressedVector0.update(vectorFunction0);
      compressedVector0.setAll((-1.0));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(10, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1783.153668125617;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1783.153668125617).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("org.la4j.matrix.sparse.CCSMatrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      CompressedVector compressedVector1 = new CompressedVector();
      compressedVector0.toMatrixMarket();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 29;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(29, vectorFunction0);
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 29;
      doubleArray0[4] = (double) 32;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector2.update(vectorFunction1);
      compressedVector0.setAll(29.0);
      compressedVector0.swapElements(10, 29);
      assertEquals(32, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32);
      compressedVector0.toCSV();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)32, (double)32, (double)32, 2313.1331903128, (double)32).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2313.1331903128, 1.0, 2986.348374, 2313.1331903128, 594.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction1);
      compressedVector0.setAll(3864.748025493);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(32, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
