/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:20:30 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.name = "com.google.re2j.Simplify$1";
      regexp0.reinit();
      regexp0.flags = 32;
      regexp0.max = 32;
      Simplify.simplify(regexp0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp3);
      regexp0.reinit();
      Regexp regexp4 = Simplify.simplify(regexp0);
      assertNotNull(regexp4);
      
      regexp4.max = 0;
      regexp3.cap = 2;
      regexp4.name = "com.google.re2j.Simplify$1";
      regexp4.min = (-2945);
      Simplify.simplify(regexp4);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp5);
      Regexp regexp6 = Simplify.simplify(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp7 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp6;
      Regexp regexp8 = new Regexp(regexp0);
      regexpArray0[3] = regexp8;
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp0;
      regexp6.min = 0;
      regexp7.subs = regexpArray0;
      Regexp regexp9 = Simplify.simplify(regexp7);
      assertSame(regexp7, regexp9);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = (-1304);
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2526);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.min = (-28);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.reinit();
      regexp2.max = (-1399);
      regexp2.name = "com.google.re2j.Regexp$1";
      int[] intArray0 = new int[2];
      intArray0[0] = (-1399);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2530);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.min = (-502);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp2;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2530);
      intArray0[3] = (-502);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op1;
      intArray0[4] = (-2530);
      intArray0[5] = (-2530);
      regexp1.runes = intArray0;
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp2.cap = 92;
      Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp_Op0);
      Regexp regexp7 = Simplify.simplify(regexp4);
      regexp3.name = "F";
      Regexp regexp8 = new Regexp(regexp3);
      regexp8.reinit();
      Simplify.simplify(regexp8);
      assertNotSame(regexp3, regexp7);
      
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp2);
      Regexp regexp9 = Simplify.simplify(regexp6);
      assertTrue(regexp9.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.min = (-502);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2530);
      regexp0.min = 32;
      intArray0[3] = 32;
      intArray0[4] = (-2530);
      intArray0[5] = (-2530);
      intArray0[7] = (-2530);
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.cap = 66;
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp0);
      regexp3.min = (-42);
      Regexp regexp4 = Simplify.simplify(regexp3);
      regexp4.reinit();
      Regexp regexp5 = new Regexp(regexp4);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp2);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2530);
      regexp0.reinit();
      regexp0.min = (-502);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexp0.min = 1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.cap = 1;
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp regexp5 = new Regexp(regexp4);
      Regexp regexp6 = new Regexp(regexp0);
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp1);
      Regexp regexp7 = Simplify.simplify(regexp2);
      assertSame(regexp2, regexp7);
      
      Regexp regexp8 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp8);
      Regexp regexp9 = Simplify.simplify(regexp6);
      Regexp regexp10 = Simplify.simplify(regexp1);
      assertFalse(regexp10.equals((Object)regexp9));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2530);
      regexp0.reinit();
      regexp0.min = (-503);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2530);
      regexp0.min = 1;
      intArray0[3] = 1;
      intArray0[4] = (-2530);
      intArray0[5] = (-2530);
      intArray0[7] = (-2530);
      regexpArray0[3] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexp0.runes = intArray0;
      regexp0.subs = regexpArray0;
      regexp1.cap = 66;
      Regexp regexp2 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp3 = null;
      Simplify.simplify(regexp2);
      Regexp regexp4 = null;
      try {
        regexp4 = new Regexp(regexpArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2530);
      regexp0.reinit();
      regexp0.min = (-502);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp[] regexpArray0 = new Regexp[4];
      regexp0.min = (-2530);
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.cap = 92;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2530);
      regexp0.min = (-502);
      Regexp[] regexpArray0 = new Regexp[5];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray1 = new Regexp[4];
      regexpArray0[3] = regexp1;
      int[] intArray0 = new int[8];
      intArray0[1] = (-2530);
      Regexp regexp2 = Simplify.simplify(regexpArray1[0]);
      Simplify.simplify(regexp2);
      Regexp regexp3 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp3);
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp4 = new Regexp(regexp_Op1);
      Simplify.simplify((Regexp) null);
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      Regexp regexp5 = new Regexp(regexp_Op2);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2530);
      regexp0.reinit();
      regexp0.min = (-2530);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      int[] intArray0 = new int[14];
      intArray0[0] = 0;
      intArray0[1] = (-2530);
      intArray0[3] = (-2530);
      intArray0[4] = (-2530);
      intArray0[7] = (-2530);
      regexp0.runes = intArray0;
      intArray0[8] = 0;
      regexp0.min = (-81);
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.cap = 92;
      Regexp regexp3 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp2);
      Regexp regexp5 = new Regexp(regexp4);
      Regexp regexp6 = Simplify.simplify(regexp0);
      Regexp regexp7 = Simplify.simplify(regexp0);
      Regexp regexp8 = Simplify.simplify(regexp6);
      assertTrue(regexp8.equals((Object)regexp7));
      
      Regexp[] regexpArray1 = new Regexp[8];
      regexpArray1[0] = regexp0;
      Regexp regexp9 = new Regexp(regexp2);
      regexpArray1[1] = regexp9;
      regexpArray1[2] = regexp7;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp10 = new Regexp(regexp_Op1);
      regexpArray1[3] = regexp10;
      Regexp regexp11 = new Regexp(regexp2);
      regexpArray1[4] = regexp11;
      Simplify.simplify(regexp9);
      Regexp regexp12 = new Regexp(regexp2);
      regexpArray1[6] = regexp12;
      regexpArray1[7] = regexp4;
      regexp8.subs = regexpArray1;
      Simplify.simplify(regexp8);
      assertFalse(regexp6.equals((Object)regexp3));
      
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp4);
      assertFalse(regexp2.equals((Object)regexp7));
  }
}
