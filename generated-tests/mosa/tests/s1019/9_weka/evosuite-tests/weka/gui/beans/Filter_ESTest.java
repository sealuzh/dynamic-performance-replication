/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:51:03 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.HierarchyListener;
import java.beans.EventSetDescriptor;
import java.util.Enumeration;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.clusterers.SimpleKMeans;
import weka.core.ChebyshevDistance;
import weka.core.EuclideanDistance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffSaver;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.beans.Appender;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.Saver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeInstanceListener((InstanceListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("jwXP<%(M");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      filter0.removeHierarchyListener((HierarchyListener) null);
      filter0.getFilter();
      boolean boolean0 = filter0.eventGeneratable(" is currently batch processing!");
      assertFalse(boolean0);
      
      filter0.enumerateRequests();
      filter0.addTestSetListener((TestSetListener) null);
      filter0.disconnectionNotification(" is currently batch processing!", (Object) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(stratifiedRemoveFolds0, (Instances) null, 0, 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addDataSourceListener(classAssigner0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesNoClass();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      BeanVisual beanVisual0 = classAssigner0.getVisual();
      filter0.setVisual(beanVisual0);
      assertEquals("ClassAssigner", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.removeTestSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("G5\"`rjJFyUGo2'&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // G5\"`rjJFyUGo2'& not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      filter0.enumerateRequests();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      DataSetEvent dataSetEvent0 = new DataSetEvent(globalInfoJavadoc0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("q[U,phg0Of/");
      filter0.setCustomName("q[U,phg0Of/");
      filter0.getInsets();
      InstanceEvent instanceEvent0 = new InstanceEvent("q[U,phg0Of/");
      filter0.acceptInstance(instanceEvent0);
      filter0.globalInfo();
      filter0.getVisual();
      filter0.getCustomName();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0, 3, 1);
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addDataSourceListener(classAssigner0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceEvent0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("q[U,phg0Of/", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      saver0.revalidate();
      filter0.addTrainingSetListener(saver0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      textDirectoryLoader0.getRevision();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(chebyshevDistance0, instances0, 52, 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.addDataSourceListener(classValuePicker0);
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      DataSetEvent dataSetEvent0 = new DataSetEvent(clustererPerformanceEvaluator0, instances0);
      Filter filter1 = new Filter();
      filter1.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setWrappedAlgorithm(classOrder0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(manhattanDistance0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.m_visual = null;
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptDataSet((DataSetEvent) null);
      assertFalse(filter0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("fD", "fD");
      filter0.connectionNotification("fD", filter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("i9AMvnToU[SWN", "i9AMvnToU[SWN");
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("q[U,phg0Of/", "q[U,phg0Of/");
      boolean boolean0 = filter0.eventGeneratable("q[U,phg0Of/");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter1.connectionNotification("'POc+|'aM%b#`d&t", filter0);
      filter1.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Filter filter1 = new Filter();
      filter0.addTestSetListener(filter1);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      TestSetEvent testSetEvent0 = new TestSetEvent(filter1, instances0);
      filter0.acceptTestSet(testSetEvent0);
      // Undeclared exception!
      try { 
        filter1.setWrappedAlgorithm(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.Integer : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.connectionNotification("dataSet", crossValidationFoldMaker0);
      filter0.connectionNotification("gJ5Q", "dataSet");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      filter0.removeAll();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.acceptInstance(instanceEvent0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instanceEvent0.setInstance(sparseInstance0);
      Enumeration enumeration0 = filter0.enumerateRequests();
      Appender appender0 = new Appender();
      filter0.addInstanceListener(appender0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.removeTrainingSetListener(appender0);
      ArffSaver arffSaver0 = new ArffSaver();
      arffSaver0.getInstances();
      DataSetEvent dataSetEvent0 = new DataSetEvent(enumeration0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Filter filter0 = new Filter();
      filter0.setLog(logPanel0);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("instance", "instance");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.connectionNotification("Na!&ta1", substringLabeler0);
      filter0.eventGeneratable("Na!&ta1");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(stratifiedRemoveFolds0, instances0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.acceptTrainingSet(trainingSetEvent0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression0, instances0, 0, 0, (-2), 29);
      filter0.acceptTestSet(testSetEvent0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      filter0.connectionNotification("Na!&ta1", clusterer0);
      filter0.eventGeneratable("Na!&ta1");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.connectionNotification("dataSet", "dataSet");
      filter0.connectionNotification("testSet", crossValidationFoldMaker0);
  }
}
