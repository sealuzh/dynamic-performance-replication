/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 12:22:08 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.data.DataFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowInputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.removeComments("getDeleteCascadeUpdateResultSet");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getDeleteCascadeUpdateResultSet";
      String string0 = SQLUtil.join("getDeleteCascadeUpdateResultSet", "getDeleteCascadeUpdateResultSet", stringArray0, (String) null, "getDeleteCascadeUpdateResultSet", stringArray0);
      assertEquals("getDeleteCascadeUpdateResultSet join null as getDeleteCascadeUpdateResultSet on getDeleteCascadeUpdateResultSet.getDeleteCascadeUpdateResultSet = getDeleteCascadeUpdateResultSet.getDeleteCascadeUpdateResultSet", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.removeComments("m$pq%4))");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      System.setCurrentTimeMillis((-710L));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OfYoNWA?7S4g8<8?5H";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(OfYoNWA?7S4g8<8?5H)");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDDL("UB?+bk@");
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.parseColumnTypeAndSize("Illegal column type format: ");
      DBSchema dBSchema0 = new DBSchema("Illegal column type format: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UB?+bk@", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "UB?+bk@";
      stringArray0[1] = "Illegal column type format: ";
      stringArray0[2] = "Illegal column type format: ";
      stringArray0[3] = "Illegal column type format: ";
      stringArray0[4] = "Illegal column type format: ";
      stringArray0[5] = "UB?+bk@";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("index not droped: ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("index not droped: ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("alter session");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.removeComments("execute");
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop table,d(kn");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexy,y'e`wx\"j8q");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create unique indexy,y'e`wx\"j8q");
      SQLUtil.removeComments("@)(\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@)(\"");
      Boolean boolean0 = SQLUtil.mutatesStructure("call@)(\"g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.removeComments("updateClob(");
      boolean boolean0 = SQLUtil.isDDL("updateClob(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.removeComments("selectd`2 vdb>_j0.kh");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectd`2 vdb>_j0.kh");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringBuilder stringBuilder0 = new StringBuilder("g");
      SQLUtil.addOptionalCondition("g", stringBuilder0);
      String string0 = FBConnectionProperties.PASSWORD_PROPERTY;
      assertEquals("password", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = "()";
      stringArray1[1] = "()";
      stringArray1[2] = "()";
      String string1 = SQLUtil.renderColumnListWithTableName("()", stringArray1);
      assertEquals("().(), ().(), ().()", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("innpr", false, "innpr", "innpr");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT innpr ", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderColumnListWithTableName("innpr", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("U3<O jZBR8#5kaqEi", "U3<O jZBR8#5kaqEi", (VersionNumber) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("U3<O jZBR8#5kaqEi", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " REFERENCES ";
      stringArray0[1] = " REFERENCES ";
      stringArray0[2] = "a[,'RcjY";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = " REFERENCES ";
      stringArray0[5] = "a[,'RcjY";
      stringArray0[6] = "a[,'RcjY";
      stringArray0[7] = " REFERENCES ";
      String string0 = SQLUtil.join(" REFERENCES ", "a[,'RcjY", stringArray0, "XD004.S", " root=", stringArray0);
      assertEquals(" REFERENCES  join XD004.S as  root= on a[,'RcjY. REFERENCES  =  root=. REFERENCES  and a[,'RcjY. REFERENCES  =  root=. REFERENCES  and a[,'RcjY.a[,'RcjY =  root=.a[,'RcjY and a[,'RcjY. REFERENCES  =  root=. REFERENCES  and a[,'RcjY. REFERENCES  =  root=. REFERENCES  and a[,'RcjY.a[,'RcjY =  root=.a[,'RcjY and a[,'RcjY.a[,'RcjY =  root=.a[,'RcjY and a[,'RcjY. REFERENCES  =  root=. REFERENCES ", string0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("GsAO-v<TNKSJ?ldmf", "", versionNumber0);
      versionNumber0.toString();
      SQLUtil.ownerDotComponent(defaultDatabase0);
      String string1 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("GsAO-v<TNKSJ?ldmf", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.removeComments("getDeleteCascadeUpdateResultSet");
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getDeleteCascadeUpdateResultSet", true, "getArray(", "getDeleteCascadeUpdateResultSet");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT getDeleteCascadeUpdateResultSet ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = LogToFile.TEST_MAX_LOGFILE_NUMBER;
      SQLUtil.isQuery("select42877");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string1 = FBConnectionProperties.TIMESTAMP_USES_LOCAL_TIMEZONE_PROPERTY;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("timestampUsesLocalTimezone", (String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("innpr");
      TableContainer tableContainer0 = new TableContainer("innpr");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container innpr", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/8M]";
      stringArray0[1] = null;
      stringArray0[2] = "/8M]";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "/8M]";
      stringArray0[7] = "/8M]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/8M]", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string0 = "/R6rF&\\uV~#}";
      stringArray0[1] = string0;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string1 = SQLUtil.leftJoin("", stringArray0, "org.apache.derby.impl.sql.compile.VarbitConstantNode", "43X26.U", stringArray0);
      assertEquals("left join org.apache.derby.impl.sql.compile.VarbitConstantNode as 43X26.U on . = 43X26.U. and ./R6rF&\\uV~#} = 43X26.U./R6rF&\\uV~#} and . = 43X26.U. and . = 43X26.U. and . = 43X26.U. and . = 43X26.U.", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.normalize("ROUND", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ROUND";
      stringArray0[1] = "ROUND";
      stringArray0[2] = "ROUND";
      stringArray0[3] = "ROUND";
      stringArray0[4] = "ROUND";
      stringArray0[5] = "ROUND";
      stringArray0[6] = "ROUND";
      SQLUtil.innerJoin("ROUND", stringArray0, "ROUND", (String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 0;
      DBDataType.getInstance(0, "prepareCall");
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = "91S)kE";
      try { 
        Integer.decode("91S)kE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"91S)kE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1952257859), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("t$", (DBTable) null, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("insert", (DBTable) null, (-1952257859), "");
      String string0 = SQLUtil.substituteMarkers("call", "t$", "t$");
      assertEquals("call", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("- ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("exec-", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      int int0 = 90124;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(90124);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      String string0 = " NULL";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "exec-";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " NULL", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = ".ua])':";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "A}%8{2_Z<qU&$";
      stringArray0[5] = ".ua])':";
      stringArray0[6] = "";
      String string0 = SQLUtil.join("", ".ua])':", stringArray0, "CJg(_m'L[gpYdg~+A-", "", stringArray0);
      assertEquals("CJg(_m'L[gpYdg~+A- as  on .ua])':. = . and .ua])':..ua])': = ..ua])': and .ua])':. = . and .ua])':. = . and .ua])':.A}%8{2_Z<qU&$ = .A}%8{2_Z<qU&$ and .ua])':..ua])': = ..ua])': and .ua])':. = .", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1952257859), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("t$", (DBTable) null, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("insert", (DBTable) null, (-1952257859), "");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("t$", (DBTable) null, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn1.setSize(integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.isDML("");
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDDL("y,y'E`wX\"J8Q");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("0A000.S");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance((-376499788), "innpr");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("innpr", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("innpr INNPR(1) NULL");
      SQLUtil.parseColumnTypeAndSize("INNPR(1)");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = "alter materialized view";
      String string0 = SQLUtil.renderColumnListWithTableName("alter materialized view", stringArray0);
      assertEquals("alter materialized view.alter materialized view, alter materialized view.alter materialized view, alter materialized view.alter materialized view, alter materialized view.alter materialized view, alter materialized view.alter materialized view", string0);
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9@L4Yoiv%k)D36lA`", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" DEFAULT ");
      boolean boolean0 = SQLUtil.isDML("alter materialized view");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.normalize("y(YXD", false);
      assertEquals("y (YXD", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      String[] stringArray0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.renderValue((Object) null);
      // Undeclared exception!
      try { 
        dBPrimaryKeyConstraint0.addColumnName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("g", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("- 0", true);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create materialized view");
      DBPackage dBPackage0 = new DBPackage("-mW ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("QG<KYSh`", dBPackage0);
      String string0 = SQLUtil.typeAndName(dBProcedure0);
      assertEquals("procedure QG<KYSh`", string0);
      
      dBSchema0.getTable("D/Fo@Sl`#zVs}n~3uC.");
      DBTrigger dBTrigger0 = new DBTrigger("k]SSaEVtD=guPA+", dBSchema0);
      dBTrigger0.equals((Object) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "QG<KYSh`";
      stringArray0[1] = "QG<KYSh`";
      stringArray0[2] = "ALTER TABLE ";
      stringArray0[3] = "W,a/vl'ovPP";
      stringArray0[4] = "hVmsn]#";
      stringArray0[5] = "CACHE_TYPE";
      stringArray0[6] = "QG<KYSh`";
      String string1 = SQLUtil.renderColumnListWithTableName("k]SSaEVtD=guPA+", stringArray0);
      assertEquals("k]SSaEVtD=guPA+.QG<KYSh`, k]SSaEVtD=guPA+.QG<KYSh`, k]SSaEVtD=guPA+.ALTER TABLE , k]SSaEVtD=guPA+.W,a/vl'ovPP, k]SSaEVtD=guPA+.hVmsn]#, k]SSaEVtD=guPA+.CACHE_TYPE, k]SSaEVtD=guPA+.QG<KYSh`", string1);
      
      DBSchema dBSchema1 = new DBSchema("CACHE_TYPE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tablexsqey%", dBSchema1);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("rC,Y5,h/k**+haH");
      boolean boolean0 = SQLUtil.isDML(")");
      assertFalse(boolean0);
      
      String string2 = SQLUtil.normalize("-- chain: ", false);
      assertEquals("-- chain :", string2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.removeComments("J");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = DataFactory.DB_EX_LOCKFILE_NAME;
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      String string2 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string2);
      
      String string3 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  UNIQUE ()", string3);
      
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      String string4 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "H|~s<Z/\\#ZK";
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("H|~s<Z/#ZK");
      DBTrigger dBTrigger0 = new DBTrigger("5Vu\"D$'uP|l", (DBSchema) null);
      SQLUtil.typeAndName(dBCatalog0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("ar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'ar'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.removeComments("J");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("J");
      String string0 = SQLUtil.normalize("8*359Mdrbkb;", true);
      assertEquals("8 * 359Mdrbkb ;", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RowInputTextLog rowInputTextLog0 = new RowInputTextLog();
      DataInputStream dataInputStream0 = new DataInputStream(rowInputTextLog0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charsetDecoder0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter indexdn", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      TableContainer tableContainer0 = new TableContainer("c013=00d-00fb-2s42-07ec-000000134f30");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema("?=G,T8G6");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("_T");
      SQLUtil.isDML("w(");
      SQLUtil.normalize("?=G,T8G6", false);
      defaultDBTable0.getPrimaryKeyConstraint();
      Object object0 = null;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getCurrentConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "insertalter materialized view";
      stringArray0[4] = "insertalter materialized view";
      stringArray0[2] = "insertalter materialized view";
      stringArray0[3] = "insertalter materialized view";
      stringArray0[4] = "insertalter materialized view";
      String string0 = SQLUtil.renderColumnListWithTableName("insertalter materialized view", stringArray0);
      assertEquals("insertalter materialized view.insertalter materialized view, insertalter materialized view.null, insertalter materialized view.insertalter materialized view, insertalter materialized view.insertalter materialized view, insertalter materialized view.insertalter materialized view", string0);
      
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u!{s9EjP^`)qt*K&", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("insertalter materialized view");
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.normalize("setBigDecimal(String,BigDecimal)", true);
      assertEquals("setBigDecimal (String, BigDecimal)", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "indexOfSessionTableNamesInSavedObjects";
      SQLUtil.renderColumnListWithTableName(" (>f$`", stringArray0);
      DBSchema dBSchema0 = new DBSchema(" (>f$`");
      DataStore dataStore0 = new DataStore("alter materialized view");
      VirtualFile virtualFile0 = new VirtualFile("truncate0a000.s", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "indexOfSessionTableNamesInSavedObjects");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOB SUB_TYPE <0");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("BLOB SUB_TYPE <0", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("AXr(!]FnqR4tF", false, "AXr(!]FnqR4tF", "acos(double)");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      stringArray0[1] = "CgVn`^7A7P2XS?O";
      stringArray0[2] = "select";
      stringArray0[3] = "AXr(!]FnqR4tF";
      stringArray0[4] = "pZR+;bs!`;";
      stringArray0[5] = "acos(double)";
      String string0 = SQLUtil.renderColumnListWithTableName("select", stringArray0);
      assertEquals("select.(, select.CgVn`^7A7P2XS?O, select.select, select.AXr(!]FnqR4tF, select.pZR+;bs!`;, select.acos(double)", string0);
      
      DBSchema dBSchema0 = new DBSchema("u3G[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" join ");
      boolean boolean0 = SQLUtil.isDML(" DEFAULT ");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.normalize("delete0a000.s", false);
      assertEquals("delete0a000.s", string1);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "CgVn`^7A7P2XS?O";
      stringArray1[1] = "select.(, select.CgVn`^7A7P2XS?O, select.select, select.AXr(!]FnqR4tF, select.pZR+;bs!`;, select.acos(double)";
      stringArray1[2] = "(";
      stringArray1[3] = "delete0a000.s";
      String string2 = SQLUtil.renderWhereClause(stringArray1, stringArray1);
      assertEquals("CgVn`^7A7P2XS?O = 'CgVn`^7A7P2XS?O' AND select.(, select.CgVn`^7A7P2XS?O, select.select, select.AXr(!]FnqR4tF, select.pZR+;bs!`;, select.acos(double) = 'select.(, select.CgVn`^7A7P2XS?O, select.select, select.AXr(!]FnqR4tF, select.pZR+;bs!`;, select.acos(double)' AND ( = '(' AND delete0a000.s = 'delete0a000.s'", string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("z#bZA/^BLu*lp1?[`");
      tableContainer0.getTable("@FDs*F/p6=Q):Wf");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", (DBTable) null, 2904, "z#bZA/^BLu*lp1?[`");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("Z#BZA/^BLU*LP1?[`", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance((-376499788), "O0zGuZ~1xR[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("innpr", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("innpr");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.removeComments("J");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      DataStore dataStore0 = new DataStore("J");
      VirtualFile virtualFile0 = new VirtualFile("truncate0a000.s", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "g");
      dataStore0.listChildren("g");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("BLOB SUB_TYPE <0");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("create unique indexy,y'e`wx\"j8q");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",>NCLOB");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("EH");
      String string0 = SQLUtil.normalize("create unique indexy,y'e`wx\"j8q", true);
      assertEquals("create unique indexy, y 'e`wx\"j8q'", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "create unique indexy,y'e`wx\"j8q";
      SQLUtil.isQuery("create unique indexy,y'e`wx\"j8q");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBTable0.getForeignKeyConstraints();
      DBDataType dBDataType0 = DBDataType.getInstance(4, "insert");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4?3zs5", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder(4);
      SQLUtil.addRequiredCondition("E+@V^7'bgXr\"", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.impl.sql.execute.BaseActivation");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexy,y'e`wx\"j8q", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("#a:ike]9.eo}S");
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " NULL";
      stringArray0[1] = "5fauhe";
      stringArray0[2] = "create unique indexy,y'e`wx\"j8q";
      stringArray0[3] = "#a:ike]9.eo}S";
      stringArray0[4] = "cToO@ld.";
      stringArray0[5] = "5fauhe";
      stringArray0[6] = "deletevzc)acs@6r77z7";
      stringArray0[7] = "cToO@ld.";
      stringArray0[8] = "";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" WHERE ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.removeComments("J");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("hdwyHO5PPa>f.-");
      SQLUtil.normalize("7wL1U[g=hfSH3I,a", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-230319036), "Bg2McV{Y2l')");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      try { 
        MockURI.URI("org.apache.derby.vti.VTICosting", "drop materialized view", "~$.d>-#>82V)", (-230319036), "@wDq4 $dpNG61C-I", "J", "<!n:[{+Y(f7Mb");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.apache.derby.vti.VTICosting://drop%20materialized%20view@~$.d>-#>82V):-230319036@wDq4%20$dpNG61C-I?J#%3C!n:[%7B+Y(f7Mb
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("indexOfSessionTableNamesInavedObjcts", false, "3AQE4k", "indexOfSessionTableNamesInavedObjcts");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("drop indexcall@)(\"g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: drop indexcall@)(\"g
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-91);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%y>9cC_<N=Cw4^/N";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "J", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Database name/path is required.", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kf_oh=^2 Of?(rSv", defaultDBTable0, (byte) (-69), "cally%o_bfq");
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      String string1 = SQLUtil.removeComments("%y>9cC_<N=Cw4^/N");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = BTree.PROPERTY_ALLOWDUPLICATES;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("kwZ@]Q2yA^\"~&1");
      SQLUtil.normalize("kwZ@]Q2yA^\"~&1", true);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      ContextManager contextManager0 = null;
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AXr(!]FnqR4tF");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(4, "AXr(!]FnqR4tF");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("AXr(!]FnqR4tF", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = RawStoreFactory.MODULE;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("AXr(!]FnqR4tF AXR(!]FNQR4TF(0) NULL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!]FnqR4tF AXR(!]FNQR4TF(0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.isQuery("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(4, "insert");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4?3zs5", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("4?3zs5 INSERT(1) NULL");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("insert");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4?3zs5", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("4?3zs5 NCLOB NULL", string0);
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("4?3zs5 NCLOB NULL");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4?3zs5 NCLOB NULL";
      stringArray0[1] = "NCLOB";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "insert";
      stringArray1[1] = "4?3zs5";
      stringArray1[2] = "4?3zs5";
      stringArray1[3] = "NCLOB";
      stringArray1[4] = "4?3zs5 NCLOB NULL";
      String string1 = SQLUtil.innerJoin("NCLOB", stringArray0, "4?3zs5 NCLOB NULL", "NCLOB", stringArray1);
      assertEquals("4?3zs5 NCLOB NULL as NCLOB on NCLOB.4?3zs5 NCLOB NULL = NCLOB.insert and NCLOB.NCLOB = NCLOB.4?3zs5", string1);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized viewdefault", false, defaultDBTable0, stringArray1, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (insert, 4?3zs5, 4?3zs5, NCLOB, 4?3zs5 NCLOB NULL) REFERENCES NCLOB(4?3zs5 NCLOB NULL, NCLOB)", string2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("indexOfSessionTableNamesInSavedObjcts", false, "3AQE4k", "indexOfSessionTableNamesInSavedObjcts");
      StringBuilder stringBuilder0 = new StringBuilder("3AQE4k");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK indexOfSessionTableNamesInSavedObjcts", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexy,y'e`wx\"j8q");
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.normalize("alter tablez}/d", true);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablez}/d");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
      
      SQLUtil.removeComments("0%Xm]T^]W'*P");
      String string1 = SQLUtil.normalize("0%Xm]T^]W'*P", false);
      assertEquals("0 % Xm ] T ^ ] W '*P'", string1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("g", stringBuilder0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "g", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      String string0 = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_STRING;
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("g", stringBuilder0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "g", false, stringArray0);
      dBPrimaryKeyConstraint0.setName((String) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      String string0 = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_STRING;
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = BTree.PROPERTY_UNIQUE_WITH_DUPLICATE_NULLS;
      DataStore dataStore0 = new DataStore("0 LOB");
      dataStore0.getEntry("CHECK ");
      dataStore0.listChildren("3$-Ul");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0 LOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("uniqueWithDuplicateNulls");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uniqueWithDuplicateNulls", defaultDBTable0, 1637, "CHECK ");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance((-376499788), "updateClob(int, Reader)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updateClob(int, Reader)", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("UPDATECLOB(INT, READER)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"INT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
