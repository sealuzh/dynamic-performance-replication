/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 01:16:45 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" :Q Wsz");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("Ws", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("</U");
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&bUv<>6$_3");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a(dpF4*9bmO_kN7{ju>");
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nOtk");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" :Q Wsz");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      boolean boolean0 = xPathLexer0.isIdentifierChar('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("XV4J|fST;_cG0P");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&bUv<>6$_3");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(">6", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("_3", token4.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~}_fvUitLV{S$x");
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%)4hVAtzt_9kZFK");
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#]WiSpH&z\"7CLv");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!,]-t=");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A84&9B)53+z#vG");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("9", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(")", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      char char0 = xPathLexer0.LA(1);
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&.T:+Ezp1P0K]z.{");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      char char0 = xPathLexer0.LA(1);
      assertEquals('T', char0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3!oi|=l?PC\"o ");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("</U");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('1');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" :Q Wsz");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      boolean boolean0 = xPathLexer0.isIdentifierChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A84&9B)53+z#vG");
      boolean boolean0 = xPathLexer0.isIdentifierChar('8');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.isIdentifierChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5A\"7V\"RS8ol#`Pr$,");
      xPathLexer0.consume(0);
      assertEquals("5A\"7V\"RS8ol#`Pr$,", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X9m*=Jqx#DL[4q{$");
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      char char0 = xPathLexer0.LA(1174);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nOtk");
      xPathLexer0.consume((-636));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'AOWn/M4]o)h");
      xPathLexer0.consume((-1994));
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Crf;6`*?*7FiH=fd!");
      xPathLexer0.consume((-780));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.consume((-2086));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<=_;&:~pFHV~[|gzy");
      xPathLexer0.consume((-2322));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z{2SIvy^[Vh:~ r!..");
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2212));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("orlw>z(S");
      String string0 = xPathLexer0.getXPath();
      assertEquals("orlw>z(S", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<=_;&:~pFHV~[|gzy");
      Token token0 = xPathLexer0.relationalOperator();
      assertNotNull(token0);
      assertEquals(8, token0.getTokenType());
      assertEquals("<=", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j\"\"N[\"wda");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("\"", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(27, token2.getTokenType());
      assertEquals("N[", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("w", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("d", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xf9Y(Q/wg(F");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("xf", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("Y", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("(", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("Q", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("orlw>z(S");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2xM qS:Gd|moD}&");
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.dollar();
      xPathLexer0.not();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d6e nAgCaMhPFnce1B");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j\"\"N[\"wda");
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[Bv,1pBw._9`.Kq");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("[", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("B", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("v", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(32, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("1pBw._9", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("65Mke<4zy%h");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("6", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("5Mke", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-C~lbz-=%J\"(M J");
      Token token0 = xPathLexer0.at();
      assertEquals("-", token0.getTokenText());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.notEquals();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("b", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("~l", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals("%", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals("", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("J", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L-J;.uY");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("-", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("J", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals(";.", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("uY", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      assertEquals("co", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("m.werken.saxpath.Token", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("MVBU:I$");
      Token token0 = xPathLexer0.at();
      assertEquals("M", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("V", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("B", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals("I", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QU,Y5*H/5dG");
      Token token0 = xPathLexer0.identifier();
      assertEquals("QU", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      xPathLexer0.minus();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(12, token4.getTokenType());
      assertEquals("H/", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("5dG", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("om.werken.saxpath.Token", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">=aYK@AiSE_j[");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(10, token0.getTokenType());
      assertEquals(">=", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("aYK", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<p67Pk\"l6)uznomX^Z");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("p67Pk", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftParen();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("m", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("werken.saxpath.XPathLexer", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R.9Lrz)*r^AO]P 7]");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".9", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p_O.4U");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("p_", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("O", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(".4", token2.getTokenText());
      assertEquals(31, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?q]FcYQ`\".3(8}FO");
      Token token0 = xPathLexer0.dollar();
      assertEquals("?", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("q", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      assertEquals("FcYQ", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("`\"", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(31, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~}_fvUitLV{S$x");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("~}", token0.getTokenText());
      
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("i", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("t", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("LV", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("{S$x", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zF_r{y/mmb+G2");
      Token token0 = xPathLexer0.comma();
      assertEquals("z", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("_", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("y", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("qlxwYJpxE#4fi@AF8");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("l", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("xwYJpxE", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[Bv,1pBw._9`.Kq");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("B", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("v", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("co", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(14, token4.getTokenType());
      assertEquals("n.", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("a", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("x", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals("p", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("a", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("th.Token", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("o", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("m", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("er", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("k", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("e", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(14, token6.getTokenType());
      assertEquals("n.", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("saxpath.Token", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("c", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("om", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("w", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("rken.saxpath.XPathLexer", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[Bv,1pBw._9`.Kq");
      Token token0 = xPathLexer0.plus();
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Bv", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("1p", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("B", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      Token token6 = xPathLexer0.literal();
      assertEquals(27, token6.getTokenType());
      assertNotNull(token6);
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("K", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("q", token8.getTokenText());
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nr,%~z");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("nr", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6m@$Vl:l*u]7z/a^2t");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("l", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(":", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("l", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nOtk");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("nO", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3!oi|=l?PC\"o ");
      Token token0 = xPathLexer0.identifier();
      assertEquals("3", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("o", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("i", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dots();
      assertEquals("m.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("w", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("r", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("n", token5.getTokenText());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("sa", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("x", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("pa", token9.getTokenText());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("h.XPathLexer", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Crf;6`*?*7FiH=fd!");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("r", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("we{L.*ew^rv*&U3lR");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("e", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TUeE2+{bd7E");
      Token token0 = xPathLexer0.minus();
      assertEquals("T", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("Ue", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("E", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("2", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("{", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("bd7E", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("m.", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("w", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("r", token4.getTokenText());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("n", token5.getTokenText());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(".s", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("a", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals("xp", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("ath.XPathLexer", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("XV4J|fST;_cG0P");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("XV", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("4", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("|", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("_cG0P", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",>^");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(",", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      assertEquals("^", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}_*pGb+a/c]p{W-k |o");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("*", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("a", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("/", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("]", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jSHb:PPG,");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("SHb", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("HmlD/dxT+#H`");
      xPathLexer0.setXPath("}[YJg/u+");
      Token token0 = xPathLexer0.pipe();
      assertEquals("}", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("Y", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("J", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("g", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("qlxwYJpxE#4fi@AF8");
      Token token0 = xPathLexer0.slashes();
      assertEquals("q", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("xw", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("YJpxE", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">XURJ|4AL#L>!8eNy");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("XURJ", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#]WiSpH&z\"7CLv");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("]", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("WiSpH", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&{VaU");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("&{", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("VaU", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("MVBU:I$");
      Token token0 = xPathLexer0.at();
      assertEquals("M", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("V", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("B", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("U", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TUeE2+{bd7E");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("TUeE2", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mup8R7U~F");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("u", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("p8", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("R7U", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("Q-RObQ[hZlhf[[]}]q");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Q-RObQ", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jSHb:PPG,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("jSHb", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("PPG,", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nOtk");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Otk", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2uN\"CEw,-]_rL5(=,[y");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("u", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("N", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MZU(O,n{pw");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("MZU", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BLG%{InGta\"Y?5+:#E!");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("B", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("LG", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<t~6Ltv@");
      xPathLexer0.setXPath("f&K.;A*VAOfG");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("f", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("&", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("K.", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BLG%{InGta\"Y?5+:#E!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("BLG", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("%{", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("InGta\"Y?5+:#E!", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hH-{27)_og1Jy$gAr");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("H-", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mMt*RGDRf|m-cd");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("mMt", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(20, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("GDRf", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Crf;6`*?*7FiH=fd!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Crf", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(";", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.comma();
      Token token2 = xPathLexer0.pipe();
      assertEquals("`", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("?", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("*", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("7", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("FiH=fd!", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("qlxwYJpxE#4fi@AF8");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("xw", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("Y", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("J", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("p", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("x", token6.getTokenText());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("E", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mMt*RGDRf|m-cd");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("mMt", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("*", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.colon();
      assertEquals("G", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("DRf|m-cd", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'AOWn/M4]o)h");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("'", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("AOWn", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"etJlx@>{2xt'Xr");
      Token token0 = xPathLexer0.not();
      assertEquals("\"", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("etJlx", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(16, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xqfG?-|>NF0$+fD\"");
      Token token0 = xPathLexer0.pipe();
      assertEquals("x", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("q", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("fG", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("?-|>NF0$+fD\"", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("=snP<u{bbav9=-av");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("s", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("u", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("{", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("bbav9", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(21, token7.getTokenType());
      assertEquals("=", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("XV4J|fST;_cG0P");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("XV", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("4", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("|", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("fST", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(";_cG0P", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[Bv,1pBw._9`.Kq");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Bv", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(",1", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("B", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("w", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("_", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("9", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l!8>8<z3_DC");
      Token token0 = xPathLexer0.dollar();
      assertEquals("l", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("!", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("8", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(">", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("8", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h7SkZw");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<p67Pk\"l6)uznomX^Z");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("67", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8*SXdk`-ggJ[QWFsiQG");
      xPathLexer0.setXPath("2!5");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("5", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%)4hVAtzt_9kZFK");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(")", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&bUv<>6$_3");
      Token token0 = xPathLexer0.slashes();
      assertEquals("&", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals("bUv", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(">6", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("_", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("3", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z{2SIvy^[Vh:~ r!..");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("z", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3pSNh{0~Z|ad1p");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.minus();
      assertEquals("{", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("0", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("~", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals("a", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("d", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("1", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("K'0TKomYIpyt");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("K'", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}_*pG.b+a/c]b{W-k ~o");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("}", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("*", token1.getTokenText());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      assertEquals("+", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("a", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(11, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jVP-xFD0");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("jV", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("-", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("xFD0", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[Bv,1pBw._9`.Kq");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("[", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.star();
      assertEquals("v", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(",", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("1p", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("B", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("w", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(".", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("_", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("9", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("`.Kq", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("4/@*@J+`I");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("/@", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.colon();
      assertEquals("@", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("J", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'AOWn/M4]o)h");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2xM qS:Gd|moD}&");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("G", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("d", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals("|", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("mo", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("D}", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("21cK~7%");
      Token token0 = xPathLexer0.not();
      assertEquals("2", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("1", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("K", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("7", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~}_fvUitLV{S$x");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("~}", token0.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("L", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.dollar();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("{", token5.getTokenText());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("S", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(26, token7.getTokenType());
      assertEquals("$", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#]WiSpH&z\"7CLv");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("#]WiSpH&z\"7CLv", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("NE!$d#\"Bq");
      xPathLexer0.plus();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.consume(11);
      assertEquals("com.werken.saxpath.XPathLexer", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("HmlD/dxT+#H`");
      Token token0 = xPathLexer0.comma();
      assertEquals("H", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("l", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("D", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("dxT", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }
}
