/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:27:32 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newConst("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "OG", "lf&uTy@NOBDYL$!S[", "lf&uTy@NOBDYL$!S[", "lf&uTy@NOBDYL$!S[");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putUTF8("OG");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("q,A-W~fdCd++GW", false);
      fieldWriter0.visitEnd();
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("OG", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "org.apache.commons.io.filefilter.FileFileFilter", (String) null, "");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "cg\"V'u\"P_6~+>29", "PiZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-2706), "org.apache.commons.io.filefilter.FalseFileFilter", "PiZ'/,Uw~M!`]", (String) null, "PiZ'/,Uw~M!`]");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.getSize();
      fieldWriter1.visitEnd();
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3127);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "h?ukAZ)smGWs@", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putUTF8("h?ukAZ)smGWs@");
      fieldWriter0.visitAnnotation("56", true);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-93), ",b", ",b", "lf&uTy@NOBDYL$!S[", "lf&uTy@NOBDYL$!S[");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8(",b");
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3127);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "h?ukAZ)smGWs@", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8("h?ukAZ)smGWs@");
      classWriter0.invalidFrames = true;
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector2 = byteVector1.put12(1, 3127);
      byteVector1.put11(3798, (-98));
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(54);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "OG", "luf&uTy@NOBDYL$!S[", "luf&uTy@NOBDYL$!S[", "luf&uTy@NOBDYL$!S[");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("OG", false);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("Exceptions", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newConst("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "org.apache.commons.io.filefilter.FileFileFilter", (String) null, "");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putByte(0);
      byteVector0.put12(2, 2);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "org.apache.commons.io.filefilter.HiddenFileFilter", "", "", "cg\"V'u\"P_6~+>29");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("O`]$d,F&}KwAm2kB");
      fieldWriter0.visitAttribute(attribute0);
      classWriter0.newField("C<7", "'7q0K{^$|", "");
      fieldWriter0.visitAnnotation("", true);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Label label0 = new Label();
      Object object0 = label0.info;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-748), ", 7{4d_j5)?Dj=l!+!y", ", 7{4d_j5)?Dj=l!+!y", ", 7{4d_j5)?Dj=l!+!y", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8("");
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newConst("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", ")fVq<y8", "");
      classWriter0.visit(400, 131072, "", "g}B&tD*/u0]J^", "VO7", (String[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (byte) (-93), "N9b!D_", "1x]/", "VO7", ")fVq<y8");
      fieldWriter0.getSize();
      fieldWriter1.getSize();
      fieldWriter0.getSize();
      fieldWriter1.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation(")fVq<y8", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visit(400, 131072, "", "g}B&tD*/u0]J^", "VO7", (String[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (byte) (-93), "N9b!D_", "1^]/", "VO7", ")fVq<y8");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putByte(1);
      ByteVector byteVector2 = byteVector1.putLong(1);
      ByteVector byteVector3 = byteVector2.putUTF8("N9b!D_");
      fieldWriter0.put(byteVector3);
      byteVector1.put12((-128), (-2190));
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(54);
      classWriter0.newConst("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      fieldWriter0.visitEnd();
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", true);
      System.setCurrentTimeMillis(16);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newConst("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
