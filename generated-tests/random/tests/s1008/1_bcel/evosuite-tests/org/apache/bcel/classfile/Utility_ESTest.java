/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:02:05 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, 701);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Or^[TS<tYZx8'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Or^[TS<tYZx8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "`\\6?3+]U7(";
      Utility.fillup("`\u0006?3+]U7(", 102, false, 'X');
      Utility.compactClassName("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`\u0006?3+]U7(", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)65;
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfSignature("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`\u0006?3+]U7(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`\u0006?3+]U7(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.replace("checkcast", "9&", "9&");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-121);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)124, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString(" methods:\n");
      assertEquals(" methods:\\n", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " methods:\n";
      objectArray0[1] = (Object) " methods:\n";
      objectArray0[2] = (Object) " methods:\n";
      objectArray0[3] = (Object) " methods:\n";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{ methods:\n,  methods:\n,  methods:\n,  methods:\n}", string1);
      
      String string2 = Utility.getSignature(" methods:\n");
      assertEquals("Lmethods:;", string2);
      
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "Lmethods:\n;";
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "Lmethods:\n;";
      objectArray1[3] = (Object) " methods:\n";
      objectArray1[4] = (Object) " methods:\n";
      objectArray1[5] = (Object) " methods:\n";
      objectArray1[6] = (Object) " methods:\n";
      objectArray1[7] = (Object) "Lmethods:\n;";
      String string3 = Utility.printArray(objectArray1, true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.convertString("J3?WxZ/FpqS");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "lcmp";
      stringArray0[1] = "J3?WxZ/FpqS";
      stringArray0[2] = "J3\\?WxZ/FpqS";
      stringArray0[3] = "\n     ";
      stringArray0[4] = "lcmp";
      stringArray0[5] = "lcmp";
      Utility.methodTypeToSignature("lcmp", stringArray0);
      String string0 = "Byte code error: ";
      Utility.methodSignatureReturnType("Byte code error: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n     ");
      Utility.isSet(1439, 1439);
      try { 
        Utility.typeOfSignature("\n     ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //      
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.methodTypeToSignature("dreturn", (String[]) null);
      Utility.methodSignatureToString("()Ldreturn;", "()Ldreturn;", "double", false);
      Utility.methodSignatureArgumentTypes("()Ldreturn;");
      String string0 = "if_icmple";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("if_icmple", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-2);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, 3935, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.classOrInterface(97);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.accessToString(162, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-102);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 157, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lcmp
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload\t\t%75", string0);
      
      String string1 = Utility.classOrInterface(123);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)56, (-1107), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Object object5 = new Object();
      objectArray0[6] = object5;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@439305e3, java.lang.Object@4c4152f2, java.lang.Object@439305e3, java.lang.Object@661f9e7b, java.lang.Object@30e8f6ad, java.lang.Object@6b0f514e, java.lang.Object@2d1f481f");
      try { 
        Utility.typeOfSignature("java.lang.Object@439305e3, java.lang.Object@4c4152f2, java.lang.Object@439305e3, java.lang.Object@661f9e7b, java.lang.Object@30e8f6ad, java.lang.Object@6b0f514e, java.lang.Object@2d1f481f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@439305e3, java.lang.Object@4c4152f2, java.lang.Object@439305e3, java.lang.Object@661f9e7b, java.lang.Object@30e8f6ad, java.lang.Object@6b0f514e, java.lang.Object@2d1f481f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-101);
      byteArray0[0] = (byte) (-17);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-41);
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-125));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-121));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType((-2292));
      constantArray0[2] = (Constant) constantMethodType2;
      Constant constant0 = constantMethodType0.copy();
      constantArray0[3] = constant0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-11));
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33781. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)56;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-34), (-1752));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2f
         // 1:    aload\t\t%222
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)63;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte)63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.accessToString(1);
      Utility.clearBit((-729), 1616);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)64;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, 86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = Utility.setBit(90, 348);
      assertEquals(268435546, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(90);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantInteger constantInteger2 = new ConstantInteger((byte) (-90));
      constantArray0[2] = (Constant) constantInteger2;
      ConstantLong constantLong0 = new ConstantLong((-773L));
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("if_acmpne\t\t#30633", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-17);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)68;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte)68;
      Utility.equals(byteArray0, byteArray1);
      String string0 = "QYP:vl";
      Utility.compactClassName("QYP:vl", "&}r'{,Si&1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.mark((byte)68);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = 694;
      Utility.accessToString(694);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("w*%atCBf{x", "&}r'{,Si&1", "private protected final synchronized transient interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w*%atCBf{x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-125);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte) (-62));
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 239, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.fillup("67sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", 64, true, 'K');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)88;
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)21, 3589);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)88, 42);
      constantArray0[1] = (Constant) constantNameAndType0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[2] = constant0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("67sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      Utility.clearBit(57, (-2984));
      Utility.compactClassName("ireturn", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#S4D~K ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte) (-79);
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[5] = (Object) "return";
      objectArray0[6] = (Object) "ireturn";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(73, 37);
      Utility.classOrInterface(37);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)68;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class");
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.isSet(593, (-3490));
      Utility.format(54, (-1275), false, 'X');
      try { 
        Utility.typeOfSignature("54");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-122);
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)97;
      byte byte1 = (byte)74;
      byteArray0[2] = (byte)74;
      byte byte2 = (byte)88;
      byteArray0[3] = (byte)88;
      byte byte3 = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (int) (byte)88);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    i2f\n1:    ladd\n2:    dstore_3\n3:    pop2\n4:    <illegal opcode>\n", "$X2`I", "if_icmplt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    i2f
         // 1:    ladd
         // 2:    dstore_3
         // 3:    pop2
         // 4:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "%x3&gc]/b8}e^j\\";
      try { 
        Utility.typeOfSignature("%x3&gc]/b8}e^j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %x3&gc]/b8}e^j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      int int0 = 180;
      Utility.isSet(180, 1877);
      String[] stringArray0 = new String[1];
      String string0 = "invokedynamic";
      stringArray0[0] = "invokedynamic";
      Utility.methodTypeToSignature("&7mZ", stringArray0);
      Utility.methodSignatureToString("(Linvokedynamic;)L&7mZ;", "&7mZ", "&7mZ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&7mZ");
      PrintStream printStream0 = mockPrintStream0.format("invokedynamic", (Object[]) stringArray0);
      Utility.printArray(printStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "Null";
      try { 
        Utility.typeOfSignature("Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "double";
      stringArray0[1] = "double";
      stringArray0[2] = "l[2T\")1XlH%4]";
      Utility.methodTypeToSignature("double", stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "(DD[Ll;)D";
      stringArray1[1] = "I33NtDRVe7/Aer,";
      stringArray1[2] = "\\rt1j9Rrw$pg^sN}x(";
      stringArray1[3] = "(DD[Ll;)D";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\\rt1j9Rrw$pg^sN}x(", stringArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Ll;)D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.accessToString(70);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-58);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-56));
      boolean boolean0 = false;
      Utility.compactClassName("x+mR,'iT", "0:    ret\t\t%200\n2:    l2i\n3:    ifnull\t\t#3\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n", false);
      Utility.setBit((-1208), (byte) (-120));
      try { 
        Utility.typeOfSignature("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+i";
      stringArray0[1] = "+i";
      stringArray0[2] = "+i";
      stringArray0[3] = "+i";
      stringArray0[4] = "+i";
      stringArray0[5] = "+i";
      Utility.methodTypeToSignature("+i", stringArray0);
      Utility.accessToString((-204));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (int) (byte)100, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, 575);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.classOrInterface(65);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.read();
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = ", low = ";
      byte[] byteArray0 = Utility.decode(", low = ", false);
      int int0 = 654;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 654, 654, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.searchOpcode("%X3&gC]/B8}E^J");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%X3&gC]/B8}E^J");
      Utility.setBit(1673, (-1300));
      Utility.getSignature("$vISs8JS7 ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)93;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), 881);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24081. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-96);
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong((byte)76);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-61), 161);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-61));
      constantArray0[2] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(183, (-2949));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-96));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)77, (int) (byte)77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.accessToString(16, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)18;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]^98b bPb}~[KUPOj");
      byteArray0[4] = (byte)71;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (-476), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-77);
      byte byte0 = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-115);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-13);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1272), (int) (byte) (-47), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)14;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 173);
      assertEquals("0:    impdep2\n1:    <illegal opcode>\n2:    caload\n3:    istore_2\n4:    fastore\n5:    laload\n6:    <illegal opcode>\n7:    castore\n8:    dconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.ConstantNameAndType");
      assertEquals("org.apache.bcel.classfile.ConstantNameAndType", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-121);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-121), (int) (byte)119);
      assertEquals("0:    <illegal opcode>\n1:    f2i\n2:    dup2\n3:    dadd\n4:    lstore_3\n5:    dneg\n6:    i2d\n", string1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.convertString("UNKNOWN (");
      Utility.isSet(276, 108);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)40;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)95);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 26666, (int) (byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-86);
      Utility.toHexString(byteArray0);
      Utility.getSignature("30 aa");
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("T?omX451wDK|U3^y;", false);
      int int0 = 2503;
      try { 
        MockURI.URI("30 aa", "?omX451wDK|U3^y", "`Pl~#k)=", 2503, "0A7`f7d$B!AoQtd(m", "xq+biyma#`@{", "xq+biyma#`@{");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 30 aa://%3FomX451wDK%7CU3%5Ey@`Pl~#k)=:25030A7%60f7d$B!AoQtd(m?xq+biyma%23%60@%7B#xq+biyma%23%60@%7B
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      byteSequence0.read();
      String string0 = "FU3";
      boolean boolean0 = false;
      try { 
        byteSequence0.readBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.format(1975, 1975, true, '\\');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.classOrInterface(73);
      try { 
        Utility.typeOfSignature("3/-?)5dJ0=f#i6!L,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3/-?)5dJ0=f#i6!L,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.accessToString(16, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)18;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]^98b bPb}~[KUPOj");
      byteArray0[4] = (byte)71;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (-476), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "putstatic";
      stringArray0[1] = "putstatic";
      stringArray0[2] = "putstatic";
      String string0 = Utility.methodTypeToSignature("putstatic", stringArray0);
      assertEquals("(Lputstatic;Lputstatic;Lputstatic;)Lputstatic;", string0);
      
      String string1 = Utility.compactClassName("putstatic", false);
      assertEquals("putstatic", string1);
      
      String string2 = Utility.replace("ifnonnull", "null", "null");
      assertEquals("ifnonnull", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte) (-90);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)62);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantDouble0.setBytes(0.0);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-90), 78);
      assertEquals("0:    istore_3\n1:    fload_1\n2:    ifle\t\t#234\n5:    fstore_3\n6:    if_icmpgt\t\t#-1876\n", string3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.setBit((-3240), 185);
      String string0 = "=y";
      Utility.convertString("=y");
      try { 
        Utility.typeOfSignature("=y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "Z.Bb^23m\\-9";
      Utility.signatureToString("Z.Bb^23m-9", true);
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B+%t");
      byte[] byteArray0 = Utility.decode("if_icmpgt", false);
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3508, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 502, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (int) (byte) (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      Utility.fillup("double", (-477), false, 'L');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1298, 1298);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("{OU");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{OU";
      stringArray0[1] = "{OU";
      Utility.methodTypeToSignature("{OU", stringArray0);
      Utility.compactClassName("{OU");
      Utility.accessToString((int) (short) (-1));
      Utility.methodSignatureArgumentTypes("(L{OU;L{OU;)L{OU;");
      MockFile mockFile0 = new MockFile("goto_w");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.write((int) (short) (-1));
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(2);
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{OU");
      byteArray1[0] = (byte)116;
      Utility.encode(byteArray1, false);
      Utility.printArray((Object[]) null);
      try { 
        Utility.methodSignatureArgumentTypes("goto_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.getSignature("char");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3230), (int) (byte) (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48304. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 13, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.setBit(734, 1832);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)34;
      byte byte0 = (byte)113;
      byteArray0[3] = (byte)113;
      byte byte1 = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)125;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3697), (-3697));
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3697), (int) (byte)125);
      Utility.replace("K:DX!jD)f@1,?B#L48", "kBM#nF{.w[", "0:    if_icmple\t\t#-25822\n3:    lrem\n4:    if_icmpge\t\t#-8319\n");
      // Undeclared exception!
      try { 
        Utility.getSignature("kBM#nF{.w[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.convertString("/$4!:[wN#7");
      try { 
        Utility.typeOfSignature("/\\$4!:[wN#7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /\\$4!:[wN#7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.methodSignatureReturnType("SYN+");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-29);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 69, (int) (byte) (-80), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "Mmy2uq(h>$_b+g5O>w";
      try { 
        Utility.typeOfSignature("Mmy2uq(h>$_b+g5O>w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mmy2uq(h>$_b+g5O>w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "-E&?]F\\tP0^]9]lN";
      try { 
        Utility.typeOfSignature("-E&?]F\tP0^]9]lN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -E&?]F\tP0^]9]lN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.compactClassName("impdep2");
      Utility.clearBit(4, 4);
      boolean boolean0 = true;
      Utility.fillup("impdep2", 90, true, 'I');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "impdep2";
      objectArray0[1] = (Object) "impdep2";
      objectArray0[2] = (Object) "impdep2IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII";
      objectArray0[3] = (Object) "impdep2IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII";
      objectArray0[4] = (Object) "impdep2";
      objectArray0[5] = (Object) "impdep2";
      boolean boolean1 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("athrow", true);
      Utility.replace("impdep2", "athrow", "impdep2IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII");
      try { 
        Utility.typeOfSignature("&~f%Mp;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &~f%Mp;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)117;
      byte byte0 = (byte)33;
      byteArray0[4] = (byte)33;
      byte byte1 = (byte)47;
      byteArray0[5] = (byte)47;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (-959), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ":o{*\"RNcW";
      try { 
        Utility.typeOfSignature(":o{*\"RNcW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :o{*\"RNcW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.classOrInterface(84);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)53, (byte) (-48));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.compactClassName("#W(_ %$GNprR^[)/kx.");
      int int0 = 9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.classOrInterface(9);
      try { 
        Utility.typeOfSignature("#W(_ %$GNprR^[).kx.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #W(_ %$GNprR^[).kx.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)0;
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)91, 66);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(66, 18);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("newarray");
      constantArray0[2] = (Constant) constantUtf8_0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)70);
      assertEquals("0:    goto\t\t#17932\n3:    dup_x2\n4:    pop\n5:    dload_2\n6:    iushr\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)81;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.$l$8b$I$A$A$A$A$A$A$A");
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-49);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (-517), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.accessToString((-3357), false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public private synchronized volatile transient interface synthetic annotation enum";
      objectArray0[2] = (Object) "public private synchronized volatile transient interface synthetic annotation enum";
      Utility.printArray(objectArray0);
      Utility.compactClassName("InnerClasses");
      try { 
        Utility.methodSignatureReturnType("NewObject", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NewObject'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.isSet((-3509), (-3509));
      String string0 = "*wgP";
      try { 
        Utility.typeOfSignature("*wgP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wgP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.compactClassName("YqdPF=F}]OAX6<Y9xm");
      byte[] byteArray0 = Utility.decode("instanceof", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 18, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 126;
      Utility.isSet(126, 103);
      try { 
        Utility.typeOfSignature("+4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.fillup("areturn", 2, true, 'z');
      Utility.format(2, (-2795), true, 'z');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-72);
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-96);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte)18;
      byteArray1[6] = (byte) (-96);
      byteArray1[7] = (byte) (-81);
      byteArray1[8] = (byte) (-96);
      Utility.equals(byteArray0, byteArray1);
      String string0 = ",Bg[y2Yrb7E";
      try { 
        Utility.typeOfSignature(",Bg[y2Yrb7E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Bg[y2Yrb7E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "LC=m[|<z";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LC=m[|<z", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LC=m[|<z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.isSet(88, 88);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      Utility.encode(byteArray0, false);
      Utility.fillup("7", 1161, false, 'N');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-50);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-50), 32, true);
      assertEquals("0:    ddiv\n1:    if_icmplt\t\t#2250\n4:    wide\t(wide)\n5:    freturn\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpeq\t\t#9577", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)4;
      byteArray0[0] = (byte) (-71);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-426), (byte) (-71));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Unreachable default case reached!");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((byte)62);
      constantArray0[2] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-63));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 185, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45249. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-71);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-426), (byte) (-71));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Unreachable default case reached!");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((byte)62);
      constantArray0[2] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-63));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 185, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 583. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E\"[;UCL7Mo-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E\"[;UCL7Mo-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.accessToString(36);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "protected synchronized";
      objectArray0[1] = (Object) "protected synchronized";
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("BootstrapMethods(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)57;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(75, (-1705), (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("|?3", "lload_1", "BootstrapMethods(", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |?3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.convertString("java.lang.Character");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-80);
      objectArray0[1] = (Object) (byte) (-80);
      objectArray0[2] = (Object) "java.lang.Character";
      objectArray0[3] = (Object) (byte) (-80);
      objectArray0[4] = (Object) "java.lang.Character";
      objectArray0[5] = (Object) (byte) (-80);
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{-80, -80, java.lang.Character, -80, java.lang.Character, -80}";
      stringArray0[1] = "[]";
      stringArray0[2] = "{-80, -80, java.lang.Character, -80, java.lang.Character, -80}";
      stringArray0[3] = "java.lang.Character";
      stringArray0[4] = "=";
      stringArray0[5] = "{-80, -80, java.lang.Character, -80, java.lang.Character, -80}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("=", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1883, (int) (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-58);
      int int0 = (-2970);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (-2970));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpgt\t\t#-14200
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dload_0", (String) null, "dload_0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("n)Q;u|a6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q;u|a6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("athrow", "@", ",G)u");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "athrow";
      objectArray0[1] = (Object) "athrow";
      objectArray0[2] = (Object) "athrow";
      objectArray0[3] = (Object) "athrow";
      objectArray0[4] = (Object) "athrow";
      objectArray0[5] = (Object) "@";
      objectArray0[6] = (Object) "athrow";
      objectArray0[7] = (Object) ",G)u";
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = "H1~";
      try { 
        Utility.methodSignatureReturnType("H1~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H1~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.setBit(171, 171);
      Utility.typeOfSignature("S[wA^uG-HGyRUB\"");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "S[wA^uG-HGyRUB\"";
      objectArray0[1] = (Object) "S[wA^uG-HGyRUB\"";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "S[wA^uG-HGyRUB\"";
      objectArray0[4] = (Object) "S[wA^uG-HGyRUB\"";
      objectArray0[5] = (Object) "S[wA^uG-HGyRUB\"";
      Object object1 = new Object();
      objectArray0[6] = object1;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokevirtual", "void", "invokevirtual", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokevirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.classOrInterface(73);
      try { 
        Utility.typeOfSignature("03/-?)5dJ0=f#i6!L,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 03/-?)5dJ0=f#i6!L,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-107);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), 799, true);
      assertEquals("0:    dup_x2\n1:    ixor\n2:    fcmpl\n", string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.replace("ior", "xjK!'k<\b9fK/l", "<#*3M\u0007e,");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("<#*3M\u0007e,", true);
      Utility.classOrInterface(8192);
      Utility.compactClassName("<#*3M\u0007e,", "2Y\"XOhS", false);
      String string0 = " not found: ";
      Utility.replace("}ni*I?P(", "}ni*I?P(", " not found: ");
      Utility.accessToString(8192, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) " not found: ", 2606, 2606);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3709, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "RZJ6n(L:";
      try { 
        Utility.typeOfSignature("RZJ6n(L:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RZJ6n(L:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "$.f~n-J)$d";
      byte[] byteArray0 = Utility.decode("$.f~n-J)$d", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.toHexString(byteArray0);
      Utility.compactClassName("00 66 7e 6e 2d 4a 29");
      String string1 = "dload_0";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dload_0");
      Utility.searchOpcode("dload_0");
      String string2 = "!+Z*`aopbl";
      Utility.searchOpcode("!+Z*`aopbl");
      try { 
        Utility.methodSignatureArgumentTypes("00 66 7e 6e 2d 4a 29");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 66 7e 6e 2d 4a 29
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      String string0 = "byte";
      try { 
        Utility.methodSignatureReturnType("byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "$.f~n-J)$d";
      try { 
        Utility.typeOfSignature("$.f~n-J)$d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $.f~n-J)$d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=o";
      stringArray0[1] = "The array of suffixes must not be null";
      stringArray0[2] = "void";
      stringArray0[3] = "=o";
      stringArray0[4] = "=o";
      try { 
        Utility.methodTypeToSignature("=o", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "RdBp";
      // Undeclared exception!
      try { 
        Utility.signatureToString("RdBp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RdBp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.format(1975, 1975, true, '\\');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("30 2b c0 9d 2a 2b 46", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Cloneable");
      Utility.typeOfSignature("Z!5Sv9(DV$fm");
      try { 
        Utility.typeOfSignature("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "impdep1";
      Utility.convertString("impdep1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      byteArray0[1] = (byte) (-3);
      Utility.toHexString(byteArray0);
      Utility.clearBit(39, (-2171));
      try { 
        Utility.typeOfSignature("29 fd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 29 fd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)9;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, (int) (byte)9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("J`MBz", false);
      Utility.compactClassName("long", "", false);
      try { 
        Utility.methodSignatureArgumentTypes("long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.replace("ret", "ret", "ret");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte byte0 = (byte)29;
      byteArray0[0] = (byte)29;
      byte byte1 = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)90;
      byte byte2 = (byte)32;
      byteArray0[3] = (byte)32;
      byte byte3 = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)1;
      byte byte4 = (byte)82;
      byteArray0[7] = (byte)82;
      byte byte5 = (byte)93;
      byteArray0[8] = (byte)93;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, (-630), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("CONSTANT_MethodHandle", true);
      Utility.compactClassName("char");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[0];
      MockFile mockFile0 = new MockFile("char");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "char");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"char\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, (int) (byte)117, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, (int) (byte)122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Dont call getValueDouble() on a non DOUBLE ElementValue");
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "$b6t$A$93";
      objectArray0[1] = (Object) (byte)116;
      objectArray0[2] = (Object) (byte)116;
      objectArray0[3] = (Object) (byte) (-109);
      objectArray0[4] = (Object) "$b6t$A$93";
      Utility.printArray(objectArray0, false);
      String string0 = "DV";
      Utility.signatureToString("DV");
      try { 
        Utility.decode("$b6t$A$93", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)54;
      byteArray0[5] = (byte)77;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1090915128), (int) (byte) (-24));
      assertEquals("0:    impdep2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    istore\t\t%0\n5:    astore_2\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("ff e8 e8 36 00 4d", string1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9&F`");
      Utility.typeOfSignature("FX;syv3");
      Utility.convertString("FX;syv3");
      Utility.compactClassName("FX;syv3", "goto_w", false);
      Utility.isSet((-1020), 79);
      Utility.isJavaIdentifierPart('W');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "FX;syv3";
      objectArray0[1] = (Object) "FX;syv3";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("0+`PM+{XGJvw^xV`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0+`PM+{XGJvw^xV`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.setBit((-2681), 32);
      String string0 = "E6FE}Uf";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("E6FE}Uf", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E6FE}Uf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-23);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 65, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1005), (int) (byte)125, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    fconst_2
         // 2:    lload_3
         // 3:    lushr
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("F}RL2TAyZ");
      boolean boolean0 = false;
      Utility.decode("F}RL2TAyZ", false);
      String string0 = "~2Z`b%n9'C;";
      try { 
        Utility.methodSignatureArgumentTypes("~2Z`b%n9'C;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~2Z`b%n9'C;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)88;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h@KY(|cU1i3;()X(Q");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, 515);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.accessToString(97, false);
      assertEquals("public synchronized volatile", string0);
      
      String string1 = Utility.getSignature("static");
      byte byte0 = Utility.typeOfSignature("Lstatic;");
      assertEquals((byte)14, byte0);
      
      String string2 = Utility.compactClassName("Lstatic;", false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)100);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("FV");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "FV";
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) "FV";
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) "FV";
      objectArray0[5] = (Object) "FV";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte) (-62), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "Pxu>f-vBacFLwvS ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pxu>f-vBacFLwvS ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pxu>f-vBacFLwvS '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.convertString("\t\t");
      assertEquals("\t\t", string0);
      
      String string1 = Utility.getSignature("\t\t<");
      assertEquals("L<;", string1);
      
      Utility.fillup("ayB:g!qUdTDui]i", 2525, true, '5');
      String string2 = Utility.compactClassName("\t\t#", "? extends ", false);
      assertEquals("\t\t#", string2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7dJpwN]s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7dJpwN]s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(66);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("\"CONSTANT_Integer[3](bytes = 66)\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("K$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.accessToString((-462));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.clearBit(1558, 10);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("bipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "!rt>";
      try { 
        Utility.typeOfSignature("!rt>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: rt>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.compactClassName("org.apache.commons.io.filefilter.TrueFileFilter");
      Utility.format(687, (-1508), false, 'F');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)57;
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("org.apache.commons.io.filefilter.TrueFileFilter");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("687");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantUtf8.getInstance("org.apache.commons.io.filefilter.TrueFileFilter");
      constantUtf8_0.copy();
      ConstantUtf8.getInstance("^r\"3AM@rRI%?E");
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.printArray((Object[]) constantArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("izJ>/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `izJ>/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "Y<-._Y*4oXWf";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y<-._Y*4oXWf");
      Utility.setBit((-222), (-222));
      String string1 = "Y1!D+y";
      try { 
        Utility.methodSignatureReturnType("Y1!D+y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y1!D+y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)52;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-203), (-700), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("7;H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7;H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-84), (byte)19);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-9);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-9), 1320, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    fload_2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.convertString("V");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.typeOfSignature("B9kc[");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.accessToString((int) (byte)8, false);
      Utility.classOrInterface((byte)8);
      Utility.classOrInterface(4733);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet((byte)8, 6);
      Utility.typeOfSignature("B9kc[");
      Utility.fillup(";", (byte)8, false, 'M');
      Utility.signatureToString("B9kc[");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.clearBit((-2672), 6);
      String string0 = ";";
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1439));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantClass constantClass0 = new ConstantClass((byte)5);
      constantArray0[1] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString((byte)5);
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)125, 218);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lushr", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Gdi%>Rp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gdi%>Rp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("+\"$?-3u$v0;.djv+O)n", "+\"$?-3u$v0;.djv+O)n", false);
      int int0 = 181;
      Utility.accessToString(181);
      try { 
        Utility.typeOfSignature("+\"$?-3u$v0;.djv+O)n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"$?-3u$v0;.djv+O)n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)78;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.Throwable");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, (int) (byte)80, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.searchOpcode("%X3&gC]/B8}E^J");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%X3&gC]/B8}E^J");
      Utility.setBit(1673, (-1300));
      Utility.getSignature("$vISs8JS7 ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)93;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), 881);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24081. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.available();
      byteSequence0.skipBytes((byte)1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("dload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((-4542), 76, false, '4');
      Utility.compactClassName("5w", true);
      Utility.replace("5w", "invokestatic", ")\t");
      Utility.compactClassName("5w");
      Utility.setBit((-4542), 76);
      try { 
        Utility.typeOfSignature("8EjZZ9vA8l]BT20AhY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8EjZZ9vA8l]BT20AhY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-106);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (-92), true);
      assertEquals("0:    imul\n1:    iconst_1\n2:    astore\t\t%171\n4:    dup\n5:    ifle\t\t#-14949\n", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString(1164);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("g5O^S6)Oll7V|;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oll7V|;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.clearBit((byte)76, (byte) (-71));
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("J:PxzaLl%8f6f~CV`J:PxzaLl%8f6f~CV`");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("J:PxzaLl%8f6f~CV`J:PxzaLl%8f6f~CV`", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J:PxzaLl%8f6f~CV`J:PxzaLl%8f6f~CV`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-62);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), 701);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("1ceSEi", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1ceSEi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "<[)";
      try { 
        Utility.typeOfSignature("<[)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <[)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)112;
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2125), 2511);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "The prefix must not be null";
      Utility.typeOfSignature("The prefix must not be null");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      int int0 = 336;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 136;
      Utility.setBit((-1068), 136);
      String string0 = "jn+o{VeC$b_b}tdk[";
      // Undeclared exception!
      try { 
        Utility.decode("jn+o{VeC$b_b}tdk[", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int int0 = Utility.setBit(8192, 65);
      assertEquals(8194, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 209, 209, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      byteSequence0.read();
      String string0 = "FU3";
      boolean boolean0 = false;
      try { 
        byteSequence0.readBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "Illegal type: ";
      Utility.compactClassName("Illegal type: ");
      Utility.format(149, 4034, true, '4');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)41;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (-358), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      Utility.compactClassName("getstatic", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 956, 78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.clearBit(186, 183);
      Utility.accessToString((-1841), false);
      Utility.setBit(1397, 72);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)105;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("8vz~D>2 8PaS]O", "public private protected static volatile transient strictfp synthetic annotation enum", "Xm:KV");
      Utility.compactClassName("n<#;vCt");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public private protected static volatile transient strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "Xm:KV";
      objectArray0[3] = (Object) "n<#;vCt";
      objectArray0[4] = (Object) "n<#;vCt";
      objectArray0[5] = (Object) "n<#;vCt";
      objectArray0[6] = (Object) "public private protected static volatile transient strictfp synthetic annotation enum";
      objectArray0[7] = (Object) "Xm:KV";
      objectArray0[8] = (Object) "n<#;vCt";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("Xm:KV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xm:KV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.format(1975, 1975, true, '\\');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "ifnull";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnull");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.clearBit(2, 91);
      Utility.typeOfSignature("V");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(91);
      Utility.getSignature("V");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("JHaEsK}%o?_T;P", "ifnull", "JHaEsK}%o?_T;P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JHaEsK}%o?_T;P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("MHa/'_x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MHa/'_x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ev");
      Utility.compactClassName("", true);
      String string0 = Utility.getSignature(", ");
      assertEquals("L,;", string0);
      
      String string1 = Utility.compactClassName(", ");
      assertEquals(", ", string1);
      
      Utility.getSignature(" ");
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = Utility.clearBit(2852, 2852);
      assertEquals(2852, int0);
      
      String string0 = Utility.compactClassName("athrow");
      assertEquals("athrow", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("wide\t(wide)", string2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.@MopB");
      try { 
        Utility.typeOfSignature("@MopB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @MopB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName(".Ka^SE&ENg9_", false);
      try { 
        Utility.typeOfSignature(".Ka^SE&ENg9_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Ka^SE&ENg9_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("N5x", stringArray0);
      Utility.getSignature("N5x");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-12);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-2024.0));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)78, (-1764));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, (-1018));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = ";e+LK'9\"LKN##WRqQk";
      Utility.compactClassName(";e+LK'9\"LKN##WRqQk", false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte)98;
      byteArray0[0] = (byte)98;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";}XgK!l");
      Utility.isSet((byte)98, (byte)98);
      String string1 = "6cy";
      try { 
        Utility.typeOfSignature("6cy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6cy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e8Ig$}AY6TBB~");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "QRc(@^$6,!d";
      try { 
        Utility.typeOfSignature("QRc(@^$6,!d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QRc(@^$6,!d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.compactClassName("{ jWp[:CwaTf^0SZ3", "{ jWp[:CwaTf^0SZ3", false);
      Utility.clearBit(1837, 1726);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-71);
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-71);
      byteArray1[5] = (byte) (-71);
      byteArray1[6] = (byte) (-71);
      byteArray1[7] = (byte) (-71);
      Utility.equals(byteArray1, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("b9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 2575;
      Utility.accessToString(2575);
      String string0 = ")\n";
      try { 
        Utility.typeOfSignature(")\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("(^tyg (Z~|*");
      String string0 = "? extends ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(^tyg (Z~|*", "? extends ", "(^tyg (Z~|*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^tyg (Z~|*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("*Y>05T=", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(9, 9);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("*Y>05T=");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)42, (byte)89, (byte)62, (byte)48, (byte)53, (byte)84, (byte)61}, byteArray0);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      short short0 = Utility.searchOpcode("lreturn");
      assertEquals((short)173, short0);
      
      Utility.compactClassName("GM,B*o$");
      String string0 = Utility.fillup("putstatic", (short)173, true, '\\');
      assertEquals("putstatic\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string0);
      
      Utility.compactClassName("org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations", false);
      byte[] byteArray0 = Utility.decode("GM,B*o$", false);
      assertArrayEquals(new byte[] {(byte)71, (byte)77, (byte)44, (byte)66, (byte)42, (byte)111}, byteArray0);
      
      String string1 = Utility.compactClassName("lreturn", false);
      assertEquals("lreturn", string1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("VC39Wo_hIhE;k1[r\"U", 4855, true, '\"');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E54vyLf9DcE:/K>A2x8");
      Utility.setBit(14, 14);
      // Undeclared exception!
      try { 
        Utility.getSignature("VC39Wo_hIhE;k1[r\"U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[r\"U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.convertString(":T\"^wBs");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = Utility.accessToString(170);
      assertEquals("private static synchronized transient", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("athrow", string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CGlejkhr\"");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4>?>kv24+");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-22);
      byte byte0 = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)40;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType(", offset=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, offset='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "`\\6?3+]U7(wyjC";
      Utility.compactClassName("`\u0006?3+]U7(wyjC");
      try { 
        Utility.typeOfSignature("A3`5oh+s;c.1'G*{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A3`5oh+s;c.1'G*{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-112);
      byteArray1[3] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.isSet(50, 50);
      try { 
        Utility.typeOfSignature("1_1(A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1_1(A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = ";e+LK'9\"LKN##WRqQk";
      Utility.compactClassName(";e+LK'9\"LKN##WRqQk", false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte)98;
      byteArray0[0] = (byte)98;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";}XgK!l");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (-52), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(78, (byte)90);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.EmptyVisitor");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1), 57);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[5] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)47;
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("W|Vb6_DN>&]ZY");
      try { 
        Utility.typeOfSignature("W\\|Vb6_DN>&]ZY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W\\|Vb6_DN>&]ZY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      String string0 = "LpK$prc}#";
      try { 
        Utility.decode("LpK$prc}#", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 64, 326, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid class name ");
      int int0 = 69;
      Utility.clearBit(69, 69);
      Utility.isSet(69, 69);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.getSignature("org.apache.commons.io.filefilter.SizeFileFilter");
      int int1 = 184;
      Utility.setBit(184, (-733));
      String string0 = "91G";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("91G", "boolean", "org.apache.commons.io.filefilter.SizeFileFilter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 91G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)77;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1090915128), (-1615967836));
      assertEquals("0:    impdep2\n1:    <illegal opcode>\n2:    ifgt\t\t#13836\n5:    astore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "nop";
      Utility.compactClassName("nop");
      Utility.searchOpcode("nop");
      MockFile mockFile0 = new MockFile("nop");
      String string1 = "j^$A-6q!";
      MockFile mockFile1 = new MockFile(mockFile0, "j^$A-6q!");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "j^$A-6q!");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // j^$A-6q!
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      short short0 = Utility.searchOpcode("%X3&gC]/B8}E^J");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%X3&gC]/B8}E^J");
      int int0 = Utility.setBit(1673, (-1300));
      assertEquals(5769, int0);
      
      String string0 = Utility.getSignature("$vISs8JS7 ");
      assertEquals("L$vISs8JS7;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)93;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), 881);
      assertEquals("0:    istore_1\n1:    dsub\n2:    iconst_1\n3:    dup2_x2\n4:    sipush\t\t13817\n7:    dup2_x1\n", string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.getSignature("!SWmPavYk:L");
      assertEquals("L!SWmPavYk:L;", string0);
      
      String string1 = Utility.accessToString(3751, false);
      assertEquals("public private protected synchronized transient interface abstract strictfp", string1);
      
      int int0 = Utility.setBit(123, 3751);
      assertEquals(251, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "P+EI";
      try { 
        Utility.typeOfSignature("P+EI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P+EI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(63, true);
      Utility.classOrInterface(3056);
      try { 
        Utility.typeOfSignature(">L&4T'j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >L&4T'j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "Gx(bE";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Gx(bE", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gx(bE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 1574, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.typeOfSignature("D");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "D";
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("D", false);
      Utility.signatureToString("D");
      Utility.format((byte)7, (byte)7, false, 'P');
      Utility.compactClassName("D");
      Utility.clearBit((-1447019905), 1092);
      Utility.fillup("double", 1626, false, 'R');
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.accessToString(16, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)18;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]^98b bPb}~[KUPOj");
      byteArray0[4] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (-476), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "klAsJj|*");
      Utility.methodSignatureReturnType("Byte code error: ", true);
      try { 
        Utility.typeOfSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)10;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 1329, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.getSignature("R@uQ");
      assertEquals("LR@uQ;", string0);
      
      String string1 = Utility.convertString("E'[;Bs7uho-");
      assertEquals("E\\'[;Bs7uho-", string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.accessToString(10, true);
      Utility.clearBit(104, 45);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "private static";
      objectArray0[1] = (Object) "private static";
      Utility.printArray(objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "{private static, private static}";
      objectArray1[1] = (Object) "private static";
      objectArray1[2] = (Object) "private static";
      Utility.printArray(objectArray1);
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<nFZ:fg+AYF", "{{private static, private static}, private static, private static}", "<nFZ:fg+AYF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <nFZ:fg+AYF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.replace("ehMiBQUf@>TJ=k.:{", "Dzz-;uvKd", "breakpoint");
      assertEquals("ehMiBQUf@>TJ=k.:{", string0);
      
      boolean boolean0 = Utility.isSet(107, (-700));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code(max_stack = ");
      Utility.compactClassName("\t", "Code(max_stack = ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Code(max_stack = ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.flush();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\t";
      objectArray0[2] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      try { 
        Utility.typeOfSignature("9o`;R6g]Rp<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9o`;R6g]Rp<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)57;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((-2852));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)41, 31, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(67, 67, true, 's');
      Utility.methodTypeToSignature("67sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", (String[]) null);
      MockFile mockFile0 = new MockFile("67sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss");
      MockFile mockFile1 = new MockFile(mockFile0, "()L67sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss;");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      Utility.format(89, 67, true, '+');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 73
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.typeOfSignature("InnerClass(");
      try { 
        Utility.methodSignatureArgumentTypes("InnerClass(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: InnerClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface((-1162));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.accessToString(1033, false);
      byte[] byteArray0 = Utility.decode("cJHy+WJ4DGJe1Zx", false);
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("cJHy$xWJ4DGJe1Zx$7f", "putstatic", ":", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cJHy$xWJ4DGJe1Zx$7f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.methodSignatureReturnType("The FilenameFilter must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The FilenameFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("A.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.accessToString(6);
      Utility.searchOpcode("private protected");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)118;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-42), (int) (byte)118);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 160, true, '?');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.signatureToString("S");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[KC", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      String string0 = "Ljava/lang/Object";
      Utility.replace("Ljava/lang/Object", "Ljava/lang/Object", "Ljava/lang/Object");
      Utility.compactClassName("class", "class", true);
      try { 
        Utility.methodSignatureArgumentTypes("oILr%m*c/d/4uc84", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: oILr%m*c/d/4uc84
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfMethodSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FboEwO04na6>3}aGJ(q");
      int int0 = Utility.setBit(90, 90);
      String string0 = Utility.compactClassName("@MopB");
      boolean boolean0 = Utility.isSet(2809, 0);
      assertTrue(boolean0);
      
      String string1 = Utility.replace("@MopB", "@MopB", "@MopB");
      assertTrue(string1.equals((Object)string0));
      
      int int1 = Utility.clearBit(67108954, 0);
      assertTrue(int1 == int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "FboEwO04na6>3}aGJ(q";
      objectArray0[1] = (Object) "@MopB";
      objectArray0[2] = (Object) "FboEwO04na6>3}aGJ(q";
      objectArray0[3] = (Object) "FboEwO04na6>3}aGJ(q";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "@MopB";
      objectArray0[7] = (Object) "@MopB";
      objectArray0[8] = (Object) null;
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{FboEwO04na6>3}aGJ(q, @MopB, FboEwO04na6>3}aGJ(q, FboEwO04na6>3}aGJ(q, null, null, @MopB, @MopB, null}", string2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "Lstatic;V";
      Utility.signatureToString("Lstatic;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byte byte0 = (byte)83;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)11;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Dont", "]1Vs=6uT{(dp5-l:Kp", "Lstatic;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Dont
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      Utility.toHexString(byteArray0);
      int int0 = (-1323);
      Utility.classOrInterface((-1323));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "interface";
      stringArray0[1] = "interface";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[2] = "c1";
      stringArray0[3] = "interface";
      stringArray0[4] = "c1";
      stringArray0[5] = "c1";
      stringArray0[6] = "c1";
      Utility.methodTypeToSignature("c1", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("c1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = 3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((-2921), 3);
      Utility.classOrInterface(67);
      try { 
        Utility.methodSignatureArgumentTypes("(S\"i=O#qRW]Zzy3!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"i=O#qRW]Zzy3!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.convertString("long");
      String string0 = "Iz 6~/3ztsI";
      String string1 = "6&kX";
      String string2 = "3";
      boolean boolean0 = false;
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "(47yfSF*Kd";
      try { 
        Utility.typeOfMethodSignature("(47yfSF*Kd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (47yfSF*Kd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = 41;
      Utility.setBit((-287), 41);
      int int1 = (-1114);
      Utility.clearBit((-1114), 54);
      File file0 = MockFile.createTempFile("[tK^N`Rn4o`c34&", "[tK^N`Rn4o`c34&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.compactClassName("[tK^N`Rn4o`c34&");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", end_pc = ", "[tK^N`Rn4o`c34&", "9H(w:PP'r^mO|*GBCO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , end_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-101);
      Utility.equals(byteArray0, byteArray0);
      Utility.format(1954, (byte)80, false, 'O');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.clearBit(91, (-197));
      String string0 = "LxA,gDgW`J*bn*T}.";
      Utility.compactClassName("LxA,gDgW`J*bn*T}.");
      try { 
        Utility.methodSignatureArgumentTypes("v.j2,:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v.j2,:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "AB";
      try { 
        Utility.methodSignatureReturnType("AB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `AB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "z@>-";
      try { 
        Utility.typeOfSignature("z@>-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z@>-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "zK]Oz#P$9jG8k";
      boolean boolean0 = false;
      Utility.compactClassName("0*j#G5!mu*f", "zK]Oz#P$9jG8k", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "zK]Oz#P$9jG8k";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "0*j#G5!mu*f";
      objectArray0[3] = (Object) "zK]Oz#P$9jG8k";
      // Undeclared exception!
      try { 
        Utility.signatureToString("zK]Oz#P$9jG8k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zK]Oz#P$9jG8k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.clearBit(149, 149);
      int int0 = Utility.clearBit(149, 149);
      assertEquals(149, int0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.format(1727, (-370), true, 'o');
      assertEquals("1727", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.classOrInterface(126);
      int int0 = 39;
      Utility.clearBit(39, 126);
      String string0 = "";
      Utility.convertString("");
      Utility.classOrInterface(0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = Utility.setBit(0, 1992);
      assertEquals(256, int0);
      
      Utility.signatureToString("Dont call getValueDouble() on a non DOUBLE ElementValue", false);
      String string0 = Utility.compactClassName("Dont call getValueDouble() on a non DOUBLE ElementValue", true);
      assertEquals("Dont call getValueDouble() on a non DOUBLE ElementValue", string0);
      
      String string1 = Utility.accessToString(1992, true);
      assertEquals("static volatile transient native abstract", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "double";
      stringArray0[1] = "static volatile transient native abstract";
      stringArray0[2] = "double";
      stringArray0[3] = "static volatile transient native abstract";
      stringArray0[4] = "org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations";
      stringArray0[5] = "Dont call getValueDouble() on a non DOUBLE ElementValue";
      String string2 = Utility.methodTypeToSignature("static volatile transient native abstract", stringArray0);
      assertEquals("(DLstatic;DLstatic;Lorg/apache/bcel/classfile/RuntimeVisibleParameterAnnotations;LDont;)Lstatic;", string2);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.compactClassName("g~", "zK]Oz#P$9jG8k", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "zK]Oz#P$9jG8k";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "g~";
      objectArray0[3] = (Object) "zK]Oz#P$9jG8k";
      Utility.printArray(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)60;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-121);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-121), (int) (byte) (-121));
      assertEquals("0:    nop\n1:    f2i\n2:    istore_1\n3:    freturn\n4:    i2d\n", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*DH?sBI3)7m%");
      byte[] byteArray0 = Utility.decode(";", false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*DH?sBI3)7m%", "*DH?sBI3)7m%", ":C", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *DH?sBI3)7m%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.accessToString(97, true);
      assertEquals("public volatile", string0);
      
      String string1 = Utility.getSignature("static");
      assertEquals("Lstatic;", string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-47);
      byte byte0 = (byte)77;
      byteArray0[3] = (byte)77;
      Utility.encode(byteArray0, true);
      Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -47
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";'7}{t-[2OT-&c@Dx}");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("newarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)57;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((-2021.94990398));
      constantArray0[0] = (Constant) constantDouble0;
      String string0 = "E<fKZ";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("E<fKZ", "E<fKZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"E<fKZ\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = Utility.format(2032, 2032, true, 'Y');
      String string1 = ":gyGb";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      Utility.methodTypeToSignature(":gyGb", stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(stringArray0[0]);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, ":gyGb", (Object[]) stringArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream1.print(string0);
      PrintStream printStream1 = mockPrintStream1.printf("y3`.;2!'-K.303<_3", (Object[]) stringArray0);
      Utility.printArray(printStream1, (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("n-YG[FTTFqm(f[)v3V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[FTTFqm(f[)v3V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
