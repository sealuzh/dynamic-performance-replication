/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:34:37 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, (-555));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -555. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 14);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 14. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 60. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("N-Nf&we/ExWA");
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      int int0 = 25;
      byteArrayInputStream0.mark(100);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.adjustBeginLineColumn(3442, (byte)95);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      int int1 = 115;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 115. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SwitchTo(3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("1(c8H");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)95, (byte)95);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager1.curLexState = (int) (byte)95;
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      int int0 = 1183;
      byteArrayInputStream1.mark(1183);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      byteArrayInputStream0.close();
      javaCharStream0.adjustBeginLineColumn(1315, (byte)76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 301, (byte)3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 301, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte byte0 = (byte)95;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = 25;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(25, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 26, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      int int0 = byteArrayInputStream1.read();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(65, int0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream1.available());
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream1.available());
      
      byteArrayInputStream0.mark((byte)0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(25, (byte)65);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(26, token0.endLine);
      assertEquals(66, token0.endColumn);
      assertEquals(66, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(26, token0.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals("A", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)65);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 65. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("2_D2Pz_");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("2", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(76, int0);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(313, (byte)76);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(314, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(314, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(314, token0.beginLine);
      assertEquals(314, token0.endLine);
      assertEquals(77, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(77, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(314, javaCharStream0.getBeginLine());
      assertEquals(314, javaCharStream0.getEndLine());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(314, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(26);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 26. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      StringReader stringReader0 = new StringReader("\"*=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"*=\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((byte)3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(3L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 107, 104);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 107, column 105.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(76, int0);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark(25);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn((byte)76, (-588));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(77, javaCharStream0.getBeginLine());
      assertEquals((-588), javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(77, javaCharStream0.getBeginLine());
      assertEquals((-588), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(77, token0.endLine);
      assertEquals((-586), token0.endColumn);
      assertEquals(77, token0.beginLine);
      assertEquals((-587), token0.beginColumn);
      assertEquals(66, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)76, (byte)55, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals("7L", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(77, javaCharStream0.getEndLine());
      assertEquals(77, javaCharStream0.getLine());
      assertEquals((-586), javaCharStream0.getEndColumn());
      assertEquals(77, javaCharStream0.getBeginLine());
      assertEquals((-586), javaCharStream0.getColumn());
      assertEquals((-587), javaCharStream0.getBeginColumn());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 66. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = byteArrayInputStream1.read();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(52, int0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      byteArrayInputStream1.mark((byte)52);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream2.available());
      assertNotNull(byteArrayInputStream2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = byteArrayInputStream2.read();
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertTrue(int1 == int0);
      assertEquals(52, int1);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream2.available());
      
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream2));
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream3.available());
      assertNotNull(byteArrayInputStream3);
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream3));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream3));
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream4.available());
      assertNotNull(byteArrayInputStream4);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream4);
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream3));
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream4.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream4);
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream3));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream4.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream2.close();
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream3));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream4));
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream3);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream4);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream2.available());
      
      javaCharStream0.adjustBeginLineColumn(52, 61);
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream3));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream4.available());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream3));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream4.available());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream4.equals((Object)byteArrayInputStream3));
      assertEquals(62, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(62, token0.endColumn);
      assertEquals(53, token0.beginLine);
      assertEquals(53, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream4, byteArrayInputStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)0}, byteArray0);
      assertEquals("4", token0.toString());
      assertEquals(0, byteArrayInputStream4.available());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(22, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, int0);
      assertEquals(21, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn((byte)51, (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(52, token0.endLine);
      assertEquals(52, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("33", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 52, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-125), (byte)85, (byte)27, (byte)105, (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)85, (byte) (-125), (byte)85, (byte)27, (byte)105, (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-125), (byte)85, (byte)27, (byte)105, (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-125), (byte)85, (byte)27, (byte)105, (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-125), (byte)85, (byte)27, (byte)105, (byte)105, (byte)105}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)83;
      byteArray0[3] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.mark((byte)0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((byte)83);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.SwitchTo((byte)0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("S", token1.toString());
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Token token0 = Token.newToken((byte)60);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2860, 41);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(13, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertEquals(13, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2860, token1.beginLine);
      assertEquals(88, token1.kind);
      assertEquals(2860, token1.endLine);
      assertEquals(41, token1.beginColumn);
      assertEquals(41, token1.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2860, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(2860, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(2860, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, (-2299));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream0.reset();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 48, (-408));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals((-408), token0.endColumn);
      assertEquals((-408), token0.beginColumn);
      assertEquals(48, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(48, token0.endLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-408), javaCharStream2.getEndColumn());
      assertEquals((-408), javaCharStream2.getBeginColumn());
      assertEquals((-408), javaCharStream2.getColumn());
      assertEquals(48, javaCharStream2.getBeginLine());
      assertEquals(48, javaCharStream2.getLine());
      assertEquals(48, javaCharStream2.getEndLine());
      assertEquals("3", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals((-408), token1.beginColumn);
      assertEquals((-408), token1.endColumn);
      assertEquals(48, token1.endLine);
      assertEquals(48, token1.beginLine);
      assertEquals(66, token1.kind);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-408), javaCharStream2.getEndColumn());
      assertEquals((-408), javaCharStream2.getBeginColumn());
      assertEquals((-408), javaCharStream2.getColumn());
      assertEquals(48, javaCharStream2.getBeginLine());
      assertEquals(48, javaCharStream2.getLine());
      assertEquals(48, javaCharStream2.getEndLine());
      assertEquals("3", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-55), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)36, (byte)36);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-55), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-55), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-55), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-55), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-55), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(74, token0.kind);
      assertEquals(40, token0.endColumn);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginLine);
      assertEquals(36, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-55), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$$$$$", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getEndLine());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte) (-71), (byte)11, (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken(0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte) (-71), (byte)11, (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((byte)11);
      assertEquals(11L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte) (-71), (byte)11, (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.mark(0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte) (-71), (byte)11, (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte) (-71), (byte)11, (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(104, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token1, token0);
      assertEquals("/", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray1);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray1);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream0.close();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray1);
      assertEquals(5, byteArrayInputStream0.available());
      
      javaCharStream0.adjustBeginLineColumn(4468, (byte)47);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray1);
      assertEquals(4469, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(4469, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray1);
      assertEquals(4469, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4470, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)55, (byte)108, (byte)0, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)108, (byte)108);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)108, (byte)55, (byte)108, (byte)0, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)108, (byte)55, (byte)108, (byte)0, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      byteArrayInputStream0.mark((-1));
      assertArrayEquals(new byte[] {(byte)108, (byte)55, (byte)108, (byte)0, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)108, (byte)55, (byte)108, (byte)0, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(108, token0.beginLine);
      assertEquals(110, token0.endColumn);
      assertEquals(108, token0.endLine);
      assertArrayEquals(new byte[] {(byte)108, (byte)55, (byte)108, (byte)0, (byte)108, (byte)108}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals("l7l", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 108. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.mark(1394);
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1394, (byte)64);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream2.available());
      assertNotNull(byteArrayInputStream2);
      
      byteArrayInputStream0.close();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(64, token0.beginColumn);
      assertEquals(1394, token0.endLine);
      assertEquals(86, token0.kind);
      assertEquals(64, token0.endColumn);
      assertEquals(1394, token0.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)64, (byte)54, (byte)64}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1394, javaCharStream0.getLine());
      assertEquals(1394, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(1394, javaCharStream0.getEndLine());
      assertEquals("@", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 114. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[5] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken((byte) (-71));
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertEquals(23, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((byte)11);
      assertEquals(11L, long0);
      
      stringReader0.reset();
      token0.kind = 0;
      assertNull(token0.toString());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      Token token1 = Token.newToken((byte)51);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      byteArrayInputStream0.mark(0);
      assertEquals(23, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertEquals(23, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(79, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals("{", token2.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 971);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 971. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, (byte)61);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken(31);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(74, token2.kind);
      assertEquals(61, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(64, token2.endColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$$$$", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertNotNull(token2);
      
      long long0 = stringReader0.skip((byte) (-15));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getColumn());
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pushbackReader0, 110, 0, 0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertNull(token0.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, token3.beginLine);
      assertEquals(87, token3.kind);
      assertEquals(65, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(65, token3.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)61, (byte) (-15), (byte)36, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("=", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getEndColumn());
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 66.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.mark((byte)0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((byte)83);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("{", token1.toString());
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(4, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("ojh", token2.toString());
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(917);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 917. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("!>,~s4+zsW");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(124, token1.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(">", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)59;
      byteArray0[4] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(12, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.mark((byte)108);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(12, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("l", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(83, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(";", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[7] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(37, int0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark(37);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("%", token0.toString());
      assertNotNull(token0);
      
      token0.endLine = 3337;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("%", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1996);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1996. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[7] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      int int0 = byteArrayInputStream0.read();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0, int0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      byteArrayInputStream1.mark((byte)37);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((byte)0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      StringReader stringReader0 = new StringReader("!>,~s4+zsW");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(33, int1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(124, token1.kind);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(">", token1.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(84, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(",", token2.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      
      Token token3 = Token.newToken((-1511));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNull(token3.toString());
      assertNotNull(token3);
      
      token2.specialToken = token2;
      assertEquals(",", token2.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(",", token2.specialToken.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream3 = new JavaCharStream(byteArrayInputStream1, (byte)37, 1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertNotNull(javaCharStream3);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream2.available());
      assertNotNull(byteArrayInputStream2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream3));
      assertEquals(1, token4.beginLine);
      assertEquals(3, token4.beginColumn);
      assertEquals(3, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(90, token4.kind);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals("~", token4.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token4);
      
      byteArrayInputStream1.mark((byte)37);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token5.kind);
      assertEquals(5, token5.endColumn);
      assertEquals(4, token5.beginColumn);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("s4", token5.toString());
      assertNotNull(token5);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, ",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("strictfp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream1.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(53, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(8, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(8, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("strictfp", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 2924);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2924. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[4] = (byte)51;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[5] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken((byte) (-71));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertEquals(23, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("{oh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((byte)11);
      assertEquals(11L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      Token token1 = Token.newToken((byte)51);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      byteArrayInputStream0.mark(0);
      assertEquals(23, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertEquals(23, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals("l2b", token2.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals("", token3.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1596));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1596. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      StringReader stringReader0 = new StringReader("^");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(107, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals("^", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SwitchTo(1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 107. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)64;
      byteArray0[2] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.mark((-2807));
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2807), (byte)14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream2.available());
      assertNotNull(byteArrayInputStream2);
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("@", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SwitchTo(1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      
      Token token1 = Token.newToken((-290));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Ex,3");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals("Ex", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo((-416));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -416. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[4] = (byte)51;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[5] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken((byte) (-71));
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((byte) (-71));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream0.mark(0);
      assertEquals(23, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals("ojh", token2.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(5, token3.endColumn);
      assertEquals(105, token3.kind);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals("&", token3.toString());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertNotNull(token3);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream1, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(5, token3.endColumn);
      assertEquals(105, token3.kind);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals("&", token3.toString());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("}ix@n_vqq_i(ol@Wjd");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(80, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("}", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.SwitchTo(1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("\"|\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"|\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(34, int0);
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(73, token0.kind);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("\"|\"", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(73, token0.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("\"|\"", token0.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(3, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(3, token4.endColumn);
      assertEquals(0, token4.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token4.toString());
      assertNotNull(token4);
      
      javaParserTokenManager0.SkipLexicalActions(token4);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(3, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(3, token4.endColumn);
      assertEquals(0, token4.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token4.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Qz");
      assertNotNull(mockPrintStream0);
      
      try { 
        JavaCharStream.hexval('h');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)0;
      StringReader stringReader0 = new StringReader(".H^7wb*");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"*=\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-3018L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 107, (byte)0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(107, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(107, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals("\"*=\"", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(107, token1.endLine);
      assertEquals(107, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken((-1241));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1867), 107);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(107, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(107, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      token2.image = "";
      assertEquals("", token2.toString());
      
      javaParserTokenManager1.ReInit(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((byte)74);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken((-33));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotSame(token0, token1);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      boolean boolean1 = javaCharStream0.prevCharIsLF;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("LTil\"/Q*>+`|WfVo/");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(4, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("LTil", token2.toString());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 18.  Encountered: <EOF> after : \"\\\"/Q*>+`|WfVo/\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[3] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)74, (byte)74);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken((-1150));
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(74, token1.beginLine);
      assertEquals(74, token1.beginColumn);
      assertEquals(74, token1.endColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)74, (byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals("J", token1.toString());
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1614));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1614. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[4] = (byte)51;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[5] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken((byte) (-71));
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((byte) (-71));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream0.mark(0);
      assertEquals(23, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("{", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals("ojh", token2.toString());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(5, token3.endColumn);
      assertEquals(105, token3.kind);
      assertEquals(5, token3.beginColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals("&", token3.toString());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertNotNull(token3);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream1, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('S', char0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(6, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(6, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals("D", token4.toString());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(token4);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("N-Nf&we/ExWA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("N", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(102, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals("Nf", token2.toString());
      assertNotNull(token2);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(sequenceInputStream0, 33, 1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(105, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("&", token3.toString());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
      assertEquals(74, token4.kind);
      assertEquals(7, token4.endColumn);
      assertEquals(6, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertEquals(7, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(6, javaCharStream1.getBeginColumn());
      assertEquals(7, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("we", token4.toString());
      assertNotNull(token4);
      
      javaParserTokenManager0.ReInit(javaCharStream2, (int) (byte)2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(7, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(6, javaCharStream1.getBeginColumn());
      assertEquals(7, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("N-Nf&we/ExWA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("N", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(102, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 33, 1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("Nf", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, token3.endColumn);
      assertEquals(105, token3.kind);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&", token3.toString());
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (int) (byte) (-27));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -27. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("N-Nf&we/ExWA");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = byteArrayInputStream0.read();
      assertFalse(int1 == int0);
      assertEquals(114, int1);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArrayInputStream0.close();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)114, 51, (byte)114);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(javaCharStream1);
      
      javaCharStream1.adjustBeginLineColumn(40, 40);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token0.endLine);
      assertEquals(41, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(46, token0.endColumn);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(46, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getEndLine());
      assertEquals(41, javaCharStream1.getLine());
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals(46, javaCharStream1.getColumn());
      assertEquals("rrrrrr", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Ex,3");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream1.bufpos = 50;
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(69, int1);
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, javaParserTokenManager0.image.length());
      assertEquals("", javaParserTokenManager0.image.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("x", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo((-416));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -416. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("rjywz)golf}.O");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(114, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("jywz", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(5, token1.endColumn);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken(118);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      Token token3 = new Token();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertNull(token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(5, token1.endColumn);
      assertNotSame(token1, token3);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(")", token1.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(6, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(9, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("golf", token4.toString());
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token5.endLine);
      assertEquals(9, token5.endColumn);
      assertEquals(74, token5.kind);
      assertEquals(6, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("golf", token5.toString());
      assertNotNull(token5);
      
      javaParserTokenManager0.SkipLexicalActions(token5);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token5.endLine);
      assertEquals(9, token5.endColumn);
      assertEquals(74, token5.kind);
      assertEquals(6, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("golf", token5.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("g");
      assertNotNull(mockPrintStream0);
      
      try { 
        JavaCharStream.hexval('+');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)64;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)64;
      byteArray0[2] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.mark((-2807));
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("rjyw)golf}.O");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(114, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("jyw", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)14, (byte) (-63), (byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'w';
      charArray0[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'j', '\"', 'j', 'w', '%'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 31, 31);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'j', '\"', 'j', 'w', '%'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'j', '\"', 'j', 'w', '%'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.bufpos = 31;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(31, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertArrayEquals(new char[] {'j', '\"', 'j', 'w', '%'}, charArray0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(31, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'j', '\"', 'j', 'w', '%'}, charArray0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(31, token1.endLine);
      assertEquals(31, token1.beginLine);
      assertEquals(31, token1.endColumn);
      assertEquals(31, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'j', '\"', 'j', 'w', '%'}, charArray0);
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals("j", token1.toString());
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 31. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("1(c8H");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("1", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(77, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals("(", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(77, token2.kind);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals("(", token2.toString());
      assertNotNull(token2);
      
      Token token3 = Token.newToken(1);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNull(token3.toString());
      assertNotNull(token3);
      
      javaCharStream1.adjustBeginLineColumn(72, (-1471));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1471), javaCharStream1.getColumn());
      assertEquals(72, javaCharStream1.getLine());
      assertEquals(72, javaCharStream1.getBeginLine());
      assertEquals(72, javaCharStream1.getEndLine());
      assertEquals((-1471), javaCharStream1.getEndColumn());
      assertEquals((-1471), javaCharStream1.getBeginColumn());
      
      InputStream inputStream0 = null;
      JavaCharStream javaCharStream2 = null;
      try {
        javaCharStream2 = new JavaCharStream((InputStream) null, (byte)20, (-170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("1(c8H");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("1", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      
      Token token1 = Token.newToken(1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      javaCharStream1.adjustBeginLineColumn(72, (-1471));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(72, javaCharStream1.getBeginLine());
      assertEquals(72, javaCharStream1.getLine());
      assertEquals((-1471), javaCharStream1.getColumn());
      assertEquals(72, javaCharStream1.getEndLine());
      assertEquals((-1471), javaCharStream1.getBeginColumn());
      assertEquals((-1471), javaCharStream1.getEndColumn());
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(72, javaCharStream1.getBeginLine());
      assertEquals(72, javaCharStream1.getLine());
      assertEquals((-1471), javaCharStream1.getColumn());
      assertEquals(72, javaCharStream1.getEndLine());
      assertEquals((-1471), javaCharStream1.getBeginColumn());
      assertEquals((-1471), javaCharStream1.getEndColumn());
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1471), token2.endColumn);
      assertEquals(72, token2.beginLine);
      assertEquals((-1471), token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(72, token2.endLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(72, javaCharStream1.getBeginLine());
      assertEquals(72, javaCharStream1.getLine());
      assertEquals((-1471), javaCharStream1.getColumn());
      assertEquals(72, javaCharStream1.getEndLine());
      assertEquals((-1471), javaCharStream1.getBeginColumn());
      assertEquals((-1471), javaCharStream1.getEndColumn());
      assertEquals("1", token2.toString());
      assertNotNull(token2);
      
      JavaCharStream javaCharStream2 = null;
      try {
        javaCharStream2 = new JavaCharStream((InputStream) null, (byte)20, (-170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)87;
      byteArray0[2] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.mark((-2807));
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2807), (byte)14);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",KJcG!");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken(49);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNull(token0.toString());
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(74, token1.kind);
      assertEquals(14, token1.beginColumn);
      assertEquals(14, token1.endColumn);
      assertEquals((-2807), token1.endLine);
      assertEquals((-2807), token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertArrayEquals(new byte[] {(byte)87, (byte)14, (byte) (-63), (byte)87, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("W", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2807, column 15.  Encountered: \"\\u000e\" (14), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[3] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.mark((byte)83);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream1.available());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7LehMtQteB!4p#ExY");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((byte)83);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      javaParserTokenManager0.defaultLexState = 0;
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringReader stringReader0 = new StringReader("{ojh&DS&xIX/l2b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(79, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals("{", token1.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(74, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals("ojh", token2.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      
      javaCharStream1.bufsize = (int) (byte)83;
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(105, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("&", token3.toString());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(7, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("DS", token4.toString());
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, token5.endLine);
      assertEquals(105, token5.kind);
      assertEquals(8, token5.beginColumn);
      assertEquals(8, token5.endColumn);
      assertEquals(1, token5.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)83, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("&", token5.toString());
      assertNotNull(token5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("rytz)golf}.");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(114, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("ytz", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken(121);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      Token token3 = Token.newToken(118);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNull(token3.toString());
      assertNotNull(token3);
      
      Token token4 = new Token();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, token4.kind);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertNull(token4.toString());
      assertNotNull(token4);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token4));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token2);
      assertNotSame(token1, token3);
      assertNotSame(token1, token4);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(")", token1.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(5, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(74, token5.kind);
      assertEquals(8, token5.endColumn);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("golf", token5.toString());
      assertNotNull(token5);
      
      Token token6 = javaParserTokenManager0.jjFillToken();
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token6.beginLine);
      assertEquals(5, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertEquals(8, token6.endColumn);
      assertEquals(74, token6.kind);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("golf", token6.toString());
      assertNotNull(token6);
      
      javaParserTokenManager0.SkipLexicalActions(token6);
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token6.beginLine);
      assertEquals(5, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertEquals(8, token6.endColumn);
      assertEquals(74, token6.kind);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("golf", token6.toString());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(")", "g");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // g
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn((byte)85, (byte)105);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(106, token0.beginColumn);
      assertEquals(86, token0.endLine);
      assertEquals(86, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(113, token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals("iUiiUUIU", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)105, (byte)85, (byte)105, (byte)105, (byte)85, (byte)85, (byte)73, (byte)85}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = byteArrayInputStream1.read();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(65, int0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream2.available());
      assertNotNull(byteArrayInputStream2);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      StringReader stringReader0 = new StringReader("Gw,.V");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      Token token1 = Token.newToken((-2923));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      byteArrayInputStream2.mark(2573);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream2.available());
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals("Gw", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals("Gw", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertEquals(3, token4.endColumn);
      assertEquals(3, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(84, token4.kind);
      assertEquals(1, token4.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertEquals(",", token4.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertNotNull(token4);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[7] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      int int0 = byteArrayInputStream0.read();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(37, int0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      byteArrayInputStream1.mark((byte)37);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((byte)37);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("%", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("%", token1.toString());
      
      StringReader stringReader0 = new StringReader("!>,~s4+zsW");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(1);
      assertEquals(1L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(62, int1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(84, token2.kind);
      assertEquals(1, token2.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(",", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(90, token3.kind);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals("~", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(token3);
      
      Token token4 = Token.newToken((-1511));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.endColumn);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNull(token4.toString());
      assertNotNull(token4);
      
      javaCharStream2.adjustBeginLineColumn(58, 2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(74, token5.kind);
      assertEquals(4, token5.endColumn);
      assertEquals(3, token5.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("s4", token5.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(token5);
      
      javaParserTokenManager1.SwitchTo(0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertNotNull(javaParserTokenManager3);
      
      Token token6 = javaParserTokenManager3.getNextToken();
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(5, token6.beginColumn);
      assertEquals(101, token6.kind);
      assertEquals(1, token6.beginLine);
      assertEquals(1, token6.endLine);
      assertEquals(5, token6.endColumn);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token6, token1);
      assertNotSame(token6, token0);
      assertNotSame(token6, token4);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals("+", token6.toString());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertEquals(5, javaCharStream1.getColumn());
      assertNotNull(token6);
      
      Token token7 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token4));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(59, token7.endLine);
      assertEquals(59, token7.beginLine);
      assertEquals(0, token7.kind);
      assertEquals(2, token7.beginColumn);
      assertEquals(2, token7.endColumn);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token7, token0);
      assertNotSame(token7, token3);
      assertNotSame(token7, token2);
      assertNotSame(token7, token6);
      assertNotSame(token7, token1);
      assertNotSame(token7, token5);
      assertNotSame(token7, token4);
      assertEquals(59, javaCharStream2.getEndLine());
      assertEquals(59, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
      assertEquals("", token7.toString());
      assertNotNull(token7);
      
      Token token8 = javaParserTokenManager3.getNextToken();
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token2));
      assertFalse(token8.equals((Object)token7));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token6));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, token8.beginLine);
      assertEquals(1, token8.endLine);
      assertEquals(8, token8.endColumn);
      assertEquals(74, token8.kind);
      assertEquals(6, token8.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token8, token4);
      assertNotSame(token8, token1);
      assertNotSame(token8, token5);
      assertNotSame(token8, token2);
      assertNotSame(token8, token7);
      assertNotSame(token8, token3);
      assertNotSame(token8, token0);
      assertNotSame(token8, token6);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals("zsW", token8.toString());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(8, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(6, javaCharStream1.getBeginColumn());
      assertEquals(8, javaCharStream1.getColumn());
      assertNotNull(token8);
      
      Token token9 = javaParserTokenManager2.jjFillToken();
      assertFalse(token9.equals((Object)token5));
      assertFalse(token9.equals((Object)token6));
      assertFalse(token9.equals((Object)token0));
      assertFalse(token9.equals((Object)token4));
      assertFalse(token9.equals((Object)token2));
      assertFalse(token9.equals((Object)token1));
      assertFalse(token9.equals((Object)token7));
      assertFalse(token9.equals((Object)token8));
      assertFalse(token9.equals((Object)token3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(2, token9.endColumn);
      assertEquals(59, token9.endLine);
      assertEquals(2, token9.beginColumn);
      assertEquals(0, token9.kind);
      assertEquals(59, token9.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertNotSame(token9, token5);
      assertNotSame(token9, token6);
      assertNotSame(token9, token0);
      assertNotSame(token9, token4);
      assertNotSame(token9, token2);
      assertNotSame(token9, token1);
      assertNotSame(token9, token7);
      assertNotSame(token9, token8);
      assertNotSame(token9, token3);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertEquals("", token9.toString());
      assertEquals(59, javaCharStream2.getEndLine());
      assertEquals(59, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
      assertNotNull(token9);
      
      javaParserTokenManager1.TokenLexicalActions(token9);
      assertFalse(token9.equals((Object)token5));
      assertFalse(token9.equals((Object)token6));
      assertFalse(token9.equals((Object)token0));
      assertFalse(token9.equals((Object)token4));
      assertFalse(token9.equals((Object)token2));
      assertFalse(token9.equals((Object)token1));
      assertFalse(token9.equals((Object)token7));
      assertFalse(token9.equals((Object)token8));
      assertFalse(token9.equals((Object)token3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(2, token9.endColumn);
      assertEquals(59, token9.endLine);
      assertEquals(2, token9.beginColumn);
      assertEquals(0, token9.kind);
      assertEquals(59, token9.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertNotSame(token9, token5);
      assertNotSame(token9, token6);
      assertNotSame(token9, token0);
      assertNotSame(token9, token4);
      assertNotSame(token9, token2);
      assertNotSame(token9, token1);
      assertNotSame(token9, token7);
      assertNotSame(token9, token8);
      assertNotSame(token9, token3);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertEquals("", token9.toString());
      assertEquals(59, javaCharStream2.getEndLine());
      assertEquals(59, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(59, javaCharStream2.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = byteArrayInputStream1.read();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(73, int0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(73, (byte)73);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken((byte)73);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(74, token1.beginLine);
      assertEquals(74, token1.beginColumn);
      assertEquals(74, token1.endColumn);
      assertEquals(74, token1.endLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals("I", token1.toString());
      assertNotNull(token1);
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)51, (byte) (-71)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = Token.newToken((byte)51);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)51, (byte) (-71)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("vV:WH");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      Token token1 = Token.newToken(14);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)83;
      javaParserTokenManager0.jjmatchedKind = (int) (byte)83;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byteArray1[2] = (byte) (-71);
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)83, (byte) (-71), (byte) (-71), (byte) (-71)}, byteArray1);
      assertEquals(5, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals("vV", token2.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNull(token_GTToken0.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      byteArrayInputStream0.mark(124);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-71), (byte)51, (byte) (-71)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      PipedReader pipedReader1 = new PipedReader();
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertNotNull(pipedReader1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(92, token3.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(":", token3.toString());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotNull(token3);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("vV:WH", "vV");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // vV
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      token0.kind = (-1031);
      assertNull(token0.toString());
      
      StringReader stringReader0 = new StringReader("RU(:+^3@H");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("{ojh&DS&xIX/l2b");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip(0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      Token token1 = Token.newToken((-1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      byteArrayInputStream0.mark(0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      byteArrayInputStream0.mark(0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(stringReader0, stringReader1);
      assertEquals("RU", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(77, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(stringReader0, stringReader1);
      assertEquals("(", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(token3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'F';
      charArray0[2] = 'g';
      charArray0[3] = '';
      charArray0[4] = '}';
      charArray0[5] = 'Z';
      charArray0[6] = 'e';
      charArray0[7] = '`';
      charArray0[8] = 'h';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)47;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 2118;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)47, 2118);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token0.beginLine);
      assertEquals(2118, token0.endColumn);
      assertEquals(2118, token0.beginColumn);
      assertEquals(47, token0.endLine);
      assertEquals(104, token0.kind);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(2118, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(2118, javaCharStream0.getColumn());
      assertEquals(2118, javaCharStream0.getBeginColumn());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2118. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",liJ2x`hcLZ{_x");
      assertFalse(boolean0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(22, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertEquals(22, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("RU(:+^3@H");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("LfRM4_O4.S~.KB}");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-3267L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      Token token1 = Token.newToken(0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      byteArrayInputStream0.mark(0);
      assertEquals(22, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertEquals(22, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      byteArrayInputStream0.mark(2672);
      assertEquals(22, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(74, token2.kind);
      assertEquals(8, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token2, token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals("LfRM4_O4", token2.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(9, token3.beginColumn);
      assertEquals(85, token3.kind);
      assertEquals(9, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(".", token3.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(10, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(10, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals("S", token4.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertNotNull(token4);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager1.ReInit(javaCharStream0, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager3.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)85;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)27;
      byteArray1[5] = (byte)27;
      byteArray1[6] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)105, (byte)70, (byte)27, (byte)85, (byte)27, (byte)27, (byte)27}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)70, (byte)27, (byte)85, (byte)27, (byte)27, (byte)27}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)105, (byte)70, (byte)27, (byte)85, (byte)27, (byte)27, (byte)27}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)105, (byte)70, (byte)27, (byte)85, (byte)27, (byte)27, (byte)27}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)70, (byte)27, (byte)85, (byte)27, (byte)27, (byte)27}, byteArray1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("iF", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (int) (byte)27);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 27. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)69;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2118, (byte)108);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2118, token0.endLine);
      assertEquals(2118, token0.beginLine);
      assertEquals(109, token0.endColumn);
      assertEquals(108, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(2118, javaCharStream0.getEndLine());
      assertEquals(2118, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(2118, javaCharStream0.getBeginLine());
      assertEquals("lE", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 108. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("rjywz)golf}.O");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("rjywz", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken(118);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      Token token3 = new Token();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertNull(token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token3));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token3);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(")", token1.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(10, token4.endColumn);
      assertEquals(7, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals("golf", token4.toString());
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(10, token5.endColumn);
      assertEquals(74, token5.kind);
      assertEquals(1, token5.endLine);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals("golf", token5.toString());
      assertNotNull(token5);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("g");
      assertNotNull(mockPrintStream0);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token6.endLine);
      assertEquals(11, token6.beginColumn);
      assertEquals(80, token6.kind);
      assertEquals(11, token6.endColumn);
      assertEquals(1, token6.beginLine);
      assertNotSame(token6, token0);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("}", token6.toString());
      assertNotNull(token6);
      
      Token token7 = javaParserTokenManager0.jjFillToken();
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token2));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, token7.beginColumn);
      assertEquals(1, token7.beginLine);
      assertEquals(80, token7.kind);
      assertEquals(11, token7.endColumn);
      assertEquals(1, token7.endLine);
      assertNotSame(token7, token0);
      assertNotSame(token7, token4);
      assertNotSame(token7, token1);
      assertNotSame(token7, token5);
      assertNotSame(token7, token3);
      assertNotSame(token7, token6);
      assertNotSame(token7, token2);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("}", token7.toString());
      assertNotNull(token7);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.reset();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("FF", token0.toString());
      assertNotNull(token0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 2);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, (byte)70, 106, (byte)70);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaCharStream javaCharStream2 = null;
      int int1 = byteArrayInputStream0.read();
      assertFalse(int1 == int0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), int1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)27, (byte)70, (byte)70}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream3 = null;
      try {
        javaCharStream3 = new JavaCharStream(pushbackReader0, 74, 757, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }
}
