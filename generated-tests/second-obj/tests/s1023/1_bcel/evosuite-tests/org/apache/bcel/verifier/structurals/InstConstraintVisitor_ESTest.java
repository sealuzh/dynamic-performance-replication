/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:26:24 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-37));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals(2, bIPUSH0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(94);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals((short)24, dLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(149);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals((short)23, fLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC((INVOKEDYNAMIC) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals(1, aCONST_NULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISUB iSUB0 = new ISUB();
      POP2 pOP2_0 = (POP2)InstructionConstants.POP2;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(pOP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(3170);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals("dstore", dSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(5);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      assertEquals(0, jSR_W0.getIndex());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(31);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(iNVOKESPECIAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)1557);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE(117);
      String string0 = Constants.CONSTRUCTOR_NAME;
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals("nop", nOP0.getName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitICONST((ICONST) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(31);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals("aload", aLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      ObjectType objectType1 = new ObjectType("");
      ObjectType.getInstance("");
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISTORE iSTORE0 = new ISTORE((byte)40);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      byte byte0 = (byte)40;
      ObjectType objectType0 = new ObjectType("3w|>Tjh");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.merge(localVariables0);
      instConstraintVisitor0.setFrame(frame0);
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      instConstraintVisitor0.visitLocalVariableInstruction(iSTORE0);
      operandStack0.clear();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(3911, objectType0);
      LocalVariables localVariables2 = new LocalVariables((byte)40);
      LocalVariables localVariables3 = localVariables2.getClone();
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(2, 2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      AASTORE aASTORE0 = new AASTORE();
      DUP dUP0 = new DUP();
      ISHR iSHR0 = new ISHR();
      ISTORE iSTORE0 = new ISTORE(1483);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      instConstraintVisitor0.visitFSTORE((FSTORE) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      assertEquals((short)200, gOTO_W0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1372);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEDYNAMIC0);
      assertEquals(1372, iNVOKEDYNAMIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR((LUSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "erkr");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LLOAD lLOAD0 = new LLOAD(72);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals("lload", lLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      DDIV dDIV0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV((DDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals((short)11, fCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(1169, 2106);
      instConstraintVisitor0.setFrame(frame0);
      DLOAD dLOAD0 = new DLOAD(1169);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IINC iINC0 = new IINC(1169, 1169);
      IINC iINC1 = new IINC(2106, 2106);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      IUSHR iUSHR1 = new IUSHR();
      RET rET0 = new RET((byte)40);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 40.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(117);
      String string0 = Constants.CONSTRUCTOR_NAME;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(117);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals(117, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      D2L d2L0 = new D2L();
      frame0.equals(d2L0);
      instConstraintVisitor0.setFrame(frame0);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(814);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(aRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARETURN constraint violated: Cannot consume 1 stack slots: only 0 slot(s) left on stack!
         // Stack:
         // Slots used: 0 MaxStack: 0.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(2107, 2107);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IINC iINC0 = new IINC(80, 80);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      LocalVariables localVariables0 = new LocalVariables(451);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.clone();
      localVariables0.merge(localVariables1);
      localVariables0.merge(localVariables2);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables2, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      frame0.getClone();
      localVariables1.getClone();
      LocalVariables localVariables3 = localVariables1.getClone();
      Frame frame1 = new Frame(localVariables3, operandStack0);
      DLOAD dLOAD0 = new DLOAD(2399);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(dLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      byte byte0 = (byte)72;
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      ObjectType objectType1 = new ObjectType("");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      Frame.setThis(uninitializedObjectType0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables0.merge(localVariables2);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      I2F i2F0 = new I2F();
      DMUL dMUL0 = new DMUL();
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) (byte)40);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      instructionList0.append((CompoundInstruction) pUSH0);
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList1.append(instructionList0);
      instructionList0.insert((Instruction) l2I0);
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      assertEquals(3, iFNULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      lNEG0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("'A_\"OPV)twJ=;'155A5");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type ''A_\"OPV)twJ='.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      operandStack0.equals(dUP2_X2_0);
      instConstraintVisitor0.setFrame(frame1);
      LNEG lNEG1 = new LNEG();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CHECKCAST cHECKCAST0 = new CHECKCAST(49);
      ObjectType objectType0 = ObjectType.getInstance("=5#");
      OperandStack operandStack0 = new OperandStack(11, objectType0);
      LocalVariables localVariables0 = new LocalVariables(11);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type '=5#'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(2);
      operandStack0.push(objectType0);
      LNEG lNEG0 = new LNEG();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      Frame frame2 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)51, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)51);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      SIPUSH sIPUSH0 = new SIPUSH((short)593);
      frame0.equals(sIPUSH0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.clone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      I2F i2F0 = new I2F();
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)70);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name 
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("R");
      LocalVariables localVariables0 = new LocalVariables(468);
      OperandStack operandStack0 = new OperandStack(203, objectType0);
      Frame frame0 = new Frame(468, 468);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LNEG lNEG0 = new LNEG();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R");
      LocalVariables localVariables1 = localVariables0.getClone();
      D2I d2I0 = new D2I();
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      Frame frame1 = new Frame(localVariables2, operandStack0);
      frame1.clone();
      frame1.toString();
      Frame frame2 = frame1.getClone();
      instConstraintVisitor0.setFrame(frame2);
      OperandStack operandStack1 = new OperandStack(3, objectType0);
      DSTORE dSTORE0 = new DSTORE(2815);
      F2D f2D0 = new F2D();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'R'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LNEG lNEG0 = new LNEG();
      DASTORE dASTORE0 = new DASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.append((CompoundInstruction) pUSH0);
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("MoqG/h#F");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      LocalVariables localVariables1 = new LocalVariables((byte)40);
      localVariables0.getClone();
      localVariables0.clone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'MoqG.h#F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)112, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      OperandStack operandStack1 = new OperandStack((byte)112);
      operandStack1.getClone();
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("zy+X3Ibw0DY");
      OperandStack operandStack0 = new OperandStack(251, objectType0);
      LocalVariables localVariables0 = new LocalVariables(251);
      String string0 = localVariables0.toString();
      ObjectType objectType1 = new ObjectType(string0);
      ObjectType.getInstance("zy+X3Ibw0DY");
      operandStack0.getClone();
      LocalVariables localVariables1 = new LocalVariables(251);
      DUP2 dUP2_0 = new DUP2();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1011);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'zy+X3Ibw0DY'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)54, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)52);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("' illegal? Pass 3a should have checked this!");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.toString();
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.merge(localVariables2);
      localVariables1.merge(localVariables2);
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables2, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      int int0 = Double.BYTES;
      L2D l2D0 = new L2D();
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type '' illegal? Pass 3a should have checked this!'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(31);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n");
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      LocalVariables localVariables1 = new LocalVariables((byte)72);
      LocalVariables localVariables2 = new LocalVariables(3562);
      LocalVariables localVariables3 = localVariables1.getClone();
      localVariables2.getClone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Frame frame0 = new Frame(localVariables3, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      GETFIELD gETFIELD0 = new GETFIELD(359);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)70);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LOR lOR0 = new LOR();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (-2042));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      LUSHR lUSHR0 = new LUSHR();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lUSHR0);
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      lUSHR0.copy();
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(0);
      L2F l2F0 = new L2F();
      JSR jSR0 = new JSR(instructionHandle0);
      instConstraintVisitor0.visitJSR(jSR0);
      assertEquals("jsr", jSR0.getName());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(31);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n");
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      LocalVariables localVariables1 = new LocalVariables((byte)72);
      LocalVariables localVariables2 = new LocalVariables(31);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      lNEG0.getType(constantPoolGen0);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)70, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)70);
      localVariables0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = new ObjectType("' illegal? Pass 3a should have checked this!");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      short short0 = (short)657;
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY((byte)40, (short)657);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '657' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      Frame frame1 = new Frame(localVariables0, (OperandStack) null);
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2((DUP_X2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)56, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)56);
      Class<AALOAD> class0 = AALOAD.class;
      Type.getType(class0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      Frame frame2 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      LNEG lNEG0 = new LNEG();
      IUSHR iUSHR0 = new IUSHR();
      I2D i2D0 = new I2D();
      L2I l2I1 = new L2I();
      ATHROW aTHROW0 = new ATHROW();
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("' illegal? Pass 3a should have checked this!");
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LNEG lNEG0 = new LNEG();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C83#\"u=D>;^k%");
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type '' illegal? Pass 3a should have checked this!'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.clone();
      LNEG lNEG0 = new LNEG();
      I2F i2F0 = new I2F();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      I2L i2L0 = new I2L();
      FADD fADD0 = new FADD();
      DUP_X2 dUP_X2_0 = new DUP_X2();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("aload_1");
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = new LocalVariables((byte)67);
      localVariables0.merge(localVariables1);
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'aload_1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)72}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      DSTORE dSTORE0 = (DSTORE)Instruction.readInstruction(byteSequence0);
      assertArrayEquals(new byte[] {(byte)72}, byteArray0);
      assertEquals(1, dSTORE0.getLength());
      assertEquals("dstore_1", dSTORE0.getName());
      assertEquals(1, dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short)72, dSTORE0.getOpcode());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(dSTORE0);
      
      boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      
      I2D i2D0 = new I2D();
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertEquals("i2d", i2D0.getName());
      assertNotNull(i2D0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      I2L i2L0 = new I2L();
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(1, i2L0.getLength());
      assertNotNull(i2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(176);
      assertEquals(176, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = new LocalVariables(176);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(176, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      ObjectType objectType0 = new ObjectType("T!L(3Uf|Q]5@");
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      Class<LXOR> class0 = LXOR.class;
      ObjectType objectType1 = (ObjectType)Type.getType(class0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals("org.apache.bcel.generic.LXOR", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("Lorg/apache/bcel/generic/LXOR;", objectType1.getSignature());
      assertNotSame(objectType1, objectType0);
      assertNotNull(objectType1);
      
      OperandStack operandStack0 = new OperandStack(176, objectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(objectType0, objectType1);
      assertNotSame(frame1, frame0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      Character character0 = new Character('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(instructionHandle0);
      
      int int0 = constantPoolGen0.addString("T!L(3Uf|Q]5@");
      assertEquals(2, int0);
      assertEquals(3, constantPoolGen0.getSize());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG((FCMPG) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      byte byte0 = (byte)72;
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(72, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      LocalVariables localVariables0 = new LocalVariables(2764);
      assertEquals(2764, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      operandStack0.push(objectType0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2764, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2764, localVariables0.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      Frame frame2 = (Frame)frame1.clone();
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2764, localVariables0.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      assertNotNull(frame2);
      
      Frame frame3 = new Frame(localVariables0, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame3.equals((Object)frame1));
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2764, localVariables0.maxLocals());
      assertNotNull(frame3);
      
      instConstraintVisitor0.setFrame(frame1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame3));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2764, localVariables0.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame3);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame3);
      
      PUTFIELD pUTFIELD0 = null;
      LSUB lSUB0 = new LSUB();
      assertEquals("lsub", lSUB0.getName());
      assertEquals(1, lSUB0.getLength());
      assertEquals((short)101, lSUB0.getOpcode());
      assertNotNull(lSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DCONST dCONST0 = new DCONST(0.0);
      assertEquals(1, dCONST0.getLength());
      assertEquals((short)14, dCONST0.getOpcode());
      assertEquals("dconst_0", dCONST0.getName());
      assertNotNull(dCONST0);
      
      instConstraintVisitor0.visitDCONST(dCONST0);
      assertEquals(1, dCONST0.getLength());
      assertEquals((short)14, dCONST0.getOpcode());
      assertEquals("dconst_0", dCONST0.getName());
      
      I2S i2S0 = new I2S();
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals("i2s", i2S0.getName());
      assertNotNull(i2S0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      Character character0 = new Character('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IFLE iFLE0 = new IFLE(instructionHandle0);
      assertEquals(0, iFLE0.getIndex());
      assertEquals(3, iFLE0.getLength());
      assertEquals("ifle", iFLE0.getName());
      assertEquals((short)158, iFLE0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(iFLE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("T(");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT(;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T(", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT(;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T(", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT(;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T(", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT(;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T(", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT(;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T(", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF((INSTANCEOF) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals(1, iUSHR0.getLength());
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      IUSHR iUSHR1 = new IUSHR();
      assertTrue(iUSHR1.equals((Object)iUSHR0));
      assertEquals("iushr", iUSHR1.getName());
      assertEquals((short)124, iUSHR1.getOpcode());
      assertEquals(1, iUSHR1.getLength());
      assertNotNull(iUSHR1);
      
      ASTORE aSTORE0 = new ASTORE(1557);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(1557, aSTORE0.getIndex());
      assertEquals(4, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertNotNull(aSTORE0);
      
      // Undeclared exception!
      try { 
        aSTORE0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ASTORE constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("Only element values of type annotation can be built with this ctor - type specified: ");
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      assertEquals(67, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotNull(localVariables3);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      
      String string0 = localVariables0.toString();
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(67, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      I2D i2D0 = new I2D();
      assertEquals(1, i2D0.getLength());
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals("i2d", i2D0.getName());
      assertNotNull(i2D0);
      
      FADD fADD0 = new FADD();
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertNotNull(fADD0);
      
      FDIV fDIV0 = new FDIV();
      assertEquals(1, fDIV0.getLength());
      assertEquals("fdiv", fDIV0.getName());
      assertEquals((short)110, fDIV0.getOpcode());
      assertNotNull(fDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'Only element values of type annotation can be built with this ctor - type specified: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LocalVariables localVariables0 = new LocalVariables(2);
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, localVariables0.maxLocals());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(frame2);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)frame2));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, localVariables0.maxLocals());
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD((PUTFIELD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(72, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 72.\n (Size: 1)\n", string0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotNull(string0);
      
      OperandStack operandStack2 = operandStack0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.slotsUsed());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      assertNotNull(operandStack2);
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertEquals(40, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      LocalVariables localVariables4 = new LocalVariables((byte)40);
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertEquals(40, localVariables4.maxLocals());
      assertNotNull(localVariables4);
      
      Frame frame2 = new Frame(localVariables2, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotNull(frame2);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)frame2));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      String string1 = mONITORENTER0.toString((ConstantPool) null);
      assertEquals("monitorenter", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(string1);
      
      Instruction instruction0 = mONITORENTER0.copy();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)194, instruction0.getOpcode());
      assertSame(mONITORENTER0, instruction0);
      assertSame(instruction0, mONITORENTER0);
      assertNotNull(instruction0);
      
      FSUB fSUB0 = new FSUB();
      assertEquals(1, fSUB0.getLength());
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals("fsub", fSUB0.getName());
      assertNotNull(fSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      SASTORE sASTORE0 = new SASTORE();
      assertEquals((short)86, sASTORE0.getOpcode());
      assertEquals("sastore", sASTORE0.getName());
      assertEquals(1, sASTORE0.getLength());
      assertNotNull(sASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(31);
      assertEquals(31, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = localVariables0.toString();
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n", string0);
      assertEquals(31, localVariables0.maxLocals());
      assertNotNull(string0);
      
      ObjectType objectType0 = ObjectType.getInstance("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n");
      assertEquals("L0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n;", objectType0.getSignature());
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals("L0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n;", objectType0.getSignature());
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables1 = new LocalVariables(31);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(31, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(31, localVariables0.maxLocals());
      assertEquals("L0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n;", objectType0.getSignature());
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables2 = new LocalVariables(56);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertEquals(56, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = new LocalVariables(56);
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertEquals(56, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      
      LocalVariables localVariables4 = localVariables3.getClone();
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertEquals(56, localVariables3.maxLocals());
      assertEquals(56, localVariables4.maxLocals());
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables0);
      assertNotNull(localVariables4);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables0.equals((Object)localVariables4));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(31, localVariables0.maxLocals());
      assertEquals("L0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n;", objectType0.getSignature());
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables0.equals((Object)localVariables4));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(31, localVariables0.maxLocals());
      assertEquals("L0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n;", objectType0.getSignature());
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(frame0, frame1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      assertEquals(0, jSR_W0.getIndex());
      assertEquals("jsr_w", jSR_W0.getName());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals(5, jSR_W0.getLength());
      assertNotNull(jSR_W0);
      
      InstructionHandle instructionHandle0 = instructionList0.findHandle(31);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle0);
      
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertNotNull(iFNE0);
      
      IFNE iFNE1 = new IFNE((InstructionHandle) null);
      assertFalse(iFNE1.equals((Object)iFNE0));
      assertEquals((short)154, iFNE1.getOpcode());
      assertEquals(3, iFNE1.getLength());
      assertEquals(0, iFNE1.getIndex());
      assertEquals("ifne", iFNE1.getName());
      assertNotNull(iFNE1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      localVariables0.merge(localVariables0);
      assertEquals(72, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertNotSame(frame0, frame1);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertEquals((short)124, iUSHR0.getOpcode());
      assertNotNull(iUSHR0);
      
      F2D f2D0 = new F2D();
      assertEquals((short)141, f2D0.getOpcode());
      assertEquals("f2d", f2D0.getName());
      assertEquals(1, f2D0.getLength());
      assertNotNull(f2D0);
      
      F2D f2D1 = new F2D();
      assertTrue(f2D1.equals((Object)f2D0));
      assertEquals(1, f2D1.getLength());
      assertEquals((short)141, f2D1.getOpcode());
      assertEquals("f2d", f2D1.getName());
      assertNotNull(f2D1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("' illegal? Pass 3a should have checked this!");
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      FCMPL fCMPL0 = new FCMPL();
      assertEquals((short)149, fCMPL0.getOpcode());
      assertEquals("fcmpl", fCMPL0.getName());
      assertEquals(1, fCMPL0.getLength());
      assertNotNull(fCMPL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type '' illegal? Pass 3a should have checked this!'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte byte0 = (byte)72;
      ObjectType objectType0 = ObjectType.getInstance("?}%,+vm.v2isg1~/");
      assertEquals("?}%,+vm.v2isg1~.", objectType0.getClassName());
      assertEquals("L?}%,+vm/v2isg1~/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals("?}%,+vm.v2isg1~.", objectType0.getClassName());
      assertEquals("L?}%,+vm/v2isg1~/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals("?}%,+vm.v2isg1~.", objectType0.getClassName());
      assertEquals("L?}%,+vm/v2isg1~/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("?}%,+vm.v2isg1~.", objectType0.getClassName());
      assertEquals("L?}%,+vm/v2isg1~/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      L2D l2D0 = new L2D();
      assertEquals(1, l2D0.getLength());
      assertEquals("l2d", l2D0.getName());
      assertEquals((short)138, l2D0.getOpcode());
      assertNotNull(l2D0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type '?}%,+vm.v2isg1~.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".2+[ud'Rbe");
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType(".2+[ud'Rbe");
      assertEquals(".2+[ud'Rbe", objectType0.getClassName());
      assertEquals("L/2+[ud'Rbe;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      assertEquals(".2+[ud'Rbe", objectType0.getClassName());
      assertEquals("L/2+[ud'Rbe;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables(1);
      assertEquals(1, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ReferenceType referenceType0 = Type.NULL;
      assertNotNull(referenceType0);
      
      ObjectType objectType1 = (ObjectType)objectType0.getFirstCommonSuperclass(referenceType0);
      assertEquals(".2+[ud'Rbe", objectType0.getClassName());
      assertEquals("L/2+[ud'Rbe;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/2+[ud'Rbe;", objectType1.getSignature());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(".2+[ud'Rbe", objectType1.getClassName());
      assertSame(objectType0, objectType1);
      assertSame(objectType1, objectType0);
      assertNotNull(objectType1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(".2+[ud'Rbe", objectType0.getClassName());
      assertEquals("L/2+[ud'Rbe;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(".2+[ud'Rbe", objectType0.getClassName());
      assertEquals("L/2+[ud'Rbe;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, localVariables0.maxLocals());
      assertSame(objectType0, objectType1);
      assertNotSame(localVariables0, localVariables1);
      
      DADD dADD0 = new DADD();
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertNotNull(dADD0);
      
      Boolean boolean1 = Boolean.valueOf(".2+[ud'Rbe");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      DNEG dNEG0 = new DNEG();
      assertEquals(1, dNEG0.getLength());
      assertEquals((short)119, dNEG0.getOpcode());
      assertEquals("dneg", dNEG0.getName());
      assertNotNull(dNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type '.2+[ud'Rbe'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("' illegal? Pass 3a should have checked this!");
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType1 = ObjectType.getInstance("' illegal? Pass 3a should have checked this!");
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType1.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertNotSame(objectType1, objectType0);
      assertNotNull(objectType1);
      
      OperandStack operandStack1 = new OperandStack((byte)40, objectType1);
      assertTrue(objectType1.equals((Object)objectType0));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType1.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(40, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      
      LocalVariables localVariables1 = new LocalVariables((byte)40);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotNull(frame0);
      
      ConstantString constantString0 = new ConstantString(2);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(2, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(2, constantString0.getStringIndex());
      assertEquals(2, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertNotNull(constantString1);
      
      Object object0 = frame0.clone();
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(object0.equals((Object)frame0));
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables3.maxLocals());
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      Frame frame1 = new Frame(localVariables3, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)object0));
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables3.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)object0));
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables3.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, object0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      assertEquals("dup2_x1", dUP2_X1_0.getName());
      assertEquals(1, dUP2_X1_0.getLength());
      assertEquals((short)93, dUP2_X1_0.getOpcode());
      assertNotNull(dUP2_X1_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      Class<FSTORE> class0 = FSTORE.class;
      ObjectType objectType1 = (ObjectType)Type.getType(class0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals("org.apache.bcel.generic.FSTORE", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("Lorg/apache/bcel/generic/FSTORE;", objectType1.getSignature());
      assertNotSame(objectType1, objectType0);
      assertNotNull(objectType1);
      
      LocalVariables localVariables0 = new LocalVariables(2);
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      operandStack0.push(objectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(objectType0, objectType1);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType1);
      
      LNEG lNEG1 = new LNEG();
      assertTrue(lNEG1.equals((Object)lNEG0));
      assertEquals((short)117, lNEG1.getOpcode());
      assertEquals(1, lNEG1.getLength());
      assertEquals("lneg", lNEG1.getName());
      assertNotNull(lNEG1);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertNotNull(dUP_X1_0);
      
      FNEG fNEG0 = new FNEG();
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((short)118, fNEG0.getOpcode());
      assertNotNull(fNEG0);
      
      L2I l2I1 = (L2I)l2I0.copy();
      assertEquals(1, l2I1.getLength());
      assertEquals((short)136, l2I1.getOpcode());
      assertEquals("l2i", l2I1.getName());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertSame(l2I1, l2I0);
      assertSame(l2I0, l2I1);
      assertNotNull(l2I1);
      
      LSHL lSHL0 = new LSHL();
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertNotNull(lSHL0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2, localVariables1.maxLocals());
      assertEquals(2, localVariables0.maxLocals());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(localVariables1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("m`c@@R");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lm`c@@R;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("m`c@@R", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lm`c@@R;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("m`c@@R", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lm`c@@R;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("m`c@@R", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      Object object0 = frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(object0.equals((Object)frame0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lm`c@@R;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("m`c@@R", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      LDC2_W lDC2_W0 = new LDC2_W(1164);
      assertEquals("ldc2_w", lDC2_W0.getName());
      assertEquals((short)20, lDC2_W0.getOpcode());
      assertEquals(3, lDC2_W0.getLength());
      assertEquals(1164, lDC2_W0.getIndex());
      assertNotNull(lDC2_W0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      boolean boolean0 = frame0.equals(lDC2_W0);
      assertFalse(boolean0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)object0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lm`c@@R;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("m`c@@R", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals("ldc2_w", lDC2_W0.getName());
      assertEquals((short)20, lDC2_W0.getOpcode());
      assertEquals(3, lDC2_W0.getLength());
      assertEquals(1164, lDC2_W0.getIndex());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, object0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)object0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lm`c@@R;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("m`c@@R", objectType0.getClassName());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, object0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1164, 1164);
      assertEquals(1164, constantMethodHandle0.getReferenceIndex());
      assertEquals(1164, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1164);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1164.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1164.0, constantDouble0.getBytes(), 0.01);
      assertEquals(1164.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(constantDouble1);
      
      String string0 = "I6LrZ3\\EqR{3k";
      DADD dADD0 = new DADD();
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertNotNull(dADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'm`c@@R'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      Object object0 = frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(object0.equals((Object)frame0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)object0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, object0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("7");
      assertEquals("7", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L7;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("7", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L7;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("7", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L7;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("7", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L7;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      ASTORE aSTORE0 = new ASTORE((byte)40);
      assertEquals(2, aSTORE0.getLength());
      assertEquals(40, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertNotNull(aSTORE0);
      
      LMUL lMUL0 = new LMUL();
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals("lmul", lMUL0.getName());
      assertNotNull(lMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type '7'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      IAND iAND0 = new IAND();
      assertEquals("iand", iAND0.getName());
      assertEquals((short)126, iAND0.getOpcode());
      assertEquals(1, iAND0.getLength());
      assertNotNull(iAND0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("' illegal? Pass 3a should have checked this!");
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame1, frame0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      LocalVariables localVariables2 = new LocalVariables(46);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertEquals(46, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      String string0 = localVariables1.toString();
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n31: <unknown object>\n32: <unknown object>\n33: <unknown object>\n34: <unknown object>\n35: <unknown object>\n36: <unknown object>\n37: <unknown object>\n38: <unknown object>\n39: <unknown object>\n", string0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotNull(string0);
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      String string1 = localVariables0.toString();
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n31: <unknown object>\n32: <unknown object>\n33: <unknown object>\n34: <unknown object>\n35: <unknown object>\n36: <unknown object>\n37: <unknown object>\n38: <unknown object>\n39: <unknown object>\n", string1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(string1.equals((Object)string0));
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotNull(string1);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertNotNull(mONITOREXIT0);
      
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      assertEquals(67, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      String string0 = Pattern.quote("");
      assertEquals("\\Q\\E", string0);
      assertNotNull(string0);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      int int0 = constantPoolGen0.addString("QE");
      assertEquals(2, int0);
      assertEquals(3, constantPoolGen0.getSize());
      
      I2F i2F0 = new I2F();
      assertEquals(1, i2F0.getLength());
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals("i2f", i2F0.getName());
      assertNotNull(i2F0);
      
      DMUL dMUL0 = new DMUL();
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals("dmul", dMUL0.getName());
      assertNotNull(dMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      Instruction instruction0 = Instruction.readInstruction(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("nop", instruction0.getName());
      assertEquals((short)0, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertNotSame(byteSequence1, byteSequence0);
      assertNotNull(instruction0);
      
      LXOR lXOR0 = new LXOR();
      assertEquals((short)131, lXOR0.getOpcode());
      assertEquals("lxor", lXOR0.getName());
      assertEquals(1, lXOR0.getLength());
      assertNotNull(lXOR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("' illegal? Pass 3a should have checked this!");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)88, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)88);
      assertEquals(88, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(88, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertNotNull(bREAKPOINT0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(88, localVariables0.maxLocals());
      
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)88);
      assertEquals((byte)88, nEWARRAY0.getTypecode());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals("newarray", nEWARRAY0.getName());
      assertNotNull(nEWARRAY0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type '' illegal? Pass 3a should have checked this!'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      
      String string0 = localVariables0.toString();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(72, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, frame1);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      LDIV lDIV0 = new LDIV();
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals("ldiv", lDIV0.getName());
      assertEquals(1, lDIV0.getLength());
      assertNotNull(lDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      POP2 pOP2_0 = new POP2();
      assertEquals((short)88, pOP2_0.getOpcode());
      assertEquals(1, pOP2_0.getLength());
      assertEquals("pop2", pOP2_0.getName());
      assertNotNull(pOP2_0);
      
      POP2 pOP2_1 = new POP2();
      assertTrue(pOP2_1.equals((Object)pOP2_0));
      assertEquals(1, pOP2_1.getLength());
      assertEquals("pop2", pOP2_1.getName());
      assertEquals((short)88, pOP2_1.getOpcode());
      assertNotNull(pOP2_1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is '' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("1aOhSXuqn;j1t");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1aOhSXuqn;j1t;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("1aOhSXuqn;j1t", objectType0.getClassName());
      assertNotNull(objectType0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OperandStack operandStack0 = new OperandStack((byte)35, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1aOhSXuqn;j1t;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("1aOhSXuqn;j1t", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(35, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = new LocalVariables(448);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(448, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1aOhSXuqn;j1t;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("1aOhSXuqn;j1t", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(35, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertNotNull(iXOR0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      
      boolean boolean1 = frame0.equals(iXOR0);
      assertFalse(boolean1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1aOhSXuqn;j1t;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("1aOhSXuqn;j1t", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(35, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1aOhSXuqn;j1t;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("1aOhSXuqn;j1t", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(35, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(448, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string1 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 35.\n1aOhSXuqn (Size: 1)\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1aOhSXuqn;j1t;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("1aOhSXuqn;j1t", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(35, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(string1);
      
      localVariables1.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      String string2 = localVariables2.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(string2);
      
      Frame frame1 = new Frame(localVariables2, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1aOhSXuqn;j1t;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("1aOhSXuqn;j1t", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(35, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(448, localVariables2.maxLocals());
      assertNotNull(frame1);
      
      IDIV iDIV0 = new IDIV();
      assertEquals((short)108, iDIV0.getOpcode());
      assertEquals(1, iDIV0.getLength());
      assertEquals("idiv", iDIV0.getName());
      assertNotNull(iDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type '1aOhSXuqn'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("3w|>Tjh");
      assertEquals("3w|>Tjh", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L3w|>Tjh;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("3w|>Tjh", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L3w|>Tjh;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)72);
      assertEquals(72, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("3w|>Tjh", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L3w|>Tjh;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("3w|>Tjh", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L3w|>Tjh;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, localVariables0.maxLocals());
      assertEquals(72, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals(1, iUSHR0.getLength());
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      IUSHR iUSHR1 = new IUSHR();
      assertTrue(iUSHR1.equals((Object)iUSHR0));
      assertEquals("iushr", iUSHR1.getName());
      assertEquals(1, iUSHR1.getLength());
      assertEquals((short)124, iUSHR1.getOpcode());
      assertNotNull(iUSHR1);
      
      ASTORE aSTORE0 = new ASTORE(1557);
      assertEquals("astore", aSTORE0.getName());
      assertEquals(1557, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(4, aSTORE0.getLength());
      assertNotNull(aSTORE0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      IMUL iMUL0 = new IMUL();
      assertEquals(1, iMUL0.getLength());
      assertEquals("imul", iMUL0.getName());
      assertEquals((short)104, iMUL0.getOpcode());
      assertNotNull(iMUL0);
      
      IMUL iMUL1 = new IMUL();
      assertTrue(iMUL1.equals((Object)iMUL0));
      assertEquals((short)104, iMUL1.getOpcode());
      assertEquals("imul", iMUL1.getName());
      assertEquals(1, iMUL1.getLength());
      assertNotNull(iMUL1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type '3w|>Tjh'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      byte byte0 = (byte)22;
      byte byte1 = (byte)72;
      ObjectType objectType0 = new ObjectType("aload_1");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("aload_1", objectType0.getClassName());
      assertEquals("Laload_1;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(111, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("aload_1", objectType0.getClassName());
      assertEquals("Laload_1;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(111, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)22);
      assertEquals(22, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(22, localVariables0.maxLocals());
      assertEquals(22, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      OperandStack operandStack1 = new OperandStack(87, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("aload_1", objectType0.getClassName());
      assertEquals("Laload_1;", objectType0.getSignature());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(87, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      
      operandStack0.merge(operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("aload_1", objectType0.getClassName());
      assertEquals("Laload_1;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(111, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(87, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(22, localVariables0.maxLocals());
      assertEquals(22, localVariables1.maxLocals());
      assertEquals(22, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(22, localVariables0.maxLocals());
      assertEquals(22, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotNull(localVariables3);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("aload_1", objectType0.getClassName());
      assertEquals("Laload_1;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(111, operandStack0.maxStack());
      assertEquals(22, localVariables0.maxLocals());
      assertEquals(22, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      String string0 = frame0.toString();
      assertEquals("Local Variables:\n0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\nOperandStack:\nSlots used: 1 MaxStack: 111.\naload_1 (Size: 1)\n", string0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("aload_1", objectType0.getClassName());
      assertEquals("Laload_1;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(111, operandStack0.maxStack());
      assertEquals(22, localVariables0.maxLocals());
      assertEquals(22, localVariables1.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("aload_1", objectType0.getClassName());
      assertEquals("Laload_1;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(111, operandStack0.maxStack());
      assertEquals(22, localVariables0.maxLocals());
      assertEquals(22, localVariables1.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      byte[] byteArray0 = new byte[4];
      IREM iREM0 = new IREM();
      assertEquals("irem", iREM0.getName());
      assertEquals((short)112, iREM0.getOpcode());
      assertEquals(1, iREM0.getLength());
      assertNotNull(iREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'aload_1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(176);
      assertEquals(176, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      LocalVariables localVariables2 = new LocalVariables(176);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(176, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      ObjectType objectType0 = ObjectType.getInstance("T!L(3Uf|Q]5@");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(176, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      
      Frame frame2 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame2.equals((Object)frame0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame2);
      
      String string0 = localVariables2.toString();
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(176, localVariables2.maxLocals());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Pattern.quote("");
      assertEquals("\\Q\\E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      localVariables2.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals(176, localVariables3.maxLocals());
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      Frame frame3 = new Frame(localVariables3, operandStack0);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame0));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(176, localVariables3.maxLocals());
      assertNotNull(frame3);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame3));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame3);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      I2B i2B0 = new I2B();
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertNotNull(i2B0);
      
      I2F i2F0 = new I2F();
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals(1, i2F0.getLength());
      assertEquals("i2f", i2F0.getName());
      assertNotNull(i2F0);
      
      I2F i2F1 = new I2F();
      assertTrue(i2F1.equals((Object)i2F0));
      assertEquals("i2f", i2F1.getName());
      assertEquals((short)134, i2F1.getOpcode());
      assertEquals(1, i2F1.getLength());
      assertNotNull(i2F1);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FMUL fMUL0 = new FMUL();
      assertEquals("fmul", fMUL0.getName());
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals(1, fMUL0.getLength());
      assertNotNull(fMUL0);
      
      FMUL fMUL1 = new FMUL();
      assertTrue(fMUL1.equals((Object)fMUL0));
      assertEquals("fmul", fMUL1.getName());
      assertEquals((short)106, fMUL1.getOpcode());
      assertEquals(1, fMUL1.getLength());
      assertNotNull(fMUL1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(dataOutputStream0);
      
      fMUL1.dump(dataOutputStream0);
      assertTrue(fMUL1.equals((Object)fMUL0));
      assertEquals("fmul", fMUL1.getName());
      assertEquals((short)106, fMUL1.getOpcode());
      assertEquals(1, fMUL1.getLength());
      assertEquals("j", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertNotSame(fMUL1, fMUL0);
      
      String string2 = fMUL1.toString(false);
      assertEquals("fmul", string2);
      assertTrue(fMUL1.equals((Object)fMUL0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("fmul", fMUL1.getName());
      assertEquals((short)106, fMUL1.getOpcode());
      assertEquals(1, fMUL1.getLength());
      assertNotSame(fMUL1, fMUL0);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type 'T!L(3Uf|Q]5@'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType(".2+[ud'Rbe");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/2+[ud'Rbe;", objectType0.getSignature());
      assertEquals(".2+[ud'Rbe", objectType0.getClassName());
      assertNotNull(objectType0);
      
      ObjectType objectType1 = new ObjectType("wLnB]kR9k#{ )S");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals("wLnB]kR9k#{ )S", objectType1.getClassName());
      assertEquals("LwLnB]kR9k#{ )S;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertNotNull(objectType1);
      
      OperandStack operandStack0 = new OperandStack(3338, objectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/2+[ud'Rbe;", objectType0.getSignature());
      assertEquals(".2+[ud'Rbe", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(3338, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables(2219);
      assertEquals(2219, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2219, localVariables0.maxLocals());
      assertEquals(2219, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables1.merge(localVariables0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type '.2+[ud'Rbe'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)65, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      ReferenceType referenceType0 = Type.NULL;
      assertNotNull(referenceType0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      Object object0 = frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(object0.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(frame0.equals((Object)object0));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)object0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, object0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)object0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, object0);
      assertNotSame(frame0, frame1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals("areturn", aRETURN0.getName());
      assertEquals(1, aRETURN0.getLength());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertNotNull(aRETURN0);
      
      instConstraintVisitor0.visitARETURN(aRETURN0);
      assertEquals("areturn", aRETURN0.getName());
      assertEquals(1, aRETURN0.getLength());
      assertEquals((short)176, aRETURN0.getOpcode());
      
      LRETURN lRETURN0 = new LRETURN();
      assertEquals("lreturn", lRETURN0.getName());
      assertEquals(1, lRETURN0.getLength());
      assertEquals((short)173, lRETURN0.getOpcode());
      assertNotNull(lRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      OperandStack operandStack0 = new OperandStack(203, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      D2I d2I0 = new D2I();
      assertEquals("d2i", d2I0.getName());
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertNotNull(d2I0);
      
      ASTORE aSTORE0 = new ASTORE(448);
      assertEquals(448, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(4, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertNotNull(aSTORE0);
      
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals(448, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(4, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      FREM fREM0 = new FREM();
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertEquals((short)114, fREM0.getOpcode());
      assertNotNull(fREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("MoqG/h#F");
      assertEquals(1, objectType0.getSize());
      assertEquals("MoqG.h#F", objectType0.getClassName());
      assertEquals("LMoqG/h#F;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("MoqG.h#F", objectType0.getClassName());
      assertEquals("LMoqG/h#F;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("MoqG.h#F", objectType0.getClassName());
      assertEquals("LMoqG/h#F;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Object object0 = frame0.clone();
      assertTrue(object0.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals("MoqG.h#F", objectType0.getClassName());
      assertEquals("LMoqG/h#F;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)object0));
      assertEquals(1, objectType0.getSize());
      assertEquals("MoqG.h#F", objectType0.getClassName());
      assertEquals("LMoqG/h#F;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(frame0, object0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertNotNull(aRRAYLENGTH0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type MoqG.h#F.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("' illegal? Pass 3a should have checked this!");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      LOR lOR0 = new LOR();
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertNotNull(lOR0);
      
      boolean boolean0 = frame0.equals(lOR0);
      assertFalse(boolean0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      I2S i2S0 = new I2S();
      assertEquals("i2s", i2S0.getName());
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertNotNull(i2S0);
      
      INEG iNEG0 = new INEG();
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertNotNull(iNEG0);
      
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(1798);
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals(1798, iNVOKESPECIAL0.getIndex());
      assertNotNull(iNVOKESPECIAL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type '' illegal? Pass 3a should have checked this!'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(176);
      assertEquals(176, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(176, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables2 = new LocalVariables(3);
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertEquals(3, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(176, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertEquals(176, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      Frame frame0 = new Frame(localVariables3, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, localVariables3.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals("iushr", iUSHR0.getName());
      assertEquals(1, iUSHR0.getLength());
      assertEquals((short)124, iUSHR0.getOpcode());
      assertNotNull(iUSHR0);
      
      OperandStack operandStack2 = operandStack0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(1, operandStack2.size());
      assertEquals(176, operandStack2.maxStack());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      assertNotNull(operandStack2);
      
      operandStack2.clear();
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(0, operandStack2.size());
      assertEquals(176, operandStack2.maxStack());
      assertTrue(operandStack2.isEmpty());
      assertEquals(0, operandStack2.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      
      OperandStack operandStack3 = new OperandStack(176);
      assertTrue(operandStack3.equals((Object)operandStack2));
      assertFalse(operandStack3.equals((Object)operandStack1));
      assertFalse(operandStack3.equals((Object)operandStack0));
      assertTrue(operandStack3.isEmpty());
      assertEquals(176, operandStack3.maxStack());
      assertEquals(0, operandStack3.slotsUsed());
      assertEquals(0, operandStack3.size());
      assertNotNull(operandStack3);
      
      DSTORE dSTORE0 = new DSTORE(176);
      assertEquals("dstore", dSTORE0.getName());
      assertEquals(176, dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short)57, dSTORE0.getOpcode());
      assertEquals(2, dSTORE0.getLength());
      assertNotNull(dSTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: ''; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(176);
      assertEquals(176, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("T!L(3Uf|Q]5@");
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(176, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(frame0);
      
      LocalVariables localVariables2 = new LocalVariables(176);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(176, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(frame1);
      
      String string0 = Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      assertEquals("()LT!L(3Uf|Q]5@;", string0);
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertNotNull(string0);
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(176, localVariables2.maxLocals());
      assertEquals(176, localVariables3.maxLocals());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      Frame frame2 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, localVariables2.maxLocals());
      assertNotNull(frame2);
      
      Object object0 = frame1.clone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(object0.equals((Object)frame0));
      assertTrue(object0.equals((Object)frame2));
      assertTrue(object0.equals((Object)frame1));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame2);
      assertNotSame(object0, frame2);
      assertNotSame(object0, frame1);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      LDC2_W lDC2_W0 = new LDC2_W(1164);
      assertEquals("ldc2_w", lDC2_W0.getName());
      assertEquals((short)20, lDC2_W0.getOpcode());
      assertEquals(1164, lDC2_W0.getIndex());
      assertEquals(3, lDC2_W0.getLength());
      assertNotNull(lDC2_W0);
      
      RET rET0 = new RET(3);
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(3, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertNotNull(rET0);
      
      boolean boolean1 = frame2.equals(rET0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)object0));
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, localVariables2.maxLocals());
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(3, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, object0);
      assertNotSame(frame2, frame1);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      instConstraintVisitor1.setFrame(frame1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)object0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("T!L(3Uf|Q]5@", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame2);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertEquals((short)124, iUSHR0.getOpcode());
      assertNotNull(iUSHR0);
      
      IUSHR iUSHR1 = new IUSHR();
      assertTrue(iUSHR1.equals((Object)iUSHR0));
      assertEquals((short)124, iUSHR1.getOpcode());
      assertEquals(1, iUSHR1.getLength());
      assertEquals("iushr", iUSHR1.getName());
      assertNotNull(iUSHR1);
      
      Boolean boolean2 = new Boolean("8+&F8<7c{1K");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      SASTORE sASTORE0 = new SASTORE();
      assertEquals("sastore", sASTORE0.getName());
      assertEquals((short)86, sASTORE0.getOpcode());
      assertEquals(1, sASTORE0.getLength());
      assertNotNull(sASTORE0);
      
      I2D i2D0 = new I2D();
      assertEquals(1, i2D0.getLength());
      assertEquals("i2d", i2D0.getName());
      assertEquals((short)135, i2D0.getOpcode());
      assertNotNull(i2D0);
      
      I2D i2D1 = new I2D();
      assertTrue(i2D1.equals((Object)i2D0));
      assertEquals("i2d", i2D1.getName());
      assertEquals(1, i2D1.getLength());
      assertEquals((short)135, i2D1.getOpcode());
      assertNotNull(i2D1);
      
      DCMPG dCMPG0 = new DCMPG();
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertNotNull(dCMPG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'T!L(3Uf|Q]5@'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)65, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(65, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(string0);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(65, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(65, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(2, int0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      
      I2B i2B0 = new I2B();
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertNotNull(i2B0);
      
      I2F i2F0 = new I2F();
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals("i2f", i2F0.getName());
      assertEquals(1, i2F0.getLength());
      assertNotNull(i2F0);
      
      I2F i2F1 = new I2F();
      assertTrue(i2F1.equals((Object)i2F0));
      assertEquals("i2f", i2F1.getName());
      assertEquals(1, i2F1.getLength());
      assertEquals((short)134, i2F1.getOpcode());
      assertNotNull(i2F1);
      
      I2F i2F2 = new I2F();
      assertTrue(i2F2.equals((Object)i2F1));
      assertTrue(i2F2.equals((Object)i2F0));
      assertEquals(1, i2F2.getLength());
      assertEquals("i2f", i2F2.getName());
      assertEquals((short)134, i2F2.getOpcode());
      assertNotNull(i2F2);
      
      I2F i2F3 = new I2F();
      assertTrue(i2F3.equals((Object)i2F2));
      assertTrue(i2F3.equals((Object)i2F0));
      assertTrue(i2F3.equals((Object)i2F1));
      assertEquals((short)134, i2F3.getOpcode());
      assertEquals(1, i2F3.getLength());
      assertEquals("i2f", i2F3.getName());
      assertNotNull(i2F3);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR((IUSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Instruction ");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Instruction ", objectType0.getClassName());
      assertEquals("LInstruction ;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      OperandStack operandStack0 = new OperandStack(203, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Instruction ", objectType0.getClassName());
      assertEquals("LInstruction ;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Instruction ", objectType0.getClassName());
      assertEquals("LInstruction ;", objectType0.getSignature());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      String string0 = localVariables0.toString();
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(string0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Instruction ", objectType0.getClassName());
      assertEquals("LInstruction ;", objectType0.getSignature());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Instruction ", objectType0.getClassName());
      assertEquals("LInstruction ;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(203, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame2 = new Frame(localVariables0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Instruction ", objectType0.getClassName());
      assertEquals("LInstruction ;", objectType0.getSignature());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(203, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(frame2);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Instruction ", objectType0.getClassName());
      assertEquals("LInstruction ;", objectType0.getSignature());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals("jsr_w", jSR_W0.getName());
      assertNotNull(jSR_W0);
      
      I2F i2F0 = new I2F();
      assertEquals("i2f", i2F0.getName());
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals(1, i2F0.getLength());
      assertNotNull(i2F0);
      
      POP2 pOP2_0 = new POP2();
      assertEquals(1, pOP2_0.getLength());
      assertEquals("pop2", pOP2_0.getName());
      assertEquals((short)88, pOP2_0.getOpcode());
      assertNotNull(pOP2_0);
      
      IADD iADD0 = new IADD();
      assertEquals(1, iADD0.getLength());
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals("iadd", iADD0.getName());
      assertNotNull(iADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'Instruction '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType1 = new ObjectType("");
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals("", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("L;", objectType1.getSignature());
      assertNotNull(objectType1);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(40, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.size());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      FASTORE fASTORE0 = new FASTORE();
      assertEquals("fastore", fASTORE0.getName());
      assertEquals((short)81, fASTORE0.getOpcode());
      assertEquals(1, fASTORE0.getLength());
      assertNotNull(fASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      LocalVariables localVariables0 = new LocalVariables(429);
      assertEquals(429, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      OperandStack operandStack0 = new OperandStack(429, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(429, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(429, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(429, operandStack0.maxStack());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(429, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(429, operandStack0.maxStack());
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(429, localVariables0.maxLocals());
      assertEquals(429, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      D2I d2I0 = new D2I();
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, d2I0.getLength());
      assertNotNull(d2I0);
      
      ASTORE aSTORE0 = new ASTORE(72);
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(72, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(2, aSTORE0.getLength());
      assertNotNull(aSTORE0);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(429, localVariables0.maxLocals());
      assertEquals(429, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(429, localVariables0.maxLocals());
      assertEquals(429, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      
      LNEG lNEG1 = new LNEG();
      assertTrue(lNEG1.equals((Object)lNEG0));
      assertEquals((short)117, lNEG1.getOpcode());
      assertEquals(1, lNEG1.getLength());
      assertEquals("lneg", lNEG1.getName());
      assertNotNull(lNEG1);
      
      DCMPL dCMPL0 = new DCMPL();
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertNotNull(dCMPL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)65, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      ReferenceType referenceType0 = Type.NULL;
      assertNotNull(referenceType0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      localVariables2.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(65, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, frame1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      I2B i2B0 = new I2B();
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertNotNull(i2B0);
      
      I2F i2F0 = new I2F();
      assertEquals(1, i2F0.getLength());
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals("i2f", i2F0.getName());
      assertNotNull(i2F0);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertNotNull(pOP0);
      
      instConstraintVisitor0.visitPOP(pOP0);
      assertEquals("pop", pOP0.getName());
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      
      LAND lAND0 = new LAND();
      assertEquals(1, lAND0.getLength());
      assertEquals("land", lAND0.getName());
      assertEquals((short)127, lAND0.getOpcode());
      assertNotNull(lAND0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(2, constantPoolGen1.getSize());
      assertNotNull(constantPoolGen1);
      
      int int0 = lAND0.produceStack(constantPoolGen1);
      assertEquals(2, int0);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(1, lAND0.getLength());
      assertEquals("land", lAND0.getName());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals(2, constantPoolGen1.getSize());
      assertNotSame(constantPoolGen1, constantPoolGen0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectType objectType0 = new ObjectType("H");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      LocalVariables localVariables0 = new LocalVariables(54);
      assertEquals(54, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType1 = new ObjectType("T!L(3Uf|Q]5@");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals((byte)14, objectType1.getType());
      assertEquals("LT!L(3Uf|Q]5@;", objectType1.getSignature());
      assertEquals("T!L(3Uf|Q]5@", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertNotNull(objectType1);
      
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals(54, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(54, 54);
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'H'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'H'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotSame(objectType0, objectType1);
      
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRINGBUFFER);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(uninitializedObjectType1.equals((Object)uninitializedObjectType0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'H'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType1.getSize());
      assertEquals((byte)15, uninitializedObjectType1.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType1.getSignature());
      assertNotNull(uninitializedObjectType1);
      
      Frame.setThis(uninitializedObjectType1);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(uninitializedObjectType0.equals((Object)uninitializedObjectType1));
      assertFalse(uninitializedObjectType1.equals((Object)uninitializedObjectType0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'H'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType1.getSize());
      assertEquals((byte)15, uninitializedObjectType1.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType1.getSignature());
      assertNotSame(objectType0, objectType1);
      assertNotSame(uninitializedObjectType0, uninitializedObjectType1);
      assertNotSame(uninitializedObjectType1, uninitializedObjectType0);
      
      String string0 = localVariables0.toString();
      assertEquals(54, localVariables0.maxLocals());
      assertNotNull(string0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals(54, localVariables0.maxLocals());
      assertEquals(54, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      
      Object object0 = frame0.clone();
      assertFalse(frame0.equals((Object)frame1));
      assertTrue(object0.equals((Object)frame0));
      assertFalse(object0.equals((Object)frame1));
      assertNotSame(frame0, object0);
      assertNotSame(frame0, frame1);
      assertNotSame(object0, frame1);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(frame1.equals((Object)object0));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals(54, localVariables0.maxLocals());
      assertEquals(54, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(objectType0, objectType1);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      INEG iNEG0 = new INEG();
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertNotNull(iNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'H'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' is not of type '");
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType("H");
      assertEquals("LH;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("LH;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      operandStack0.push(objectType0);
      assertEquals("LH;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(807);
      assertEquals(807, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      operandStack0.push(objectType0);
      assertEquals("LH;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals("LH;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(807, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("LH;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(807, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables((byte)40);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals("LH;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(frame1);
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertNotNull(dUP_X1_0);
      
      DUP2 dUP2_0 = new DUP2();
      assertEquals((short)92, dUP2_0.getOpcode());
      assertEquals(1, dUP2_0.getLength());
      assertEquals("dup2", dUP2_0.getName());
      assertNotNull(dUP2_0);
      
      instConstraintVisitor0.visitDUP2(dUP2_0);
      assertEquals((short)92, dUP2_0.getOpcode());
      assertEquals(1, dUP2_0.getLength());
      assertEquals("dup2", dUP2_0.getName());
      
      LALOAD lALOAD0 = new LALOAD();
      assertEquals(1, lALOAD0.getLength());
      assertEquals((short)47, lALOAD0.getOpcode());
      assertEquals("laload", lALOAD0.getName());
      assertNotNull(lALOAD0);
      
      ANEWARRAY aNEWARRAY0 = null;
      try {
        aNEWARRAY0 = new ANEWARRAY((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -1
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(176);
      assertEquals(176, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(176);
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables2 = new LocalVariables(3);
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertEquals(3, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.size());
      assertEquals(176, operandStack1.maxStack());
      assertEquals(0, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertEquals(176, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotNull(localVariables3);
      
      Frame frame0 = new Frame(localVariables3, operandStack0);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, localVariables3.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertEquals(176, localVariables0.maxLocals());
      assertEquals(176, localVariables1.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals("iushr", iUSHR0.getName());
      assertEquals(1, iUSHR0.getLength());
      assertNotNull(iUSHR0);
      
      OperandStack operandStack2 = operandStack0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, operandStack2.maxStack());
      assertEquals(0, operandStack2.size());
      assertTrue(operandStack2.isEmpty());
      assertEquals(0, operandStack2.slotsUsed());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      assertNotNull(operandStack2);
      
      operandStack2.clear();
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(176, operandStack0.maxStack());
      assertEquals(176, operandStack2.maxStack());
      assertEquals(0, operandStack2.size());
      assertTrue(operandStack2.isEmpty());
      assertEquals(0, operandStack2.slotsUsed());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      
      OperandStack operandStack3 = new OperandStack(176);
      assertTrue(operandStack3.equals((Object)operandStack2));
      assertTrue(operandStack3.equals((Object)operandStack0));
      assertTrue(operandStack3.equals((Object)operandStack1));
      assertEquals(0, operandStack3.slotsUsed());
      assertTrue(operandStack3.isEmpty());
      assertEquals(176, operandStack3.maxStack());
      assertEquals(0, operandStack3.size());
      assertNotNull(operandStack3);
      
      DSTORE dSTORE0 = new DSTORE(176);
      assertEquals("dstore", dSTORE0.getName());
      assertEquals(176, dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short)57, dSTORE0.getOpcode());
      assertEquals(2, dSTORE0.getLength());
      assertNotNull(dSTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(67, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      int int0 = 448;
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      String string0 = "";
      String string1 = Pattern.quote("");
      assertEquals("\\Q\\E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      localVariables1.merge(localVariables2);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      constantPoolGen0.addString("QE");
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL((ISHL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables2.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertEquals(448, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotNull(localVariables3);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(frame0, frame1);
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotNull(string0);
      
      Frame frame2 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertEquals(448, localVariables2.maxLocals());
      assertNotNull(frame2);
      
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(832);
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals(832, aNEWARRAY0.getIndex());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertNotNull(aNEWARRAY0);
      
      ALOAD aLOAD0 = new ALOAD(121);
      assertEquals(121, aLOAD0.getIndex());
      assertEquals(2, aLOAD0.getLength());
      assertEquals("aload", aLOAD0.getName());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short)25, aLOAD0.getOpcode());
      assertNotNull(aLOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(aLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ALOAD constraint violated: Read-Access on local variable 121 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      Instruction instruction0 = Instruction.readInstruction(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", instruction0.getName());
      assertEquals((short)0, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertNotSame(byteSequence1, byteSequence0);
      assertNotNull(instruction0);
      
      LXOR lXOR0 = new LXOR();
      assertEquals("lxor", lXOR0.getName());
      assertEquals((short)131, lXOR0.getOpcode());
      assertEquals(1, lXOR0.getLength());
      assertNotNull(lXOR0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertEquals("jsr_w", jSR_W0.getName());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertNotNull(jSR_W0);
      
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(3, iFEQ0.getLength());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals("ifeq", iFEQ0.getName());
      assertNotNull(iFEQ0);
      
      FSTORE fSTORE0 = new FSTORE((byte)72);
      assertEquals(72, fSTORE0.getIndex());
      assertEquals("fstore", fSTORE0.getName());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      assertEquals(2, fSTORE0.getLength());
      assertEquals((short)56, fSTORE0.getOpcode());
      assertNotNull(fSTORE0);
      
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(72, fSTORE0.getIndex());
      assertEquals("fstore", fSTORE0.getName());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      assertEquals(2, fSTORE0.getLength());
      assertEquals((short)56, fSTORE0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, localVariables0.maxLocals());
      
      LRETURN lRETURN0 = new LRETURN();
      assertEquals("lreturn", lRETURN0.getName());
      assertEquals((short)173, lRETURN0.getOpcode());
      assertEquals(1, lRETURN0.getLength());
      assertNotNull(lRETURN0);
      
      I2C i2C0 = new I2C();
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertNotNull(i2C0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' is not of type '");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ObjectType objectType0 = new ObjectType("H");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("H", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("H", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("H", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(2);
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("H", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("H", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LH;", objectType0.getSignature());
      assertEquals("H", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(72, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(2, localVariables0.maxLocals());
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      LOR lOR0 = new LOR();
      assertEquals("lor", lOR0.getName());
      assertEquals(1, lOR0.getLength());
      assertEquals((short)129, lOR0.getOpcode());
      assertNotNull(lOR0);
      
      LOR lOR1 = new LOR();
      assertTrue(lOR1.equals((Object)lOR0));
      assertEquals((short)129, lOR1.getOpcode());
      assertEquals("lor", lOR1.getName());
      assertEquals(1, lOR1.getLength());
      assertNotNull(lOR1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type 'H'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      byte byte0 = (byte)67;
      ObjectType objectType0 = ObjectType.getInstance("Only element values of type annotation can be built with this ctor - type specified: ");
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      assertEquals(67, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables2.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertEquals(67, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      
      String string0 = localVariables0.toString();
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(67, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotNull(string0);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      I2D i2D0 = new I2D();
      assertEquals("i2d", i2D0.getName());
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertNotNull(i2D0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = i2D0.toString(constantPool0);
      assertEquals("i2d", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, constantPool0.getLength());
      assertEquals("i2d", i2D0.getName());
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertNotNull(string1);
      
      FADD fADD0 = new FADD();
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertNotNull(fADD0);
      
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertNotNull(dUP_X2_0);
      
      FREM fREM0 = new FREM();
      assertEquals("frem", fREM0.getName());
      assertEquals(1, fREM0.getLength());
      assertEquals((short)114, fREM0.getOpcode());
      assertNotNull(fREM0);
      
      DDIV dDIV0 = new DDIV();
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertNotNull(dDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'Only element values of type annotation can be built with this ctor - type specified: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      OperandStack operandStack0 = new OperandStack(203, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(448, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(448, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(448, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(448, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      
      D2I d2I0 = new D2I();
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, d2I0.getLength());
      assertNotNull(d2I0);
      
      OperandStack operandStack1 = new OperandStack(2);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertNotNull(operandStack1);
      
      Frame frame2 = new Frame(localVariables0, operandStack1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame2.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame0));
      assertEquals(448, localVariables0.maxLocals());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertNotNull(frame2);
      
      Frame frame3 = new Frame(448, 448);
      assertTrue(frame3.equals((Object)frame2));
      assertFalse(frame3.equals((Object)frame1));
      assertFalse(frame3.equals((Object)frame0));
      assertNotNull(frame3);
      
      LNEG lNEG1 = new LNEG();
      assertTrue(lNEG1.equals((Object)lNEG0));
      assertEquals(1, lNEG1.getLength());
      assertEquals("lneg", lNEG1.getName());
      assertEquals((short)117, lNEG1.getOpcode());
      assertNotNull(lNEG1);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals(1, iUSHR0.getLength());
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      OperandStack operandStack2 = operandStack0.getClone();
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.size());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(203, operandStack2.maxStack());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(203, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotNull(operandStack2);
      
      LNEG lNEG2 = new LNEG();
      assertTrue(lNEG2.equals((Object)lNEG1));
      assertTrue(lNEG2.equals((Object)lNEG0));
      assertEquals((short)117, lNEG2.getOpcode());
      assertEquals(1, lNEG2.getLength());
      assertEquals("lneg", lNEG2.getName());
      assertNotNull(lNEG2);
      
      I2B i2B0 = new I2B();
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      DUP dUP0 = new DUP();
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertNotNull(dUP0);
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals(1, iXOR0.getLength());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals("ixor", iXOR0.getName());
      assertNotNull(iXOR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)42, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(42, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)42);
      assertEquals(42, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(42, localVariables0.maxLocals());
      assertEquals(42, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(42, localVariables0.maxLocals());
      assertEquals(42, localVariables1.maxLocals());
      assertEquals(42, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(42, localVariables0.maxLocals());
      assertEquals(42, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(42, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(42, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(42, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(42, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(42, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(42, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)42;
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY((byte)0);
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertNotNull(aNEWARRAY0);
      
      LNEG lNEG1 = new LNEG();
      assertTrue(lNEG1.equals((Object)lNEG0));
      assertEquals((short)117, lNEG1.getOpcode());
      assertEquals("lneg", lNEG1.getName());
      assertEquals(1, lNEG1.getLength());
      assertNotNull(lNEG1);
      
      I2D i2D0 = new I2D();
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertEquals("i2d", i2D0.getName());
      assertNotNull(i2D0);
      
      FADD fADD0 = new FADD();
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertNotNull(fADD0);
      
      DRETURN dRETURN0 = new DRETURN();
      assertEquals((short)175, dRETURN0.getOpcode());
      assertEquals("dreturn", dRETURN0.getName());
      assertEquals(1, dRETURN0.getLength());
      assertNotNull(dRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      LocalVariables localVariables0 = new LocalVariables(129);
      assertEquals(129, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      DNEG dNEG0 = new DNEG();
      assertEquals(1, dNEG0.getLength());
      assertEquals((short)119, dNEG0.getOpcode());
      assertEquals("dneg", dNEG0.getName());
      assertNotNull(dNEG0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      Class<L2F> class0 = L2F.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(129, objectType0.CLASS);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      L2D l2D0 = new L2D();
      assertEquals("l2d", l2D0.getName());
      assertEquals((short)138, l2D0.getOpcode());
      assertEquals(1, l2D0.getLength());
      assertNotNull(l2D0);
      
      boolean boolean0 = frame0.equals(l2D0);
      assertFalse(boolean0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals("l2d", l2D0.getName());
      assertEquals((short)138, l2D0.getOpcode());
      assertEquals(1, l2D0.getLength());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG1 = new LNEG();
      assertTrue(lNEG1.equals((Object)lNEG0));
      assertEquals((short)117, lNEG1.getOpcode());
      assertEquals(1, lNEG1.getLength());
      assertEquals("lneg", lNEG1.getName());
      assertNotNull(lNEG1);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Character character0 = new Character('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('<');
      assertEquals('<', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame1, frame0);
      
      F2L f2L0 = new F2L();
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertNotNull(f2L0);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(1, constantPoolGen1.getSize());
      assertNotNull(constantPoolGen1);
      
      OperandStack operandStack1 = new OperandStack(2);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertTrue(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      
      OperandStack operandStack2 = new OperandStack(96, objectType0);
      assertFalse(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(96, operandStack2.maxStack());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.size());
      assertNotNull(operandStack2);
      
      OperandStack operandStack3 = new OperandStack(80, objectType0);
      assertFalse(operandStack3.equals((Object)operandStack1));
      assertTrue(operandStack3.equals((Object)operandStack2));
      assertFalse(operandStack3.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals("Lorg/apache/bcel/generic/L2F;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.L2F", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack3.size());
      assertEquals(1, operandStack3.slotsUsed());
      assertFalse(operandStack3.isEmpty());
      assertEquals(80, operandStack3.maxStack());
      assertNotNull(operandStack3);
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertNotNull(dUP_X1_0);
      
      String string0 = dUP_X1_0.toString();
      assertEquals("dup_x1[90](1)", string0);
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertNotNull(string0);
      
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      
      FREM fREM0 = new FREM();
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals("frem", fREM0.getName());
      assertEquals(1, fREM0.getLength());
      assertNotNull(fREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'org.apache.bcel.generic.L2F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType1 = new ObjectType("");
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals((byte)14, objectType1.getType());
      assertEquals("", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("L;", objectType1.getSignature());
      assertNotNull(objectType1);
      
      ObjectType objectType2 = ObjectType.getInstance("");
      assertTrue(objectType2.equals((Object)objectType1));
      assertTrue(objectType2.equals((Object)objectType0));
      assertEquals("L;", objectType2.getSignature());
      assertEquals((byte)14, objectType2.getType());
      assertEquals("", objectType2.getClassName());
      assertEquals(1, objectType2.getSize());
      assertNotSame(objectType2, objectType1);
      assertNotSame(objectType2, objectType0);
      assertNotNull(objectType2);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, operandStack1.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.size());
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType2);
      assertNotSame(operandStack0, operandStack1);
      
      Frame frame2 = frame0.getClone();
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotNull(frame2);
      
      Frame frame3 = frame2.getClone();
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame3);
      assertNotSame(frame2, frame0);
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType2);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame3);
      assertNotNull(frame3);
      
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      assertEquals("dup2_x2", dUP2_X2_0.getName());
      assertEquals(1, dUP2_X2_0.getLength());
      assertEquals((short)94, dUP2_X2_0.getOpcode());
      assertNotNull(dUP2_X2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      ObjectType objectType1 = ObjectType.getInstance("");
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals("", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("L;", objectType1.getSignature());
      assertNotSame(objectType1, objectType0);
      assertNotNull(objectType1);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType1);
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals("", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("L;", objectType1.getSignature());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      assertEquals(67, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = new LocalVariables(216);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertEquals(216, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(216, localVariables2.maxLocals());
      assertEquals(216, localVariables3.maxLocals());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      localVariables2.merge(localVariables3);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(216, localVariables2.maxLocals());
      assertEquals(216, localVariables3.maxLocals());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      
      Frame frame0 = new Frame(localVariables3, operandStack0);
      assertTrue(objectType1.equals((Object)objectType0));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals("", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("L;", objectType1.getSignature());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(216, localVariables2.maxLocals());
      assertEquals(216, localVariables3.maxLocals());
      assertNotNull(frame0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(objectType1.equals((Object)objectType0));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals("", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("L;", objectType1.getSignature());
      assertEquals(67, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(216, localVariables2.maxLocals());
      assertEquals(216, localVariables3.maxLocals());
      assertNotSame(objectType1, objectType0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      
      CHECKCAST cHECKCAST0 = new CHECKCAST(126);
      assertEquals("checkcast", cHECKCAST0.getName());
      assertEquals((short)192, cHECKCAST0.getOpcode());
      assertEquals(3, cHECKCAST0.getLength());
      assertEquals(126, cHECKCAST0.getIndex());
      assertNotNull(cHECKCAST0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)51, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)51);
      assertEquals(51, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(51, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(51, localVariables0.maxLocals());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertEquals("jsr_w", jSR_W0.getName());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertNotNull(jSR_W0);
      
      I2F i2F0 = new I2F();
      assertEquals("i2f", i2F0.getName());
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals(1, i2F0.getLength());
      assertNotNull(i2F0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(51, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      I2L i2L0 = new I2L();
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(1, i2L0.getLength());
      assertEquals("i2l", i2L0.getName());
      assertNotNull(i2L0);
      
      int int0 = i2L0.consumeStack(constantPoolGen0);
      assertEquals(1, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(1, i2L0.getLength());
      assertEquals("i2l", i2L0.getName());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertNotNull(iF_ACMPNE0);
      
      instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      
      D2L d2L0 = new D2L();
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals(1, d2L0.getLength());
      assertEquals("d2l", d2L0.getName());
      assertNotNull(d2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.visitGOTO((GOTO) null);
      D2L d2L0 = (D2L)InstructionConstants.D2L;
      assertEquals("d2l", d2L0.getName());
      assertEquals(1, d2L0.getLength());
      assertEquals((short)143, d2L0.getOpcode());
      assertNotNull(d2L0);
      
      DUP dUP0 = new DUP();
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertNotNull(dUP0);
      
      Instruction instruction0 = dUP0.copy();
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals("dup", instruction0.getName());
      assertEquals((short)89, instruction0.getOpcode());
      assertSame(dUP0, instruction0);
      assertSame(instruction0, dUP0);
      assertNotNull(instruction0);
      
      // Undeclared exception!
      try { 
        dUP0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(448, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      OperandStack operandStack1 = new OperandStack(448, objectType0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(448, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(448, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(448, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack1, operandStack0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      I2F i2F0 = new I2F();
      assertEquals("i2f", i2F0.getName());
      assertEquals(1, i2F0.getLength());
      assertEquals((short)134, i2F0.getOpcode());
      assertNotNull(i2F0);
      
      operandStack0.push(objectType0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(448, operandStack0.maxStack());
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertNotNull(iF_ACMPNE0);
      
      L2F l2F0 = new L2F();
      assertEquals((short)137, l2F0.getOpcode());
      assertEquals("l2f", l2F0.getName());
      assertEquals(1, l2F0.getLength());
      assertNotNull(l2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("' illegal? Pass 3a should have checked this!");
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)88, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)88);
      assertEquals(88, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertNotNull(bREAKPOINT0);
      
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)88);
      assertEquals((byte)88, nEWARRAY0.getTypecode());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertNotNull(nEWARRAY0);
      
      LocalVariables localVariables1 = new LocalVariables((byte)88);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(88, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotNull(localVariables3);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Frame frame0 = new Frame(localVariables3, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables3.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      instConstraintVisitor1.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      Frame frame2 = new Frame(localVariables2, operandStack0);
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables2.maxLocals());
      assertNotNull(frame2);
      
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      LocalVariables localVariables4 = localVariables2.getClone();
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(88, localVariables4.maxLocals());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables2.maxLocals());
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotNull(localVariables4);
      
      Frame frame3 = frame2.getClone();
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables2.maxLocals());
      assertNotSame(frame2, frame3);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotNull(frame3);
      
      instConstraintVisitor0.setFrame(frame1);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables4));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame3));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)frame3));
      assertTrue(frame1.equals((Object)frame2));
      assertEquals(1, objectType0.getSize());
      assertEquals("' illegal? Pass 3a should have checked this!", objectType0.getClassName());
      assertEquals("L' illegal? Pass 3a should have checked this!;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(88, operandStack0.maxStack());
      assertEquals(88, localVariables0.maxLocals());
      assertEquals(88, localVariables3.maxLocals());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame3);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame3);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(1, constantPoolGen1.getSize());
      assertNotNull(constantPoolGen1);
      
      F2L f2L0 = new F2L();
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertNotNull(f2L0);
      
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      assertFalse(constantPoolGen2.equals((Object)constantPoolGen1));
      assertFalse(constantPoolGen2.equals((Object)constantPoolGen0));
      assertEquals(1, constantPoolGen2.getSize());
      assertNotNull(constantPoolGen2);
      
      Type type0 = f2L0.getType(constantPoolGen1);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen2));
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(1, constantPoolGen1.getSize());
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertEquals(2, type0.getSize());
      assertEquals("J", type0.getSignature());
      assertEquals((byte)11, type0.getType());
      assertNotSame(constantPoolGen1, constantPoolGen2);
      assertNotSame(constantPoolGen1, constantPoolGen0);
      assertNotNull(type0);
      
      InstConstraintVisitor instConstraintVisitor2 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor0));
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor1));
      assertNotNull(instConstraintVisitor2);
      
      IASTORE iASTORE0 = new IASTORE();
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertNotNull(iASTORE0);
      
      InstConstraintVisitor instConstraintVisitor3 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor3.equals((Object)instConstraintVisitor1));
      assertFalse(instConstraintVisitor3.equals((Object)instConstraintVisitor2));
      assertFalse(instConstraintVisitor3.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor3);
      
      IASTORE iASTORE1 = new IASTORE();
      assertTrue(iASTORE1.equals((Object)iASTORE0));
      assertEquals((short)79, iASTORE1.getOpcode());
      assertEquals("iastore", iASTORE1.getName());
      assertEquals(1, iASTORE1.getLength());
      assertNotNull(iASTORE1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type '' illegal? Pass 3a should have checked this!'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("Only element values of type annotation can be built with this ctor - type specified: ");
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(67, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      assertEquals(67, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables2.clone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertEquals(67, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotNull(localVariables3);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      I2D i2D0 = new I2D();
      assertEquals("i2d", i2D0.getName());
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertNotNull(i2D0);
      
      FADD fADD0 = new FADD();
      assertEquals("fadd", fADD0.getName());
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals(1, fADD0.getLength());
      assertNotNull(fADD0);
      
      ASTORE aSTORE0 = new ASTORE((byte)67);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(67, aSTORE0.getIndex());
      assertNotNull(aSTORE0);
      
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(67, aSTORE0.getIndex());
      
      LocalVariables localVariables4 = new LocalVariables(31);
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertFalse(localVariables4.equals((Object)localVariables3));
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertEquals(31, localVariables4.maxLocals());
      assertNotNull(localVariables4);
      
      IAND iAND0 = new IAND();
      assertEquals(1, iAND0.getLength());
      assertEquals("iand", iAND0.getName());
      assertEquals((short)126, iAND0.getOpcode());
      assertNotNull(iAND0);
      
      ISTORE iSTORE0 = new ISTORE((byte)67);
      assertEquals(2, iSTORE0.getLength());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(67, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertNotNull(iSTORE0);
      
      // Undeclared exception!
      try { 
        iSTORE0.setIndex((-1733));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -1733
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectType objectType0 = new ObjectType("H");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)72, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(2);
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(2, localVariables0.maxLocals());
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("H", objectType0.getClassName());
      assertEquals("LH;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(72, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(2, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertNotNull(dUP_X1_0);
      
      FNEG fNEG0 = new FNEG();
      assertEquals(1, fNEG0.getLength());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertNotNull(fNEG0);
      
      IRETURN iRETURN0 = new IRETURN();
      assertEquals("ireturn", iRETURN0.getName());
      assertEquals(1, iRETURN0.getLength());
      assertEquals((short)172, iRETURN0.getOpcode());
      assertNotNull(iRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'H'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(129);
      assertEquals(129, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      byte byte0 = (byte)40;
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(129, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables1 = new LocalVariables((byte)40);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = new LocalVariables((byte)40);
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertEquals(40, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      
      LocalVariables localVariables4 = localVariables3.getClone();
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertEquals(40, localVariables3.maxLocals());
      assertEquals(40, localVariables4.maxLocals());
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotNull(localVariables4);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, localVariables1.maxLocals());
      assertEquals(40, localVariables2.maxLocals());
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      short short0 = Constants.IRETURN;
      assertEquals((short)172, short0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (int) (short)172);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionHandle0);
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGT0.getLength());
      assertEquals("ifgt", iFGT0.getName());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(iFGT0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      operandStack0.initializeObject(uninitializedObjectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType1 = new ObjectType("");
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals("L;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertNotNull(objectType1);
      
      ObjectType objectType2 = ObjectType.getInstance("");
      assertTrue(objectType2.equals((Object)objectType0));
      assertTrue(objectType2.equals((Object)objectType1));
      assertEquals("L;", objectType2.getSignature());
      assertEquals("", objectType2.getClassName());
      assertEquals(1, objectType2.getSize());
      assertEquals((byte)14, objectType2.getType());
      assertNotSame(objectType2, objectType1);
      assertNotSame(objectType2, objectType0);
      assertNotNull(objectType2);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(40, operandStack1.maxStack());
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(40, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertNotNull(iF_ACMPEQ0);
      
      instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      
      ObjectType objectType3 = ObjectType.getInstance("");
      assertTrue(objectType3.equals((Object)objectType2));
      assertTrue(objectType3.equals((Object)objectType0));
      assertTrue(objectType3.equals((Object)objectType1));
      assertEquals((byte)14, objectType3.getType());
      assertEquals("", objectType3.getClassName());
      assertEquals(1, objectType3.getSize());
      assertEquals("L;", objectType3.getSignature());
      assertNotSame(objectType3, objectType2);
      assertNotSame(objectType3, objectType0);
      assertNotSame(objectType3, objectType1);
      assertNotNull(objectType3);
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertNotNull(bREAKPOINT0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)51, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)51);
      assertEquals(51, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(51, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(51, localVariables0.maxLocals());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      I2F i2F0 = new I2F();
      assertEquals(1, i2F0.getLength());
      assertEquals("i2f", i2F0.getName());
      assertEquals((short)134, i2F0.getOpcode());
      assertNotNull(i2F0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(51, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(51, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      I2L i2L0 = new I2L();
      assertEquals(1, i2L0.getLength());
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertNotNull(i2L0);
      
      int int0 = i2L0.consumeStack(constantPoolGen0);
      assertEquals(1, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, i2L0.getLength());
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      L2F l2F0 = new L2F();
      assertEquals((short)137, l2F0.getOpcode());
      assertEquals(1, l2F0.getLength());
      assertEquals("l2f", l2F0.getName());
      assertNotNull(l2F0);
      
      Type type0 = l2F0.getType(constantPoolGen0);
      assertEquals((byte)6, type0.getType());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((short)137, l2F0.getOpcode());
      assertEquals(1, l2F0.getLength());
      assertEquals("l2f", l2F0.getName());
      assertNotNull(type0);
      
      D2F d2F0 = new D2F();
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotNull(d2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(448, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(448, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(448, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(448);
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      OperandStack operandStack1 = new OperandStack(448, objectType0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(448, operandStack1.maxStack());
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(448, operandStack1.maxStack());
      assertNotNull(frame0);
      
      POP pOP0 = new POP();
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals("pop", pOP0.getName());
      assertNotNull(pOP0);
      
      boolean boolean0 = operandStack1.equals(pOP0);
      assertFalse(boolean0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(448, operandStack1.maxStack());
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals("pop", pOP0.getName());
      assertNotSame(operandStack1, operandStack0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(448, localVariables0.maxLocals());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(448, operandStack1.maxStack());
      assertNotSame(operandStack1, operandStack0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      I2F i2F0 = new I2F();
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals(1, i2F0.getLength());
      assertEquals("i2f", i2F0.getName());
      assertNotNull(i2F0);
      
      operandStack0.push(objectType0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(448, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(frame1.equals((Object)frame0));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(448, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(448, localVariables0.maxLocals());
      assertNotNull(frame1);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertNotNull(iF_ACMPNE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE((IFGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertNotNull(l2I0);
      
      ObjectType objectType0 = ObjectType.getInstance("Only element values of type annotation can be built with this ctor - type specified: ");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)67, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)67);
      assertEquals(67, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertEquals(67, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      
      String string0 = localVariables0.toString();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(67, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotNull(string0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertEquals(67, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(67, localVariables0.maxLocals());
      assertEquals(67, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      
      LNEG lNEG0 = new LNEG();
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      assertNotNull(lNEG0);
      
      I2D i2D0 = new I2D();
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertEquals("i2d", i2D0.getName());
      assertNotNull(i2D0);
      
      FADD fADD0 = new FADD();
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertEquals((short)98, fADD0.getOpcode());
      assertNotNull(fADD0);
      
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertNotNull(dUP_X2_0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      localVariables0.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(67, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      
      LocalVariables localVariables4 = new LocalVariables((byte)67);
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertEquals(67, localVariables4.maxLocals());
      assertNotNull(localVariables4);
      
      OperandStack operandStack1 = new OperandStack((byte)67, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", objectType0.getClassName());
      assertEquals("LOnly element values of type annotation can be built with this ctor - type specified: ;", objectType0.getSignature());
      assertFalse(operandStack1.isEmpty());
      assertEquals(67, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      
      IINC iINC0 = new IINC((byte)67, 5);
      assertEquals("iinc", iINC0.getName());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(67, iINC0.getIndex());
      assertEquals(3, iINC0.getLength());
      assertEquals(5, iINC0.getIncrement());
      assertNotNull(iINC0);
      
      int int0 = 1252;
      IINC iINC1 = new IINC((byte)67, 1252);
      assertTrue(iINC1.equals((Object)iINC0));
      assertEquals((short)132, iINC1.getOpcode());
      assertEquals(6, iINC1.getLength());
      assertEquals(67, iINC1.getIndex());
      assertEquals(1252, iINC1.getIncrement());
      assertEquals((short) (-1), iINC1.getCanonicalTag());
      assertEquals("iinc", iINC1.getName());
      assertNotNull(iINC1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE((IF_ICMPNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      byte byte0 = (byte)40;
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack((byte)40, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      operandStack0.initializeObject(uninitializedObjectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      operandStack0.push(uninitializedObjectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(40, operandStack0.maxStack());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables((byte)40);
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType1 = new ObjectType("");
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("", objectType1.getClassName());
      assertEquals("L;", objectType1.getSignature());
      assertNotNull(objectType1);
      
      ObjectType objectType2 = ObjectType.getInstance("");
      assertTrue(objectType2.equals((Object)objectType1));
      assertTrue(objectType2.equals((Object)objectType0));
      assertEquals((byte)14, objectType2.getType());
      assertEquals(1, objectType2.getSize());
      assertEquals("L;", objectType2.getSignature());
      assertEquals("", objectType2.getClassName());
      assertNotSame(objectType2, objectType0);
      assertNotSame(objectType2, objectType1);
      assertNotNull(objectType2);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(40, localVariables0.maxLocals());
      assertEquals(40, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(40, operandStack1.maxStack());
      assertEquals(3, operandStack1.size());
      assertEquals(3, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(objectType0, objectType2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame0);
      
      Frame frame1 = (Frame)frame0.clone();
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      Frame frame2 = frame0.getClone();
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(objectType0, objectType2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotNull(frame2);
      
      Frame frame3 = new Frame(localVariables0, operandStack0);
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotNull(frame3);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame3));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(40, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(40, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame3);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)40;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)72, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40}, byteArray0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertArrayEquals(new byte[] {(byte)40, (byte)72, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40}, byteArray0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      assertArrayEquals(new byte[] {(byte)40, (byte)72, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40}, byteArray0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertNotNull(iF_ICMPLE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
