/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:12:26 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("HmacSHA512");
      boolean boolean0 = byteString0.equals("HmacSHA512");
      assertFalse(boolean0);
      
      byte[] byteArray0 = byteString0.internalArray();
      assertNotNull(byteArray0);
      
      byteString0.md5();
      assertEquals(10, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("#|V#U1gv~H");
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertEquals(10, byteString1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
      
      boolean boolean1 = byteString1.endsWith(byteArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4Wc_p4l}-&Z!N");
      byteString0.EMPTY.sha512();
      String string0 = byteString0.toString();
      assertEquals("[text=4Wc_p4l}-&Z!N]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString byteString0 = ByteString.decodeBase64("deadline reached");
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.hmacSha256(byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4Wc_p4l}-&Z!N");
      String string0 = byteString0.toString();
      assertEquals("[text=4Wc_p4l}-&Z!N]", string0);
      
      ByteString byteString1 = byteString0.md5();
      byteString1.md5();
      assertEquals(13, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.rangeEquals(10, byteArray0, 1362, 10);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=2 cap=2]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4Wc_p4l}-&2!N");
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals(13, int0);
      
      Charset.defaultCharset();
      String string0 = byteString0.utf8();
      assertEquals("4Wc_p4l}-&2!N", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("HmaRH256");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      String string0 = byteString0.base64Url();
      assertNotSame(byteString0, byteString1);
      assertEquals("SG1hUkgyNTY=", string0);
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      byteString0.indexOf(byteArray0, 54);
      ByteString byteString2 = byteString0.hmacSha1(byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteString0.write(pipedOutputStream0);
      ByteString.encodeUtf8("u@sq3\"hk#{J!PE9.9");
      byteString0.md5();
      int int0 = ByteString.codePointIndexToCharIndex("u@sq3\"hk#{J!PE9.9", (byte)12);
      assertEquals(12, int0);
      
      ByteString byteString1 = ByteString.encodeUtf8("Failed to close timed out socket ");
      assertEquals(33, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("UTF-8");
      ByteString byteString0 = ByteString.encodeString("UTF-8", charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-8");
      byteString0.write(mockPrintStream0);
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString0 = ByteString.encodeUtf8("^r/x[v");
      byteString0.toString();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-1226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1226
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("|JM86WU0v\"Txa=q>");
      String string0 = byteString0.toString();
      assertEquals("[hex=7c4a4d387f3657553076225478613d717f3e]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)103;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)103, (int) (byte) (-89));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=103 byteCount=-89
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = ByteString.encodeUtf8("DdD.xR");
      byteString1.startsWith(byteString0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("DdD.xR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.rangeEquals((-2281), byteArray0, (-2281), (-2281));
      ByteString byteString1 = byteString0.sha1();
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString1.base64();
      assertEquals("AAAA", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString0.md5();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int0 = byteString0.indexOf(byteString1, 115);
      assertEquals((-1), int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=d41d75d97f77b4745977799755f74475]", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("[hex=d41d8cd98f00b204e9800998ecf8427e]");
      byteString0.equals("[hex=d41d8cd98f00b204e9800998ecf8427e]");
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString1.base64Url();
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      int int0 = byteString0.compareTo(byteString0);
      assertSame(byteString0, byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.equals(byteString1);
      assertTrue(byteString0.equals((Object)byteString1));
      
      byteString1.hashCode();
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      byteString0.EMPTY.lastIndexOf(byteArray0);
      ByteBuffer byteBuffer1 = byteString0.asByteBuffer();
      ByteBuffer byteBuffer2 = byteString0.asByteBuffer();
      assertTrue(byteBuffer2.equals((Object)byteBuffer1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(">:6fuPK]kM&1V}&pf");
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      String string1 = byteString0.toString();
      assertEquals("[text=>:6fuPK]kM&1V}&pf]", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("j.0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: j.0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4");
      ByteString byteString1 = ByteString.decodeHex("");
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(40, 58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(11)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.toAsciiUppercase();
      ByteString byteString1 = ByteString.encodeUtf8("Failed to close timed out socket ");
      assertEquals(33, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = byteString1.md5();
      byteString2.asByteBuffer();
      int int0 = byteString1.compareTo(byteString2);
      assertEquals((-1), int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("|'d>G!smTY");
      // Undeclared exception!
      try { 
        byteString0.substring((-1388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.equals(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.sha256();
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.encodeUtf8("");
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (-2880));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4Wc_p4l}-@Z!N");
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString1 = new ByteString(byteArray0);
      Inflater inflater0 = new Inflater();
      String string0 = byteString1.toString();
      assertEquals("[hex=77]", string0);
      
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString2.md5();
      byteString0.asByteBuffer();
      int int0 = byteString3.compareTo(byteString0);
      assertSame(byteString0, byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-1L));
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)72;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.lastIndexOf(byteString1);
      assertEquals((-1), int0);
      
      ByteString byteString2 = byteString0.substring(44);
      assertEquals(20, byteString2.size());
      
      ByteString byteString3 = byteString0.toAsciiUppercase();
      assertNotSame(byteString3, byteString0);
      assertFalse(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString.decodeBase64("M/[1|ozq@==|-POz3AU");
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.equals(buffer0);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink1.hash();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString.of(byteArray0);
      byteString0.base64Url();
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Charset.defaultCharset();
      Charset charset0 = Charset.forName("UTF-8");
      ByteString byteString0 = ByteString.encodeString("UTF-8", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString.decodeBase64("");
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      boolean boolean0 = byteString1.EMPTY.endsWith(byteString0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      byteString2.asByteBuffer();
      assertSame(byteString1, byteString0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 23, 23);
      ByteString byteString1 = ByteString.read(byteArrayInputStream0, 0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byteString0.substring((int) (byte)0);
      ByteString byteString1 = byteString0.md5();
      ByteString.of(byteArray0);
      byteString1.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("0V:Zo;Gu{H3^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: V
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString0 = ByteString.encodeUtf8("^r/x[v");
      byteString0.toString();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("^r/x[v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ^
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString1.EMPTY.indexOf(byteString0);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
      
      byteString0.asByteBuffer();
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4Wc_p4l}-@Z!N");
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("4Wc_p4l}-@Z!N", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4Wc_p4l}-@Z!N");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)11;
      ByteString byteString2 = new ByteString(byteArray0);
      Inflater inflater0 = new Inflater();
      String string0 = byteString2.toString();
      assertEquals("[hex=77777777777777777777]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring(1);
      assertEquals(1, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.writeDecimalLong((-1));
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toString();
      int int0 = 1572;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 1572, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=547754444745454443474457443474444f3544543447444534454447f7547755]", string0);
      
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("+;wGqQ");
      ByteString byteString1 = ByteString.encodeString("[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]", charset0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset.defaultCharset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-3486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertArrayEquals(new byte[] {(byte) (-105), (byte)102, (byte)82, (byte)38, (byte) (-1), (byte)7, (byte)7}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=547754444745454443474457443474444f3544543447444534454447f7547755]", string0);
      
      byteString0.equals(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)84;
      ByteString.of(byteArray0);
      byteString0.base64Url();
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteString.encodeUtf8("4Wc_p4l}-&Z!N");
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Charset.defaultCharset();
      Charset charset0 = Charset.forName("UTF-8");
      ByteString byteString0 = ByteString.encodeString("UTF-8", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.EMPTY.sha1();
      byteString1.EMPTY.hashCode();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      Pipe pipe0 = new Pipe(255L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(realBufferedSource0, byteString0);
      hashingSource0.delegate();
      HashingSink.hmacSha512(realBufferedSource0.buffer, byteString0);
      // Undeclared exception!
      try { 
        ByteString.encodeString("s)6fbW.l&@G~,", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)5;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      Source source0 = hashingSource1.delegate();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      HashingSource hashingSource2 = HashingSource.sha256(inflaterSource0);
      ByteString byteString1 = hashingSource2.hash();
      byteString1.toString();
      byteString1.utf8();
      byteString1.indexOf(byteArray0);
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("g`{;=io{tejT~+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byteString0.substring((int) (byte)0);
      ByteString byteString1 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("+;wGqQ");
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("closed");
      ByteString byteString1 = ByteString.decodeBase64("closed");
      byteString1.EMPTY.asByteBuffer();
      byteString1.utf8();
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = ByteString.of(byteArray0);
      int int0 = byteString2.compareTo(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = byteString0.md5();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteString3.asByteBuffer();
      int int0 = byteString2.compareTo(byteString3);
      assertEquals(1, int0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)5;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.delegate();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      ByteString byteString1 = hashingSource1.hash();
      byteString1.toString();
      byteString1.toString();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      ByteBuffer byteBuffer1 = byteString2.asByteBuffer();
      assertEquals(4, byteBuffer1.remaining());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 19);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      try { 
        ByteString.read(sequenceInputStream1, 19);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4Wc_p4l}-&2!N");
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }
}
