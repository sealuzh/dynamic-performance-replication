/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:02:54 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1620.42);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2569.9952714261), 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1609.0820012894255, 0.0, 1609.0820012894255).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 1009.38439501825);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("niJ\"m", (-4619.395405194844));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1609.0820012894255, mnStrategy0, 0.0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-35, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int int0 = 1;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0, mnStrategy0, (-14.929175513861482));
      mnUserParameters0.setLowerLimit(1, (-2805.0));
      int int1 = 1174;
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 1, 1174);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 100.0, 100.0, 100.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-155.7973);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-856.7674321519935), mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-58.033), 1360);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1609.0820012894255, 0.0, 1609.0820012894255).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 1009.38439501825);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("niJ\"m", (-4619.395405194844));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1076.66, mnStrategy0, (-4619.395405194844));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2359.043198);
      doubleArray0[2] = (-2359.043198);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2359.043198);
      doubleArray1[3] = (-2359.043198);
      doubleArray1[5] = (-2359.043198);
      doubleArray1[6] = (-2359.043198);
      doubleArray1[7] = (-2359.043198);
      doubleArray1[8] = (-2359.043198);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2359.043198), (double)34, 0.0, (-2359.043198), 6.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 34);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-2359.043198), 1174);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("niJU\"", 1009.38439501825);
      int[] intArray0 = new int[0];
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      mnUserParameterState1.add("niJU\"", 1009.38439501825);
      MnStrategy mnStrategy0 = new MnStrategy(500);
      mnStrategy0.setHessianGradientNCycles((-346));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, (-2145381081), mnStrategy0, 6.6000000000000005);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-346), 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1397.9349319815), (-2145381081));
      MnStrategy mnStrategy1 = new MnStrategy((-2125965775));
      mnStrategy1.setHessianStepTolerance(7);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, 500, 1581);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(223.156735289736, 223.156735289736, 223.156735289736, 223.156735289736, 10000.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 223.156735289736;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-155.7973);
      doubleArray0[3] = 1.0;
      doubleArray0[5] = 199.0;
      doubleArray0[6] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.clone();
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 1763);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1620.42).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 616.1783153310873);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnUserParameters mnUserParameters2 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters2.toString();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 43);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 616.1783153310873, 1287);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameters0.add("Qd(PN<_JTG0ocFP;A", (-1365.63395), 761.1403802, 1.0, (-2359.043198));
      mnUserParameterState0.add("n.iJU\"m", (-4619.395405194844));
      int int0 = 16;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = mnUserParameters1.errors();
      MnUserParameters mnUserParameters2 = new MnUserParameters(doubleArray1, doubleArray1);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy1 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 6.0, mnStrategy0, 100.0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-1818.9405098327325), 978);
      // Undeclared exception!
      try { 
        mnUserParameters2.setLowerLimit(1319, (-3834.594011108316));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1319, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("niJU\"", 1009.38439501825);
      int[] intArray0 = new int[0];
      int int0 = (-2145381081);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 1.008921987209651, (double)(-2145381081)).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.4999999999999999, mnStrategy0, 7);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 7, (-2145381081));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1300.005611202, 0);
      // Undeclared exception!
      try { 
        mnUserParameters0.fix((-2121734443));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-2121734443
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1620.42, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 1009.38439501825);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      MnUserParameters mnUserParameters2 = new MnUserParameters(doubleArray1, doubleArray0);
      mnUserParameters2.toString();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1009.38439501825, 1287);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("", (-4619.395405194844));
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 1792.077842, 2028.1783153310873).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.5779031249986089, mnStrategy0, (-4619.395405194844));
      mnStrategy0.setHessianGradientNCycles((-2145381081));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 100.0, 1913);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2359.043198);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2359.043198), mnStrategy0, 3.0);
      mnStrategy0.setHessianStepTolerance((-0.1));
      mnUserParameters0.setLowerLimit(1, (-640.99531));
      int[] intArray0 = new int[5];
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.2127118413671632E16), 1728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2359.043198);
      double[] doubleArray1 = new double[22];
      doubleArray1[0] = (-2359.043198);
      doubleArray1[1] = 0.05;
      doubleArray1[3] = (-2359.043198);
      doubleArray1[4] = 0.05;
      doubleArray1[12] = (-37.878611794478005);
      doubleArray1[6] = (-2359.043198);
      doubleArray1[7] = 0.05;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05, (double)34, 0.05, 0.0, 6.454188661220046).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 34);
      mnUserParameters0.setLowerLimit(1, (-2359.043198));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.05, 1181);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2359.043198);
      doubleArray0[2] = (-2359.043198);
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = (-2359.043198);
      doubleArray1[5] = (-2359.043198);
      doubleArray1[6] = (-2359.043198);
      doubleArray1[7] = (-2359.043198);
      doubleArray1[8] = (-2359.043198);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2359.043198), (double)200, 0.0, (-2359.043198), 6.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, 200);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-2359.043198), 1174);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      
      mnUserParameters1.add("='jwF=Wz0bHh0", 1009.38439501825);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.add("n.iJU\"m", 1009.38439501825);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 1.008921987209651, (double)(-2145381081), 100.0, (double)(-2145381081)).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy(1);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2403.0, mnStrategy0, 0.3);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.3, (-2125570549));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2359.043198);
      doubleArray0[2] = (-37.878611794478005);
      double[] doubleArray1 = new double[22];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2359.043198);
      doubleArray1[1] = 0.05;
      doubleArray1[3] = (-2359.043198);
      doubleArray1[4] = 0.05;
      doubleArray1[5] = (-2359.043198);
      doubleArray0[0] = 0.05;
      doubleArray1[7] = 0.05;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.05, (-2359.043198), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertArrayEquals(new double[] {0.05, (-2359.043198), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05, (double)1, 0.05, (-2359.043198), (-2359.043198)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 1);
      assertArrayEquals(new double[] {0.05, (-2359.043198), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnFunctionCross0);
      
      mnUserParameters0.setLowerLimit(1, (-2359.043198));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, (-2359.043198), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.05, 1174);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new double[] {0.05, (-2359.043198), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("n.iJ\"m", (-4619.395405194844));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      int[] intArray0 = new int[0];
      mnStrategy0.setHessianGradientNCycles((-2145381072));
      assertEquals((-2145381072), mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 1.008921987209651, (double)(-2145381072), 100.0, (double)(-2145381072)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1419.0), mnStrategy0, 7);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals((-2145381072), mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.008921987209651, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals((-2145381072), mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1419.0), (-3404));
      assertNotSame(mnCross1, mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals((-2145381072), mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross1);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3404), 34);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals((-2145381072), mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross2);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2145381072);
      intArray1[1] = (-2145381072);
      intArray1[2] = (-2145381072);
      MnCross mnCross3 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 7, (-3404));
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals((-2145381072), mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2359.043198);
      double[] doubleArray1 = new double[22];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2359.043198);
      doubleArray1[1] = 0.05;
      doubleArray1[3] = (-2359.043198);
      doubleArray1[4] = 0.05;
      doubleArray0[0] = (-37.878611794478005);
      doubleArray1[7] = 0.05;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-37.878611794478005), (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertArrayEquals(new double[] {(-37.878611794478005), (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-37.878611794478005), (double)34, 0.05, 0.0, 6.454188661220046).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 34);
      assertArrayEquals(new double[] {(-37.878611794478005), (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      
      mnUserParameters0.setLowerLimit(1, (-2359.043198));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-37.878611794478005), (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.05, 1181);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-37.878611794478005), (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1}, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      mnUserParameters0.add("='jw{F=Wz0]bHh0", 0.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setUpperLimit("='jw{F=Wz0]bHh0", 0.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("", (-4619.395405194844));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      
      int[] intArray0 = new int[1];
      mnStrategy0.setHessianGradientNCycles((-2145381081));
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-2.4517118552388824), (double)(-2145381081), 100.0, (double)(-2145381081)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1430.0153580802948), mnStrategy0, 38);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 38;
      doubleArray0[1] = (-1430.0153580802948);
      doubleArray0[2] = (double) 38;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.4517118552388824), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {38.0, (-1430.0153580802948), 38.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnCross0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 38;
      // Undeclared exception!
      try { 
        mnUserParameters0.fix(38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=38
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      double double1 = (-4619.395405194844);
      mnUserParameterState0.add("", (-4619.395405194844));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      
      int int0 = 30;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 616.1783153310873, mnStrategy0, 0.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = 0.05;
      doubleArray0[2] = (-36.73857477053545);
      double[] doubleArray1 = new double[22];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.05;
      doubleArray1[1] = 0.05;
      doubleArray1[3] = (-2357.8279230713533);
      doubleArray1[4] = 0.05;
      doubleArray1[5] = (-2357.8279230713533);
      doubleArray1[6] = (-859.7528822050033);
      doubleArray1[7] = 0.05;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.05, 0.05, (-36.73857477053545)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertArrayEquals(new double[] {0.05, 0.05, (-36.73857477053545)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05, (double)1, 0.05, (-2357.8279230713533), 6.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-0.8524920407852838), mnStrategy0, 1);
      assertArrayEquals(new double[] {0.05, 0.05, (-36.73857477053545)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameters0.setLowerLimit(1, 0.05);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, 0.05, (-36.73857477053545)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.05, 1174);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.add("n.iJU\"m", 1009.38439501825);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 1.008921987209651, (double)(-2145381081), 100.0, (double)(-2145381081)).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.4999999999999999, mnStrategy0, 7);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.4999999999999999, 12);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      mnUserParameters0.add("='jw{F=Wz0]bHh0", 0.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      double double1 = 38.0;
      mnUserParameterState0.add("yxo@+o'%E<5(/,0sWJ2", 38.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-0.5), 1620.42, (-0.5), 1009.38439501825, 1009.38439501825).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 829.951197017109, mnStrategy0, 1009.38439501825);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 7);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnCross0);
      
      // Undeclared exception!
      try { 
        mnUserParameters0.setError(";MbZk9", 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1620.42, 0.1, 1620.42, 1620.42, 0.1).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 0.1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setUpperLimit("='jw{F=Wz0]bHh0", 1620.42);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("", (-4619.395405194844));
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.1, mnStrategy0, 0.1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1020.42010486714, 38);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnCross0);
      
      mnStrategy0.setHessianGradientNCycles((-2145381081));
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 38);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnCross1, mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnCross1);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 813;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 1620.42, 38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 813, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3714.303640432, 0.0, 3714.303640432, 0.51, 0.3750013421683096).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      
      String string0 = mnUserParameters1.toString();
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", string0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(string0);
      
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 0.0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setUpperLimit("='jw{F=Wz0]bHh0", 0.0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("g", 0.0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int[] intArray0 = new int[1];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-35, mnStrategy0, 0.5);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 38);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1430.0153580802948), 200);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnCross1, mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnCross1);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertTrue(mnStrategy1.isMedium());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy1);
      
      mnStrategy1.setHessianStepTolerance(1182.3564565);
      assertNotSame(mnStrategy1, mnStrategy0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(1182.3564565, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertTrue(mnStrategy1.isMedium());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.4517118552388824), 38);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnCross2);
      
      MnCross mnCross3 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 16.6, (-12));
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnCross3);
      
      MnCross mnCross4 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.4517118552388824), 0);
      assertNotSame(mnCross4, mnCross0);
      assertNotSame(mnCross4, mnCross3);
      assertNotSame(mnCross4, mnCross1);
      assertNotSame(mnCross4, mnCross2);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnCross4.equals((Object)mnCross0));
      assertFalse(mnCross4.equals((Object)mnCross3));
      assertFalse(mnCross4.equals((Object)mnCross1));
      assertFalse(mnCross4.equals((Object)mnCross2));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnCross4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1620.42, 0.0, 1620.42, 1620.42, 616.178).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 1009.38);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("", (-4619.395405194844));
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 616.178, mnStrategy0, 0.0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1020.42010486714, 38);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1620.42, 34);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnCross1, mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnCross1);
      
      mnStrategy0.setHessianGradientNCycles(34);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(34, mnStrategy0.hessianGradientNCycles());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2359.043198);
      double[] doubleArray1 = new double[22];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2359.043198);
      doubleArray1[1] = 0.05;
      doubleArray1[3] = (-2359.043198);
      doubleArray1[4] = 0.05;
      doubleArray1[5] = (-2359.043198);
      doubleArray1[6] = (-859.7528822050033);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.05, (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertArrayEquals(new double[] {0.05, (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setPrecision(1310.11);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      intArray0[0] = 1;
      mnUserParameterState0.add("", (double) 1, 0.05);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, mnUserParameters0.variableParameters());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05, (double)1, 0.05, (-2359.043198), 6.0).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setGradientTolerance((-2359.043198));
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals((-2359.043198), mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 1);
      assertArrayEquals(new double[] {0.05, (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, mnUserParameters0.variableParameters());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals((-2359.043198), mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      
      mnUserParameters0.setLowerLimit(1, (-2359.043198));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, (-2359.043198), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, mnUserParameters0.variableParameters());
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-2359.043198), 1568);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2357.8279230713533);
      doubleArray0[2] = (-37.878611794478005);
      double[] doubleArray1 = new double[22];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2357.8279230713533);
      doubleArray1[1] = 0.05;
      doubleArray1[4] = 0.05;
      doubleArray1[5] = 0.05;
      doubleArray1[7] = 0.05;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05, (double)1, 0.05, 0.05, 6.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 1);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnFunctionCross0);
      
      mnUserParameters0.setLowerLimit(1, (-2357.8279230713533));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 5.575900072948534, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1}, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnCross0);
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.05, 1174);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1620.42, (-0.8180578250182131), 1620.42, 1620.42, 614.2807750296714).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      
      mnUserParameters1.add("='jw{F=Wz0]bHh0", 1009.38439501825);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("U", 3.0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 614.2807750296714, mnStrategy0, (-0.8180578250182131));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1020.42010486714, 7);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.8180578250182131), 34);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnCross1, mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross1);
      
      mnStrategy0.setHessianGradientNCycles((-2145381068));
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals((-2145381068), mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 669.0587796740613, (-3441));
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals((-2145381068), mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross2);
      
      MnCross mnCross3 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.054188661220046, (-2145381068));
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnCross3, mnCross1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals((-2145381068), mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2357.8279230713533);
      doubleArray0[2] = (-37.878611794478005);
      double[] doubleArray1 = new double[22];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2357.8279230713533);
      doubleArray1[1] = 0.05;
      doubleArray1[3] = (-2357.8279230713533);
      doubleArray1[4] = 0.05;
      doubleArray1[5] = (-2357.8279230713533);
      doubleArray1[6] = (-859.7528822050033);
      doubleArray1[7] = 0.05;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double0 = (-1.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6.0, mnStrategy0, (-100.0));
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameters0.setLowerLimit(1, (-37.878611794478005));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.05, (-2357.8279230713533), (-37.878611794478005)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, mnUserParameters0.variableParameters());
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 10.0, 1257);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      
      String string0 = mnUserParameters1.toString();
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", string0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(string0);
      
      mnUserParameters1.add("(D'^@m", 0.0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setUpperLimit("(D'^@m", 0.0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("g", 0.0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      int int0 = 38;
      int[] intArray0 = new int[8];
      int int1 = (-2145381081);
      mnStrategy0.setHessianGradientNCycles((-2145381081));
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = (-1419.0269598313382);
      mnStrategy0.setHessianNCycles((-2145381081));
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals((-2145381081), mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1419.0269598313382), mnStrategy0, 38);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals((-2145381081), mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals((-2145381081), mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = (-1419.0269598313382);
      doubleArray1[2] = (double) 38;
      mnStrategy0.setMediumStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2.4517118552388824), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }
}
