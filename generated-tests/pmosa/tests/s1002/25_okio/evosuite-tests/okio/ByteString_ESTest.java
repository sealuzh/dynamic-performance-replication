/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:15:37 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("opt == null", charset0);
      assertEquals(11, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      byteBuffer0.clear();
      charset0.decode(byteBuffer0);
      ByteString byteString0 = ByteString.encodeString("RfT", charset0);
      byteString0.hex();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-102);
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("%X2>cnz%33@");
      byteString0.asByteBuffer();
      byteString0.EMPTY.base64Url();
      byteString0.hex();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("0<<;", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.decodeBase64("Cr");
      // Undeclared exception!
      try { 
        byteString0.substring(2091);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)23, (int) (byte)23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(3)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      byteString0.equals(hashingSource0);
      hashingSource1.hash();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("outf == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: o
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      HashingSource.sha1(realBufferedSource0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("aMy#qY;\")c *\" %R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-51);
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.base64();
      ByteString byteString1 = byteString0.md5();
      byteString1.indexOf(byteString0, 39);
      ByteString.decodeBase64("W5Sx}HG ");
      byteString0.toString();
      ByteString byteString2 = ByteString.decodeBase64("");
      byteString2.EMPTY.toString();
      byteString2.utf8();
      ByteString.decodeHex("");
      byteString2.base64();
      byteString0.utf8();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=6666]", string0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteString0.sha256();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      hashingSource0.hash();
      ByteString byteString0 = hashingSource1.hash();
      byteString0.equals(hashingSource0);
      ByteString byteString1 = byteString0.sha1();
      Charset charset0 = Charset.defaultCharset();
      byteString1.EMPTY.string(charset0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("out == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString.decodeBase64("[text=");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)93;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 16, (-2356));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=16 byteCount=-2356
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      byteString0.toString();
      byte[] byteArray1 = byteString0.internalArray();
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("b");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.rangeEquals((-111), byteString1, (-721), (-721));
      assertFalse(boolean0);
      
      String string0 = byteString0.hex();
      assertEquals("64", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=666666664646644666]", string0);
      
      byteString0.EMPTY.hashCode = (-51);
      ByteString byteString1 = byteString0.substring((int) (byte)0, 7);
      int int0 = byteString1.lastIndexOf(byteString0, 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("$s_Uqn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: $
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.hashCode();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-64), 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("/v");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSink.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.rangeEquals((-721), byteString1, 65, (-487));
      String string0 = byteString1.hex();
      assertEquals("66464464644664646446644646644666466646646646444646664464466644646646446644446666664644464664466666646464666464444464666464664464", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("b");
      Buffer buffer0 = new Buffer();
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.hmacSha512(byteString0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("b");
      Buffer buffer0 = new Buffer();
      byteString0.asByteBuffer();
      byteString0.toAsciiUppercase();
      ByteString byteString1 = ByteString.decodeBase64("mATP9GXHnc8DqH>6X:");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = 9;
      byteString0.EMPTY.startsWith(byteArray0);
      byteString0.asByteBuffer();
      byteString0.toAsciiUppercase();
      ByteString byteString1 = ByteString.decodeBase64(";");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource1.buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = realBufferedSource1.readByteString();
      byteString1.rangeEquals((-721), byteString0, 122, 57);
      byteString0.hex();
      ByteString byteString2 = byteString0.sha512();
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = 9;
      byteString0.EMPTY.startsWith(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.compareTo(byteString0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.base64();
      ByteString byteString1 = byteString0.md5();
      byteString1.indexOf(byteString0, 39);
      ByteString.decodeBase64("W5Sx}HG ");
      byteString0.toString();
      ByteString byteString2 = ByteString.decodeBase64("");
      byteString2.asByteBuffer();
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString1.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = 9;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("opt == null");
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = 9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(pushbackInputStream0, 68);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(pushbackInputStream0, 68);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=66]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-98);
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0, 7);
      byteString1.hmacSha1(byteString0);
      assertEquals(7, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)59;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=4464]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Pipe pipe0 = new Pipe(2900L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      byteString0.equals(byteString1);
      // Undeclared exception!
      try { 
        byteString1.substring(1914, 1914);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(20)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0, 7);
      int int0 = byteString1.compareTo(byteString0);
      int int1 = byteString1.indexOf(byteString0);
      assertTrue(int1 == int0);
      assertEquals(7, byteString1.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0, 7);
      int int0 = byteString1.compareTo(byteString0);
      int int1 = byteString1.indexOf(byteString0);
      assertTrue(int1 == int0);
      assertEquals(7, byteString1.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-113);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte) (-113);
      byteArray1[3] = (byte) (-113);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(byteArrayInputStream0, 68);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("mpTl7*NPi_c.");
      Buffer buffer0 = new Buffer();
      byteString0.asByteBuffer();
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.startsWith(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[6] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString1;
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte) (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.base64();
      byteString0.md5();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString2 = options0.get(0);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteString2.equals(byteString3);
      ByteString byteString4 = ByteString.decodeBase64("in == null");
      assertNull(byteString4);
      
      int int1 = byteString3.lastIndexOf(byteArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(byteString3.equals((Object)byteString0));
      
      byteString1.base64();
      assertFalse(byteString0.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)9;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Pipe pipe0 = new Pipe(2900L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-4);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString1.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      byteString1.base64();
      byteString0.asByteBuffer();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      int int1 = byteString1.compareTo(byteString0);
      assertEquals((-1), int1);
      
      byteString1.hmacSha512(byteString2);
      byteString0.asByteBuffer();
      assertFalse(byteString0.equals((Object)byteString2));
      assertNotSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)102;
      byteString0.lastIndexOf(byteArray0, (int) (byte)102);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, (byte) (-51));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pipe pipe0 = new Pipe(2900L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      boolean boolean1 = byteString1.EMPTY.endsWith(byteString1);
      assertFalse(boolean1 == boolean0);
      
      byteString0.utf8();
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)4;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)6;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString1.lastIndexOf(byteArray0);
      byteString0.base64();
      byteString0.asByteBuffer();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString0.compareTo(byteString2);
      byteString1.hmacSha512(byteString0);
      byteString2.asByteBuffer();
      int int1 = byteString1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = 9;
      byteString0.EMPTY.startsWith(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.asByteBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.compareTo(byteString0);
      byteString0.toString();
      MockFile mockFile0 = new MockFile("[size=0]", "Ci|8?!51HC");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Ci|8?!51HC");
      byteString1.write(printStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(34);
      byteString1.base64Url();
      try { 
        ByteString.read(pipedInputStream0, 9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString byteString0 = new ByteString((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)25;
      byteString0.EMPTY.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=6666]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = 9;
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertTrue(boolean0);
      
      byteString0.toAsciiLowercase();
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-54);
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0, 7);
      assertEquals(7, byteString1.size());
      
      ByteString byteString2 = byteString0.substring(7);
      assertEquals(11, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteString byteString0 = new ByteString(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byteString0.equals(pipedInputStream0);
      byteString1.toString();
      byte[] byteArray1 = byteString0.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      byte byte0 = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = null;
      try {
        deflaterSink0 = new DeflaterSink((Sink) null, deflater0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.base64();
      ByteString byteString1 = byteString0.md5();
      ByteString.decodeBase64("W5Sx}HG ");
      byteString0.toString();
      ByteString byteString2 = ByteString.decodeBase64("");
      byteString2.EMPTY.toString();
      byteString2.lastIndexOf(byteString1);
      byteString2.utf8();
      ByteString.decodeHex("");
      byteString2.base64();
      byteString0.utf8();
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (int) (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      boolean boolean1 = byteString0.endsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byteString0.internalArray();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-15);
      byteArray0[7] = (byte)73;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.asByteBuffer();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      int int0 = byteString0.indexOf(byteString1);
      int int1 = byteString2.compareTo(byteString1);
      assertTrue(int1 == int0);
      
      String string0 = byteString1.toString();
      assertNotSame(byteString0, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals("[hex=4446646444666664]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=64464464444444444446644646644664466646646444444646464464466644646446446644444646444644464444466466446444646444444464664444644464]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      ByteString byteString1 = hashingSource1.hash();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)19;
      byteArray1[1] = (byte) (-25);
      byteArray1[2] = (byte)19;
      byteString1.rangeEquals((int) (byte)17, byteArray1, 240, (int) (byte)13);
      byteString1.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-70);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=446464666444]", string0);
  }
}
