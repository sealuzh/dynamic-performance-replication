/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:15:08 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Response) null).when(response0).networkResponse();
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Mal[fch|IVJKe";
      stringArray0[1] = "Mal[fch|IVJKe";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "Mal[fch|IVJKe");
      assertEquals(0, list0.size());
      
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("C62sTIwA_Eg'm", 100);
      assertEquals(100, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C62sTIwA_Eg'm";
      stringArray0[1] = "C62sTIwA_Eg'm";
      stringArray0[2] = "C62sTIwA_Eg'm";
      stringArray0[3] = "C62sTIwA_Eg'm";
      stringArray0[4] = "C62sTIwA_Eg'm";
      stringArray0[5] = "C62sTIwA_Eg'm";
      stringArray0[6] = "C62sTIwA_Eg'm";
      stringArray0[7] = "C62sTIwA_Eg'm";
      Headers headers0 = Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertTrue(set0.isEmpty());
      
      int int1 = HttpHeaders.parseSeconds("okhttp3.internal.http.HttpHeaders", 0);
      assertEquals(0, int1);
      
      int int2 = HttpHeaders.skipUntil(",", 1, "");
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers0, headers0);
      int int0 = HttpHeaders.parseSeconds(";)wK=", 8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("u1!fs0~w", 193);
      assertEquals(193, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      headers0.newBuilder();
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl.parse("Wl0 {m%so#8W+h/y");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      HttpHeaders.hasVaryAll(headers0);
      CookieJar cookieJar1 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.URI("");
      URI uRI1 = MockURI.resolve(uRI0, "only-if-cached");
      HttpUrl.get(uRI1);
      HttpHeaders.receiveHeaders(cookieJar1, (HttpUrl) null, headers0);
      HttpHeaders.parseChallenges(headers0, "");
      int int0 = HttpHeaders.parseSeconds("", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
      
      int int1 = HttpHeaders.skipUntil("O?3cmQN`~cgAr", 0, "only-if-cached");
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("u1!fs0~w", 204);
      assertEquals(204, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("l{zzo,f0pex;b>^3e]", 12, "l{zzo,f0pex;b>^3e]");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpHeaders.parseSeconds("Content-Length", 100);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Length", "");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.contentLength(headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.parseChallenges(headers0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpHeaders.skipUntil("TTN", 40, "Content-Length");
      HttpHeaders.parseSeconds("e%=h!u+:|%k98", 40);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "e%=h!u+:|%k98";
      stringArray0[1] = "TTN";
      stringArray0[2] = "e%=h!u+:|%k98";
      stringArray0[3] = "TTN";
      stringArray0[4] = "e%=h!u+:|%k98";
      stringArray0[5] = "Content-Length";
      stringArray0[6] = "e%=h!u+:|%k98";
      stringArray0[7] = "Content-Length";
      Headers headers0 = Headers.of(stringArray0);
      headers0.values("TTN");
      String[] stringArray1 = new String[8];
      stringArray1[0] = "e%=h!u+:|%k98";
      headers0.names();
      stringArray1[1] = "e%=h!u+:|%k98";
      stringArray1[2] = "e%=h!u+:|%k98";
      stringArray1[3] = "Content-Length";
      stringArray1[4] = "Vary";
      stringArray1[5] = "TTN";
      stringArray1[6] = "e%=h!u+:|%k98";
      stringArray1[7] = "e%=h!u+:|%k98";
      Headers headers1 = Headers.of(stringArray1);
      headers1.getDate("e%=h!u+:|%k98");
      headers0.toMultimap();
      HttpHeaders.parseChallenges(headers0, "Content-Length");
      Headers headers2 = HttpHeaders.varyHeaders(headers1, headers1);
      assertEquals(0, headers2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpHeaders.parseSeconds("unexpected path segment: ", (-302));
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpHeaders.skipWhitespace("behginIndex < 0: ", 13);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace((String) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpHeaders.parseSeconds("0", 65533);
      HttpHeaders.parseSeconds((String) null, (-663));
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace("\"sKyehJhl&9e>'6.", (-128));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      headers0.values("yqf{p(");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("s!gT", 1);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s!gT";
      stringArray0[1] = "s!gT";
      stringArray0[2] = "s!gT";
      stringArray0[3] = "no-transform";
      stringArray0[4] = "s!gT";
      stringArray0[5] = "6e8ysO &";
      stringArray0[6] = "s!gT";
      stringArray0[7] = "s!gT";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "s!gT");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".Me!orkR#sponse `=/null";
      stringArray0[1] = ".Me!orkR#sponse `=/null";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, ".Me!orkR#sponse `=/null");
      assertEquals(0, list0.size());
  }
}
