/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:44:26 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "++sG$ls");
      assertFalse(boolean0);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      String string1 = Utility.format(189, 201, true, 'p');
      assertFalse(string1.equals((Object)string0));
      assertEquals("189pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string1);
      assertNotNull(string1);
      
      String string2 = Utility.accessToString(2092);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("protected static synchronized strictfp", string2);
      assertNotNull(string2);
      
      String string3 = Utility.replace("ireturn", "189pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "SimpleElementValue doesnt know how to write out type ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ireturn", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte) (-41));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = Utility.clearBit(783, 783);
      assertEquals(783, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)105;
      Constant[] constantArray0 = new Constant[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)95, (byte)92, (byte)17, (byte)86, (byte) (-94), (byte)105}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(36447, constantMethodType0.getDescriptorIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)95, (byte)92, (byte)17, (byte)86, (byte) (-94), (byte)105}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(36447, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(36447, constantMethodType1.getDescriptorIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)95, (byte)92, (byte)17, (byte)86, (byte) (-94), (byte)105}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)95);
      assertNotNull(constantInteger0);
      assertEquals(95, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      constantArray0[1] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1147.107));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1147.107), constantDouble0.getBytes(), 0.01);
      
      constantArray0[2] = (Constant) constantDouble0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertNotNull(constantClass0);
      assertEquals(23569, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)95, (byte)92, (byte)17, (byte)86, (byte) (-94), (byte)105}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      constantArray0[3] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass((byte)95);
      assertFalse(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(95, constantClass1.getNameIndex());
      
      constantArray0[4] = (Constant) constantClass1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(byteSequence0);
      assertFalse(constantMethodType2.equals((Object)constantMethodType1));
      assertFalse(constantMethodType2.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType2);
      assertEquals((byte)16, constantMethodType2.getTag());
      assertEquals(22178, constantMethodType2.getDescriptorIndex());
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)95, (byte)92, (byte)17, (byte)86, (byte) (-94), (byte)105}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      constantArray0[5] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 242, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.compactClassName("instanceof", true);
      assertEquals("instanceof", string0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("instanceof");
      assertEquals((short)193, short0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("instanceof");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Linstanceof;", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)42;
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("38 29 ce 0d aa 2a", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)56, (byte)41, (byte) (-50), (byte)13, (byte) (-86), (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.encode(byteArray0, false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("8$v$ce$N$aa$w", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)56, (byte)41, (byte) (-50), (byte)13, (byte) (-86), (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string4 = Utility.compactClassName("instanceof", true);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("instanceof", string4);
      assertNotNull(string4);
      
      int int0 = Utility.setBit(97, (-238));
      assertEquals(262241, int0);
      
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)56, (byte)41, (byte) (-50), (byte)13, (byte) (-86), (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      assertNotNull(constantNameAndType0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(52749, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(14377, constantNameAndType0.getNameIndex());
      assertArrayEquals(new byte[] {(byte)56, (byte)41, (byte) (-50), (byte)13, (byte) (-86), (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = (ConstantNameAndType)constantNameAndType0.copy();
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertNotSame(constantNameAndType0, constantNameAndType1);
      assertNotSame(constantNameAndType1, constantNameAndType0);
      assertNotNull(constantNameAndType1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(52749, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(14377, constantNameAndType0.getNameIndex());
      assertEquals(52749, constantNameAndType1.getSignatureIndex());
      assertEquals(14377, constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertArrayEquals(new byte[] {(byte)56, (byte)41, (byte) (-50), (byte)13, (byte) (-86), (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)42, 94);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(94, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(42, constantInterfaceMethodref0.getClassIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(94, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(42, constantInterfaceMethodref0.getClassIndex());
      assertEquals(42, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(94, constantInterfaceMethodref1.getNameAndTypeIndex());
      
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1546, (-329), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, 89, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte) (-84), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iastore
         // 2:    ireturn
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("LgQr]K?Y_c3E*");
      assertEquals("LgQr]K?Y_c3E*", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Utility.typeOfSignature("S.");
      assertEquals((byte)9, byte0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('%');
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.compactClassName("S.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("S.", string1);
      assertNotNull(string1);
      
      int int0 = Utility.setBit(5045, 170);
      assertEquals(6069, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S.";
      stringArray0[1] = "S.";
      stringArray0[2] = "S.";
      stringArray0[3] = "SimpleElementValue doesnt know how to write out type ";
      stringArray0[4] = "S.";
      stringArray0[5] = "S.";
      stringArray0[6] = "S.";
      String string2 = Utility.methodTypeToSignature("$l$8b$I$A$A$A$A$A$A$A", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(LS/;LS/;LS/;LSimpleElementValue;LS/;LS/;LS/;)L$l$8b$I$A$A$A$A$A$A$A;", string2);
      assertNotNull(string2);
      assertEquals(7, stringArray0.length);
      
      int int1 = Utility.setBit((byte)9, 1153);
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      String string3 = Utility.classOrInterface(200);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("class", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-83)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d2l", string1);
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-83)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.format(72, (byte) (-113), true, 'D');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("72", string2);
      assertNotNull(string2);
      
      String string3 = Utility.format(76, 2958, false, 'j');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)63;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[2] = (byte)51;
      byte byte0 = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)5;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte)10, (byte)63, (byte)51, (byte)108, (byte)5}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      byte byte1 = Utility.typeOfSignature("The list of prefixes must not be null");
      assertFalse(byte1 == byte0);
      assertEquals((byte)14, byte1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 641);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.convertString("E*nm|)[0jG%Bmdw");
      assertEquals("E*nm|)[0jG%Bmdw", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("K5o$9=3XVM", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ")36ROeD\\'~S]>f0:&0";
      try { 
        Utility.typeOfSignature(")36ROeD'~S]>f0:&0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )36ROeD'~S]>f0:&0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-74), (byte)125, (byte)83, (byte) (-104), (byte)111}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-77), (-1754));
      assertNotNull(constantNameAndType0);
      assertEquals((-77), constantNameAndType0.getNameIndex());
      assertEquals((-1754), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong((byte)111);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(111L, constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(111L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(111L, constantLong1.getBytes());
      
      constantArray0[1] = (Constant) constantLong1;
      constantLong1.setBytes((byte) (-77));
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong1, constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(111L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-77L), constantLong1.getBytes());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46717. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.format(512, 512, true, '0');
      assertEqualsstring0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isSet(84, 512);
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("51200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(0, objectArray0.length);
      
      String string1 = Utility.classOrInterface(83);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)123;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-4121), (int) (byte)11, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    f2d\n1:    fconst_0\n2:    istore_1\n3:    aload_1\n4:    <illegal opcode>\n5:    iaload\n6:    iconst_1\n7:    lshr\n", string2);
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-115), (byte)11, (byte)60, (byte)43, (byte) (-7), (byte)46, (byte)4, (byte)123}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byte byte0 = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-23);
      byte byte1 = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)0;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4123, (int) (byte) (-23));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.fillup("+pF2~utLC&", 170, false, 'L');
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL+pF2~utLC&", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-86), (byte)102, (byte) (-6), (byte)119, (byte) (-86), (byte)32, (byte) (-88), (byte)76}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "monitorenter";
      String string1 = Utility.compactClassName("monitorenter", "['+<,>T!D", false);
      assertTrue(string1.equals((Object)string0));
      assertEquals("monitorenter", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-92);
      String string2 = Utility.encode(byteArray0, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$f8$o$a4", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)34, (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string3 = Utility.accessToString((int) (byte) (-92));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("protected synchronized transient native interface abstract strictfp synthetic annotation enum", string3);
      assertNotNull(string3);
      
      String string4 = Utility.format(174, 169, false, 'A');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA174", string4);
      assertNotNull(string4);
      
      byte byte0 = Utility.typeOfSignature("['+<,>T!D");
      assertEquals((byte)13, byte0);
      
      String string5 = "yQ@Q)v%-X6[ fkM";
      String string6 = Utility.replace("monitorenter", "[;g$Z;G5FS5_!{'Z!", "yQ@Q)v%-X6[ fkM");
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("monitorenter", string6);
      assertNotNull(string6);
      
      String string7 = Utility.compactClassName("protected synchronized transient native interface abstract strictfp synthetic annotation enum");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("protected synchronized transient native interface abstract strictfp synthetic annotation enum", string7);
      assertNotNull(string7);
      
      String string8 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.accessToString(410, false);
      assertEquals("private static final transient native", string0);
      assertNotNull(string0);
      
      String string1 = Utility.format(2, 7, false, '+');
      assertFalse(string1.equals((Object)string0));
      assertEquals("++++++2", string1);
      assertNotNull(string1);
      
      String string2 = Utility.convertString("private static final transient native");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("private static final transient native", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-106);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)127, (byte)93, (byte) (-106)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)112;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2, 410);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(410, constantMethodref0.getNameAndTypeIndex());
      assertEquals(2, constantMethodref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(95, (byte)112);
      assertNotNull(constantNameAndType0);
      assertEquals(112, constantNameAndType0.getSignatureIndex());
      assertEquals(95, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 11, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)66;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("return");
      assertNotNull(constantUtf8_0);
      assertEquals("return", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-984), 114, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore_3
         // 1:    lshr
         // 2:    iaload
         // 3:    nop
         // 4:    aconst_null
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k`zSaKbq<rfm54OXd");
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(47, 47);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Utility.setBit(47, (-11));
      assertEquals(2097199, int0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2869, (short) (-1));
      assertNotNull(constantInvokeDynamic0);
      assertEquals(2869, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-1), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(2869, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      
      constantArray0[1] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(constantPool1);
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals("pop2", string0);
      assertNotNull(string0);
      assertEquals(3, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string1 = "float";
      MockFile mockFile0 = new MockFile("pop2", "float");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "|!", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1));
      assertEquals("0:    impdep2\n1:    d2f\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-112)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.fillup("!Z;,_[kCq@%KZ", (byte) (-1), true, '-');
      assertFalse(string1.equals((Object)string0));
      assertEquals("!Z;,_[kCq@%KZ", string1);
      assertNotNull(string1);
      
      String string2 = Utility.format((byte) (-112), (byte) (-1), true, '-');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-112", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "!Z;,_[kCq@%KZ";
      objectArray0[1] = (Object) "!Z;,_[kCq@%KZ";
      objectArray0[2] = (Object) "!Z;,_[kCq@%KZ";
      objectArray0[3] = (Object) "!Z;,_[kCq@%KZ";
      objectArray0[4] = (Object) (byte) (-112);
      objectArray0[5] = (Object) (byte) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) null;
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 122, true);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("0:    impdep2\n1:    d2f\n", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-112)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7Y/Vzjg4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Y/Vzjg4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'6XRiR]*db{ mo";
      stringArray0[1] = "'6XRiR]*db{ mo";
      stringArray0[2] = "'6XRiR]*db{ mo";
      stringArray0[3] = "'6XRiR]*db{ mo";
      stringArray0[4] = "CLASSPATH component ";
      stringArray0[5] = ";";
      stringArray0[6] = "'6XRiR]*db{ mo";
      stringArray0[7] = "'6XRiR]*db{ mo";
      String string0 = Utility.methodTypeToSignature("'6XRiR]*db{ mo", stringArray0);
      assertEquals("(L'6XRiR]*db{;L'6XRiR]*db{;L'6XRiR]*db{;L'6XRiR]*db{;LCLASSPATH;L;;L'6XRiR]*db{;L'6XRiR]*db{;)L'6XRiR]*db{;", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      try { 
        Utility.typeOfSignature("'6XRiR]*db{ mo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '6XRiR]*db{ mo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "&$M\\ x(|6eao";
      try { 
        Utility.typeOfSignature("&$M x(|6eao");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &$M x(|6eao
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-84);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-33);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1979, (-539), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "T3\";4puy6S+rby?Y(";
      String string1 = Utility.methodSignatureReturnType("T3\";4puy6S+rby?Y(");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3\"", string1);
      assertNotNull(string1);
      
      String string2 = Utility.accessToString(116, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("protected final volatile", string2);
      assertNotNull(string2);
      
      String string3 = "#o=O*8/+f";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("3\"", "#o=O*8/+f");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // #o=O*8/+f
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "lookupswitch";
      stringArray0[1] = "lookupswitch";
      stringArray0[2] = "lookupswitch";
      stringArray0[3] = " QOhP$%";
      String string0 = Utility.methodTypeToSignature("lookupswitch", stringArray0);
      assertEquals("(Llookupswitch;Llookupswitch;Llookupswitch;LQOhP$%;)Llookupswitch;", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = Utility.methodSignatureReturnType("(Llookupswitch;Llookupswitch;Llookupswitch;LQOhP$%;)Llookupswitch;", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lookupswitch", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("WCF6p2c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WCF6p2c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "@nYE/'Eu(Adi\"gN+0g";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid method signature: ");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("@nYE/'Eu(Adi\"gN+0g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @nYE/'Eu(Adi\"gN+0g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-38), (byte)79, (byte)8, (byte)53, (byte) (-91)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(40, 2851);
      assertNotNull(constantMethodref0);
      assertEquals(2851, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(40, constantMethodref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("iinc\t\t%218\t79", string0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-38), (byte)79, (byte)8, (byte)53, (byte) (-91)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qg*tMqBpyB;u~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qg*tMqBpyB;u~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = ";A:/5qdW";
      try { 
        Utility.typeOfSignature(";A:/5qdW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;A:/5qdW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SPx8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short short0 = Utility.searchOpcode("*@DF1.O<fh2");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)43;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("29 4e 2b", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)41, (byte)78, (byte)43}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(570, 159);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(159, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(570, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(122, 92);
      assertNotNull(constantFieldref0);
      assertEquals(122, constantFieldref0.getClassIndex());
      assertEquals(92, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertEquals(122, constantFieldref0.getClassIndex());
      assertEquals(92, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(92, constantFieldref1.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(122, constantFieldref1.getClassIndex());
      
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("*@DF1.O<fh2");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("*@DF1.O<fh2", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("*@DF1.O<fh2", constantUtf8_0.getBytes());
      assertEquals("*@DF1.O<fh2", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("obg9-");
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_0));
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_1));
      assertNotSame(constantUtf8_2, constantUtf8_0);
      assertNotSame(constantUtf8_2, constantUtf8_1);
      assertNotNull(constantUtf8_2);
      assertEquals("obg9-", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      
      ConstantUtf8 constantUtf8_3 = new ConstantUtf8(constantUtf8_2);
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_0));
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_1));
      assertFalse(constantUtf8_3.equals((Object)constantUtf8_0));
      assertFalse(constantUtf8_3.equals((Object)constantUtf8_1));
      assertTrue(constantUtf8_3.equals((Object)constantUtf8_2));
      assertNotNull(constantUtf8_3);
      assertEquals("obg9-", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertEquals((byte)1, constantUtf8_3.getTag());
      assertEquals("obg9-", constantUtf8_3.getBytes());
      
      constantArray0[3] = (Constant) constantUtf8_3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)78, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)45}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-83));
      assertNotNull(constantFloat0);
      assertEquals((-83.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((-83.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-83.0F), constantFloat1.getBytes(), 0.01F);
      
      constantArray0[1] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\t\t#");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\t\t#", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\t\t#", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("\t\t#", constantUtf8_1.getBytes());
      
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3326, 158);
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(158, constantMethodHandle0.getReferenceIndex());
      assertEquals(3326, constantMethodHandle0.getReferenceKind());
      
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lreturn", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)45}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, constantArray0.length);
      
      String string1 = Utility.convertString("svgo^");
      assertFalse(string1.equals((Object)string0));
      assertEquals("svgo^", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "RX`'ZmHAu";
      try { 
        Utility.typeOfSignature("RX`'ZmHAu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RX`'ZmHAu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("HHgn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HHgn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-63), (byte)4, (byte)65, (byte)73, (byte)91, (byte) (-31)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2211));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-24);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (-2323), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short short0 = Utility.searchOpcode("!J&TY_~3");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "!J&TY_~3";
      objectArray0[1] = (Object) "!J&TY_~3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "!J&TY_~3";
      objectArray0[4] = (Object) "!J&TY_~3";
      objectArray0[5] = (Object) "!J&TY_~3";
      objectArray0[6] = (Object) "!J&TY_~3";
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      byte byte0 = Utility.typeOfSignature("!J&TY_~3, !J&TY_~3, java.lang.Object@559b7678, !J&TY_~3, !J&TY_~3, !J&TY_~3, !J&TY_~3");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("if_acmpeq");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "if_acmpeq";
      objectArray0[1] = (Object) "if_acmpeq";
      mockPrintWriter0.println(0L);
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(5, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)23;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)41, (byte) (-76), (byte) (-104), (byte)51, (byte) (-45), (byte)23}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 38963. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CC7Sj@l[?0t{R@v");
      assertEquals((byte)5, byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[1] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[2] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[3] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[4] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[5] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[6] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[7] = (Object) "CC7Sj@l[?0t{R@v";
      objectArray0[8] = (Object) "CC7Sj@l[?0t{R@v";
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v, CC7Sj@l[?0t{R@v}", string0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "GOKW*9";
      stringArray0[1] = "Lpublic;V";
      stringArray0[2] = "Lpublic;V";
      stringArray0[3] = "/5uB({`rmNXiLh%:D";
      String string0 = Utility.methodTypeToSignature("Lpublic;V", stringArray0);
      assertEquals("(LGOKW*9;LLpublic;V;LLpublic;V;L/5uB({`rmNXiLh%:D;)LLpublic;V;", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      int int0 = 194;
      String string1 = Utility.format(194, 194, true, '\\');
      assertFalse(string1.equals((Object)string0));
      assertEquals("194\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string1);
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface(216);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("class", string2);
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("(LGOKW*9;LLpublic;V;LLpublic;V;L/5uB({`rmNXiLh%:D;)LLpublic;V;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;LLpublic;V;L/5uB({`rmNXiLh%:D;)LLpublic;V;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-120), (byte)58, (byte)55, (byte)101, (byte) (-82), (byte)79, (byte)0, (byte) (-88)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object6));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("7jQhB", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)106, (byte)127, (byte)81, (byte)104, (byte)66}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)106, (byte)127, (byte)81, (byte)104, (byte)66}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertEquals(14186, int0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)106, (byte)127, (byte)81, (byte)104, (byte)66}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("land", string1);
      assertNotNull(string1);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)106, (byte)127, (byte)81, (byte)104, (byte)66}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int int1 = Utility.clearBit(103, 1902);
      assertFalse(int1 == int0);
      assertEquals(103, int1);
      
      String string2 = Utility.convertString("7jQhB");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7jQhB", string2);
      assertNotNull(string2);
      
      boolean boolean1 = Utility.isSet(103, 1137);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dup_x2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isSet((-2297), 171);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Utility.isJavaIdentifierPart('e');
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-37);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte) (-37);
      byteArray1[5] = (byte)88;
      byteArray1[6] = (byte) (-120);
      boolean boolean4 = Utility.equals(byteArray0, byteArray1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean4);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-120), (byte)88, (byte) (-112), (byte)51, (byte)122, (byte) (-37)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)39, (byte)122, (byte)122, (byte) (-37), (byte)88, (byte) (-120)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "APPEND ";
      try { 
        Utility.typeOfSignature("APPEND ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: APPEND 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = Utility.searchOpcode("java.lang.Dc}Z");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.format((short) (-1), (short) (-1), false, 's');
      assertEquals("-1", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("Y~6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y~6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L>.`OB<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L>.`OB<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.fillup("iconst_3", (-1107), false, ' ');
      assertEquals("iconst_3", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)99;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)115;
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$L$a2c$Qs", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-94), (byte)99, (byte)16, (byte)115}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2311), (-715));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    fconst_0\n1:    if_icmpge\t\t#25361\n4:    drem\n", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-94), (byte)99, (byte)16, (byte)115}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0b a2 63 10 73", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-94), (byte)99, (byte)16, (byte)115}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-858), 1047, false);
      assertEquals("0:    fstore_1\n", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)68}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) (byte)74;
      objectArray0[2] = (Object) null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_`");
      assertFalse(boolean0);
      
      int int0 = 123;
      String string0 = Utility.classOrInterface(123);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-114)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-65), (byte) (-65));
      assertNotNull(constantInvokeDynamic0);
      assertEquals((-65), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-65), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-65), constantInvokeDynamic0.getNameAndTypeIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      assertEquals((-65), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-65), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-65), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-65), constantInvokeDynamic1.getClassIndex());
      assertEquals((-65), constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals((-65), constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic1);
      assertTrue(constantInvokeDynamic0.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic2);
      assertEquals((-65), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-65), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-65), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-65), constantInvokeDynamic1.getClassIndex());
      assertEquals((-65), constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals((-65), constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((-65), constantInvokeDynamic2.getClassIndex());
      assertEquals((-65), constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertEquals((-65), constantInvokeDynamic2.getNameAndTypeIndex());
      
      constantArray0[1] = (Constant) constantInvokeDynamic2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("athrow", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-114)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byte byte0 = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte)46;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)71;
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      byteArray0[5] = (byte)60;
      ConstantPool constantPool0 = null;
      boolean boolean4 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte) (-28), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = Utility.isSet(36, 36);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-109);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (-567));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.format(3827, 3827, true, '4');
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1979, (-539), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte) (-65);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (-350), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-61), (byte)44, (byte) (-108), (byte) (-52), (byte)0, (byte) (-110), (byte)56, (byte) (-115)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-61), (byte)44, (byte) (-108), (byte) (-52), (byte)0, (byte) (-110), (byte)56, (byte) (-115)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte) (-117);
      byteArray1[4] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)125, (byte)103, (byte)6, (byte) (-117), (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(dataInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)125, (byte)103, (byte)6, (byte) (-117), (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(constantMethodref0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(32103, constantMethodref0.getClassIndex());
      assertEquals(1675, constantMethodref0.getNameAndTypeIndex());
      assertArrayEquals(new byte[] {(byte)125, (byte)103, (byte)6, (byte) (-117), (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.copy();
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(constantMethodref1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(32103, constantMethodref0.getClassIndex());
      assertEquals(1675, constantMethodref0.getNameAndTypeIndex());
      assertEquals(1675, constantMethodref1.getNameAndTypeIndex());
      assertEquals(32103, constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertArrayEquals(new byte[] {(byte)125, (byte)103, (byte)6, (byte) (-117), (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4284, (int) (byte)125, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("double", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)111, (byte)117, (byte)98, (byte)108, (byte)101}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.convertString("long");
      assertEquals("long", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("new", "PMGClass(", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("new", string1);
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      ConstantPool constantPool0 = null;
      int int0 = 75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, 75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2383, (int) (byte) (-10), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(87, 240);
      assertEquals(65623, int0);
      
      char char0 = 'z';
      String string0 = Utility.format(627, 627, false, 'z');
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz627", string0);
      assertNotNull(string0);
      
      String string1 = "8P4$r:qp8&0?";
      try { 
        Utility.typeOfSignature("8P4$r:qp8&0?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8P4$r:qp8&0?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.accessToString(176);
      assertEquals("final synchronized transient", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)54;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(784, (byte) (-55));
      assertNotNull(constantInvokeDynamic0);
      assertEquals((-55), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(784, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(784, constantInvokeDynamic0.getClassIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)40, 784);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)118;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte) (-90), false);
      assertEquals("0:    if_acmpne\t\t#-16266\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-64), (byte)118}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = true;
      String string1 = Utility.encode(byteArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-64), (byte)118}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string2 = Utility.convertString("0:    if_acmpne\t\t#-16266\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0:    if_acmpne\t\t#-16266\\n", string2);
      assertNotNull(string2);
      
      short short0 = Utility.searchOpcode("ifnull");
      assertEquals((short)198, short0);
      
      String string3 = Utility.classOrInterface((-1468));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("interface", string3);
      assertNotNull(string3);
      
      try { 
        Utility.typeOfMethodSignature("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)83;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-912), (-912));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    astore_3\n1:    arraylength\n2:    aastore\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-66), (byte)83}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-122);
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$M$a5Y$J$86", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-91), (byte)89, (byte)9, (byte) (-122)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string2 = Utility.printArray(objectArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, objectArray0.length);
      
      String string3 = Utility.printArray(objectArray0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, objectArray0.length);
      
      String string4 = Utility.compactClassName("$M$a5Y$J$86", "{java.lang.Object@52f6c307, java.lang.Object@2e4056ca, java.lang.Object@4471badf, java.lang.Object@3e4d8556}", false);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("$M$a5Y$J$86", string4);
      assertNotNull(string4);
      
      String string5 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (-268), false);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("0:    fconst_1\n1:    if_acmpeq\t\t#22794\n4:    i2f\n", string5);
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-91), (byte)89, (byte)9, (byte) (-122)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string6 = Utility.classOrInterface(2048);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("class", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.signatureToString("F:Op3?am>*kw", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("F:Op3?am>*kw");
      assertEquals("float", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{null, null, null}", string0);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      String string1 = Utility.compactClassName("{null, null, null}", "dreturn", false);
      assertTrue(string1.equals((Object)string0));
      assertEquals("{null, null, null}", string1);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("{null, null, null}");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("{null, null, null}", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)104;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), (int) (byte) (-51));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0:    aload_0\n1:    <illegal opcode>\n2:    areturn\n3:    astore_3\n4:    <illegal opcode>\n5:    f2l\n6:    istore_0\n7:    imul\n", string3);
      assertNotNull(string3);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-5), (byte) (-80), (byte)78, (byte) (-51), (byte) (-116), (byte)59, (byte)104}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "checkcast");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.format(80, 80, true, '#');
      assertEquals("80##############################################################################", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "80##############################################################################";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "80##############################################################################";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      String string2 = Utility.printArray(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(objectArray1, objectArray0);
      assertEquals("{}", string2);
      assertNotNull(string2);
      assertEquals(0, objectArray1.length);
      
      String string3 = Utility.getSignature("{80##############################################################################, java.lang.Object@5a92310e, 80##############################################################################}");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L{80##############################################################################,;", string3);
      assertNotNull(string3);
      
      String string4 = Utility.classOrInterface(80);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("class", string4);
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)37;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string5 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), 155, false);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("0:    if_icmple\t\t#-21344\n3:    <illegal opcode>\n4:    fload_3\n", string5);
      assertNotNull(string5);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-84), (byte) (-96), (byte) (-38), (byte)37}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-12);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)91, (byte)31, (byte) (-1), (byte) (-12)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0wP5{I(,J_Ln:(/*";
      stringArray0[1] = "0wP5{I(,J_Ln:(/*";
      stringArray0[2] = "0wP5{I(,J_Ln:(/*";
      stringArray0[3] = "0wP5{I(,J_Ln:(/*";
      stringArray0[4] = "0wP5{I(,J_Ln:(/*";
      stringArray0[5] = "0wP5{I(,J_Ln:(/*";
      String string0 = Utility.methodTypeToSignature("0wP5{I(,J_Ln:(/*", stringArray0);
      assertEquals("(L0wP5{I(,J_Ln:(/*;L0wP5{I(,J_Ln:(/*;L0wP5{I(,J_Ln:(/*;L0wP5{I(,J_Ln:(/*;L0wP5{I(,J_Ln:(/*;L0wP5{I(,J_Ln:(/*;)L0wP5{I(,J_Ln:(/*;", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0wP5{I(,J_Ln:(/*");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("v}ES,u*)yY[*]>f!QR", (Object[]) stringArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertEquals(6, stringArray0.length);
      
      Utility.printArray(printStream0, (Object[]) stringArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)91, (byte)31, (byte) (-1), (byte) (-12)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short short0 = Utility.searchOpcode("EaHRveK1}C");
      assertEquals((short) (-1), short0);
      
      boolean boolean2 = Utility.isSet((byte) (-1), (byte)31);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = Utility.printArray((Object[]) stringArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{0wP5{I(,J_Ln:(/*, 0wP5{I(,J_Ln:(/*, 0wP5{I(,J_Ln:(/*, 0wP5{I(,J_Ln:(/*, 0wP5{I(,J_Ln:(/*, 0wP5{I(,J_Ln:(/*}", string1);
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)31, (byte) (-1), (byte) (-12)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dup_x2", string2);
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)31, (byte) (-1), (byte) (-12)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int int0 = Utility.setBit((byte)31, (-1455573640));
      assertEquals(16777247, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.classOrInterface(40);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("KD-_m@J.;0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KD-_m@J.;0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Utility.accessToString(2546, true);
      assertEquals("private final volatile transient native strictfp", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-67);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-39);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)80, (byte)23, (byte) (-67), (byte)14, (byte) (-12), (byte)18, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-16), (byte)80, (byte)23, (byte) (-67), (byte)14, (byte) (-12), (byte)18, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-16), (byte)80, (byte)23, (byte) (-67), (byte)14, (byte) (-12), (byte)18, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-16), (byte)80, (byte)23, (byte) (-67), (byte)14, (byte) (-12), (byte)18, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(dataInputStream0);
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(61520, constantFieldref0.getClassIndex());
      assertEquals(6077, constantFieldref0.getNameAndTypeIndex());
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-16), (byte)80, (byte)23, (byte) (-67), (byte)14, (byte) (-12), (byte)18, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[0] = (Constant) constantFieldref0;
      int int0 = dataInputStream0.skipBytes(2685);
      assertEquals(4, int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-16), (byte)80, (byte)23, (byte) (-67), (byte)14, (byte) (-12), (byte)18, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)18, (int) (byte)18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 217. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-99);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-113), (byte)117, (byte) (-99)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = false;
      String string0 = Utility.format((-3356), (-1794586372), false, ';');
      assertEquals("-3356", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("-3356");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -3356
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)37;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)67;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("88 25 00 ed 7d 85 00 34 43", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)37, (byte)0, (byte) (-19), (byte)125, (byte) (-123), (byte)0, (byte)52, (byte)67}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      String string1 = Utility.format((-631), 59, true, 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-631LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-19);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 39, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1098), (-1098));
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("InnerClasses", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "int";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{int}", string1);
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      
      String string2 = Utility.methodTypeToSignature("|,", (String[]) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("()L|,;", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      objectArray0[0] = (Object) (byte)67;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cn37[~/");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)66;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)5, (byte) (-82), (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("()L|,;");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("()L|,;", constantUtf8_0.getBytes());
      
      String string3 = constantPool0.constantToString((Constant) constantUtf8_0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("()L|,;", string3);
      assertNotNull(string3);
      assertEquals(0, constantPool0.getLength());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("()L|,;", constantUtf8_0.getBytes());
      
      boolean boolean2 = false;
      String string4 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("lstore_3", string4);
      assertNotNull(string4);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)5, (byte) (-82), (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string5 = Utility.methodSignatureToString("()L|,;", "|,", "|,", false);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("|, |, |,()", string5);
      assertNotNull(string5);
      
      try { 
        Utility.methodSignatureArgumentTypes("|, |, |,()", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |, |, |,()
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1979, (-539), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.getSignature("zsV][C|W1]?hAd%+|");
      assertEquals("[LzsV];", string0);
      assertNotNull(string0);
      
      String string1 = "invokestatic";
      boolean boolean0 = true;
      int int0 = 5;
      int int1 = 2048;
      LocalVariable[] localVariableArray0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = Utility.getSignature("{}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L{};", string1);
      assertNotNull(string1);
      
      String string2 = Utility.printArray(objectArray0, true, false);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("{}", string2);
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      
      String string3 = Utility.compactClassName("L{};");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("L{};", string3);
      assertNotNull(string3);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`A_NM", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)97;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), 2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1098), (-1098));
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("InnerClasses", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "int";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{int}", string1);
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      
      String string2 = Utility.methodTypeToSignature("|,", (String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("()L|,;", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cn37[~/");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)67, (byte)66, (byte)5, (byte) (-82), (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("()L|,;");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("()L|,;", constantUtf8_0.getBytes());
      
      String string3 = constantPool0.constantToString((Constant) constantUtf8_0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("()L|,;", string3);
      assertNotNull(string3);
      assertEquals(0, constantPool0.getLength());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("()L|,;", constantUtf8_0.getBytes());
      
      boolean boolean2 = false;
      String string4 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("fstore_0", string4);
      assertNotNull(string4);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)67, (byte)66, (byte)5, (byte) (-82), (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string5 = Utility.accessToString((int) (byte)67);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("public private volatile", string5);
      assertNotNull(string5);
      
      try { 
        Utility.methodSignatureArgumentTypes("public private volatile", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      String string1 = Utility.compactClassName("java.lang.Object@b28a098, java.lang.Object@246bec6f, java.lang.Object@2c86015, java.lang.Object@2ef3b410, java.lang.Object@6011fd36, java.lang.Object@1b627dcf");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "N04{qARn7DSwk";
      boolean boolean0 = true;
      String string1 = Utility.compactClassName("", "N04{qARn7DSwk", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("N04{qARn7DSwk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N04{qARn7DSwk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-27);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-27), (-2383));
      assertEquals("0:    dup2_x1\n1:    fconst_1\n2:    lshr\n3:    dload\t\t%20\n5:    dstore_1\n6:    dstore\t\t%151\n8:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)93, (byte)12, (byte)123, (byte)24, (byte)20, (byte)72, (byte)57, (byte) (-105), (byte) (-27)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "l/]`\"+h'm8fU {0=9J|";
      stringArray0[1] = "l/]`\"+h'm8fU {0=9J|";
      stringArray0[2] = "l/]`\"+h'm8fU {0=9J|";
      stringArray0[3] = "l/]`\"+h'm8fU {0=9J|";
      stringArray0[4] = " entries\n";
      stringArray0[5] = "l/]`\"+h'm8fU {0=9J|";
      String string0 = Utility.methodTypeToSignature("l/]`\"+h'm8fU {0=9J|", stringArray0);
      assertEquals("(Ll/]`\"+h'm8fU;Ll/]`\"+h'm8fU;Ll/]`\"+h'm8fU;Ll/]`\"+h'm8fU;Lentries;Ll/]`\"+h'm8fU;)Ll/]`\"+h'm8fU;", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = "U0ki/gx%cO{V#L,K";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U0ki/gx%cO{V#L,K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U0ki/gx%cO{V#L,K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)59;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-119), (byte) (-105), (byte) (-89), (byte) (-99), (byte)59}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.accessToString((int) (byte) (-105), true);
      assertEquals("public private protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-70), 159);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)60, (byte)12, (byte)60, (byte)83, (byte) (-72), (byte)74}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_1", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)60, (byte)12, (byte)60, (byte)83, (byte) (-72), (byte)74}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(87, false);
      assertEquals("public private protected final volatile", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('G');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = Utility.decode("&$vCCi{P,\"x03", false);
      assertNotNull(byteArray0);
      assertEquals(12, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "&$vCCi{P,\"x03";
      objectArray0[1] = (Object) "&$vCCi{P,\"x03";
      objectArray0[2] = (Object) "&$vCCi{P,\"x03";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.format(3827, 3827, false, '4');
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.accessToString(764, true);
      assertEquals("protected static final volatile transient", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.compactClassName("protected static final volatile transient", false);
      assertTrue(string1.equals((Object)string0));
      assertEquals("protected static final volatile transient", string1);
      assertNotNull(string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-81), (byte) (-81));
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-81), constantMethodref0.getClassIndex());
      assertEquals((-81), constantMethodref0.getNameAndTypeIndex());
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-81), constantMethodref0.getClassIndex());
      assertEquals((-81), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals((-81), constantMethodref1.getClassIndex());
      assertEquals((-81), constantMethodref1.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("dreturn", string3);
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Utility.convertString("static");
      assertEquals("static", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2782));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet((-2782), (-2782));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('+');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byte byte0 = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1408, (-2430));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-102);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)32, 242, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "6n)f>U";
      try { 
        Utility.typeOfSignature("6n)f>U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6n)f>U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-33), (byte)52, (byte)92, (byte)86, (byte)101, (byte) (-98), (byte)8}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(57140, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertArrayEquals(new byte[] {(byte) (-33), (byte)52, (byte)92, (byte)86, (byte)101, (byte) (-98), (byte)8}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("athrow");
      assertNotNull(constantUtf8_0);
      assertEquals("athrow", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertNotNull(constantMethodHandle0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(22117, constantMethodHandle0.getReferenceIndex());
      assertEquals(92, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertArrayEquals(new byte[] {(byte) (-33), (byte)52, (byte)92, (byte)86, (byte)101, (byte) (-98), (byte)8}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(22117, constantMethodHandle0.getReferenceIndex());
      assertEquals(92, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(22117, constantMethodHandle1.getReferenceIndex());
      assertEquals(92, constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertArrayEquals(new byte[] {(byte) (-33), (byte)52, (byte)92, (byte)86, (byte)101, (byte) (-98), (byte)8}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      
      constantArray0[3] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(47, 1310);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(1310, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(47, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(47, constantInvokeDynamic0.getClassIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = (ConstantInvokeDynamic)constantInvokeDynamic0.copy();
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic1, constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(1310, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(47, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(47, constantInvokeDynamic0.getClassIndex());
      assertEquals(1310, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(47, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(47, constantInvokeDynamic1.getClassIndex());
      
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)39;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\"");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\"", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-103);
      byteArray0[0] = (byte) (-103);
      byte byte1 = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-112)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte)21, (byte) (-26), (byte)0, (byte)66, (byte) (-25), (byte)45, (byte)52}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_0", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)34, (byte)21, (byte) (-26), (byte)0, (byte)66, (byte) (-25), (byte)45, (byte)52}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(162);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(162, constantClass0.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1101, 198, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8942. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, 4512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = Utility.format(68, 2594, true, '?');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)122, (byte)100, (byte)0, (byte) (-92), (byte)17, (byte) (-41)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ishr", string1);
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)122, (byte)100, (byte)0, (byte) (-92), (byte)17, (byte) (-41)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)67, (byte) (-85), (byte) (-45), (byte)55}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ishl", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)67, (byte) (-85), (byte) (-45), (byte)55}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("ishl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ishl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (int) (byte) (-97));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)79;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3646), 2599);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    <illegal opcode>\n1:    sastore\n2:    lastore\n3:    iastore\n", string1);
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-26), (byte)86, (byte)80, (byte)79}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)94;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)73, (byte)94, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-34);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d5 49 5e 0d 8e 2c 40 de", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)73, (byte)94, (byte)13, (byte) (-114), (byte)44, (byte)64, (byte) (-34)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("d5 49 5e 0d 8e 2c 40 de", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(23, byteArray1.length);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-179), false);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray0, byteArray1);
      assertEquals("4:    d2i\n5:    aload_2\n6:    lstore_1\n7:    <illegal opcode>\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)73, (byte)94, (byte)13, (byte) (-114), (byte)44, (byte)64, (byte) (-34)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)73, (byte)94, (byte)13, (byte) (-114), (byte)44, (byte)64, (byte) (-34)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(byteArray0, byteArray1);
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)73, (byte)94, (byte)13, (byte) (-114), (byte)44, (byte)64, (byte) (-34)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getfield");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 137, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-67);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)117, (byte)33, (byte)103, (byte)35, (byte)108, (byte) (-62), (byte)125, (byte)77, (byte) (-67)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)117, (byte)33, (byte)103, (byte)35, (byte)108, (byte) (-62), (byte)125, (byte)77, (byte) (-67)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ConstantDouble constantDouble0 = new ConstantDouble(dataInputStream0);
      assertNotNull(constantDouble0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1.633155583480399E256, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertArrayEquals(new byte[] {(byte)117, (byte)33, (byte)103, (byte)35, (byte)108, (byte) (-62), (byte)125, (byte)77, (byte) (-67)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.copy();
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertNotNull(constantDouble1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1.633155583480399E256, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1.633155583480399E256, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertArrayEquals(new byte[] {(byte)117, (byte)33, (byte)103, (byte)35, (byte)108, (byte) (-62), (byte)125, (byte)77, (byte) (-67)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string0 = constantPool0.constantToString((Constant) constantDouble0);
      assertTrue(constantDouble0.equals((Object)constantDouble1));
      assertNotSame(constantDouble0, constantDouble1);
      assertEquals("1.633155583480399E256", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1.633155583480399E256, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertArrayEquals(new byte[] {(byte)117, (byte)33, (byte)103, (byte)35, (byte)108, (byte) (-62), (byte)125, (byte)77, (byte) (-67)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)35, (int) (byte)125, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte)23);
      assertEquals("7:    astore_1\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)6, (byte)0, (byte)23, (byte)8, (byte)102, (byte)78, (byte)76}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.accessToString(60, true);
      assertEquals("protected static final", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.compactClassName("byte", true);
      assertEquals("byte", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)102;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)9);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(9.0F, constantFloat0.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 204, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = Utility.clearBit(504, 504);
      assertEquals(504, int0);
      
      int int1 = Utility.setBit(504, 11);
      assertFalse(int1 == int0);
      assertEquals(2552, int1);
      
      boolean boolean0 = Utility.isSet(122, (-962));
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("Z^I9Ifp]Rbp1TXr", false);
      assertEquals("boolean", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)52, (byte) (-63), (byte) (-99), (byte) (-85), (byte) (-57), (byte) (-105), (byte) (-87), (byte)86}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmpeq");
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertNotNull(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(13505, constantString0.getStringIndex());
      assertArrayEquals(new byte[] {(byte)52, (byte) (-63), (byte) (-99), (byte) (-85), (byte) (-57), (byte) (-105), (byte) (-87), (byte)86}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1), 95);
      assertNotNull(constantMethodref0);
      assertEquals((-1), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(95, constantMethodref0.getNameAndTypeIndex());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantString constantString1 = new ConstantString(constantString0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals(13505, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(13505, constantString0.getStringIndex());
      assertArrayEquals(new byte[] {(byte)52, (byte) (-63), (byte) (-99), (byte) (-85), (byte) (-57), (byte) (-105), (byte) (-87), (byte)86}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifgt\t\t#-21559", string0);
      assertNotNull(string0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)52, (byte) (-63), (byte) (-99), (byte) (-85), (byte) (-57), (byte) (-105), (byte) (-87), (byte)86}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.compactClassName("+1by\"T`eb@Q", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("+1by\"T`eb@Q", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.compactClassName("P");
      assertEquals("P", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-14);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1336), (int) (byte)48, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lsub\n1:    lstore_1\n2:    faload\n3:    fload_3\n4:    dconst_1\n5:    nop\n6:    astore_1\n7:    <illegal opcode>\n", string1);
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)101, (byte)64, (byte)48, (byte)37, (byte)15, (byte)0, (byte)76, (byte) (-14)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("11jZ,5`FcSB%{0[Vn/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 11jZ,5`FcSB%{0[Vn/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.fillup("g_5D$(A.|iw;_xrOX", 171, false, 'e');
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeg_5D$(A.|iw;_xrOX", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("\t(wide)");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\t(wide)", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeg_5D$(A.|iw;_xrOX", false);
      assertNotNull(byteArray0);
      assertEquals(170, byteArray0.length);
      
      String string2 = Utility.accessToString(171);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("public private static synchronized transient", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.replace("? super ", (String) null, "|zxH$I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-108);
      byteArray0[0] = (byte) (-108);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("94", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.compactClassName("94");
      assertTrue(string1.equals((Object)string0));
      assertEquals("94", string1);
      assertNotNull(string1);
      
      String string2 = Utility.fillup("/KV&gb#N~SqM.", (byte) (-108), true, 'N');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/KV&gb#N~SqM.", string2);
      assertNotNull(string2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string3 = Utility.compactClassName("/KV&gb#N~SqM.", "94", true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".KV&gb#N~SqM.", string3);
      assertNotNull(string3);
      
      String string4 = Utility.replace(".KV&gb#N~SqM.", ".KV&gb#N~SqM.", "/KV&gb#N~SqM.");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("/KV&gb#N~SqM.", string4);
      assertNotNull(string4);
      
      boolean boolean0 = Utility.isSet((-192), 89);
      assertTrue(boolean0);
      
      int int0 = 617;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string5 = Utility.classOrInterface(617);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("interface", string5);
      assertNotNull(string5);
      
      try { 
        Utility.typeOfSignature("/KV&gb#N~SqM.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /KV&gb#N~SqM.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)98, (byte)45, (byte)17, (byte) (-67), (byte) (-128), (byte) (-108), (byte) (-86)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = byteSequence0.readBoolean();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)98, (byte)45, (byte)17, (byte) (-67), (byte) (-128), (byte) (-108), (byte) (-86)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_3", string0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)98, (byte)45, (byte)17, (byte) (-67), (byte) (-128), (byte) (-108), (byte) (-86)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = ".1{V6UK)s\\w~yk$";
      boolean boolean0 = true;
      String string1 = Utility.compactClassName(".1{V6UK)sw~yk$", ".1{V6UK)sw~yk$", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature(".1{V6UK)sw~yk$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .1{V6UK)sw~yk$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      String string0 = Utility.compactClassName("J8-", " (S7z.G<A16.)", false);
      assertEquals("J8-", string0);
      assertNotNull(string0);
      
      String string1 = "MStRL8pTG@EX6w";
      try { 
        Utility.typeOfSignature("MStRL8pTG@EX6w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MStRL8pTG@EX6w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)59;
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)86;
      byte byte1 = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$3bV$84", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)59, (byte)86, (byte) (-124)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      try { 
        Utility.decode("$3bV$84", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.signatureToString("SAME_EXTENDED");
      assertEquals("short", string0);
      assertNotNull(string0);
      
      int int0 = (-1803);
      String string1 = Utility.accessToString((-1803), true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public protected final volatile transient strictfp synthetic annotation enum", string1);
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("SAME_EXTENDED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SAME_EXTENDED
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ihg");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "Visiting non-standard PMGClass object";
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
      
      String string1 = Utility.classOrInterface((byte)12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      String string2 = "return%<%";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Visiting non-standard PMGClass object", "qnTPQdrg>B>K<*luF", "return%<%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Visiting non-standard PMGClass object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = Utility.setBit(11, (-3754));
      assertEquals(4194315, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)18;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)10);
      assertNotNull(constantFloat0);
      assertEquals(10.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)4, 28);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("4:    fastore\n5:    ifnull\t\t#2583\n", string0);
      assertNotNull(string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)4, (byte) (-9), (byte)90, (byte)33, (byte)81, (byte) (-58), (byte)10, (byte)18}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)83;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)122, (byte)30, (byte)40, (byte) (-80), (byte)12, (byte) (-102), (byte) (-102), (byte)83}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("=%waLXf+Cz]'?-Poh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =%waLXf+Cz]'?-Poh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.compactClassName("lookupswitch");
      assertEquals("lookupswitch", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)92, (byte)77, (byte)50, (byte)3, (byte) (-84), (byte) (-115)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(23629, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertArrayEquals(new byte[] {(byte)92, (byte)77, (byte)50, (byte)3, (byte) (-84), (byte) (-115)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aaload", string1);
      assertNotNull(string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)92, (byte)77, (byte)50, (byte)3, (byte) (-84), (byte) (-115)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.PMGClass";
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.PMGClass");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.PMGClass");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.bcel.classfile.PMGClass", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)16;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)80;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (short) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.format(474, 474, true, 'u');
      String string0 = Utility.compactClassName("Invalid type: ", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Invalid type: ";
      stringArray0[1] = "Invalid type: ";
      stringArray0[2] = "ireturn";
      stringArray0[3] = "474uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      Utility.methodTypeToSignature("IY11(G", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)119);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)41;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), 20, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, 3, 20, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("double");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Utility.typeOfSignature("D");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D";
      stringArray0[2] = "double";
      stringArray0[2] = "double";
      stringArray0[3] = "M]&@YZ] 3?V3>";
      stringArray0[4] = "M]&@YZ] 3?V3>";
      stringArray0[5] = "double";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("impdep1", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.convertString("NMi9<t2[ ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "NMi9<t2[ ";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte)2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)71;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6a 15 0e 00 9f 85 2b 47", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString(175);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "instanceof");
      constantArray0[0] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("if_icmpeq\t\t#-31441", string1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "byte";
      Utility.convertString("byte");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, 112, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 787;
      Utility.format(2, 787, false, '(');
      String string0 = "org.apache.bcel.classfile.Utility$1";
      String string1 = "short";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToStringorg.apache.bcel.classfile.Utility$1", "short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "Fwx(";
      Utility.typeOfSignature("Fwx(");
      Utility.isJavaIdentifierPart('e');
      Utility.getSignature("impdep2");
      String string1 = ")";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep2", "impdep2", ")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G+fp0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G+fp0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      Utility.accessToString(16384);
      boolean boolean1 = Utility.isSet(16384, 2618);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.accessToString(16384);
      assertEquals("enum", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)51;
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble(1191.8326);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-21));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(97, (-1296));
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65536, (byte) (-73));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[5] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("8\u0006SKxDF b/j)8<W");
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-898), (-1792));
      assertEquals("0:    <illegal opcode>\n1:    ifne\t\t#-5192\n4:    iaload\n5:    fload_2\n6:    baload\n", string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)59;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-30), (int) (byte) (-82), true);
      assertEquals("0:    <illegal opcode>\n1:    baload\n2:    if_acmpne\t\t#432\n5:    <illegal opcode>\n6:    istore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "(name_index = ";
      try { 
        Utility.typeOfSignature("(name_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (name_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)92;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("/j");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("/j");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte) (-95), true);
      assertEquals("0:    lload_3\n1:    jsr\t\t#32181\n4:    if_icmplt\t\t#-15369\n7:    dup_x1\n8:    dup2\n", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = ",7__<$~$}/f9";
      try { 
        Utility.typeOfSignature(",7__<$~$}/f9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,7__<$~$}/f9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      Utility.classOrInterface((-2842));
      Utility.signatureToString("Byte code error: ", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.isSet(42, 42);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)20;
      byte byte0 = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)11;
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool1.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)47, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13835. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      Utility.classOrInterface(93);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("5vfv1*.mG%", (String) null, "Y;a2>({ToP)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5vfv1*.mG%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = Utility.decode("7jQhB", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.clearBit(103, 1902);
      Utility.convertString("7jQhB");
      Utility.isSet(103, 1137);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "\t(wide)";
      Utility.getSignature("\t(wide)");
      Utility.getSignature("L(wide);");
      Utility.compactClassName("LL(wide);;", "L(wide);", true);
      Utility.replace("h\n0;qok{sMG:C7YR", "LL(wide);;", "LL(wide);;");
      try { 
        Utility.typeOfMethodSignature("LL(wide);;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LL(wide);;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.setBit(562, 766);
      Utility.clearBit(562, 1073742386);
      Utility.clearBit(562, 1255);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(19);
      try { 
        Utility.typeOfSignature("?EmBg]c6X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?EmBg]c6X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-111);
      byteArray0[0] = (byte) (-111);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, 2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = Utility.typeOfSignature("The filter must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("ICO| ,cI$`XXNvyTi");
      assertEquals("LICO|;", string1);
      
      String string2 = Utility.methodSignatureReturnType("ICO| ,cI$`XXNvyTi", true);
      assertEquals("int", string2);
      
      boolean boolean0 = Utility.isSet(321, 321);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-94));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("jsr_w\t\t#1796237732", string3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1416, 130);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "W*0Q";
      try { 
        Utility.methodSignatureReturnType("W*0Q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W*0Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(2225, true);
      try { 
        Utility.typeOfSignature("$3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)34;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ":Pn0txr>vf>9O%?";
      try { 
        Utility.typeOfSignature(":Pn0txr>vf>9O%?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Pn0txr>vf>9O%?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n9V-0~vL%");
      int int0 = 2036;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(2036);
      Utility.methodTypeToSignature("protected final synchronized volatile transient native interface abstract", (String[]) null);
      Utility.methodSignatureToString("()Lprotected;", "!]10m.1KE\"$Wt6v", "!]10m.1KE\"$Wt6v");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char char0 = '7';
      Utility.format(91, (-1565), true, '7');
      // Undeclared exception!
      try { 
        Utility.replace("!]10m.1KE\"$Wt6v", (String) null, "!]10m.1KE\"$Wt6v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)67;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ClassPath classPath0 = new ClassPath("Unknown constant type ");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      syntheticRepository0.findClass("Unknown constant type ");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool1.accept(descendingVisitor0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)59, (int) (byte)67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 27653. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, 936);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      Utility.methodSignatureReturnType("Illegal type: ");
      int int0 = (-1985);
      Utility.format((-1985), (-1985), true, '+');
      Utility.getSignature("int");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "I";
      objectArray0[1] = (Object) "I";
      objectArray0[2] = (Object) "I";
      objectArray0[3] = (Object) "I";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("I, I, I, I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I, I, I, I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Utility.fillup("y $Tt4", 777, false, 'P');
      assertEqualsy $Tt4", string0);
      
      String string1 = Utility.accessToString(777);
      assertEquals("public static native interface", string1);
      
      Utility.accessToString(2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lrem", string2);
      
      String string3 = Utility.accessToString(18, true);
      assertEquals("private final", string3);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      Utility.format(251, 251, false, 'I');
      Utility.isJavaIdentifierPart('I');
      try { 
        Utility.methodSignatureArgumentTypes("(|*OU{Pfy'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|*OU{Pfy''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("H5*nalE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H5*nalE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.compactClassName("P7:*jN(xtf`\"gL\"D");
      try { 
        Utility.methodSignatureReturnType("P7:*jN(xtf`\"gL\"D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P7:*jN(xtf`\"gL\"D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.convertString("Illegal type: ");
      assertEquals("Illegal type: ", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "double";
      Utility.getSignature("double");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.clearBit((-1220), (-1220));
      String string1 = "M]&@YZ] 3?V3>";
      Utility.compactClassName("M]&@YZ] 3?V3>", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.compactClassName("lookupswitch", true);
      assertEquals("lookupswitch", string0);
      
      String string1 = Utility.methodSignatureReturnType("J");
      assertEquals("long", string1);
      
      int int0 = Utility.setBit(198, 198);
      assertEquals(198, int0);
      
      byte[] byteArray0 = Utility.decode("oG_[Ke>(Yk", false);
      assertArrayEquals(new byte[] {(byte)111, (byte)71, (byte)95, (byte)91, (byte)75, (byte)101, (byte)62, (byte)40, (byte)89, (byte)107}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "o";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodTypeToSignature("o", (String[]) null);
      Utility.compactClassName("()Lo;");
      Utility.methodSignatureReturnType("()Lo;");
      Utility.convertString("()Lo;");
      Utility.methodSignatureArgumentTypes("()Lo;");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "29OP1lCkA;-S");
      Utility.compactClassName("|Dmb%8BzNh:J}87(G", "|Dmb%8BzNh:J}87(G", false);
      Utility.fillup("The filter must not be null", 43, false, 'c');
      Utility.convertString("|Dmb%8BzNh:J}87(G");
      Utility.clearBit((-2842), 43);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)93;
      String string0 = Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(1227L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.methodSignatureReturnType("FW,$zHSPTad}.", true);
      Utility.fillup("O>`qW}]P", 1, false, 'S');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("float");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "FW,$zHSPTad}.";
      objectArray0[1] = (Object) "float";
      objectArray0[2] = (Object) "O>`qW}]P";
      objectArray0[3] = (Object) "O>`qW}]P";
      objectArray0[4] = (Object) "float";
      PrintWriter printWriter0 = mockPrintWriter0.format("char", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "monitorexit";
      Utility.compactClassName("monitorexit");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("n>vLc(r&}TCy");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.searchOpcode("monitorexit");
      Utility.convertString("$'cBygOFk\"M");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "newarray", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-34);
      Utility.toHexString(byteArray0);
      Utility.decode("d5 49 5e 0d 8e 0b 40 de", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-196), false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.accessToString(242, true);
      try { 
        Utility.typeOfSignature("9U\"`MW#X;!hp*_>IF,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9U\"`MW#X;!hp*_>IF,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.replace("Invalid type: ", "Invalid type: ", "Invalid type: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Invalid type: ";
      objectArray0[1] = (Object) "Invalid type: ";
      objectArray0[2] = (Object) "Invalid type: ";
      objectArray0[3] = (Object) "Invalid type: ";
      objectArray0[4] = (Object) "Invalid type: ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[5] = (Object) "Invalid type: ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dreturn");
      objectArray0[6] = (Object) "Invalid type: ";
      objectArray0[7] = (Object) "Invalid type: ";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 100, (int) (byte)35, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.getSignature("v5O!<aqCD2t");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(146);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintStream printStream0 = mockPrintStream0.append('o');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      byteArrayOutputStream0.flush();
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.checkError();
      mockPrintWriter0.append((CharSequence) "Lv5O!<aqCD2t;");
      mockPrintWriter0.print((double) 146);
      objectArray0[0] = (Object) printStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.searchOpcode("v5O!<aqCD2t");
      Utility.fillup("v5O!<aqCD2t", (-3740), false, '\'');
      Utility.compactClassName("v5O!<aqCD2t");
      Utility.printArray(objectArray0, false);
      Utility.typeOfSignature("Lv5O!<aqCD2t;");
      try { 
        Utility.methodSignatureReturnType("v5O!<aqCD2t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v5O!<aqCD2t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.getSignature("N)!-q],6");
      Utility.fillup("N)!-q],6", (-1141), false, '|');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("N)!-q],6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N)!-q],6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "LineNumber(";
      try { 
        Utility.methodSignatureReturnType("LineNumber(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumber(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "[Y&qaquXb7R;>El,iuX";
      Utility.compactClassName("[Y&qaquXb7R;>El,iuX");
      try { 
        Utility.methodSignatureReturnType("[Y&qaquXb7R;>El,iuX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y&qaquXb7R;>El,iuX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.compactClassName("YxY4i**mDE<>M6g", false);
      Utility.clearBit(66, 66);
      Utility.classOrInterface(239);
      Utility.getSignature("G+");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, (int) (byte)75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Utility.format(93, 93, true, 'n');
      assertEquals("93nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", string0);
      
      Utility.methodSignatureReturnType("L_;V");
      String string1 = Utility.signatureToString("L_;V");
      assertEquals("_", string1);
      
      Utility.fillup("\"}", 91, true, 'n');
      int int0 = Utility.clearBit(11, (-102585513));
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.convertString("?'m{F'lXKZ@bXz<_");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("iconst_3", (-1107), false, ' ');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)99;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)115;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$L$81c$Qs", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2311), (-715));
      assertEquals("0:    fconst_0\n1:    lor\n2:    dadd\n3:    bipush\t\t115\n", string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "0sBdd5{8r=";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0sBdd5{8r=");
      String string1 = "08";
      try { 
        Utility.typeOfSignature("08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 08
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString((-1602), false);
      try { 
        Utility.methodSignatureReturnType("OKd_2G;zOC+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OKd_2G;zOC+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2137, 2137, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = Utility.isSet(1064, 699);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("XY_!;t*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XY_!;t*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-71);
      Utility.encode(byteArray0, false);
      Utility.decode("$b9", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Gmw^ |";
      stringArray0[1] = "{java.lang.Object@42c61e77}";
      stringArray0[2] = "{java.lang.Object@42c61e77}";
      stringArray0[3] = "$b9";
      stringArray0[4] = "{java.lang.Object@42c61e77}";
      stringArray0[5] = "{java.lang.Object@42c61e77}";
      stringArray0[6] = "{java.lang.Object@42c61e77}";
      stringArray0[7] = "{java.lang.Object@42c61e77}";
      Utility.methodTypeToSignature("{java.lang.Object@42c61e77}", stringArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)45;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("$b9", ")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \")\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleParameterAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)95;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 65536);
      Utility.format((byte)54, (byte)95, true, 'O');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Kd", "Kd", "Lif_icmpne;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.accessToString(59, true);
      Utility.format(59, 190, true, '~');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public private static final";
      Utility.printArray(objectArray0, true, false);
      String string0 = "2-Pb$e^m;M43wK/+<*g";
      try { 
        Utility.typeOfSignature("2-Pb$e^m;M43wK/+<*g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2-Pb$e^m;M43wK/+<*g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.setBit(1920, 582);
      Utility.classOrInterface(582);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-91);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)76, 3983);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\"");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(12, 512);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("interface");
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 12);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41605. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.searchOpcode("lrem");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      char char0 = '$';
      Utility.fillup("lrem", (short)113, false, '$');
      Utility.isSet((short)113, 95);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.fillup(" [", 95, true, 'u');
      // Undeclared exception!
      try { 
        Utility.getSignature(" [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "getstatic";
      Utility.searchOpcode("getstatic");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "getstatic";
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.accessToString((-234), true);
      Utility.methodSignatureReturnType("D1bpu@\"VaAW''/j");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "double";
      objectArray0[2] = (Object) "D1bpu@\"VaAW''/j";
      Utility.printArray(objectArray0, false, false);
      boolean boolean0 = true;
      Utility.compactClassName("?>...", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Unexpected element value kind in annotation: ", "java.lang.Object@4b58963, double, D1bpu@\"VaAW''/j");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.lang.Object@4b58963, double, D1bpu@\"VaAW''/j
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 470, 1385);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)9;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (-1097), true);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kgg=zWh==_J]}<W7Kgg=zWh==_J]}<W7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kgg=zWh==_J]}<W7Kgg=zWh==_J]}<W7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 470, 1420);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, false);
      String string0 = Utility.accessToString(553);
      assertEquals("public static synchronized interface", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lneg", string1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (-1097), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.compactClassName("", true);
      String string0 = Utility.compactClassName("", "%#h64yHu)7>Z6", false);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "%#h64yHu)7>Z6";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "%#h64yHu)7>Z6";
      objectArray0[4] = (Object) "";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string1);
      assertEquals("\"%#h64yHu)7>Z6\", \"\", \"\", \"%#h64yHu)7>Z6\", \"\"", string1);
      
      String string2 = Utility.getSignature("Llookupswitch;V");
      assertEquals("LLlookupswitch;V;", string2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "impdep2";
      boolean boolean0 = false;
      Utility.decode("impdep2", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("impdep2");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      mockPrintWriter0.println(2346L);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      mockFileOutputStream0.close();
      objectArray0[2] = (Object) "impdep2";
      objectArray0[3] = (Object) dataOutputStream0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "impdep2";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "impdep2";
      objectArray0[8] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.replace("impdep2", "java.lang.Character", (String) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "impdep2", "java.io.Serializable", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.format((-154), (-154), true, 'Q');
      String string0 = "dreturn";
      MockFile mockFile0 = new MockFile("qE1W`?|MEan!`");
      String string1 = "Z-\"B{-f-JtH]|[";
      MockFile mockFile1 = new MockFile(mockFile0, "Z-\"B{-f-JtH]|[");
      File file0 = MockFile.createTempFile("Invalid type: ", "dreturn", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "\t<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \t<
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P9nXfxmY=G0icp63");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P9nXfxmY=G0icp63
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "xiq[Z12TwmK";
      Utility.compactClassName("xiq[Z12TwmK");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "xiq[Z12TwmK";
      stringArray0[1] = "xiq[Z12TwmK";
      stringArray0[2] = "xiq[Z12TwmK";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("xiq[Z12TwmK", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Z12TwmK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("GE7?W", false);
      assertArrayEquals(new byte[] {(byte)71, (byte)69, (byte)55, (byte)63, (byte)87}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byte byte0 = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)95;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mt$x~P;NXt[(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mt$x~P;NXt[('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.accessToString(2626, true);
      assertEquals("private volatile strictfp", string0);
      
      Utility.fillup("xzL&#", 2626, false, '.');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-55);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$3c$85$f4Z$5e$c9", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-126);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.skip(2774L);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.compactClassName("3kF2", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "3kF2";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[1] = (Object) "3kF2";
      objectArray0[2] = (Object) "3kF2";
      objectArray0[3] = (Object) "3kF2";
      objectArray0[4] = (Object) "3kF2";
      objectArray0[5] = (Object) "3kF2";
      objectArray0[6] = (Object) "3kF2";
      objectArray0[7] = (Object) "3kF2";
      objectArray0[8] = (Object) "3kF2";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("3kF2, 3kF2, 3kF2, 3kF2, 3kF2, 3kF2, 3kF2, 3kF2, 3kF2");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("dt");
      assertEquals("dt", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-19);
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("_$3b$7d$f0$t$a9$ed", string3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-27);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-66));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, (byte) (-66));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-64), (byte) (-66));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (-185));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 52125. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)5;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte) (-102), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[1] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.printArray((Object[]) null);
      String string0 = "hJ:g";
      boolean boolean0 = false;
      Method method0 = new Method();
      method0.isTransient(false);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      try { 
        memorySensitiveClassPathRepository0.loadClass("hJ:g");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Exception while looking for class hJ:g: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: hJ:g.class
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "N";
      Utility.convertString("N");
      String string1 = "QBw~woc2";
      try { 
        Utility.methodSignatureReturnType("QBw~woc2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QBw~woc2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.StackMapEntry";
      boolean boolean0 = true;
      Utility.compactClassName("org.apache.bcel.classfile.StackMapEntry", "org.apache.bcel.classfile.StackMapEntry", true);
      Utility.isSet((-2229), (-2229));
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-2229), (-657), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.accessToString(856, false);
      assertEquals("static final volatile native interface", string0);
      
      String string1 = Utility.replace("static final volatile native interface", "static final volatile native interface", "v{I9suWOs");
      assertEquals("v{I9suWOs", string1);
      
      Utility.replace("v{I9suWOs", "static final volatile native interface", "v{I9suWOs");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v{I9suWOs";
      stringArray0[1] = "getField";
      String string2 = Utility.methodTypeToSignature("static final volatile native interface", stringArray0);
      assertEquals("(Lv{I9suWOs;LgetField;)Lstatic;", string2);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-108);
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-100);
      byte byte1 = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-19);
      byte byte2 = (byte)13;
      byteArray0[6] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.isSet((byte) (-103), (byte) (-19));
      boolean boolean0 = false;
      Utility.compactClassName("3rG>'V+b", false);
      Utility.accessToString(1960, true);
      Utility.compactClassName("|!");
      // Undeclared exception!
      try { 
        Utility.signatureToString("94 99 b0 9c a3 ed 0d", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `94 99 b0 9c a3 ed 0d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.searchOpcode("`Va");
      Utility.isSet((short) (-1), (short) (-1));
      Utility.isJavaIdentifierPart('q');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 20
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnull");
      Utility.compactClassName("]+Xhkw }d|t-T");
      Utility.methodTypeToSignature("The strings must not be null", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("YX%Oi^X%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YX%Oi^X%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.accessToString((-870));
      Utility.accessToString((-1981));
      // Undeclared exception!
      try { 
        Utility.signatureToString("E~rais14qpr@1\u0005tOE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E~rais14qpr@1\u0005tOE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.setBit((-2260), (-2260));
      Utility.classOrInterface((-2260));
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("java.lang.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "\"";
      Utility.compactClassName("\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      byteSequence0.available();
      ConstantClass constantClass0 = new ConstantClass(77);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass2 = new ConstantClass((byte)48);
      constantArray0[1] = (Constant) constantClass2;
      try { 
        byteSequence0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(1, true);
      Utility.clearBit(1, (-2699));
      Utility.searchOpcode("public");
      String string0 = "lookupswitch";
      // Undeclared exception!
      try { 
        Utility.signatureToString("lookupswitch", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lookupswitch'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.replace("R^sA]", "G", "G");
      try { 
        Utility.methodSignatureReturnType("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T]FZv)NT}<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T]FZv)NT}<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfMethodSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 10;
      Utility.isSet(10, 10);
      String string0 = "G>3u?jO1A{$>nW:vMu";
      Utility.searchOpcode("G>3u?jO1A{$>nW:vMu");
      try { 
        Utility.methodSignatureReturnType("G>3u?jO1A{$>nW:vMu", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G>3u?jO1A{$>nW:vMu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Cache hit ";
      stringArray0[1] = "Cache hit ";
      stringArray0[2] = "Cache hit ";
      stringArray0[3] = "Cache hit ";
      stringArray0[4] = "Cache hit ";
      stringArray0[5] = "Cache hit ";
      stringArray0[6] = "Cache hit ";
      Utility.methodTypeToSignature("Cache hit ", stringArray0);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte) (-50);
      byteArray1[4] = (byte)13;
      byte byte0 = (byte) (-74);
      byteArray1[5] = (byte) (-74);
      byteArray1[6] = (byte)126;
      byteArray1[7] = (byte)42;
      byteArray1[8] = (byte)108;
      Utility.equals(byteArray0, byteArray1);
      Utility.methodTypeToSignature("static", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.accessToString((-3803), true);
      int int0 = 3486;
      String string0 = Utility.fillup("_", 3486, true, 'o');
      String[] stringArray0 = new String[9];
      stringArray0[0] = "public protected native synthetic annotation enum";
      stringArray0[1] = "_";
      stringArray0[2] = string0;
      stringArray0[3] = "_";
      stringArray0[4] = "ConstantValue";
      stringArray0[5] = "_";
      stringArray0[6] = "_";
      stringArray0[7] = string0;
      stringArray0[8] = "_";
      // Undeclared exception!
      Utility.methodTypeToSignature(string0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "cCY!*qtR|rN+EX9^Y~";
      Utility.getSignature("cCY!*qtR|rN+EX9^Y~");
      Utility.convertString("cCY!*qtR|rN+EX9^Y~");
      String string1 = "=!7=uh_$H";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("cCY!*qtR|rN+EX9^Y~", "cCY!*qtR|rN+EX9^Y~", "=!7=uh_$H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cCY!*qtR|rN+EX9^Y~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.util.ClassPath$Dir");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.util.ClassPath$Dir'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.compactClassName("", "", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Utility.printArray(objectArray0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('');
      Utility.printArray(printStream0, objectArray0);
      Utility.compactClassName("", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "The filter must not be null";
      try { 
        Utility.methodSignatureArgumentTypes("The filter must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The filter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "C*+T'Hm,I";
      boolean boolean0 = false;
      Utility.signatureToString("C*+T'Hm,I", false);
      Utility.clearBit(3526, 3526);
      Utility.fillup("char", 3526, false, '3');
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = 46;
      Utility.accessToString(46);
      try { 
        Utility.typeOfSignature("private protected static synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static synchronized
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Utility.accessToString(87);
      assertEquals("public private protected final volatile", string0);
      
      Utility.accessToString(65, false);
      Utility.signatureToString("V&tdfDY8'x2Q", false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "void";
      objectArray0[2] = (Object) "public volatile";
      objectArray0[3] = (Object) "V&tdfDY8'x2Q";
      objectArray0[4] = (Object) "public private protected final volatile";
      String string1 = Utility.printArray(objectArray0, true, false);
      String string2 = Utility.printArray(objectArray0, true);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2oZa<jq8#I|~9He7");
      Utility.classOrInterface(57);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "Ll/]`\"+h'm8fU;V", "java.lang.invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "daload");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zu1+1#");
      String string0 = Utility.format(198, 198, false, 'd');
      assertEquals("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd198", string0);
      
      boolean boolean0 = Utility.isSet(198, 40);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Z>r9.7");
      assertEquals((byte)4, byte0);
      
      Utility.accessToString((int) (byte)4, false);
      int int0 = Utility.clearBit(198, 198);
      assertEquals(134, int0);
      
      String string1 = Utility.convertString("protected");
      String string2 = Utility.methodTypeToSignature("+R'4~C#+kCqgBuUe", (String[]) null);
      assertEquals("()L+R'4~C#+kCqgBuUe;", string2);
      
      String string3 = Utility.accessToString((int) (byte)4, false);
      assertTrue(string3.equals((Object)string1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      String string4 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-26);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xlM%)@aQ>");
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)7;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1785, (byte)124);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(137, 137);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((byte)110, (byte)7);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 32, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "EnclosingMethod";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = 183;
      Utility.classOrInterface(183);
      boolean boolean0 = true;
      try { 
        Utility.decode("class", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("{q1,AC:", false);
      Utility.accessToString(8192, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{q1,AC:";
      stringArray0[1] = "annotation";
      stringArray0[2] = "Byte code error: ";
      stringArray0[3] = "4Xs$xH4`1hYD";
      Utility.methodTypeToSignature("Byte code error: ", stringArray0);
      String string0 = null;
      String string1 = ">";
      int int0 = 189;
      int int1 = 3275;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-78);
      Utility.toHexString(byteArray0);
      Utility.convertString("e4 9f b2");
      Utility.setBit((-6), (byte) (-28));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("e4 9f b2", "e4 9f b2", "e4 9f b2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e4 9f b2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(67);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "6!Bj[A'Pz04[";
      stringArray0[1] = "R\tJV";
      stringArray0[2] = "R\tJV";
      stringArray0[3] = "R\tJV";
      stringArray0[4] = "R\tJV";
      stringArray0[5] = "R\tJV";
      stringArray0[6] = "R\tJV";
      stringArray0[7] = "R\tJV";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("R\tJV", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[A'Pz04[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "java.io.Serializable";
      try { 
        Utility.methodSignatureReturnType("java.io.Serializable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.io.Serializable'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
