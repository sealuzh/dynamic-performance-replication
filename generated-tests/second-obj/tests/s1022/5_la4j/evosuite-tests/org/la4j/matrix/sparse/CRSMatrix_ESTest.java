/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:59:09 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(948, 948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 948
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      MockRandom mockRandom0 = new MockRandom(561L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1000);
      CRSMatrix.randomSymmetric(979, 0.0, (Random) mockRandom0);
      mockRandom0.doubles();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1000, (-2772), 0.0, (Random) mockRandom0);
      cRSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix.identity(2);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2262, 9, 9);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3027;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3027, 1908874353, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = (double) 1000;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1000;
      doubleArray0[6] = 1.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1000, 0, doubleArray0);
      int int1 = 17;
      // Undeclared exception!
      try { 
        cRSMatrix0.set(17, (-1032), 1146.5417038);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1032' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(7, 7, (double) 7, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.zero(7, 7, 7);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("tWG66sY:b;O8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix.fromCSV("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1515;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(4, vectorProcedure0);
      cRSMatrix0.max();
      RowMajorSparseMatrix.fromCSV((String) null);
      int int1 = 13;
      int int2 = (-1103);
      cRSMatrix0.copyOfShape(int1, int2);
      long long0 = (-1644L);
      MockRandom mockRandom0 = new MockRandom(long0);
      double double0 = 13.0;
      long long1 = (-295L);
      MockRandom mockRandom1 = new MockRandom(long1);
      mockRandom1.doubles();
      CRSMatrix.random(int1, int0, double0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.toBinary();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(3080.09770766).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseVector denseVector0 = DenseVector.unit(1720);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 4x4 does not equal to 1720x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 8.0, 8.0, 8.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        DenseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, (-0.11622634081711203));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[5] = 232.25261;
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 4;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 232.25261;
      int int1 = 466;
      SparseMatrix.from1DArray(0, 466, doubleArray2);
      MockRandom mockRandom0 = new MockRandom(0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      cRSMatrix0.setAll((-1842.77379));
      // Undeclared exception!
      try { 
        cRSMatrix0.set(4, 4, 2229.31455079);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4663, 4663, 4663);
      cRSMatrix0.add((-2182.0));
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9967L);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-639), (-639), (double) (-639), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 13;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(13, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-689.5845);
      doubleArray1[2] = (-689.5845);
      doubleArray1[3] = 2.0;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1426, 1426);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(1426, vectorFunction0);
      long long0 = (-1683L);
      MockRandom mockRandom0 = new MockRandom(long0);
      ((CRSMatrix) rowMajorSparseMatrix0).min();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3027;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2528);
      cRSMatrix0.sliceTopLeft(0, 3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.getColumn((-1331));
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.setAll(0);
      // Undeclared exception!
      try { 
        cRSMatrix1.set(0, 0, 1749.0969538914653);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.minInRow(0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(0);
      int int0 = (-3327);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(2, 0, (-3327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -3327.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1515;
      double double0 = 0.1278303402070466;
      MockRandom mockRandom0 = new MockRandom((-84L));
      // Undeclared exception!
      CRSMatrix.randomSymmetric(1515, 0.1278303402070466, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, (-1361.5695838));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cRSMatrix0.blankOfShape(6, 6);
      MockRandom mockRandom0 = new MockRandom(737L);
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        CRSMatrix.random(6, 6, 2049.436768, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-689.5845)).when(matrixAccumulator0).accumulate();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.isColumnMajor();
      CRSMatrix.fromBinary(byteArray0);
      cRSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(17, 269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.getColumn(2);
      cRSMatrix0.nonZeroIteratorOfRow(2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      SparseMatrix.identity(254);
      Matrix matrix0 = cRSMatrix0.rotate();
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) null, (RowMajorSparseMatrix) cRSMatrix0);
      matrix0.apply(matrixVectorOperation0, vector0);
      String string0 = "2fZ9TFS_CEz3U3_f";
      Matrix.fromMatrixMarket(string0);
      matrix0.toCSV();
      cRSMatrix0.hadamardProduct(matrix0);
      cRSMatrix0.min();
      cRSMatrix0.toBinary();
      int int0 = 1483;
      int int1 = 1512;
      double[] doubleArray0 = new double[2];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = (-3662.605207235793);
      doubleArray0[1] = double1;
      CRSMatrix.from1DArray(int0, int1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, (double)0, (double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        DenseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1515, (double)336, (double)336, (-432.682497), (double)336).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(336, vectorFunction0);
      long long0 = 9954L;
      MockRandom mockRandom0 = new MockRandom(long0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0, 0.0, (-2171.237394)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(0.0);
      matrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(0, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom(2277081L);
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      cRSMatrix0.removeFirstRow();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0, 0.0, (-2171.237394)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(0.0);
      CRSMatrix.zero(4, 4, 3);
      cRSMatrix0.rowMajorIterator();
      CRSMatrix cRSMatrix1 = new CRSMatrix(1041, 4, 3);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(327, (-131.599887));
      cRSMatrix1.transformRow(4, (VectorFunction) null);
      long long0 = 9977L;
      MockRandom mockRandom0 = new MockRandom(long0);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(0, vectorFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1515, 1515);
      Matrix.constant(1315, 1314, (-708.622342));
      int[] intArray0 = new int[10];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Matrix matrix0 = cRSMatrix0.copyOfColumns(0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      matrix0.getColumn(0);
      // Undeclared exception!
      try { 
        matrix0.maxInRow(1515);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1516
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1515;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      int[] intArray0 = new int[0];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new OoPlaceMatrixByItsTransposeMultiplication();
      String string0 = "NO_PIVOT_GAUSS";
      DenseMatrix denseMatrix0 = DenseMatrix.fromMatrixMarket(string0);
      ooPlaceMatrixByItsTransposeMultiplication1.apply(denseMatrix0);
      ooPlaceMatrixByItsTransposeMultiplication1.apply(columnMajorSparseMatrix0);
      CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0, cRSMatrix0);
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (double) 7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-52.0);
      doubleArray2[1] = (double) 7;
      doubleArray2[2] = (double) 7;
      doubleArray2[3] = (double) 7;
      doubleArray2[4] = (double) 7;
      doubleArray2[6] = (double) 7;
      doubleArray2[7] = (double) 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(272);
      cRSMatrix0.maxInColumn((-1091));
      int int0 = 49;
      cRSMatrix0.minInRow(int0);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4, 3);
      cRSMatrix0.nonZeroRowMajorIterator();
      CRSMatrix cRSMatrix1 = new CRSMatrix(1000, 4, 3);
      CRSMatrix cRSMatrix2 = new CRSMatrix(4, 976, 0);
      SparseMatrix.identity(0);
      cRSMatrix1.maxInRow(4);
      cRSMatrix2.setAll(0.0);
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      cRSMatrix0.set(878, 336, 1515);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix.zero(1515, 878, 336);
      MockRandom mockRandom0 = new MockRandom(9977L);
      MockRandom mockRandom1 = new MockRandom(1515);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(4);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 4;
      intArray0[7] = 2120;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2120, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(3, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1515;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      int int1 = 336;
      cRSMatrix0.set(866, 336, 1515);
      long long0 = 1419L;
      cRSMatrix0.foldRows((VectorAccumulator) null);
      MockRandom mockRandom0 = new MockRandom(long0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, int1);
      rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0);
      cRSMatrix0.isColumnMajor();
      cRSMatrix0.min();
      int int2 = 1771;
      ((CRSMatrix) rowMajorSparseMatrix0).blankOfShape(int2, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, (-0.11622634081711203));
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[5] = 232.25261;
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 4;
      cRSMatrix0.divide((-0.11622634081711203));
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("org.la4j.matrix.sparse.CRSMatrix");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 0);
      cRSMatrix0.minInRow(0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.iteratorOfNonZeroRows();
      ColumnMajorSparseMatrix.diagonal(570, 570);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(4);
      cRSMatrix1.removeLastColumn();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        Matrix.zero(2757, (-3972));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.copy();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cRSMatrix1.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix1.rank();
      cRSMatrix0.manhattanNorm();
      Matrix matrix1 = cRSMatrix0.transpose();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix1, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0, 0.0, (-2171.237394)).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(0.0);
      matrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      Double double1 = new Double((-1947.25));
      matrix0.rank();
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.nonZeroColumnMajorIterator();
      CRSMatrix.identity(3494);
      cRSMatrix0.minInRow(0);
      cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(0, 0);
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CRSMatrix.from2DArray(doubleArray1);
      String string0 = null;
      CRSMatrix.fromCSV(string0);
      int int1 = 738;
      CRSMatrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      cRSMatrix0.copyOfColumns(1000);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      cRSMatrix0.getColumn(336);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)8;
      CRSMatrix.fromBinary(byteArray0);
      int int0 = 3;
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1515, 1515);
      Matrix matrix0 = Matrix.constant(1315, 1314, (-708.622342));
      int int0 = 0;
      int[] intArray0 = new int[10];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1515);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)326).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      int int0 = 1000;
      MockRandom mockRandom0 = new MockRandom((-1942L));
      CRSMatrix.randomSymmetric(10, (-74.10727628899593), (Random) mockRandom0);
      mockRandom0.doubles();
      int int1 = 144;
      double double0 = 0.9;
      CRSMatrix.random(int0, int1, double0, (Random) mockRandom0);
      cRSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      Matrix matrix0 = cRSMatrix0.blankOfShape(0, 0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(4, 4, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0, 0.0, (-2171.237394)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(0.0);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(4, 4, 3);
      cRSMatrix2.nonZeroRowMajorIterator();
      int int0 = 1000;
      CRSMatrix cRSMatrix3 = new CRSMatrix(1000, 4, 3);
      cRSMatrix3.maxInRow(327);
      CRSMatrix cRSMatrix4 = CRSMatrix.diagonal(327, (-131.599887));
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      cRSMatrix4.insert((Matrix) cRSMatrix2);
      cRSMatrix2.isColumnMajor();
      byte[] byteArray0 = new byte[0];
      CRSMatrix.fromBinary(byteArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix4.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(830, (-864.6));
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      cRSMatrix1.getColumn(32);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.setAll((-1.0));
      // Undeclared exception!
      try { 
        cRSMatrix0.set(0, 0, (-2398.9296));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(8);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.getColumn(2);
      cRSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(32, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 0.0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstRow();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(0.0);
      cRSMatrix1.rank();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(3, 929, (-1155.905), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-689.5845)).when(matrixAccumulator0).accumulate();
      cRSMatrix0.toBinary();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseVector denseVector0 = DenseVector.unit(0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.subtract((Matrix) cRSMatrix0);
      matrix0.copyOfRows(8);
      cRSMatrix0.isColumnMajor();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(8, 8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix1.toColumnMajorSparseMatrix();
      Matrix matrix2 = inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix1, matrix1, matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(4, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.add(0.0);
      cRSMatrix0.eachNonZeroInColumn(4, (VectorProcedure) null);
      // Undeclared exception!
      try { 
        cRSMatrix1.blankOfShape(4, (-1065));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4x-1065
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(4, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0, 0.0, (-2171.237394)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(0.0);
      cRSMatrix1.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 823.21497757, 823.21497757, (double)4).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(0, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom(2277081L);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      int int0 = (-1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)(-1), 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.add(2170.076411588784);
      cRSMatrix0.eachNonZeroInColumn((-1), (VectorProcedure) null);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-52.0);
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.multiplyByItsTranspose();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix0.rank();
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.nonZeroColumnMajorIterator();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      // Undeclared exception!
      try { 
        cRSMatrix1.minInRow((-1365));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1365
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 942.4403270563864, Double.POSITIVE_INFINITY, (double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        DenseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(4, 4);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix1.withInverter(linearAlgebra_InverterFactory0);
      Double double0 = new Double(0.0);
      cRSMatrix0.rank();
      cRSMatrix1.isColumnMajor();
      CRSMatrix cRSMatrix2 = CRSMatrix.fromBinary(byteArray0);
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix3.toColumnMajorSparseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix2, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(301, (-0.11622634081711203));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 301;
      doubleArray0[1] = (double) 4;
      doubleArray0[0] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 301;
      doubleArray0[5] = 232.25261;
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 301;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 4;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 232.25261;
      doubleArray2[1] = (double) 301;
      doubleArray2[3] = (double) 301;
      doubleArray2[4] = (double) 301;
      doubleArray2[5] = 232.25261;
      doubleArray2[6] = (-0.11622634081711203);
      doubleArray2[7] = (-0.11622634081711203);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, (double)4, (double)4, (double)4).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldColumns(vectorAccumulator0);
      Double double0 = new Double(4);
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 4;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 4;
      doubleArray2[6] = (double) 3;
      doubleArray2[7] = (double) 4;
      doubleArray2[8] = (double) 4;
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      RowMajorSparseMatrix.from2DArray(doubleArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 0.28706165014945245);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 4;
      intArray0[2] = 7;
      intArray0[3] = 4;
      matrix0.iteratorOfRow(4);
      cRSMatrix0.maxInRow(2);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
