/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:14:17 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Locale;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.services.io.ArrayInputStream;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.h2.table.Table;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.lib.HsqlByteArrayOutputStream;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = LanguageConnectionFactory.MODULE;
      String string1 = SQLUtil.innerJoin("org.apache.derby.iapi.sql.conn.LanguageConnectionFactory", stringArray0, "*[415fzc>THr#+", "[fVk1O(dQ)\u0004$@RZ`=M", stringArray0);
      assertEquals("*[415fzc>THr#+ as [fVk1O(dQ)\u0004$@RZ`=M on org.apache.derby.iapi.sql.conn.LanguageConnectionFactory.null = [fVk1O(dQ)\u0004$@RZ`=M.null and org.apache.derby.iapi.sql.conn.LanguageConnectionFactory.null = [fVk1O(dQ)\u0004$@RZ`=M.null and org.apache.derby.iapi.sql.conn.LanguageConnectionFactory.null = [fVk1O(dQ)\u0004$@RZ`=M.null and org.apache.derby.iapi.sql.conn.LanguageConnectionFactory.null = [fVk1O(dQ)\u0004$@RZ`=M.null", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectunknown con3tzaint type:");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("selectunknown con3tzaint type:", "u0%qowb)^')qZu2>", stringArray0, "u0%qowb)^')qZu2>", "ftgV*mrwZ6M", stringArray0);
      assertEquals("selectunknown con3tzaint type: join u0%qowb)^')qZu2> as ftgV*mrwZ6M on ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.removeComments("con3tzaint");
      String string0 = SQLUtil.renderValue("con3tzaint");
      assertEquals("'con3tzaint'", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selectalter tble:`r&^x&pv'zg/8";
      stringArray0[1] = "selectalter tble:`r&^x&pv'zg/8";
      stringArray0[2] = "5_XpNOn}( 6d,#";
      String string0 = SQLUtil.renderColumnListWithTableName("selectalter tble:`r&^x&pv'zg/8", stringArray0);
      assertEquals("selectalter tble:`r&^x&pv'zg/8.selectalter tble:`r&^x&pv'zg/8, selectalter tble:`r&^x&pv'zg/8.selectalter tble:`r&^x&pv'zg/8, selectalter tble:`r&^x&pv'zg/8.5_XpNOn}( 6d,#", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE  = ''", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tble:`r&^x&pv'zg/8");
      SQLUtil.removeComments("alter tble:`r&^x&pv'zg/8");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      StringBuilder stringBuilder0 = new StringBuilder("drop index");
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("drop indexCONSTRAINT \"drop index\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("exec");
      StringBuilder stringBuilder0 = new StringBuilder("exec");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("exec", false, defaultDBTable0, (String[]) null, defaultDBTable1, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("execCONSTRAINT exec ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("*[=1M/5nzcQ>1kHrn#+", true);
      assertEquals("* [ = 1M / 5nzcQ > 1kHrn # +", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("* [ = 1M / 5nzcQ > 1kHrn # +", true, "insert", "insert");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK insert", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ro)]p inex");
      defaultDBTable0.getIndex("ro)]p inex");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ro)]p inex", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , ) REFERENCES ro)]p inex(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("CONSTRAINT   and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "_9kckAEW");
      SQLUtil.addOptionalCondition("_9kckAEW", stringBuilder0);
      assertEquals("_9kckAEW or _9kckAEW", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("mszwY}=OIfxU.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mszwY}=OIfxU.", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("mszwY}=OIfxU.", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("mszwY}=OIfxU. (3,1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.normalize("*[=15nzcQ>1kHrn#+", true);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("name: ");
      File file1 = MockFile.createTempFile("exec", "z", file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.normalize("-s7#Z-^9i?Fd", true);
      assertEquals("- s7 # Z - ^ 9i ? Fd", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.isQuery("Unknown con3tZaint type: ");
      String string0 = SQLUtil.normalize("Unknown con3tZaint type: ", false);
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.leftJoin("alte tab", stringArray0, "Unknown con3tZaint type: ", "NG*Unu@5p]Ev7", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("(>6M'gG<uF|jR");
      dBCatalog0.getSchema("(>6M'gG<uF|jR");
      String string0 = SQLUtil.substituteMarkers("(>6M'gG<uF|jR", "(>6M'gG<uF|jR", (Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = Dependable.TRIGGER;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Trigger");
      assertNull(boolean0);
      
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SYSTIMESTAMP", defaultDBTable0, 4239, "SYSTIMESTAMP");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SYSTIMESTAMP", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.mutatesStructure("ro)]p inex");
      SQLUtil.removeComments("+, ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ro)]p inex");
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ro)]p inex", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"ro)]p inex\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.addRequiredCondition("@SOw{U26c#+-w1", stringBuilder0);
      assertEquals("@SOw{U26c#+-w1", stringBuilder0.toString());
      
      boolean boolean1 = SQLUtil.isProcedureCall("@SOw{U26c#+-w1");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("execderby_jdbc_result_set");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBSchema0.setCatalog(dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.execderby_jdbc_result_set", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UNIQUE ", defaultDBTable0, 287, "derby.storage.initialPages");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("UNIQUE ", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = Table.VIEW;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3357, "VIEW");
      Integer integer0 = new Integer(3357);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("wXf(~", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("wXf(~ VIEW(3357) NULL", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("VIEW");
      assertFalse(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("wXf(~, wXf(~, wXf(~, wXf(~, wXf(~, wXf(~, wXf(~, wXf(~, wXf(~", string2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.removeComments("drop materialized view");
      Character character0 = new Character('#');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'#'", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TypeId.BIT_NAME;
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[3];
      stringArray1[1] = "selectcall";
      stringArray1[2] = "Error converting to ascii stream.";
      String string0 = SQLUtil.join((String) null, "43Y07.U", stringArray0, (String) null, "selectcall", stringArray1);
      assertEquals("null as selectcall on ", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("selectcall");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Boolean boolean1 = SQLUtil.mutatesStructure("@Q$Q'eU)82zqz6GY");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete");
      String string0 = LanguageConnectionContext.xidStr;
      assertEquals("(XID = ", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.normalize("}m~;3bK?$vi+lo]i.G", false);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("Server name/address is required for pure Java implementation.", false);
      assertEquals("Server name / address is required for pure Java implementation.", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized viewalter session ; i & @ !");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("428C1");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "428C1", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint 428C1", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("428C1", string1);
      
      String string2 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT 428C1 ", string2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("!O,(74", true);
      assertEquals("! O, (74", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayInputStream arrayInputStream0 = new ArrayInputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(arrayInputStream0, charsetDecoder0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      System.setCurrentTimeMillis((-183L));
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Mi", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , , , , , , , , , , , )", string0);
      
      SQLUtil.renderColumnNames(stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT Mi PRIMARY KEY (, , , , , , , , , , , , , , , , , )", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , , , , , , , , , , , )", string2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("0^n!zMX*R>T0", true);
      assertEquals("0 ^ n ! zMX * R > T0", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter tble:`r&^x&pv'zg/8", true);
      assertEquals("alter tble : ` r & ^ x & pv 'zg/8'", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("ro)]p inex", false);
      assertEquals("ro) ] p inex", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.normalize("kS&\"J8", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = Table.VIEW;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VIEW");
      DBDataType.getInstance(3357, "VIEW");
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("FY(MWKa5-+G{#.J[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: FY(MWKa5-+G{#.J[
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",selectPriv=";
      stringArray0[1] = "/*";
      stringArray0[2] = "t8+rHYw>I y~";
      stringArray0[3] = "renamedrop materialized viewalter session ; i & @ !";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("/*", false);
      SQLUtil.parseColumnTypeAndSize("t8+rHYw>I y~");
      SQLUtil.normalize("renamedrop materialized viewalter session ; i & @ !", false);
      SQLUtil.parseColumnTypeAndSize("Maximum Blob input octet length exceeded: ");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = Table.VIEW;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "VIEW";
      stringArray0[1] = "VIEW";
      stringArray0[2] = "1a=H7c$@G{-";
      stringArray0[3] = "X";
      stringArray0[4] = "VIEW";
      stringArray0[5] = "X";
      stringArray0[6] = "X";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "X", false, stringArray0);
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (VIEW, VIEW, 1a=H7c$@G{-, X, VIEW, X, X)", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "42S02";
      stringArray0[1] = null;
      stringArray0[2] = "CACHE";
      stringArray0[3] = "DOUBLE PRECISION";
      stringArray0[4] = "428C1";
      stringArray0[5] = null;
      stringArray0[6] = "428C1";
      stringArray0[7] = "428C1";
      stringArray0[8] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
      
      String string2 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string2);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "ShKZTV2/quM=h6?Lc#";
      stringArray1[1] = "42S02";
      stringArray1[2] = "";
      stringArray1[3] = "unique constraint constraint";
      stringArray1[4] = "unique constraint constraint";
      String string3 = SQLUtil.renderColumnNames(stringArray1);
      assertEquals("(ShKZTV2/quM=h6?Lc#, 42S02, , unique constraint constraint, unique constraint constraint)", string3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tble:`r&^x&pv'zg/8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderColumnNames((String[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "insertim.^:s%k?m1ko+";
      stringArray0[1] = "L8yl3fB8j!";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("alte", false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(insertim.^:s%k?m1ko+, L8yl3fB8j!, )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"insertim.^:s%k?m1ko+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tble:`r&^x&pv'zg/8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tble:`r&^x&pv'zg/8");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("exec");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" [UXWzopZ_", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-44);
      byteArray0[0] = (byte)3;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("create unique indexcab dtt#p0");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)3;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray1);
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(hsqlByteArrayOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"%a&j~QsWnd", defaultDBTable0, (byte) (-68), "^glzx4#-QHs[U}s*/");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("execute");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getDoc());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("-s7#Z-^9i?Fd");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = " COMMENT ";
      stringArray0[3] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("-s7#Z-^9i?Fd");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1356), "m&l3)-V9[JjZ@/");
      Integer.getInteger("", (-1974571886));
      Integer integer0 = new Integer(461);
      Integer.remainderUnsigned((-1974571886), 2160);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m&l3)-V9[JjZ@/", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("m&l3)-V9[JjZ@/ M&L3)-V9[JJZ@/(461) NOT NULL", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("m&l3)-V9[JjZ@/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = Integer.getInteger("NCLOB", 0);
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getDoc());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-534), "alter tble:`r&^x&pv'zg/");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter tble:`r&^x&pv'zg/8");
      Integer integer0 = new Integer((-534));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter tble:`r&^x&pv'zg/";
      stringArray0[1] = "Large Object initialised";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "V^P", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Large Object initialised", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("oJ{", dBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      boolean boolean0 = FBBlob.SEGMENTED;
      MockPrintStream mockPrintStream0 = new MockPrintStream("alter tble:`r");
      Locale locale0 = new Locale("alter tble:`r&^x&pv'zg/8", "21S02");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3351, "oJ{");
      Integer integer0 = new Integer(3351);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"i=u>k", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      boolean boolean0 = FBBlob.SEGMENTED;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"i=u>k OJ{(3351) NULL");
      Locale locale0 = new Locale("\"i=u>k OJ{(3351) NULL", "\"i=u>k OJ{(3351) NULL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectunknown con3tzaint type:");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }
}
