/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:53:15 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      float float0 = rationalNumber0.floatValue();
      assertEquals(100000000, rationalNumber0.divisor);
      assertEquals(1.0E-8F, float0, 0.01F);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-919.380618));
      assertEquals((-919.3806180096522), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(980.1973684210526);
      assertEquals(74495, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(501.5881410769773);
      String string0 = rationalNumber0.toString();
      assertEquals("13154149/26225 (501.588)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1226.48544));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1,226.485", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483657973173E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.1675881473347545E-8);
      assertEquals(31569761, rationalNumber0.divisor);
      assertEquals(3.167588123331057E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.539636286906898E-6);
      assertEquals(1.5396363994679017E-6, rationalNumber0.doubleValue(), 0.01);
      assertEquals(649504, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483656L, 2147483656L);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1, rationalNumber0.divisor);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483656L);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1);
      assertEquals(1L, rationalNumber2.longValue());
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      assertEquals(4.656612890424627E-10, rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2147483640), rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(54L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((short) (-54), rationalNumber1.shortValue());
      
      RationalNumber.factoryMethod(74L, 1);
      RationalNumber rationalNumber2 = new RationalNumber(74, (-54));
      assertEquals((-1.3703703703703705), rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-2147483676L), 1);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(2.14748362E9, rationalNumber3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-172.534709659));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("172.535", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-2097677));
      assertEquals(1, rationalNumber2.divisor);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(12158, (-2147483658L));
      rationalNumber3.toDisplayString();
      assertEquals((-5.661509904724034E-6), rationalNumber3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483654L);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.toDisplayString();
      rationalNumber0.negate();
      RationalNumber.factoryMethod(2147483654L, 1);
      RationalNumber.valueOf(0.0036207928601168504);
      RationalNumber.valueOf(16571);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(501.588141039);
      rationalNumber3.toDisplayString();
      RationalNumber.valueOf(0);
      rationalNumber2.toString();
      rationalNumber3.doubleValue();
      rationalNumber2.longValue();
      rationalNumber1.longValue();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483654L, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483654, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
