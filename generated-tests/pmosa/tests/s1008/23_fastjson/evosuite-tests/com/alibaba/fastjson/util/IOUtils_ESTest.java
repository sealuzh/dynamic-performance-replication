/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:20:31 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileDescriptor;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      // Undeclared exception!
      try { 
        IOUtils.getChars(256, 256, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'U';
      charArray0[2] = 'y';
      charArray0[3] = 'z';
      charArray0[4] = 'K';
      charArray0[5] = ']';
      IOUtils.decodeBase64(charArray0, 0, 0);
      IOUtils.decodeBase64(charArray0, 0, 0);
      IOUtils.stringSize((-2999));
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)0, 74, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'l';
      charArray0[2] = ':';
      charArray0[3] = '=';
      charArray0[4] = '2';
      charArray0[5] = 'A';
      charArray0[6] = 'U';
      charArray0[7] = 'h';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-114L), 1061, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1060
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.DIGITS, (-563), (-563), iOUtils0.specicalFlags_doubleQuotes);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithFieldName", (-563), (-563));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 661, (-170), iOUtils0.CA);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.decodeBase64("UTF-8");
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      charArrayReader0.read();
      IOUtils.readAll(charArrayReader0);
      IOUtils.decodeBase64("fastjson.properties");
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.replaceChars, 52, 52, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      int int0 = IOUtils.stringSize((-1L));
      int int1 = IOUtils.encodeUTF8(iOUtils0.CA, 1, 1, iOUtils0.specicalFlags_singleQuotes);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("#n_)IK/@");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("~j!zCYK!");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-4), (byte) (-62), (byte)96}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('3');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOUtils.stringSize(1531);
      IOUtils iOUtils0 = new IOUtils();
      String string0 = "fastjson.compatibleWithJavaBean";
      IOUtils.loadPropertiesFromFile();
      IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      int int0 = (-1940);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-32), (-1940), iOUtils0.CA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1941
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.getStringProperty("UTF-8");
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
      
      boolean boolean1 = IOUtils.isValidJsonpQueryParam("~j!zCYK!");
      IOUtils.getStringProperty("~j!zCYK!");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.mark(4101);
      IOUtils.close(pipedInputStream0);
      int int0 = IOUtils.stringSize((long) 4101);
      assertEquals(4, int0);
      
      boolean boolean2 = IOUtils.firstIdentifier('c');
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = IOUtils.stringSize((long) (byte)55);
      assertEquals(2, int0);
      
      boolean boolean0 = IOUtils.firstIdentifier('c');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("encodeUTF8 error", (-53), (-53));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.decodeBase64("sw3J6|)b)|2", 0, 0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(0, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      assertTrue(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharsetDecoder charsetDecoder0 = iOUtils0.UTF8.newDecoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.properties");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      String string0 = IOUtils.getStringProperty("UTF-8");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      IOUtils.decodeBase64("sw3J6|)b)|2", 0, 0);
      IOUtils.isValidJsonpQueryParam("L");
      char[] charArray0 = new char[0];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 0, 0);
      int int1 = 3968;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 3968, 3968, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3968
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("zDam8@82x`dg/8");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-28);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '=';
      IOUtils.decodeUTF8(byteArray0, (byte) (-91), (byte)0, charArray0);
      IOUtils.firstIdentifier('=');
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.firstIdentifier('\u008D');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 12, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 267
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)8;
      char[] charArray1 = new char[5];
      charArray1[0] = '5';
      charArray1[1] = '5';
      charArray1[2] = '5';
      charArray1[3] = '5';
      charArray1[4] = '5';
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 33, charArray1);
      assertArrayEquals(new char[] {'5', '5', '5', '5', '5'}, charArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-14);
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 117, 3678, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("encodeUTF8 error", (-53), (-53));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.loadPropertiesFromFile();
      IOUtils.isIdent('|');
      IOUtils.getChars(6, 6, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      IOUtils.readAll(charArrayReader0);
      IOUtils.decodeBase64("fastjson.properties");
      IOUtils.loadPropertiesFromFile();
      IOUtils.getStringProperty("fastjson.properties");
      IOUtils.loadPropertiesFromFile();
      IOUtils.close(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-3942), 4, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte byte0 = (byte)53;
      IOUtils.loadPropertiesFromFile();
      IOUtils.close((Closeable) null);
      IOUtils.getChars((byte)53, (int) (byte)53, iOUtils0.CA);
      int int0 = (-1107);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      // Undeclared exception!
      try { 
        Charset.forName("Yud@QI?62'Q>q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Yud@QI?62'Q>q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, iOUtils0.specicalFlags_singleQuotes);
      IOUtils.encodeUTF8(iOUtils0.replaceChars, (byte)12, (-1), iOUtils0.specicalFlags_doubleQuotes);
      IOUtils.getChars((byte) (-5), (int) (byte)12, iOUtils0.DIGITS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.readAll(charArrayReader0);
      IOUtils.decodeBase64("fastjson.properties");
      IOUtils.loadPropertiesFromFile();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 1, 1, iOUtils0.specicalFlags_doubleQuotes);
      IOUtils.getChars((long) 1, 1, iOUtils0.ASCII_CHARS);
      charArrayReader0.close();
      IOUtils.getStringProperty("fastjson.properties");
      IOUtils.loadPropertiesFromFile();
      IOUtils.close(charArrayReader0);
      int int1 = (-3942);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, (-3942), (-3942));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7885
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 5, 5);
      IOUtils.getChars((long) 5, 3, iOUtils0.DIGITS);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 57, 57, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      IOUtils.readAll(charArrayReader0);
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.loadPropertiesFromFile();
      iOUtils0.DEFAULT_PROPERTIES.toString();
      IOUtils.loadPropertiesFromFile();
      IOUtils.close(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 630, (-563));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.stringSize((-8L));
      assertEquals(1, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.CA, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      IOUtils.readAll(charArrayReader0);
      byte[] byteArray0 = IOUtils.decodeBase64("01234567btnvfr\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\", string0);
      
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.decodeBase64("01234567btnvfr\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("fastjson.properties");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "2tu*cXj";
      String string1 = "Z";
      byte[] byteArray0 = IOUtils.decodeBase64("Z");
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 9, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.readAll(charArrayReader0);
      IOUtils.decodeBase64("fastjson.properties");
      IOUtils.loadPropertiesFromFile();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 1, 1, iOUtils0.specicalFlags_doubleQuotes);
      IOUtils.getChars((long) 1, 1, iOUtils0.ASCII_CHARS);
      IOUtils.getChars(1, 1, iOUtils0.CA);
      IOUtils.getChars(4, 1, iOUtils0.replaceChars);
      IOUtils.stringSize(3112L);
      IOUtils.getChars(310L, 4, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 12, 12);
      IOUtils.isValidJsonpQueryParam("");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0);
      // Undeclared exception!
      try { 
        IOUtils.readAll(bufferedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.properties", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = IOUtils.isIdent('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.replaceChars, 7, 7);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 60, 4);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)77, (byte)69}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-54);
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = IOUtils.stringSize(1L);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = '\u0080';
      charArray0[2] = '\u0080';
      charArray0[3] = '{';
      charArray0[4] = '\u0080';
      charArray0[5] = '\u0080';
      charArray0[6] = '\u0080';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = IOUtils.firstIdentifier('Q');
      assertTrue(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 14, 14);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)38, (byte) (-27), (byte)121, (byte)104, (byte) (-83), (byte) (-124), (byte)88, (byte) (-98), (byte) (-107)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", 2, 2);
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      
      boolean boolean0 = IOUtils.isIdent('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-23);
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-40);
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte) (-40);
      byteArray1[4] = (byte) (-40);
      byteArray1[5] = (byte) (-40);
      byteArray1[6] = (byte) (-40);
      byteArray1[7] = (byte) (-40);
      byteArray1[8] = (byte) (-40);
      int int1 = IOUtils.encodeUTF8(charArray0, 8, (-980), byteArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("G.WOIb/tzb],eZc=");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils.firstIdentifier('\u0106');
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0106';
      charArray0[1] = '\u0106';
      charArray0[2] = '\u0106';
      charArray0[3] = '\u0106';
      charArray0[4] = '\u0106';
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 3943, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3942
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOUtils.isIdent('\u00FC');
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '\u00FC';
      charArray0[2] = '\u00FC';
      charArray0[3] = '\u00FC';
      charArray0[4] = '\u00FC';
      charArray0[5] = '\u00FC';
      charArray0[6] = '.';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)114;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 3, 111, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOUtils.isIdent('\u0104');
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '\u0104';
      charArray0[2] = '\u0104';
      IOUtils.isIdent('m');
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-23);
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 74, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 74, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)0;
      char[] charArray0 = new char[3];
      IOUtils.decodeUTF8(byteArray0, 1, 119, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-493), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -495
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-64);
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      assertEquals((-1), int0);
  }
}
