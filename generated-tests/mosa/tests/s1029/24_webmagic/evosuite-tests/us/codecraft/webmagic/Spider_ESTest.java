/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:10:27 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      spider0.setExitWhenComplete(false);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7pMw}XA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread((ExecutorService) null, 125);
      // Undeclared exception!
      try { 
        spider0.get("cntent");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7pMw}XA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      // Undeclared exception!
      try { 
        spider1.get("7pMw}XA");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%20");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("%20");
      Spider spider0 = Spider.create(simplePageProcessor1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s.codecraft.webmagic.pider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      Request request0 = new Request("us.codecraft.webmagic.Spider$Status");
      Request[] requestArray0 = new Request[4];
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      requestArray0[2] = request0;
      requestArray0[3] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s.codecraft.webmagic.pider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      String[] stringArray0 = new String[2];
      stringArray0[0] = " stop success!";
      stringArray0[1] = "s.codecraft.webmagic.pider$Status";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNull(list0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" erryE9or");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      Spider.create(simplePageProcessor0);
      spider0.runAsync();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "=,0E.I0dSnWbu(I%";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=,0E.I0dSnWbu(I%");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("=,0E.I0dSnWbu(I%", "=,0E.I0dSnWbu(I%");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.runAsync();
      Spider spider2 = spider1.setUUID("a[<");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s.codecraf.webmagic.pide$Sta8");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.thread(5);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":^y@T70s J|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-1933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s.codecraft.(ebma~ic.pider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7]PceA*");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider0.setEmptySleepTime(3722);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.debma{ic.S6ider$Staus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.debma{ic.S6ider$Staus", "us.codecraft.debma{ic.S6ider$Staus");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider1.getAll((Collection<String>) list0);
      Spider spider2 = spider1.startUrls(list0);
      spider1.getAll((Collection<String>) list0);
      spider2.getSite();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStatus();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s.codecraf.webmagic.pier$Stau8");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.extractAndAddRequests((Page) null, false);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      spider0.start();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("invalid regex ");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList("");
      Spider spider3 = spider2.startUrls(list0);
      Spider spider4 = spider3.thread(897);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.debma{ic.S6ider$Staus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.debma{ic.S6ider$Staus", "us.codecraft.debma{ic.S6ider$Staus");
      spider0.downloader(phantomJSDownloader0);
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.stop();
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s.codecraft.webmagic.pider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?Zp>");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("?Zp>");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.scheduler(queueScheduler0);
      Page page0 = new Page();
      spider3.stop();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider4 = spider3.startRequest(list0);
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("n");
      spider0.scheduler = (Scheduler) fileCacheQueueScheduler0;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ";^tj&eJy9V-_ySBV");
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<I(x&`9GnlYZtQyA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      spider0.getScheduler();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.debma{ic.S6ider$Staus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.debma{ic.S6ider$Staus", "us.codecraft.debma{ic.S6ider$Staus");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "us.codecraft.debma{ic.S6ider$Staus";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.debma{ic.S6ider$Staus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.debma{ic.S6ider$Staus", "us.codecraft.debma{ic.S6ider$Staus");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider1.getAll((Collection<String>) list0);
      // Undeclared exception!
      try { 
        spider0.get("us.codecraft.debma{ic.S6ider$Staus");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("+*NHgP9xDJNja05Rxcf");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      spider1.setScheduler(priorityScheduler0);
      spider0.setExecutorService((ExecutorService) null);
      Spider.Status spider_Status0 = Spider.Status.fromValue(200);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(7);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      String string1 = "p)2SC`9kQ/80~.~";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_cycle_tried_times", "p)2SC`9kQ/80~.~");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.initComponent();
      spider1.getPageCount();
      QueueScheduler queueScheduler0 = (QueueScheduler)spider0.getScheduler();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("us.codecraft.webmagic.Spider$Status");
      Spider spider2 = spider0.addPipeline(jsonFilePipeline0);
      Page.fail();
      String[] stringArray0 = new String[6];
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      queueScheduler0.pushWhenNoDuplicate(request1, spider1);
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider2.setScheduler(queueScheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.debma{ic.S6ider$Staus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.debma{ic.S6ider$Staus", "us.codecraft.debma{ic.S6ider$Staus");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("us.codecraft.debma{ic.S6ider$Staus", "mocspQJ!*cAe");
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      spider1.checkIfRunning();
      long long0 = spider1.getPageCount();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, long0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s.codecraf.webmagic.pider$Stau8");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request("s.codecraf.webmagic.pider$Stau8");
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.startUrls(list0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      spider0.getPageCount();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      Scheduler scheduler0 = spider0.getScheduler();
      Page.fail();
      scheduler0.poll(spider0);
      Spider spider1 = spider0.setScheduler(scheduler0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "U :^&|2c:");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("YZZ.6rJi<?8df");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1589, 1589, 1589, timeUnit0, linkedTransferQueue0, threadPoolExecutor_DiscardOldestPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 3);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertTrue(spider2.isExitWhenComplete());
      
      List<Request> list1 = spider2.getAll((Collection<String>) list0);
      Spider spider3 = spider2.startRequest(list1);
      spider0.getUUID();
      spider3.getThreadAlive();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.create(simplePageProcessor0);
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStartTime();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraf.webmagic.ider$Stats");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_cycle_tried_times", "p)2SC`9kQ/80~.~");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.initComponent();
      spider1.stop();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider1.getAll((Collection<String>) linkedBlockingQueue0);
      spider1.stop();
      spider1.run();
      spider0.run();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }
}
