/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:46:32 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("|6z$0R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(927, vectorAccumulator0);
      cCSMatrix0.setAll(0.0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)2;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      int int0 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(byte0, int0, matrixFunction0);
      int int1 = 2;
      cCSMatrix1.blankOfShape(byteArray0[2], int1);
      long long0 = 1885L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix cCSMatrix2 = CCSMatrix.randomSymmetric((int) byte0, (double) byteArray0[0], (Random) mockRandom0);
      cCSMatrix2.min();
      int int2 = 4;
      Matrix.identity(int2);
      cCSMatrix2.minInColumn(int0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      int int3 = 8;
      cCSMatrix2.copyOfShape(int3, byteArray0[2]);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      // Undeclared exception!
      try { 
        cCSMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cCSMatrix1.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 872.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(872.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 1000);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1000, 0, matrixFunction0);
      assertEquals(1000, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = (-1.0);
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-1214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1213
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "";
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 17;
      intArray0[2] = (-290);
      intArray0[3] = 0;
      intArray0[4] = 13;
      intArray0[5] = 0;
      intArray0[6] = (-40);
      intArray0[7] = 4;
      intArray0[8] = (-391);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 1088;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1088' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.norm();
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 483;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix0 = new CCSMatrix(483, 497, 483, doubleArray0, intArray0, intArray0);
      SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(483, 483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = 1088;
      cCSMatrix0.transpose();
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.toBinary();
      cCSMatrix0.copyOfColumns(0);
      // Undeclared exception!
      try { 
        SparseMatrix.diagonal((-1875), Double.POSITIVE_INFINITY);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(1352, vectorFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.max();
      SparseMatrix.diagonal(1132, 424.0);
      SparseMatrix.randomSymmetric(1132, (double) 0, (Random) null);
      double[] doubleArray0 = new double[0];
      ColumnMajorSparseMatrix.from1DArray(1132, 0, doubleArray0);
      int int0 = 48;
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(1132, 48, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1132' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.max();
      SparseMatrix.diagonal(1132, 1132);
      // Undeclared exception!
      try { 
        cCSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(2, 2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      cCSMatrix0.copyOfShape(261, 261);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.nonZeroAt(493, 0);
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getColumn(0);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308;
      doubleArray0[1] = 1167.33;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals(0.6666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      int int0 = 1133;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-3741), 1133, 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3741x1133
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      assertEquals(1, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-19);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.minInColumn((-19));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = (-3344);
      // Undeclared exception!
      try { 
        cCSMatrix1.getColumn((-3344));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3343
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(305, 305, 305);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2903);
      CCSMatrix.block(cCSMatrix0, rowMajorSparseMatrix0, cCSMatrix0, rowMajorSparseMatrix0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.minInColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(308);
      cCSMatrix0.iteratorOfColumn(308);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, Double.POSITIVE_INFINITY, (Random) mockRandom0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(0, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(8, 8, (-2677.16), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(284, 284);
      cCSMatrix0.iteratorOfColumn(284);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(33, 0, matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(4, 4450, (-1487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1487.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.toRowVector();
      Integer integer0 = new Integer(0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.toRowVector();
      cCSMatrix0.max();
      int int0 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(33, 0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 1159);
      cCSMatrix0.isZeroAt(1159, 777);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(1159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1160
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-1.0));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroIterator();
      int int0 = 9;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 2, 2);
      cCSMatrix0.maxInColumn(1);
      // Undeclared exception!
      try { 
        cCSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 209;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(585, 209, 585);
      int int1 = (-470);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.iteratorOfColumn(int1);
      int int2 = 3;
      String string0 = "";
      SparseMatrix.fromCSV(string0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixFunction matrixFunction0 = null;
      cCSMatrix0.updateAt(int0, int2, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2703, 2703);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2703;
      intArray0[2] = 1;
      intArray0[3] = 2703;
      intArray0[4] = 2703;
      intArray0[5] = 2703;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2703' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-1.0));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.add((-1.0));
      cCSMatrix0.setAll((-1.0));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.columnMajorIterator();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      SparseMatrix.block(cCSMatrix0, cCSMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      int[] intArray0 = new int[1];
      intArray0[0] = 35;
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      cCSMatrix0.toMatrixMarket(numberFormat0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(27, 27);
      double double0 = new Integer(27);
      cCSMatrix0.setAll((-442.90071013));
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.setAll(1);
      assertEquals(1, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2040, 2040);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 243;
      int int1 = 2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 243;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 243;
      CCSMatrix cCSMatrix0 = new CCSMatrix(243, 2, 2, doubleArray0, intArray0, intArray0);
      cCSMatrix0.slice(16, 243, 243, 243);
      // Undeclared exception!
      try { 
        cCSMatrix0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-1.0));
      cCSMatrix0.columnMajorIterator();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 689);
      Vector vector0 = cCSMatrix0.toRowVector();
      assertEquals(689, vector0.length());
      
      double double0 = cCSMatrix0.max();
      cCSMatrix0.iterator();
      double double1 = cCSMatrix0.maxInColumn(104);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2040, 2040);
      SparseMatrix.diagonal(1132, 1132);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2040, 1161.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(13, vectorProcedure0);
      org.evosuite.runtime.Random.setNextRandom(2040);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1159, 1);
      Matrix matrix0 = cCSMatrix0.copyOfRows(472);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.setColumn(2, (double) 3);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(2, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-116.1553));
      double double0 = cCSMatrix0.min();
      assertEquals((-116.1553), double0, 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      Matrix.zero(3, 2);
      cCSMatrix0.setColumn(2, (-2335.14746807));
      cCSMatrix0.set(2, 2, 100.0);
      assertEquals(100.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(234);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 234;
      intArray0[2] = 4;
      intArray0[3] = 234;
      intArray0[4] = 4;
      intArray0[5] = 1119;
      intArray0[6] = 4;
      intArray0[7] = 234;
      int[] intArray1 = new int[5];
      intArray1[0] = 4;
      intArray1[1] = 234;
      intArray1[2] = 4;
      intArray1[3] = 4;
      Matrix matrix0 = cCSMatrix1.removeFirstColumn();
      int int0 = 13;
      intArray1[4] = int0;
      CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix1.select(intArray0, intArray1);
      String string0 = "_[eaeOxGwlQq\"dmo";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 308;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1167.33;
      doubleArray0[2] = (double) 308;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(308, 308, doubleArray0);
      int[] intArray0 = new int[3];
      int int1 = 295;
      int int2 = 273;
      double double0 = 2163.2412921383752;
      MockRandom mockRandom0 = new MockRandom(int1);
      CCSMatrix.random(int1, int2, double0, (Random) mockRandom0);
      intArray0[0] = int0;
      int int3 = 3721;
      intArray0[1] = int3;
      intArray0[2] = int0;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1124, 1124);
      cCSMatrix0.copyOfShape(48, 1114);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 1074, doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(1074, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 308;
      CCSMatrix cCSMatrix0 = new CCSMatrix(308, 308);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.toRowVector();
      Integer integer0 = new Integer(int0);
      cCSMatrix0.iterator();
      double double0 = new Integer(int0);
      int int1 = 1090;
      int int2 = 2;
      CCSMatrix.zero(int1, int2);
      int int3 = 1029;
      cCSMatrix0.nonZeroIteratorOfColumn(int3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      DenseMatrix.randomSymmetric(3097, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.setColumn(2, 0.0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(0.2222222222222222, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(146);
      CCSMatrix.randomSymmetric(146, 0.3, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 1677.46709223551);
      cCSMatrix0.setColumn(3, 1677.46709223551);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(1863, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1863
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3286);
      cCSMatrix0.max();
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIteratorOfColumn(2434);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2311);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(2040);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      cCSMatrix0.blank();
      int int0 = 1110;
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.apply(matrixMatrixOperation0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) 23;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 23;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 23;
      doubleArray0[6] = (double) 23;
      doubleArray0[7] = (double) 23;
      int[] intArray0 = new int[3];
      intArray0[0] = 23;
      intArray0[1] = 23;
      intArray0[2] = 23;
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 23, 23, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.toRowMajorSparseMatrix();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '23' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(268, 2677, 268);
      Matrix matrix0 = cCSMatrix1.copyOfShape(268, 13);
      cCSMatrix0.multiply(matrix0);
      cCSMatrix0.norm();
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(340, 340);
      cCSMatrix0.minInColumn(4);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, Double.NEGATIVE_INFINITY);
      cCSMatrix0.minInColumn(4);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2311);
      cCSMatrix0.copyOfColumns(2040);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.blank();
      cCSMatrix0.minInColumn(1110);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(931, 947);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("3");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(40, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(234);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 234;
      intArray0[2] = 4;
      intArray0[3] = 234;
      intArray0[4] = 4;
      intArray0[5] = 1119;
      intArray0[6] = 4;
      intArray0[7] = 234;
      int[] intArray1 = new int[5];
      intArray1[0] = 4;
      intArray1[1] = 234;
      intArray1[2] = 4;
      int int0 = 13;
      cCSMatrix1.removeRow(13);
      intArray1[4] = int0;
      cCSMatrix1.select(intArray0, intArray1);
      cCSMatrix0.nonZeroIteratorOfColumn(intArray0[1]);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.swapColumns(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 1677.46709223551);
      cCSMatrix0.setColumn(3, 1677.46709223551);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 8, 8);
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.minInColumn(3);
      assertEquals(8, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CCSMatrix.diagonal(8, 612.615112979);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(332);
      Matrix.zero(3341, 3341);
      cCSMatrix0.setColumn(2, 0.0);
      org.evosuite.runtime.Random.setNextRandom((-1856));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 1677.46709223551);
      cCSMatrix0.setColumn(3, 1677.46709223551);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      matrix0.blank();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, (Matrix) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.setColumn(2, (double) 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(2, 2, matrixFunction0);
      assertEquals(3.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(308);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(2, vectorAccumulator0);
      cCSMatrix0.iteratorOfColumn(308);
      cCSMatrix0.min();
      cCSMatrix0.minInColumn(2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(308);
      int[] intArray0 = new int[9];
      intArray0[6] = 73;
      intArray0[1] = 73;
      intArray0[2] = 73;
      intArray0[3] = 308;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.multiplyByItsTranspose();
      Matrix matrix1 = null;
      CCSMatrix.block(matrix1, matrix0, cCSMatrix0, matrix0);
      int int0 = (-1960);
      cCSMatrix0.copyOfShape(intArray0[3], int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      // Undeclared exception!
      try { 
        cCSMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      double double0 = cCSMatrix0.min();
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.setColumn(3, (double) 8);
      assertEquals(0.234375, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.9, 0.8, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom((-860L));
      // Undeclared exception!
      try { 
        CCSMatrix.random(9956, 229, (double) 8, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1159;
      int int1 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1159, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1160' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      DenseVector denseVector0 = DenseVector.zero(3);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 1677.46709223551);
      cCSMatrix0.setColumn(3, 1677.46709223551);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      Matrix matrix1 = matrix0.blank();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix1, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.shuffle();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix(8, (-434), 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 8x-434
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 1677.46709223551);
      cCSMatrix0.setColumn(3, 1677.46709223551);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.minInColumn(3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      cCSMatrix0.setColumn(3, (double) 8);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(563, 1.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.nonZeroAt(2666, 3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)8, 2510.0, (-1261.92), (-1261.92)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      cCSMatrix0.setColumn(3, (double) 8);
      cCSMatrix0.maxInColumn(2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(7, vectorFunction0);
      cCSMatrix0.setColumn(2, (double) 7);
      cCSMatrix0.columnMajorIterator();
      Matrix.diagonal(7, 7);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1159);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 1159, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, denseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1160' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 1159;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1159, 1);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MockRandom mockRandom0 = new MockRandom(1L);
      DenseVector denseVector0 = DenseVector.random(1, mockRandom0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(1159, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1159' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      ColumnMajorSparseMatrix.zero(2042, 2042, 2042);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2109, 1, doubleArray0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int1 = (-1219);
      cCSMatrix0.minInColumn(int0);
      int int2 = 1424;
      Matrix matrix1 = cCSMatrix0.sliceTopLeft(int1, int2);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, matrix1, matrix1, matrix0);
      int int3 = 14;
      cCSMatrix1.minInColumn(int3);
      int int4 = 48;
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int4, int2, int1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.kroneckerProduct(matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(3, 1120.101007758549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1159, 1159, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.setColumn(2, (double) 2);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)105;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)48;
      CCSMatrix.fromBinary(byteArray0);
  }
}
