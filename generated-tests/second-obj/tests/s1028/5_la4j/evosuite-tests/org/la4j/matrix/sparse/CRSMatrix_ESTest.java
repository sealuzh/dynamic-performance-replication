/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:39:47 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      locale0.getExtension('U');
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(241);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.blankOfShape('U', 241);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(884, 8, 8);
      cRSMatrix0.setAll((-1.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll((-9));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      cRSMatrix0.min();
      cRSMatrix0.rowMajorIterator();
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-9), 253, 253);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -9x253
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 32);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("&]=R4;Q1$C*Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[16][8];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(16, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -878
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 737;
      doubleArray0[2] = (double) 737;
      doubleArray0[3] = (double) 737;
      double[][] doubleArray1 = new double[16][8];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      assertEquals(16, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(737.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.026785714285714284, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.setAll(0.0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 31.9;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4092;
      doubleArray0[3] = (double) 4092;
      doubleArray0[4] = (double) 4092;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 4092, doubleArray0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4092, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {31.9, 0.0, 4092.0, 4092.0, 4092.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(283, 283);
      assertEquals(283, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(283, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(283, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(283, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(rowMajorMatrixIterator0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("CHOLESKY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertSame(locale0, locale1);
      assertNotNull(decimalFormat0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(0, 0, (-2087.189101));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      String string0 = cRSMatrix0.mkString((NumberFormat) decimalFormat0);
      assertEquals("", string0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertSame(locale0, locale1);
      assertNotNull(string0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfRow(0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(vectorIterator0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)6;
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow((byte)0, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(60, 60, 60);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(60, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(60, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(60, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(60, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(60, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(60, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(60, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(60, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      
      cRSMatrix0.setAll((-851.617));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 21, 19);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(21, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(21, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(56, 56);
      assertEquals(56, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(56, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      Integer integer0 = new Integer(56);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.min();
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.nonZeroAt(0, 0);
      cRSMatrix0.getOrElse(56, 56, 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertSame(cRSMatrix0, sparseMatrix0);
      assertSame(sparseMatrix0, cRSMatrix0);
      assertNotNull(sparseMatrix0);
      
      double double1 = cRSMatrix0.max();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertSame(cRSMatrix0, sparseMatrix0);
      assertEquals(double1, double0, 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertSame(cRSMatrix0, sparseMatrix0);
      assertNotNull(rowMajorMatrixIterator0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-983);
      // Undeclared exception!
      try { 
        ((CRSMatrix) sparseMatrix0).select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-983' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(295);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.getRow(494);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      byte byte0 = (byte)32;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-2070);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random((-2070), 2, (double) 2, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      Double double0 = new Double(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(287, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 287
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2428;
      int int1 = 22;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 2428, 22);
      cRSMatrix0.subtract((double) 1);
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.iteratorOfRow(1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix1.to(matrixFactory0);
      int int1 = 11;
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3425.24)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.slice(1, 287, 287, 287);
      Double double0 = new Double(1);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      byte byte0 = (byte)32;
      double double0 = 547.38719672644;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random((-2485), 1, (-79.8708519), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.subtract((-2951.092));
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      CRSMatrix.zero((int) (byte)17, (int) (byte)32, 2);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((int) (byte)17, (int) (byte)32, (-2951.092), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.subtract((-2951.092));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2951.092), (-2951.092), (double)2, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.iteratorOfRow(2);
      cRSMatrix0.setAll(3296.889991309902);
      Double double0 = new Double(336.30114047);
      CRSMatrix cRSMatrix1 = new CRSMatrix(2, 2, 2);
      cRSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix.identity(4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 922, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(4, 1.0, (java.util.Random) mockRandom0);
      cRSMatrix1.nonZeroRowMajorIterator();
      Random.setNextRandom((-1184));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix.diagonal(10, 10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1787.0003151186638);
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[7] = (double) 10;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(2, 10, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CRSMatrix.diagonal(1, 1);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 0;
      mockRandom0.ints((long) 287);
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 287, (double) 0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1, 1);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      cRSMatrix2.iteratorOfRow(1);
      cRSMatrix2.setAll(3296.889991309902);
      cRSMatrix1.toBinary();
      Random.setNextRandom(6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      cRSMatrix0.power(1);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1, 1);
      cRSMatrix1.iteratorOfRow(1);
      cRSMatrix1.setAll(1);
      cRSMatrix1.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix1.minInRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1, 1, 1);
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(1);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cRSMatrix2.withSolver(linearAlgebra_SolverFactory0);
      int int1 = (-1323);
      int int2 = 8;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(1, (-1323), 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-1323
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      DecimalFormat decimalFormat0 = new DecimalFormat("?I+9CL");
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      int int1 = 7;
      CRSMatrix.zero(7, 7, 7);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(7, 98, 98);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
          cRSMatrix0.subtract((-2951.092));
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, (-2951.092), 737.24, 737.24, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          cRSMatrix0.update(matrixFunction0);
          cRSMatrix0.determinant();
          // Undeclared exception!
          try { 
            cRSMatrix0.eachNonZeroInRow(60, (VectorProcedure) null);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 60
             //
             verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = sparseVector0.multiply(789.6382276357);
      // Undeclared exception!
      try { 
        cRSMatrix0.apply(matrixVectorOperation0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.nonZeroIteratorOfRow(1);
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      cRSMatrix1.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 733
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      CRSMatrix cRSMatrix1 = new CRSMatrix(4, 749);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)749, Double.POSITIVE_INFINITY, (double)4, Double.POSITIVE_INFINITY).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 283;
      int int1 = 292;
      CRSMatrix cRSMatrix0 = new CRSMatrix(283, 292);
      cRSMatrix0.copyOfShape(283, 283);
      cRSMatrix0.rowMajorIterator();
      Random.setNextRandom(292);
      int int2 = (-1125);
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix.random(292, (-1125), (double) 292, (java.util.Random) mockRandom0);
      CRSMatrix.random(int1, int0, (double) int2, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 283;
      CRSMatrix cRSMatrix0 = new CRSMatrix(283, 292);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(5, 292);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.constant(248, 283, 292);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        CRSMatrix.block(basic2DMatrix0, cRSMatrix1, cCSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix.identity(0);
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 1.0, (java.util.Random) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(270, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 270
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      byte[] byteArray0 = new byte[20];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = new CRSMatrix(1313, (byte)32);
      int int0 = 630;
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 630
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.setAll(0.0);
      Matrix matrix0 = Matrix.identity(3);
      matrix0.rotate();
      Integer integer0 = new Integer(3);
      // Undeclared exception!
      try { 
        cRSMatrix0.equals((Matrix) null, 1950.767963654874);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      Matrix.identity(0);
      Matrix matrix0 = cRSMatrix0.rotate();
      Integer integer0 = new Integer(0);
      cRSMatrix0.equals(matrix0, (-95.046));
      cRSMatrix0.blankOfShape(899, 917);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1, 1, 1);
      SparseMatrix.identity(1);
      cRSMatrix1.rotate();
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      int int1 = (-2018);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateAt(1, (-2018), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(2, (double) 2, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(884, 8, 8);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1, 1, 1);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      sparseMatrix0.insert((Matrix) cRSMatrix1);
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      Locale locale0 = Locale.ENGLISH;
      int int0 = (-576);
      double double0 = 1442.8472984908;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateAt((-3073), 1396, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3073
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1, 1, 1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 36;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 36;
      doubleArray0[3] = (double) 36;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(36, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      Integer integer0 = new Integer(10);
      cRSMatrix0.toColumnVector();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      cRSMatrix0.min();
      mockRandom0.nextDouble();
      cRSMatrix0.rowMajorIterator();
      mockRandom0.nextDouble();
      cRSMatrix0.toBinary();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 1456;
      CRSMatrix.zero(1456, 1952257861, 1182);
      int int1 = (-1994091957);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1994091957), (-508), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1994091957x-508
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      byte byte0 = (byte)36;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      cRSMatrix0.multiplyByItsTranspose();
      byteArray0[1] = (byte)36;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfColumns((byte)36);
      int int1 = (-1372);
      // Undeclared exception!
      try { 
        cRSMatrix1.nonZeroAt(2, (-1372));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      Locale locale0 = Locale.ROOT;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(0, vectorFunction0);
      int int1 = (-345);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow((-345), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -345
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      Integer integer0 = new Integer(10);
      cRSMatrix0.toColumnVector();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      cRSMatrix0.min();
      cRSMatrix0.rowMajorIterator();
      mockRandom0.nextDouble();
      cRSMatrix0.toBinary();
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(10, 0.0);
      cRSMatrix1.nonZeroAt(0, 0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.subtract((-2951.092));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)17;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfColumns((byte)17);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.maxInRow((byte)1);
      cRSMatrix0.setAll(1.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      Locale locale0 = Locale.ROOT;
      locale0.stripExtensions();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      Matrix.constant(0, 0, (-2087.189101));
      cRSMatrix0.mkString(numberFormat0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      CRSMatrix cRSMatrix1 = new CRSMatrix(4, 4);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix1.max();
      int[] intArray0 = new int[1];
      cRSMatrix0.select(intArray0, intArray0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.subtract((-2951.092));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)17;
      CRSMatrix cRSMatrix1 = new CRSMatrix(773, (byte)32);
      cRSMatrix1.maxInRow(2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow((byte)1, vectorProcedure0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.subtract((double) 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)32;
      cRSMatrix0.setAll(1598.0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.maxInRow((byte)0);
      // Undeclared exception!
      try { 
        CRSMatrix.random((int) (byte)0, (int) (byte)0, (double) 2, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      Locale locale0 = Locale.ROOT;
      locale0.stripExtensions();
      NumberFormat.getIntegerInstance(locale0);
      Matrix.constant(0, 0, (-2087.189101));
      byte byte0 = (byte)17;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)17;
      intArray0[1] = 0;
      intArray0[2] = (-1842);
      intArray0[3] = (int) (byte)17;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.subtract((double) 2);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      int int0 = (-4612);
      CRSMatrix cRSMatrix2 = null;
      try {
        cRSMatrix2 = new CRSMatrix((-4612), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4612x2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1, 1);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      Integer integer0 = new Integer(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix2.transformRow(1, vectorFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      int int0 = 12;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(12, (-2951.092));
      cRSMatrix0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.transformRow(2, vectorFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.subtract((-2951.092));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(12, (-2951.092));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.iteratorOfRow(2);
      cRSMatrix0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1836.9058224), (double)12, (-3655.41597), 1.0, (-3655.41597)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.transformRow(2, vectorFunction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(295);
      cRSMatrix0.max();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4, 4);
      CRSMatrix cRSMatrix1 = new CRSMatrix(4, 4);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix1.max();
      int[] intArray0 = new int[1];
      cRSMatrix0.select(intArray0, intArray0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(295);
      byte byte0 = (byte)32;
      cRSMatrix0.min();
      int int0 = 5;
      cRSMatrix0.copyOfColumns(5);
      int int1 = 1313;
      CRSMatrix cRSMatrix1 = new CRSMatrix((-1504), 36);
      cRSMatrix0.rowMajorIterator();
      double double0 = (-2106.632868132);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int1, double0);
      int int2 = 1;
      cRSMatrix2.minInRow(int2);
      cRSMatrix1.nonZeroRowMajorIterator();
      int int3 = (-2951);
      Random.setNextRandom(int3);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      cRSMatrix1.max();
      cRSMatrix2.blankOfShape(int2, int0);
      Random.setNextRandom(byte0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 9984;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9984, 1940.01612220405);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      byte byte0 = (byte) (-70);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(420);
      cRSMatrix2.multiplyByItsTranspose();
      MockRandom mockRandom2 = new MockRandom();
      int int1 = 4;
      CRSMatrix cRSMatrix3 = new CRSMatrix(int0, byte0);
      int int2 = 1073741823;
      cRSMatrix1.power(int2);
      int int3 = 11;
      cRSMatrix2.nonZeroAt(int3, int1);
      CRSMatrix.fromBinary(byteArray0);
      VectorFunction vectorFunction0 = null;
      CRSMatrix cRSMatrix4 = new CRSMatrix(int2, int1);
      int int4 = 790;
      cRSMatrix4.transformRow(int4, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1;
      CRSMatrix.zero(1, 1);
      double[][] doubleArray0 = new double[0][4];
      MockRandom mockRandom0 = new MockRandom(62L);
      CRSMatrix.random(1, 17, (double) 1, (java.util.Random) mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      double double0 = cRSMatrix0.determinant();
      byte byte0 = (byte)32;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random((int) (byte)32, (int) (byte)32, 1.0, (java.util.Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, columnMajorSparseMatrix0);
      matrix0.iteratorOfRow(10);
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.removeFirstColumn();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      int int0 = 255;
      CRSMatrix.random(276, 255, 1.0, (java.util.Random) mockRandom0);
      cRSMatrix0.max();
      int int1 = (-2461);
      cRSMatrix0.nonZeroAt(int1, int0);
      VectorFunction vectorFunction0 = null;
      int int2 = (-431);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(int2, byte0, doubleArray0);
      int int3 = 5331;
      cRSMatrix1.transformRow(int3, vectorFunction0);
      cRSMatrix1.iteratorOfNonZeroRows();
  }
}
