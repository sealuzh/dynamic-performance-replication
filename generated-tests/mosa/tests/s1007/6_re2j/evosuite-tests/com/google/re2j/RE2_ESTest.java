/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:59:17 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RE2.match("Thai", "Thai");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("i");
      int[] intArray0 = rE2_0.findSubmatchIndex("i");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.RE2");
      List<String> list0 = rE2_0.findAll("com.google.re2j.RE2", 1593);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(";AGkkm");
      String string0 = rE2_0.replaceAll(";AGkkm", ";AGkkm");
      assertEquals(";AGkkm", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(";A\"sKkk|");
      String string0 = rE2_0.replaceAll(";A\"sKkk|", ";A\"sKkk|");
      assertEquals(";A\"sKkk||;A\"sKkk|", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("n");
      String string0 = rE2_0.replaceFirst("n", "n");
      assertEquals("n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("|");
      String string0 = rE2_0.replaceFirst("|", "|");
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("y");
      List<String[]> list0 = rE2_0.findAllSubmatch("y", 901);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 7);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("R!V+ETGqK*U%]sI?");
      assertNotNull(rE2_0);
      assertEquals("R!V+ETGqK*U%]sI?", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("R!V+ETGqK*U%]sI?", 1593);
      assertNull(list0);
      assertEquals("R!V+ETGqK*U%]sI?", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 520);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("O74?X.#Sg2jv3o;eTTA");
      assertNotNull(rE2_0);
      assertEquals("O74?X.#Sg2jv3o;eTTA", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("O74?X.#Sg2jv3o;eTTA");
      assertNull(intArray0);
      assertEquals("O74?X.#Sg2jv3o;eTTA", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2(" Gnyq$SY+");
      assertNotNull(rE2_0);
      assertEquals(" Gnyq$SY+", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex(" Gnyq$SY+");
      assertNull(intArray0);
      assertEquals(" Gnyq$SY+", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = RE2.match("ztk0Z,?Qu0nu?", "ztk0Z,?Qu0nu?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", (byte)0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", (-3235));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("PLUS");
      assertNotNull(rE2_0);
      assertEquals("PLUS", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(".+*?()|[]{}^$", 841);
      assertNull(list0);
      assertEquals("PLUS", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("r]+99D#,u<zcDz");
      assertNotNull(rE2_0);
      assertEquals("r]+99D#,u<zcDz", rE2_0.toString());
      
      String string0 = rE2_0.find("r]+99D#,u<zcDz");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("r]+99D#,u<zcDz", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RE2.quoteMeta("[:^punct:]");
      assertNotNull(string0);
      assertEquals("\\[:\\^punct:\\]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      RE2 rE2_0 = RE2.compile("O");
      assertNotNull(rE2_0);
      assertEquals("O", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-3900));
      assertNull(list0);
      assertEquals("O", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("It");
      assertNotNull(rE2_0);
      assertEquals("It", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("It", (-3697));
      assertNotNull(list0);
      assertEquals("It", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-1200));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("stack underflow");
      assertNotNull(rE2_0);
      assertEquals("stack underflow", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("stack underflow");
      assertNotNull(stringArray0);
      assertEquals("stack underflow", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("li5>kT+Lehiw0M");
      assertNotNull(rE2_0);
      assertEquals("li5>kT+Lehiw0M", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("li5>kT+Lehiw0M");
      assertNull(stringArray0);
      assertEquals("li5>kT+Lehiw0M", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("=");
      assertNotNull(rE2_0);
      assertEquals("=", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
      assertEquals("=", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-3926));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(19, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("");
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = new RE2("|");
      assertNotNull(rE2_0);
      assertEquals("|", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 7);
      assertNotNull(list0);
      assertEquals("|", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|/r9zux2vrS&0");
      assertNotNull(rE2_0);
      assertEquals("|/r9zux2vrS&0", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("|/r9zux2vrS&0", 212);
      assertNotNull(list0);
      assertEquals("|/r9zux2vrS&0", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compilePOSIX("[:word:]");
      assertNotNull(rE2_0);
      assertEquals("[:word:]", rE2_0.toString());
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertEquals("[:word:]", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        rE2_0.match("", 5413, 5413, 5413, intArray0, 5413);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.find("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("", 2603, 0, 2603, (int[]) null, 2603);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("ztk0Z,?Qf0nu?");
      assertNotNull(rE2_0);
      assertEquals("ztk0Z,?Qf0nu?", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("ztk0Z,?Qf0nu?", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("'");
      assertNotNull(rE2_0);
      assertEquals("'", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("'", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compile("3|_9!m:l8/vkC+Szk_");
      assertNotNull(rE2_0);
      assertEquals("3|_9!m:l8/vkC+Szk_", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-7273));
      assertNull(list0);
      assertEquals("3|_9!m:l8/vkC+Szk_", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("R!V+ETGqK*U%]sI?");
      assertNotNull(rE2_0);
      assertEquals("R!V+ETGqK*U%]sI?", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("R!V+ETGqK*U%]sI?", 1593);
      assertNull(list0);
      assertEquals("R!V+ETGqK*U%]sI?", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("OkDgslNC");
      assertNotNull(rE2_0);
      assertEquals("OkDgslNC", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertEquals("OkDgslNC", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Po");
      assertNotNull(rE2_0);
      assertEquals("Po", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 1);
      assertNull(list0);
      assertEquals("Po", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 758);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[19];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-4));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      RE2 rE2_0 = RE2.compile("cXIK;.NR E");
      assertNotNull(rE2_0);
      assertEquals("cXIK;.NR E", rE2_0.toString());
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
      assertEquals("cXIK;.NR E", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("", (byte)0, (byte)0, (-481), (int[]) null, (byte)0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(";J");
      assertNotNull(rE2_0);
      assertEquals(";J", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match(";J", (byte)0, (byte)0, (-481), (int[]) null, (byte)0);
      assertFalse(boolean0);
      assertEquals(";J", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[0];
      boolean boolean0 = rE2_0.match("", (byte)0, (byte)0, (byte)0, intArray0, (byte)0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = rE2_0.replaceAll("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      RE2 rE2_1 = RE2.compile("");
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(rE2_0, rE2_1);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertNotSame(rE2_0, rE2_1);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("", rE2_0.toString());
  }
}
