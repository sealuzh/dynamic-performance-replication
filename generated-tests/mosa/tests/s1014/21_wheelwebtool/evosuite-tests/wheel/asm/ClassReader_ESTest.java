/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:11:54 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("zH'no|FS\"yhHg?s");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader1, 8);
      classReader0.accept((ClassVisitor) classWriter0, 4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      String string0 = classReader1.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader1, 1);
      classReader0.accept((ClassVisitor) classWriter0, 32);
      String string1 = classReader0.getClassName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      assertEquals(32, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(32, classReader0.getAccess());
      assertEquals(32, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7802, classReader1.header);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(32, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotNull(stringArray0);
      assertFalse(classReader0.equals((Object)classReader1));
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertEquals(32, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      assertFalse(classReader0.equals((Object)classReader1));
      
      int int0 = classReader0.getAccess();
      assertEquals(32, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertEquals(32, int0);
      assertFalse(classReader0.equals((Object)classReader1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      assertEquals(32, classReader0.getAccess());
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      // Undeclared exception!
      try { 
        classReader0.readConst(2, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(32, classReader0.getAccess());
      assertEquals(32, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassWriter classWriter0 = new ClassWriter(classReader1, 2);
      assertEquals(32, classReader0.getAccess());
      assertEquals(32, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      
      classReader1.accept((ClassVisitor) classWriter0, 142);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(32, classReader0.getAccess());
      assertEquals(32, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7802, classReader1.header);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      assertFalse(classReader0.equals((Object)classReader1));
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      assertEquals(32, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.MethodWriter");
      assertEquals(32, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(7802);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 2279);
      assertEquals(32, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1863));
      ClassWriter classWriter1 = new ClassWriter(38);
      classReader0.accept((ClassVisitor) classWriter1, 24);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      ClassWriter classWriter1 = new ClassWriter(8);
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter1, 5926);
      classReader0.getItem(16);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(718);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      int int0 = 1694;
      ClassWriter classWriter1 = new ClassWriter(classReader1, int0);
      int int1 = 8;
      classReader0.accept((ClassVisitor) classWriter0, int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(7802);
      classReader0.getSuperName();
      classReader1.readShort(711);
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = ',';
      charArray0[2] = '@';
      // Undeclared exception!
      try { 
        classReader0.readConst(717, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader1, 8);
      classReader1.getSuperName();
      classReader1.readShort(7802);
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = '9';
      charArray0[2] = '[';
      charArray0[3] = 'F';
      charArray0[4] = 'u';
      charArray0[5] = '@';
      charArray0[6] = ',';
      // Undeclared exception!
      try { 
        classReader0.readConst((short)32, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classWriter0.newInteger((-1));
      classReader0.getAccess();
      classReader0.getInterfaces();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      // Undeclared exception!
      try { 
        classReader1.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newClassItem("wheel.asm.MethodWriter");
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader1.b, 255, 965);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64077
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
