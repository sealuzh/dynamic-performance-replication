/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:01:54 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.ByteBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.Month;
import java.time.ZoneId;
import java.time.chrono.HijrahDate;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("getgetLocalizedMessage", "kotlin.ranges.ClosedFloatRange");
      weakHashMap0.put((String) null, "istoString");
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Class<Boolean> class0 = Boolean.TYPE;
      typeArray0[0] = (Type) class0;
      Class<Byte> class1 = Byte.TYPE;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      Class class2 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals("boolean", class2.toString());
      
      TypeUtils.getClassFromMapping("c4=/=$xxV:");
      Class class3 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotSame(class3, class2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      gridBagConstraints0.gridheight = (-1733176309);
      Insets insets0 = new Insets(0, 0, 3672, 10);
      gridBagConstraints0.insets = insets0;
      Class<MessageFormat> class0 = MessageFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) gridBagConstraints0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Collection collection0 = new HashSet<BigDecimal>();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      System.setCurrentTimeMillis((-5856L));
      System.setCurrentTimeMillis(125L);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      ConcurrentHashMap<BatchUpdateException, JavaObjectDeserializer> concurrentHashMap0 = new ConcurrentHashMap<BatchUpdateException, JavaObjectDeserializer>();
      TreeMap<BatchUpdateException, JavaObjectDeserializer> treeMap0 = new TreeMap<BatchUpdateException, JavaObjectDeserializer>(concurrentHashMap0);
      java.util.IdentityHashMap<BatchUpdateException, JavaObjectDeserializer> identityHashMap0 = new java.util.IdentityHashMap<BatchUpdateException, JavaObjectDeserializer>(treeMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      identityHashMap0.put(batchUpdateException0, javaObjectDeserializer0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.fnv1a_64("${:~N73t?XC@");
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1");
      assertTrue(boolean0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("1");
      mockIllegalStateException0.getCause();
      mockIllegalStateException0.getSuppressed();
      Short short0 = TypeUtils.castToShort("1");
      assertNotNull(short0);
      
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[10];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) treeMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Date> class0 = Date.class;
      parserConfig0.checkAutoType("Ljava.lang.AutoCloseable", class0, (-157));
      TypeUtils.getGenericParamType((Type) null);
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Instant instant1 = MockInstant.minusNanos(instant0, 0L);
      Instant instant2 = MockInstant.minusMillis(instant1, 61L);
      Timestamp timestamp0 = Timestamp.from(instant2);
      Time time0 = TypeUtils.castToSqlTime(timestamp0);
      assertEquals("23:59:59", time0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "getFieldValue error.";
      TypeUtils.fnv1a_64_lower("getFieldValue error.");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("getFieldValue error.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : getFieldValue error.
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Short> class0 = Short.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      Hashtable<InstantiationException, NoSuchMethodException> hashtable0 = new Hashtable<InstantiationException, NoSuchMethodException>();
      InstantiationException instantiationException0 = new InstantiationException();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      hashtable0.put(instantiationException0, noSuchMethodException0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashtable0, typeArray0[2], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashtable0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.castToChar("");
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      SecurityException securityException0 = new SecurityException("B");
      Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      boolean boolean1 = TypeUtils.isHibernateInitialized(linkedHashMap0);
      assertTrue(boolean1);
      
      LinkedHashMap<IndexOutOfBoundsException, BreakIterator> linkedHashMap1 = new LinkedHashMap<IndexOutOfBoundsException, BreakIterator>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.checkAutoType(".000000000", class0, (-134));
      SQLRecoverableException sQLRecoverableException0 = TypeUtils.cast((Object) linkedHashMap1, class0, parserConfig0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("j", (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy1, false);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "q7Yy(?dU+aygOOcN@", fieldArray0);
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("q7Yy(?dU+aygOOcN@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"q7Yy(?dU+aygOOcN@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ClassLoader.getSystemClassLoader();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, thread0, "null", (-1L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("null", mockThread0);
      Class<HttpCookie> class0 = HttpCookie.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.net.HttpCookie(java.lang.String,java.lang.String)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("$=V1otu7mW");
      TypeUtils.castToTimestamp((Object) null);
      String string0 = TypeUtils.decapitalize("$=V1otu7mW");
      assertEquals("$=V1otu7mW", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "rDnh_?");
      Locale locale0 = TypeUtils.toLocale("is");
      assertEquals("is", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.compatibleWithJavaBean", "fastjson.compatibleWithJavaBean", 2583);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.compatibleWithJavaBean", "ha", "fastjson.compatibleWithJavaBean", 2583);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("fastjson.compatibleWithJavaBean", "0000-00-00", "fastjson.compatibleWithJavaBean", 2583);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("ha", "fastjson.compatibleWithJavaBean", "0000-00-00", (-826));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("java.awt.Color", "S", "java.awt.Color", 1777);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("0000-00-00", "~NF??21", "b-^ANZ'", 2894);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("v<8(8q6KzK`k}", "uc8vL=0vG/B0Y", "methodName", 2894);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLIntegrityConstraintViolationException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.loadClass("MY7#(*lNZ5:-", (ClassLoader) null, true);
      VerifyError verifyError0 = new VerifyError();
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Class<StackTraceElement>) null, parserConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      String string0 = "@j7l#7.LKAbNM";
      TypeUtils.loadClass("@j7l#7.LKAbNM", (ClassLoader) null);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJHr");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("sJHr");
      mockIllegalStateException0.getCause();
      mockIllegalStateException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.toLocale("vc3_Mi5");
      String string0 = "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer";
      TypeUtils.loadClass("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.fnv1a_64("");
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      MockDate mockDate0 = new MockDate();
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getRawClass(class0);
      TypeUtils.getSerializeFeatures(class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      
      InterruptedException interruptedException0 = new InterruptedException("e|:9])n");
      Class<TimeUnit> class2 = TimeUnit.class;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "|u/Z3!(jI^0n20", 0);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      treeMap0.put("", "");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, true);
      TypeUtils.decapitalize("");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate("");
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.fnv1a_64_lower("");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap0 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.put("", (String) null);
      Class<Calendar> class3 = Calendar.class;
      TypeUtils.getSerializeFeatures(class3);
      Class<ParameterizedTypeImpl> class4 = ParameterizedTypeImpl.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "", fieldArray0);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class4, class2, class0, (Field) null, 8233, (-2072), (-2072));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<TimeUnit> class1 = TimeUnit.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(fileSystemHandling0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.getGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Float float0 = new Float(1.0);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils.isNumber("@#>ADLkME");
      Class<DecimalFormat> class0 = DecimalFormat.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      MockException mockException0 = new MockException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ljava.awt.Rectangle", mockException0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.isNumber("");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils.loadClass("i+");
      TypeUtils.castToFloat((Object) null);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      InternalError internalError0 = new InternalError(sQLDataException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.InternalError: java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "1", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[1], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.isNumber("");
      Class<Boolean> class0 = Boolean.TYPE;
      String string0 = ".>N%Mz}u+c9";
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<DataTruncation> class1 = DataTruncation.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class2, map0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [D", class2.toString());
      
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SimpleTimeZone> class3 = SimpleTimeZone.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class3);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "fastjson.parser.autoTypeSupport");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "[Sf?M%`{z^=[+");
      mockThread0.getContextClassLoader();
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader1);
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.parser.deny");
      assertEquals(8807520128269719306L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "q7Yy(?dU+aygOOcN@", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.getParserFeatures(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Timestamp> class1 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.getGenericParamType(class1);
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", type0, parserConfig0);
      TypeUtils.getClassFromMapping("");
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      TypeUtils.isKotlin((Class) null);
      Class<?> class3 = TypeUtils.loadClass("=88IHe#=");
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getGenericParamType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.isNumber("NaN");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<BigDecimal> class0 = BigDecimal.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      long long0 = TypeUtils.fnv1a_64_lower("lF%vB#K_I(E");
      assertEquals(3335083294060535040L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("getlongValue", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("getlongValue");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.fnv1a_64("getDeserializer");
      Class<Boolean> class0 = Boolean.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(linkedHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      TypeUtils.getGenericParamType(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("Y-2J}r)zhVMZVm8h");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RenderingHints.Key> class2 = RenderingHints.Key.class;
      RenderingHints.Key renderingHints_Key0 = TypeUtils.castToJavaBean((Object) null, class2);
      assertNull(renderingHints_Key0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "exponentSeparator", fieldArray0);
      assertNull(field0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.loadClass("exponentSeparator");
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BreakIterator.getLineInstance();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.castToSqlTime((Object) null);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Float> class0 = Float.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      treeMap0.put("", "");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.fnv1a_64_lower("");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("", classLoader0);
      long long0 = TypeUtils.fnv1a_64_lower("F KW,G5");
      assertEquals((-612391218061284701L), long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.toLocale("Ljava.util.concurrent.ConcurrentSkipListSet");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = true;
      hashMap0.put("can not cast to boolean, value : ", "can not cast to boolean, value : ");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Date date0 = new Date(2983L);
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) date0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Random.setNextRandom(53);
      Class<?> class0 = TypeUtils.loadClass("L)+&L8c_n\"Uc`+");
      assertNull(class0);
      
      long long0 = TypeUtils.fnv1a_64_lower("L)+&L8c_n\"Uc`+");
      assertEquals((-1513091974903310456L), long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      TypeUtils.decapitalize("");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate("");
      TypeUtils.getKoltinConstructorParameters(class2);
      Long long0 = new Long((-3750763034362895579L));
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getSerializeFeatures(class2);
      AtomicLong atomicLong0 = new AtomicLong(10L);
      TypeUtils.castToLong(atomicLong0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<Timestamp> class3 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Timestamp timestamp0 = TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class3, parserConfig0);
      assertEquals("1899-12-31 00:00:00.0", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.decapitalize("X@iQSh-");
      Class<RuntimeException> class0 = RuntimeException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.toLocale("vc3_Mi5");
      String string0 = "STANDARD_TIME";
      String string1 = "millisPerHour";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("STANDARD_TIME", "millisPerHour", (-3801));
      SQLWarning sQLWarning0 = new SQLWarning(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLWarning: java.sql.SQLTimeoutException: STANDARD_TIME
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      String string0 = "o";
      TypeUtils.loadClass("o");
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Locale locale0 = TypeUtils.toLocale("T3/H");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.PRC;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Point> class0 = Point.class;
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      JobAttributes jobAttributes0 = new JobAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      TypeUtils.decapitalize("");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate("");
      TypeUtils.getKoltinConstructorParameters(class2);
      Long long0 = new Long((-3750763034362895579L));
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(genericArrayType0).toString();
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class3 = TypeUtils.loadClass("L", (ClassLoader) null, true);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getObjectWriter", "getObjectWriter");
      TypeUtils.loadClass((String) null);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "{";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0);
      // Undeclared exception!
      try { 
        javaObjectDeserializer0.deserialze(defaultJSONParser0, (Type) class0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", (Type) class1, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("fastjson.parser.deny").when(genericArrayType1).toString();
      doReturn(class1).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertEquals("class [D", class1.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "rDnh_?";
      VerifyError verifyError0 = new VerifyError("hashCode");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("hashCode");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hashCode\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Character> class1 = Character.class;
      TypeUtils.isPath(class0);
      ClassLoader.getSystemClassLoader();
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.getParserFeatures(class0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("%H>0P");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.lang.MockThrowable: %H>0P
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getObjectWriter", "getObjectWriter");
      TypeUtils.decapitalize("clo");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("clo", "getObjectWriter");
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      treeMap1.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap1, false);
      treeMap1.put("clo", "Ljava.awt.Rectangle");
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        treeMap1.merge((String) null, (String) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, weakHashMap0, true, propertyNamingStrategy0);
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, true);
      TypeUtils.decapitalize("");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate("");
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.fnv1a_64_lower("");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("", classLoader0);
      TypeUtils.fnv1a_64_lower("F KW,G5");
      Month month0 = Month.JUNE;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-1911063896), month0, 192, 29, 29);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Year (valid values -999999999 - 999999999): -1911063896
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.loadClass("null");
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "1", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<Object> class1 = Object.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("$=V1otu7mW");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("$=V1otu7mW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : $=V1otu7mW
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      Point point0 = new Point(9, 9);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=9,y=9]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BreakIterator.getLineInstance();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("\"=%-RGW/>|W04(_R/+ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : \"=%-RGW/>|W04(_R/+ 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.isNumber("()I");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.setClassAssertionStatus("N+(lt#se;P pg:", false);
      classLoader0.setClassAssertionStatus("RZ>@97", false);
      classLoader0.setClassAssertionStatus("aSd[L5vBQI1wQ(38", false);
      TypeUtils.loadClass("()I", classLoader0, false);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer((ParserConfig) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("language");
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      TypeUtils.decapitalize("language");
      TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("language");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : language
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Float> class0 = Float.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig(false);
      Class<SQLException> class1 = SQLException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      Class<Collator> class2 = Collator.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.ParserConfig@e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      String string0 = "()Ljava/lang/String;";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("()Ljava/lang/String;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'j'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.class;
      TypeUtils.decapitalize("to");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("to");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"to\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.decapitalize("2[p[w_OczjS4");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate((Object) null);
      Class<TypeNotPresentException> class2 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Long long0 = new Long(344L);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "getgetStackTrace";
      TypeUtils.fnv1a_64("getgetStackTrace");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("getgetStackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getgetStackTrace
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "rDnh_?");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = null;
      identityHashMap0.put("PESc,5KHNu0", (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      TypeUtils.isKotlin(class1);
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache(":;8l<o3gQ", identityHashMap1);
      Class<SQLWarning> class2 = SQLWarning.class;
      Field[] fieldArray0 = new Field[8];
      fieldArray0[0] = null;
      fieldArray0[1] = null;
      fieldArray0[2] = null;
      fieldArray0[3] = null;
      fieldArray0[4] = null;
      fieldArray0[5] = null;
      fieldArray0[6] = null;
      fieldArray0[7] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      FieldInfo fieldInfo0 = new FieldInfo("e|:9])n", class0, class0, class0, (Field) null, (-3440), (-3440), 1459);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      beanContext0.getAnnation(class1);
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      FieldInfo fieldInfo1 = null;
      try {
        fieldInfo1 = new FieldInfo("e|:9])n", (Method) null, (Field) null, class0, class0, 1459, 20, 20, (JSONField) null, (JSONField) null, "e|:9])n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      treeMap0.put("&;aL&t@C", "");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      parserConfig0.addAccept("");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.isNumber("j");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass((String) null);
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type0, type1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<Object> class1 = Object.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("K\"-e8", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("doubleValue", class1, class1, class0, (Field) null, 91, 91, (-2385));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      TypeUtils.unwrapOptional(class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(beanContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.serializer.BeanContext@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.loadClass("@j:G\">r");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "rDnh_?");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("int");
      Class<Double> class0 = Double.TYPE;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(4);
      TypeUtils.unwrapOptional(class0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "^?";
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      Locale locale0 = JSON.defaultLocale;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SecurityException> class0 = SecurityException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.clearClassMapping();
      VerifyError verifyError0 = new VerifyError((String) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      TypeUtils.isHibernateInitialized((Object) null);
      mockIllegalStateException0.getMessage();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "Ljava.awt.Rectangle", (-2524));
      TypeUtils.castToBigInteger((Object) null);
      mockIllegalStateException0.getCause();
      mockIllegalStateException0.getSuppressed();
      HttpCookie httpCookie0 = new HttpCookie("''", (String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Rectangle\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getParserFeatures(class0);
      Class<Long> class1 = Long.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("to", "to");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, false);
      String string0 = " P t@";
      TypeUtils.decapitalize(" P t@");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("to");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"to\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.forLanguageTag("getgetExtensionKeys");
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.PRC;
      locale1.getDisplayCountry(locale0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      Class<Exception> class0 = Exception.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      Class<Annotation> class1 = Annotation.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap2, propertyNamingStrategy1, true);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap0 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONObject jSONObject0 = new JSONObject(100000007);
      Class<HttpCookie> class0 = HttpCookie.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.net.HttpCookie(java.lang.String,java.lang.String)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<InternalError> class1 = InternalError.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      TypeUtils.decapitalize((String) null);
      TypeUtils.getCollectionItemClass(class1);
      Date date0 = new Date((-3750763034362895579L));
      TypeUtils.castToSqlDate(date0);
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Long long0 = new Long(3759L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      Locale.lookup(linkedList0, arrayDeque0);
      Long long1 = TypeUtils.castToLong((Object) null);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getCollectionItemType(class1);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      weakHashMap0.put("-qu9/YBSSXR/i", "([C)D");
      BreakIterator.getLineInstance();
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.awt.Color", "iV8s", (-1454622254), concurrentHashMap0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("@x|J^").when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      MessageFormat messageFormat0 = new MessageFormat("principal", locale0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.getSerializeFeatures(class0);
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils.clearClassMapping();
      LinkedHashSet<NumberFormatException> linkedHashSet0 = new LinkedHashSet<NumberFormatException>();
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = null;
      TypeUtils.castToSqlTime((Object) null);
      String string0 = "o";
      TypeUtils.fnv1a_64("o");
      short short0 = (short)8948;
      Short short1 = new Short((short)8948);
      short short2 = (short)949;
      Short.toUnsignedInt((short)949);
      Short.toUnsignedInt((short)8948);
      TypeUtils.castToDate(short1);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(stackTraceElementDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      NumberFormatException numberFormatException0 = new NumberFormatException("writeFieldValueStringWithDoubleQuoteCheck");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NumberFormatException: writeFieldValueStringWithDoubleQuoteCheck
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isHibernateInitialized(class0);
      TypeUtils.getRawClass(class0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "getbyteValue");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      mockThread0.run();
      mockThread0.getStackTrace();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("getbyteValue", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      Type type2 = TypeUtils.getCollectionItemType((Type) null);
      Integer integer0 = new Integer(46);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type2;
      typeArray0[2] = type1;
      typeArray0[3] = type1;
      typeArray0[4] = type2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) integer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@38f8a226
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "1";
      TypeUtils.isNumber("1");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("1");
      TypeUtils.fnv1a_64_lower("1");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.castToSqlTime((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      treeMap0.put("EKv'ZxgjRfV(/7y", "Ljava.awt.Rectangle");
      TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {EKv'ZxgjRfV(/7y=Ljava.awt.Rectangle}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("java.time.OffsetDateTime", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.isNumber("");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = type0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.util.ParameterizedTypeImpl cannot be cast to java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.ObjectArrayCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "timestamp");
      Type[] typeArray0 = new Type[2];
      Type type0 = null;
      TypeUtils.unwrapOptional((Type) null);
      typeArray0[0] = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      TypeUtils.isKotlin(class1);
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      String string0 = "equals";
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, identityHashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      Point point0 = new Point(9, 9);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=9,y=9]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeUtils.fnv1a_64("j");
      Class<Boolean> class0 = Boolean.class;
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.isPath(class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "j", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Boolean> class1 = Boolean.class;
      TypeUtils.isPath(class1);
      Type[] typeArray0 = new Type[19];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = ".";
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      SecurityException securityException0 = new SecurityException("\":\"", noSuchMethodException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"-9223372036854775808\"", ".", 512, securityException0);
      sQLSyntaxErrorException0.setNextException((SQLException) null);
      SQLWarning sQLWarning0 = new SQLWarning("rDnh_?", "z,'=2K_@d;", sQLSyntaxErrorException0);
      // Undeclared exception!
      TypeUtils.cast((Object) sQLWarning0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      TypeUtils.isProxy(class1);
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("qCe@}[K6[v-2g");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable: qCe@}[K6[v-2g
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.getGenericParamType(class0);
      parserConfig0.getDeserializer((Type) null);
      TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale.forLanguageTag("port is not int");
      Locale locale0 = Locale.PRC;
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("port is not int");
      MockIllegalStateException mockIllegalStateException1 = new MockIllegalStateException("port is not int");
      mockIllegalStateException1.getSuppressed();
      TypeUtils.castToFloat((Object) null);
      Class<Short> class0 = Short.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      assertFalse(boolean0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.lang.AutoCloseable");
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isPath(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("}Kl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : }Kl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      linkedHashMap1.entrySet();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) linkedHashMap1, true, propertyNamingStrategy0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("()Ljava/lang/String;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'j'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "java.awt.Color";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.awt.Color");
      TypeUtils.getClassFromMapping("_asm_deser__");
      TypeUtils.decapitalize("java.lang.StackTraceElement");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("java.lang.StackTraceElement", classLoader0, true);
      AtomicLong atomicLong0 = new AtomicLong(608L);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(atomicLong0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Random.setNextRandom(53);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass("C.kcxl!pWUj,&i");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getRawClass(class0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TypeUtils.castToDate("");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      linkedHashMap1.entrySet();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) linkedHashMap1, false, propertyNamingStrategy0);
      String string0 = "()Ljava/lang/String;";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("()Ljava/lang/String;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'j'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Time> class0 = Time.class;
      FieldInfo fieldInfo0 = new FieldInfo("height", class0, class0, class0, (Field) null, (-3440), 1459, (-1442262416));
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      Map<String, String> map0 = null;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy1);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("createCollection");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(treeMap0);
      hashtable0.elements();
      TreeMap<MapDeserializer, EnumDeserializer> treeMap1 = new TreeMap<MapDeserializer, EnumDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "q7Yy(?dU+aygOOcN@", fieldArray0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.isGenericParamType(class0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(illegalAccessError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalAccessError: fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      TypeUtils.decapitalize("");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate("");
      TypeUtils.getKoltinConstructorParameters(class2);
      Long long1 = new Long((-3750763034362895579L));
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(genericArrayType0).toString();
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Byte> class0 = Byte.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getCollectionItemType(class0);
      String string0 = "ne";
      TypeUtils.fnv1a_64_lower("ne");
      Class<NullPointerException> class1 = NullPointerException.class;
      Class<HttpCookie> class2 = HttpCookie.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", hashtable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Type type0 = null;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      String string0 = "sJHr";
      TypeUtils.loadClass("sJHr");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[14];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Class<Byte> class0 = Byte.TYPE;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class1.isEnum());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@cf8b5d49
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("()Ljava/lang/String;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'j'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getCollectionItemType(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(4);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("@Ws;Ka", (ClassLoader) aSMClassLoader0);
      TreeMap<String, ClientInfoStatus> treeMap0 = new TreeMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("@Ws;Ka", treeMap0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLClientInfoException0);
      mockIllegalStateException0.getCause();
      MockIllegalStateException mockIllegalStateException1 = new MockIllegalStateException("fastjson.parser.autoTypeAccept", mockIllegalStateException0);
      mockIllegalStateException1.getSuppressed();
      Integer integer0 = new Integer(90);
      TypeUtils.castToShort(integer0);
      Class<FieldInfo> class1 = FieldInfo.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.fnv1a_64("@Ws;Ka");
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class2, weakHashMap0, false, propertyNamingStrategy0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("getCurrencySymbol", hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[2]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      java.util.IdentityHashMap<SQLException, SQLSyntaxErrorException> identityHashMap0 = new java.util.IdentityHashMap<SQLException, SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum java.sql.ClientInfoStatus error, value : {}
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.getSerializeFeatures(class0);
      String string0 = "parse error";
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("parse error", identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "SortFeidFastMatch";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SortFeidFastMatch");
      TypeUtils.fnv1a_64("j");
      Class<Boolean> class0 = Boolean.class;
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.isPath(class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "SortFeidFastMatch", fieldArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3293.46523);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3035.32019694288;
      doubleArray0[4] = (-5378.3);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      linkedHashMap0.entrySet();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.getParserFeatures(class0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("%H>0P");
      mockIllegalStateException0.getCause();
      mockIllegalStateException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("%H>0P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%H>0P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      treeMap0.put("EKv'ZxgjRfV(/7y", "Ljava.awt.Rectangle");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      treeMap0.merge("EKv'ZxgjRfV(/7y", "Ljava.awt.Font", biFunction0);
      TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToChar("");
      TypeUtils.getCollectionItemType(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig1 = new ParserConfig();
      Byte byte0 = new Byte((byte)125);
      TypeUtils.castToSqlTime(byte0);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      boolean boolean0 = TypeUtils.isHibernateInitialized(timeDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TypeUtils.isNumber("");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJHr");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "^?";
      ClassLoader classLoader0 = null;
      TypeUtils.loadClass("^?", (ClassLoader) null);
      TypeUtils.castToChar((Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^?");
      boolean boolean0 = true;
      parserConfig0.compatibleWithJavaBean = true;
      parserConfig0.clearDeserializers();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "^?", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<Object> class1 = Object.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("K\"-e8", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("doubleValue", class1, class1, class0, (Field) null, 91, 91, (-2385));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      TypeUtils.unwrapOptional(class2);
      TypeUtils.fnv1a_64("com.alibaba.fastjson.util.ASMUtils");
      Class<JSONPDeserializer> class3 = JSONPDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "1";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      Field[] fieldArray0 = new Field[3];
      String string1 = "K<2E\\fm";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "K<2E\fm", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(11);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>(11);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap1, propertyNamingStrategy0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("V{$", "isshortValue", 11, negativeArraySizeException0);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        Timestamp.valueOf("V{$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("port is not int");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.PRC;
      locale0.getDisplayCountry(locale1);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : port is not int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "org.springframework.security.web.savedrequest.DefaultSavedRequest", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.springframework.security.web.savedrequest.DefaultSavedRequest\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TypeUtils.decapitalize("getMetaClass");
      TypeUtils.loadClass("}Kl");
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.castToSqlDate((Object) null);
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      TypeUtils.loadClass("getMetaClass");
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.castToDate((Object) null);
      Short short0 = new Short((short)32753);
      assertEquals((short)32753, (short)short0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[0]);
      ClassLoader.getSystemClassLoader();
      JSONObject jSONObject0 = new JSONObject();
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '';
      charArray0[2] = 't';
      charArray0[3] = 'G';
      charArray0[4] = '\'';
      charArray0[5] = '1';
      charArray0[6] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3089, 3089);
      jSONReaderScanner0.scanUUID('\'');
      TypeUtils.castToBoolean((Object) null);
      String string0 = TypeUtils.decapitalize("j");
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("port is not int");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.PRC;
      locale0.getDisplayCountry(locale1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Point> class0 = Point.class;
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap1, propertyNamingStrategy0);
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy1, true);
      Locale locale2 = TypeUtils.toLocale("");
      assertFalse(locale2.equals((Object)locale0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "getObjectWriter";
      identityHashMap0.put("getObjectWriter", "getObjectWriter");
      identityHashMap0.put((String) null, "getObjectWriter");
      short short0 = (short)1582;
      Short.toUnsignedInt((short)1582);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<RuleBasedCollator, SQLTransientException> treeMap0 = new TreeMap<RuleBasedCollator, SQLTransientException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      linkedHashMap0.put(";?9nhz@17m", "minutes");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeMap0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.text.RuleBasedCollator(java.lang.String) throws java.text.ParseException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertEquals("class [D", class1.toString());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      treeMap0.put("", "");
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.getKoltinConstructorParameters(class0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("", classLoader0);
      long long0 = TypeUtils.fnv1a_64_lower("F KW,G5");
      assertEquals((-612391218061284701L), long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      Class<Dimension> class0 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("java.time.OffsetDateTime", "}Kl.000000000", (-157), negativeArraySizeException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Map<String, String> map0 = null;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("1oegK/\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.getSerializeFeatures(class0);
      Method method0 = null;
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      String string0 = null;
      Field[] fieldArray0 = new Field[3];
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("_", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Short> class0 = Short.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Time> class0 = Time.class;
      TypeUtils.isKotlin(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean0 = true;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      Class<JSONObject> class1 = JSONObject.class;
      TypeUtils.getParserFeatures(class1);
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      TypeUtils.getSerializeFeatures(class2);
      Class<String> class3 = String.class;
      TypeUtils.isKotlin(class3);
      String string0 = "org.springframework.security.web.authentication.WebAuthenticationDetails";
      TypeUtils.loadClass("org.springframework.security.web.authentication.WebAuthenticationDetails");
      Class<InterruptedException> class4 = InterruptedException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(linkedHashMap0);
      TypeUtils.computeGetters((Class<?>) class4, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class1);
      String string1 = "f@toy&w\\ff[Y.a";
      TypeUtils.getClassFromMapping("f@toy&w\ff[Y.a");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.getParserFeatures(class0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("%H>0P");
      Class<TimeUnit> class1 = TimeUnit.class;
      Map<String, Field> map0 = null;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class2, (JSONType) null, (Map<String, String>) linkedHashMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, type0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig(false);
      Class<SQLException> class0 = SQLException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig1);
      GenericArrayType genericArrayType2 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.decapitalize("j");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy1, true);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("buildMethod not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : buildMethod not found.
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<Boolean> class1 = Boolean.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L");
      TypeUtils.fnv1a_64("has");
      Class<Boolean> class2 = Boolean.class;
      Class<SimpleTimeZone> class3 = SimpleTimeZone.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class3;
      typeArray0[3] = (Type) class3;
      typeArray0[4] = (Type) class1;
      Class<Boolean> class4 = Boolean.TYPE;
      typeArray0[5] = (Type) class4;
      typeArray0[6] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      IllegalStateException illegalStateException0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(illegalStateException0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      String string0 = "Ljava.awt.Rectangle";
      Method method0 = null;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Cjd0pPl4:mc>iwoa|%", hashtable0);
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      int int0 = 24;
      int int1 = 148;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Point point0 = new Point(88, 88);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=88,y=88]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", type0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Random.setNextRandom(53);
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ishashCode", (String) null, 53, concurrentHashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ishashCode", (String) null, 2924, sQLClientInfoException0);
      Object object0 = null;
      TypeUtils.castToString((Object) null);
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap0 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "ishashCode");
      MockThread mockThread2 = new MockThread(mockThread0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread1);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      mockIllegalStateException0.getSuppressed();
      Float float0 = new Float(592.9886F);
      TypeUtils.castToShort(float0);
      Class<Character> class1 = Character.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", (Type) class1, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.castToTimestamp("");
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      String string0 = "Ljava.awt.Rectangle";
      Method method0 = null;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Cjd0pPl4:mc>iwoa|%", hashtable0);
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      int int0 = 24;
      int int1 = 4;
      int int2 = 148;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isNumber("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.isNumber("@#>ADLkME");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("@#>ADLkME", (String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<PageAttributes> class0 = PageAttributes.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      try { 
        aSMClassLoader0.loadClass("wait");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TypeUtils.isNumber("1");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Short> class0 = Short.class;
      String string0 = "DisUu2E4%$\"8+";
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "can not cast to : ", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.fnv1a_64("WriteEnumUsingName");
      Class<Boolean> class1 = Boolean.class;
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class1;
      Class<?> class3 = TypeUtils.loadClass("[D");
      assertFalse(class3.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      TypeUtils.getCollectionItemClass((Type) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, map0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      treeMap1.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      TreeMap<String, String> treeMap2 = new TreeMap<String, String>();
      treeMap2.put("isEmpty", "3jv:");
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.getKoltinConstructorParameters(class0);
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      mockThread0.getContextClassLoader();
      TypeUtils.loadClass("com.alibaba.fastjson.PropertyNamingStrategy$1", classLoader0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockDateFormat@1d50da42
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      treeMap0.put("", "");
      TypeUtils.getKoltinConstructorParameters(class0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) genericArrayType0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) genericArrayType0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) genericArrayType0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      TypeUtils.cast((Object) classLoader1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TypeUtils.isNumber("");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getCollectionItemType(type0);
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      ThrowableDeserializer throwableDeserializer1 = new ThrowableDeserializer(parserConfig0, class1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Timestamp timestamp0 = TypeUtils.castToTimestamp(bigInteger0);
      assertEquals(10000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getEndInclusive");
      Class<Byte> class0 = Byte.TYPE;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      String string0 = TypeUtils.decapitalize("getEndInclusive");
      assertEquals("getEndInclusive", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z\u0007lkw");
      TypeUtils.isNumber("thz/.={F");
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("thz/.={F", classLoader0, false);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("L", "L");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      System.setCurrentTimeMillis((-402L));
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      GenericArrayType genericArrayType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      treeMap0.put("EKv'ZxgjRfV(/7y", "Ljava.awt.Rectangle");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("Ljava.util.concurrent.ConcurrentSkipListMap").when(biFunction0).apply(any() , any());
      treeMap0.merge("EKv'ZxgjRfV(/7y", "Ljava.awt.Font", biFunction0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {EKv'ZxgjRfV(/7y=Ljava.util.concurrent.ConcurrentSkipListMap}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TypeUtils.isNumber("1");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("1", "_;LE");
      JSONObject jSONObject0 = new JSONObject(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Integer integer0 = new Integer(3089);
      Class<StackTraceElement> class0 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Declaring class is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      hashtable0.elements();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(noSuchFieldException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchFieldException: com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getClass((Type) class1);
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("@:Ex\"_$-|Z~oxOp");
      Class<Double> class0 = Double.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(4);
      weakHashMap0.put("@:Ex\"_$-|Z~oxOp", "@:Ex\"_$-|Z~oxOp");
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.getGenericParamType(class0);
      parserConfig0.getDeserializer((Type) null);
      TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      MockDate mockDate0 = new MockDate((-3750763034362895579L));
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      ConcurrentHashMap<String, Object> concurrentHashMap1 = new ConcurrentHashMap<String, Object>();
      Class<SQLException> class1 = SQLException.class;
      SQLException sQLException0 = TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap1, class1, parserConfig0);
      assertNull(sQLException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("port is not int");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.PRC;
      locale0.getDisplayCountry(locale1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale_Category0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      MockDate mockDate0 = new MockDate((-915), (-417), 43, (-768), 40);
      MockDate mockDate1 = new MockDate();
      // Undeclared exception!
      try { 
        MockDate.parse("com.alibaba.fastjson.serializer.SerializeConfig");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "rDnh_?", type1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("getgetDeclaringClass");
      assertEquals((-7974760551354871574L), long0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("getgetDeclaringClass");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<Boolean> class1 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType1).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig(true);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      Class<ClassLoader> class2 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) treeMap0, true, (PropertyNamingStrategy) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<Float> class0 = Float.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1");
      Class<Boolean> class0 = Boolean.TYPE;
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      Class<Timestamp> class2 = Timestamp.class;
      TypeUtils.isPath(class2);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class0;
      Class<Double> class3 = Double.TYPE;
      typeArray0[5] = (Type) class3;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class2;
      typeArray0[8] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[7]);
      ClassLoader.getSystemClassLoader();
      boolean boolean1 = TypeUtils.isGenericParamType(class3);
      assertFalse(boolean1 == boolean0);
      
      Class<StackOverflowError> class4 = StackOverflowError.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class4, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("3hk");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("3hk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("qCe@}[K6[v-2g");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable: qCe@}[K6[v-2g
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      String string0 = ")w";
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(")w");
      mockIllegalStateException0.getSuppressed();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<ClassLoader> class0 = ClassLoader.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("@:Ex\"_$-|Z~oxOp");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Time> class1 = Time.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("");
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(treeMap0);
      hashtable0.elements();
      TreeMap<MapDeserializer, EnumDeserializer> treeMap1 = new TreeMap<MapDeserializer, EnumDeserializer>();
      Date date0 = new Date((-6331104466165347776L));
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "MY7#(*lNZ5:-";
      TypeUtils.loadClass("MY7#(*lNZ5:-", (ClassLoader) null, true);
      VerifyError verifyError0 = new VerifyError();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, null, public com.alibaba.fastjson.parser.deserializer.EnumDeserializer(java.lang.Class<?>)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      Class<Float> class1 = Float.class;
      TypeUtils.getSerializeFeatures(class1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      treeMap0.put("EKv'ZxgjRfV(/7y", "Ljava.awt.Rectangle");
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig.getGlobalInstance();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("fastjson.parser.autoTypeAccept", "@SW");
      Function<String, String> function0 = Function.identity();
      concurrentHashMap0.computeIfAbsent("fastjson.parser.autoTypeAccept", function0);
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      Double double0 = new Double(0.0);
      Double.max(1094.3021, 0.0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SortFeidFastMatch");
      long long0 = TypeUtils.fnv1a_64("j");
      assertEquals((-5808544778525999299L), long0);
      
      Class<Boolean> class0 = Boolean.class;
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.isPath(class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader.getSystemClassLoader();
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<Double> class0 = Double.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", (Type) class2, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("[char").when(genericArrayType1).toString();
      doReturn(class2).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertEquals("class [I", class2.toString());
      
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.awt.Rectangle");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("kotlin.Metadata");
      TypeUtils.isHibernateInitialized("kotlin.Metadata");
      mockIllegalStateException0.getCause();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      Class<Byte> class1 = Byte.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sqlDateDeserializer0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TypeUtils.isNumber("1");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("1", "Xy5;Ll");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      String string0 = "java.time.OffsetDateTime";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("java.time.OffsetDateTime", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BigInteger bigInteger0 = BigInteger.TEN;
      TypeUtils.clearClassMapping();
      Long long0 = new Long((-1L));
      TypeUtils.castToLong(long0);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<JSONObject> class0 = JSONObject.class;
      String string0 = ";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;";
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", class0, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. ;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Double double0 = new Double(0.0);
      Double.max(1094.3021, 0.0);
      Boolean boolean0 = TypeUtils.castToBoolean(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getObjectWriter", "getObjectWriter");
      identityHashMap0.put((String) null, "PESc,5KHNu0");
      TypeUtils.decapitalize((String) null);
      Class<Point> class1 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy1, true);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("}Kl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : }Kl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Class<InternalError> class1 = InternalError.class;
      FieldInfo fieldInfo0 = new FieldInfo("(S)Ljava/lang/Short;", class1, class1, class0, (Field) null, 1367, (-4481), (-1414));
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      BeanContext beanContext0 = new BeanContext(fieldInfo0.fieldClass, fieldInfo0);
      beanContext0.getField();
      FieldInfo fieldInfo1 = new FieldInfo("@>\nL74:iT-RD9d", fieldInfo0.declaringClass, class2, fieldInfo0.fieldType, (Field) null, (-1414), (-1414), 1367);
      fieldInfo0.compareTo(fieldInfo1);
      Class<Properties> class3 = Properties.class;
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, false, propertyNamingStrategy0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("(S)Ljava/lang/Short;");
      TreeMap<String, Field> treeMap2 = new TreeMap<String, Field>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(weakHashMap0);
      Enumeration<Field> enumeration0 = hashtable0.elements();
      TreeMap<MapDeserializer, EnumDeserializer> treeMap3 = new TreeMap<MapDeserializer, EnumDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(enumeration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.Collections$EmptyEnumeration@77c646db
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("fastjson.parser.deny");
      MockThread mockThread1 = new MockThread();
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "fastjson.parser.autoTypeSupport");
      MockThread mockThread3 = new MockThread(mockThread1);
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      weakHashMap0.replace("}Kl", "}Kl");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      String string0 = "U5";
      TypeUtils.loadClass("U5");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("rDnh_?", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      TypeUtils.castToString(breakIterator0);
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap1, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.text.RuleBasedCollator(java.lang.String) throws java.text.ParseException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      TypeUtils.clearClassMapping();
      String string0 = null;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : MILLISECONDS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      TypeUtils.isNumber("Ljava.util.concurrent.ConcurrentSkipListMap");
      Class<SQLDataException> class0 = SQLDataException.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      serializeWriter0.flush();
      jSONSerializer0.getObjectWriter(class1);
      simplePropertyPreFilter0.apply(jSONSerializer0, "Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap");
      simplePropertyPreFilter0.setMaxLevel((-1996));
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        serializeWriter0.write("Ljava.util.concurrent.ConcurrentSkipListMap", 578, 578);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<PageAttributes> class0 = PageAttributes.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) identityHashMap0, (PropertyNamingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      LinkedHashSet<NumberFormatException> linkedHashSet0 = new LinkedHashSet<NumberFormatException>();
      String string0 = "LMY7#(*lNZ5:-";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("LMY7#(*lNZ5:-", classLoader0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.lastEntry();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("|dxzI1h<", "|dxzI1h<");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      treeMap0.put("origin", "'_5hVOO");
      TypeUtils.decapitalize("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(6, list0.size());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      String string0 = TypeUtils.decapitalize("AcS0^%XMqw1XE-}H|*V");
      assertEquals("acS0^%XMqw1XE-}H|*V", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.loadClass("MY7#(*lNZ5:-", (ClassLoader) null, true);
      VerifyError verifyError0 = new VerifyError();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      Class<Character> class0 = Character.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TypeUtils.fnv1a_64("getDeserializer");
      Class<Boolean> class0 = Boolean.class;
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.isPath(class1);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeZone0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Class<Float> class0 = Float.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("}Kl.000000000", "U`2aZ$", (-661), negativeArraySizeException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLRecoverableException: }Kl.000000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getCollectionItemType(type0);
      TypeUtils.getCollectionItemType((Type) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Dimension> class1 = Dimension.class;
      TypeUtils.getSerializeFeatures(class1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("sog9Z1").when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = Locale.JAPANESE;
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny", locale0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = type1;
      typeArray0[1] = null;
      typeArray0[2] = null;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type1;
      typeArray0[6] = (Type) genericArrayType0;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      TypeUtils.getSerializeFeatures(class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      TypeUtils.getCollectionItemType(class0);
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.getParserFeatures(class0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale> vector0 = new Vector<Locale>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(vector0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      locale0.getDisplayCountry(locale1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      TypeUtils.cast((Object) null, class1, parserConfig0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.getGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.getDeserializer((Type) null);
      Float float0 = new Float(1.0);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "1";
      TypeUtils.isNumber("1");
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusNanos(instant0, 0L);
      Timestamp timestamp0 = Timestamp.from(instant1);
      TypeUtils.castToTimestamp(timestamp0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      // Undeclared exception!
      try { 
        hijrahDate0.with((TemporalField) chronoField0, (-2431L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MicroOfDay (valid values 0 - 86399999999): -2431
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("charAt", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1", class1, class1, class0, (Field) null, 3419, (-4936), (-4936));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.DateFormatSymbols@17f3ada4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getObjectWriter", "getObjectWriter");
      identityHashMap0.put((String) null, "PESc,5KHNu0");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isKotlin(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      boolean boolean0 = true;
      ParserConfig.getFieldFromCache("equals", identityHashMap1);
      identityHashMap1.put("equals", (Field) null);
      identityHashMap0.values();
      ParserConfig.getFieldFromCache("getObjectWriter", identityHashMap1);
      BiFunction<Field, Object, Field> biFunction0 = (BiFunction<Field, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        identityHashMap1.merge("PESc,5KHNu0", (Field) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("rDnh_?", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      BreakIterator.getLineInstance();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      weakHashMap2.put("rDnh_?", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      TypeUtils.castToSqlTime((Object) null);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getCollectionItemType(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MessageFormat> class1 = MessageFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      Class<Double> class2 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalArgumentException0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TypeUtils.isNumber("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getfloatValue");
      TypeUtils.fnv1a_64("java.awt.Color");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<Collator> class1 = Collator.class;
      TypeUtils.isPath(class1);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("", classLoader1, false);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory3);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@54479b33
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      treeMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeMap0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.text.StringCharacterIterator(java.lang.String,int,int,int)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      FieldInfo fieldInfo0 = new FieldInfo("e|:9])n", class0, class0, class0, (Field) null, (-3440), (-3440), 1459);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters(fieldInfo0.declaringClass, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("clo");
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(treeMap1);
      hashtable0.elements();
      TreeMap<MapDeserializer, EnumDeserializer> treeMap2 = new TreeMap<MapDeserializer, EnumDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      hashMap1.put("4", "r%f;d");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap1);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.decapitalize("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      ParserConfig parserConfig0 = new ParserConfig();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("fastjson.parser.deny", classLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Double double0 = new Double((-1.0));
      Double.max(0.0, (-1.0));
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap1, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.text.RuleBasedCollator(java.lang.String) throws java.text.ParseException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("is", (ClassLoader) aSMClassLoader0, true);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("a.2xO9AT>]gLgD").when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      StringCharacterIterator stringCharacterIterator0 = TypeUtils.cast((Object) null, type0, parserConfig0);
      assertNull(stringCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[DY", "Zkh");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTimeoutException: [DY
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      Class<Float> class1 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@98
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader.getSystemClassLoader();
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TypeUtils.loadClass("^?", (ClassLoader) null);
      TypeUtils.castToChar((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("rDnh_?", "rDnh_?");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[2];
      typeArray0[1] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJHr");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TypeUtils.isNumber("1");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("1", "5;Ll");
      JSONObject jSONObject0 = new JSONObject(true);
      Class<NullPointerException> class0 = NullPointerException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.getDeserializer((Type) class0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      long long0 = new Integer(3089);
      Class<StackTraceElement> class1 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONObject0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Declaring class is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToTimestamp("");
      TreeMap<RuleBasedCollator, SQLTransientException> treeMap0 = new TreeMap<RuleBasedCollator, SQLTransientException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BreakIterator.getLineInstance();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap0 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("bSl~rq", classLoader0);
      String string0 = "getClass";
      TypeUtils.fnv1a_64_lower("-^4yB0");
      Month month0 = Month.MAY;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(22, month0, 2147483645, 2223, (-1911063896));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 2147483645
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("rDnh_?", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      Point point0 = new Point(9, 162);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TypeUtils.fnv1a_64("SupportAutoType");
      Class<Boolean> class0 = Boolean.class;
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      typeArray0[6] = (Type) class2;
      typeArray0[7] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[1]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("wait");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.isProxy(class0);
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      TypeUtils.isHibernateInitialized((Object) null);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass("P\r2$SjTsblf`", (ClassLoader) aSMClassLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class0 = Long.TYPE;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      treeMap0.put("", "");
      TypeUtils.castToSqlDate((Object) null);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Class<?> class1 = TypeUtils.getClass((Type) genericArrayType0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BreakIterator.getWordInstance();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap0 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "([C)D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getCollectionItemClass(class0);
      SecurityException securityException0 = new SecurityException("*.?K7D!+3 I'");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("-qu9/YBSSXR/i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -qu9/YBSSXR/i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass(", json : ", classLoader0, true);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getCollectionItemType(type0);
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      Integer integer0 = new Integer(46);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+]=oF+D=fiPjs", parserConfig0);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      javaObjectDeserializer0.deserialze(defaultJSONParser0, (Type) null, (Object) parserConfig0);
      TypeUtils.castToLong((Object) null);
      TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      TypeUtils.isProxy(class1);
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      ClassLoader.getSystemClassLoader();
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      assertEquals((-6778137929377988980L), long1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.castToChar("");
      TypeUtils.getCollectionItemType(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      TypeUtils.getSerializeFeatures(class1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = Locale.JAPANESE;
      MessageFormat messageFormat0 = null;
      try {
        messageFormat0 = new MessageFormat((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.decapitalize("");
      TypeUtils.getCollectionItemClass(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals("double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.decapitalize("");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate("");
      TypeUtils.getKoltinConstructorParameters(class1);
      Long long0 = new Long((-3750763034362895579L));
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Long long1 = TypeUtils.castToLong("");
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.time.OffsetDateTime", class0, (-157));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.time.OffsetDateTime -> com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TypeUtils.castToBytes("fpsUN</mswEFPs_`S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fpsUN</mswEFPs_`S");
      MockDate mockDate0 = new MockDate();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Date> class0 = Date.class;
      parserConfig0.checkAutoType("Ljava.lang.AutoCloseable", class0, (-157));
      TypeUtils.getGenericParamType((Type) null);
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Instant instant1 = MockInstant.minusNanos(instant0, 0L);
      MockInstant.minusMillis(instant1, 61L);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27);
      Locale locale0 = jSONReaderScanner0.getLocale();
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeAccept", locale0);
      Short short0 = new Short((short)1024);
      TypeUtils.castToTimestamp(short0);
      String string0 = TypeUtils.decapitalize("fastjson.parser.deny");
      assertEquals("fastjson.parser.deny", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny", (Locale) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.text.MessageFormat@ac7cded1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TypeUtils.isNumber("4nH[:K!%`");
      Class<Character> class0 = Character.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "4nH[:K!%`", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 4nH[:K!%`
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getGenericParamType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(";VepL\"+eR;-uZ.").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("-qu9/YBSSXR/i", "([C)D");
      BreakIterator.getLineInstance();
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.awt.Color", "iV8s", (-1454622254), concurrentHashMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = Locale.JAPANESE;
      MessageFormat messageFormat0 = new MessageFormat("principal", locale0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("iV8s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : iV8s
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.NoSuchMethodError -> com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      TypeUtils.decapitalize("Y");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = TypeUtils.decapitalize("dou");
      assertEquals("dou", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      VerifyError verifyError0 = new VerifyError("hashCode");
      VerifyError verifyError1 = new VerifyError("InternationalCurrencySymbol");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("InternationalCurrencySymbol");
      Short short0 = new Short((short)1406);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      TypeUtils.castToShort((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<Boolean> class0 = Boolean.TYPE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("1");
      mockIllegalStateException0.getCause();
      Instant instant0 = MockInstant.ofEpochSecond(1159L);
      MockInstant.minusNanos(instant0, 1159L);
      TypeUtils.getSerializeFeatures(class0);
      Class<TimeUnit> class1 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(stackTraceElementDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, type0, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("getMetaClass").when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(type0);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      String string0 = "Nz:5B";
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Nz:5B", (DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "rDnh_?");
      ParserConfig parserConfig0 = new ParserConfig();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("fastjson.parser.deny", classLoader0, true);
      StringCharacterIterator stringCharacterIterator0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(stringCharacterIterator0);
      
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.time.OffsetDateTime", class0, (-157));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.time.OffsetDateTime -> com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "rDnh_?";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      VerifyError verifyError0 = new VerifyError("hashCode");
      String string1 = "InternationalCurrencySymbol";
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("hashCode");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hashCode\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      TypeUtils.loadClass("rDnh_?");
      MockDate mockDate0 = new MockDate();
      Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToLong((Object) null);
      String string0 = "java.time.OffsetDateTime";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      int int0 = (-157);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, true);
      String string1 = "java.time.ZoneRegion";
      Class<Double> class1 = Double.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, false);
      treeMap0.put("com.alibaba.fastjson.serializer.SerializeWriter", "getName");
      TypeUtils.getCollectionItemClass(type0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("rDnh_?", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      TypeUtils.castToString(breakIterator0);
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<HttpCookie> class0 = HttpCookie.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.net.HttpCookie(java.lang.String,java.lang.String)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      TypeUtils.loadClass("^?", (ClassLoader) null);
      TypeUtils.castToChar((Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig1 = new ParserConfig();
      Class<InternalError> class0 = InternalError.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<Boolean> class1 = Boolean.TYPE;
      Class<Double> class2 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      String string0 = TypeUtils.decapitalize("[F");
      assertEquals("[F", string0);
      
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate((Object) null);
      Class<JavaObjectDeserializer> class3 = JavaObjectDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class3);
      long long0 = TypeUtils.fnv1a_64_lower("'D\">x8Ie0Rd{q{");
      assertEquals(1508406721257519795L, long0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isNumber("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.isProxy(class0);
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.class;
      TypeUtils.decapitalize(" P t@");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(">.ozzO/L{3!A");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">.ozzO/L{3!A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("1");
      mockIllegalStateException0.getCause();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("1", "tp_x:9@s(IbP%9~Z=&V", 97, mockIllegalStateException0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalStateException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.util.ParameterizedTypeImpl cannot be cast to java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.ObjectArrayCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Float float0 = new Float((-1636.13527));
      Float.sum((-2785.2F), 0.75F);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1636.1353
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      MockUUID.randomUUID();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Point point0 = new Point(26, 9);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "java.awt.Rectangle";
      TypeUtils.fnv1a_64_lower("java.awt.Rectangle");
      HashMap<String, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Object>((-961), (-961));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -961
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      TypeUtils.decapitalize((String) null);
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sJH>");
      Class<Properties> class1 = Properties.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      Class<?> class2 = TypeUtils.loadClass("java.util.Optional");
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      String string0 = "EKv'ZxgjRfV(/7\\y";
      TypeUtils.decapitalize("EKv'ZxgjRfV(/7y");
      treeMap0.put("EKv'ZxgjRfV(/7y", "EKv'ZxgjRfV(/7y");
      treeMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      // Undeclared exception!
      try { 
        treeMap0.put((String) null, "Ljava.awt.Rectangle");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      TypeUtils.toLocale("port is not int");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      TypeUtils.isNumber("");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TypeUtils.castToSqlDate(mockGregorianCalendar0);
      TypeUtils.getKoltinConstructorParameters(class1);
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap0 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      InstantiationError instantiationError0 = new InstantiationError("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("@:Ex\"_$-|Z~oxOp");
      Class<Double> class0 = Double.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(4);
      TypeUtils.unwrapOptional(class0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      LinkedHashSet<NumberFormatException> linkedHashSet0 = new LinkedHashSet<NumberFormatException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("w", "w");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.getParserFeatures(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("fastjson.parser.autoTypeSupport", (Throwable) null);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class0);
      InternalError internalError0 = new InternalError(mockIllegalArgumentException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) internalError0, (Type) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect string
         //
         verifyException("com.alibaba.fastjson.serializer.MiscCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      StringCharacterIterator stringCharacterIterator0 = TypeUtils.cast((Object) null, type0, parserConfig0);
      assertNull(stringCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      TypeUtils.isNumber("");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.decapitalize("fastjson.parser.autoTypeAccept");
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TypeUtils.castToSqlDate(mockGregorianCalendar0);
      TypeUtils.getKoltinConstructorParameters(class1);
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap0 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      InstantiationError instantiationError0 = new InstantiationError("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      TypeUtils.castToDouble((Object) null);
      LinkedHashSet<NumberFormatException> linkedHashSet0 = new LinkedHashSet<NumberFormatException>();
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      Class<?> class0 = TypeUtils.getClassFromMapping("fastjson.parser.deny");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Double double0 = new Double(0.0);
      Double.max(1094.3021, 0.0);
      Boolean boolean0 = TypeUtils.castToBoolean(double0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Class<Float> class0 = Float.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("}Kl.000000000");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}Kl.000000000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      Class<Long> class1 = Long.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("ae\"\"X$49y)", "E--au2Rk%xmxT");
      Byte byte0 = new Byte((byte)96);
      TypeUtils.castToSqlDate(byte0);
      TypeUtils.getKoltinConstructorParameters(class1);
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = null;
      try {
        mockThread0 = new MockThread(threadGroup0, thread0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      LinkedHashMap<StackTraceElementDeserializer, VerifyError> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, VerifyError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      PageAttributes pageAttributes0 = new PageAttributes();
      TypeUtils.getCollectionItemType(class0);
      Vector<Object> vector0 = TypeUtils.cast((Object) linkedHashMap0, (Type) class0, parserConfig0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassLoader.getSystemClassLoader();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      Class<Short> class1 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", (Type) class1, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getSerializeFeatures(class1);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "", (-4183L));
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "MUw#kISifGu$ ^kq9");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      Class<MockSimpleDateFormat> class3 = MockSimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class3);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NE=wJANe");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.util.concurrent.ConcurrentSkipListSet");
      noSuchMethodError0.fillInStackTrace();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.printStackTrace();
      TypeUtils.castToString(noSuchMethodError0);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      TypeUtils.isGenericParamType(class0);
      Random.setNextRandom(48);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getRawClass(class1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      InternalError internalError0 = new InternalError((Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", (Type) class1, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getSerializeFeatures(class1);
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.castToSqlTime("");
      ParserConfig parserConfig1 = ParserConfig.global;
      //  // Unstable assertion: assertTrue(parserConfig1.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("applyLabel");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.PRC;
      locale1.getDisplayScript();
      locale1.hasExtensions();
      locale0.getDisplayCountry(locale1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      Class<Object> class1 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap1, propertyNamingStrategy1, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(serializeBeanInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", type0, parserConfig0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertFalse(type1.equals((Object)type0));
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SortFeidFastMatch");
      TypeUtils.fnv1a_64("j");
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.compatibleWithJavaBean = true;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "j", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("Swkc:", "double");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "1";
      TypeUtils.isNumber("1");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@98
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("org.springframework.security.web.savedrequest.DefaultSavedRequest").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@a3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Random.setNextRandom(53);
      TypeUtils.loadClass("L)+&L8c_n\"Uc`+");
      TypeUtils.getKoltinConstructorParameters((Class) null);
      Class<RenderingHints> class0 = RenderingHints.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.clear();
      Class<Long> class1 = Long.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      TypeUtils.decapitalize("");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlDate("");
      TypeUtils.getKoltinConstructorParameters(class2);
      Long long0 = new Long((-3750763034362895579L));
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Long long1 = TypeUtils.castToLong("");
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Random.setNextRandom(53);
      Class<BitSet> class0 = BitSet.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      Class<Throwable> class2 = Throwable.class;
      Class<Collator> class3 = Collator.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("*VN+", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("*VN+", class2, class3, type0, (Field) null, 2620, 53, 2620);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      Class<?> class4 = TypeUtils.getRawClass(class1);
      assertEquals(1, class4.getModifiers());
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      TypeUtils.isNumber("1");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getCollectionItemType(type0);
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "1", type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", (Type) class1, parserConfig0);
      assertEquals("class [D", class1.toString());
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType1).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertSame(class2, class1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      parserConfig0.setAsmEnable(false);
      parserConfig0.getDeserializer((Type) null);
      Class<Timestamp> class1 = Timestamp.class;
      TypeUtils.castToEnum((Object) "", class1, parserConfig0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      MockDate mockDate0 = new MockDate();
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Class<Annotation> class0 = Annotation.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = null;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      String string0 = "sN(7h/\"1";
      String string1 = "VZy|Zak2\"(lGJP>|]T";
      Class<AtomicLong> class1 = AtomicLong.class;
      Field[] fieldArray0 = new Field[4];
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("sN(7h/\"1", weakHashMap0);
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Class<InternalError> class1 = InternalError.class;
      FieldInfo fieldInfo0 = new FieldInfo("(S)Ljava/lang/Short;", class1, class1, class0, (Field) null, 1367, (-4481), (-1414));
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      BeanContext beanContext0 = new BeanContext(fieldInfo0.fieldClass, fieldInfo0);
      beanContext0.getField();
      FieldInfo fieldInfo1 = new FieldInfo("@>\nL74:iT-RD9d", fieldInfo0.declaringClass, class2, fieldInfo0.fieldType, (Field) null, (-1414), (-1414), 1367);
      fieldInfo0.compareTo(fieldInfo1);
      Class<Properties> class3 = Properties.class;
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      treeMap1.put("", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, false, propertyNamingStrategy0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("(S)Ljava/lang/Short;");
      TreeMap<String, Field> treeMap2 = new TreeMap<String, Field>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(weakHashMap0);
      Enumeration<Field> enumeration0 = hashtable0.elements();
      TreeMap<MapDeserializer, EnumDeserializer> treeMap3 = new TreeMap<MapDeserializer, EnumDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(enumeration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.Collections$EmptyEnumeration@77c646db
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<Object> class1 = Object.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("K\"-e8", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("doubleValue", class1, class1, class0, (Field) null, 91, 91, (-2385));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      TypeUtils.unwrapOptional(class2);
      TypeUtils.fnv1a_64("com.alibaba.fastjson.util.ASMUtils");
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
      String string0 = "o;oxaP?d.|6\"{E";
      FieldInfo fieldInfo1 = null;
      try {
        fieldInfo1 = new FieldInfo("=,\"{y", (Method) null, (Field) null, class3, fieldInfo0.fieldType, 91, 1518, (-1449033511), (JSONField) null, (JSONField) null, "o;oxaP?d.|6\"{E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Long> class0 = Long.class;
      Class<SQLException> class1 = SQLException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) null, true);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("Ljava.lang.AutoCloseable", "javassist.util.proxy.ProxyObject");
      Double double0 = new Double(333.071096386396);
      Date date0 = TypeUtils.castToSqlDate(double0);
      assertNotNull(date0);
      
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Time> class2 = Time.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      TypeUtils.getClass((Type) class1);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "0sd(zA_$g\",<{");
      mockThread0.getContextClassLoader();
      TypeUtils.loadClass("com.google.common.collect.TreeMultimap", (ClassLoader) aSMDeserializerFactory0.classLoader);
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("-qu9/YBSSXR/i", "([C)D");
      BreakIterator.getLineInstance();
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.awt.Color", "iV8s", (-1454622254), concurrentHashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("IWSy N-[Jk6=kz =", "R+45d", (-1454622254), sQLClientInfoException0);
      TypeUtils.castToString(sQLTransientConnectionException0);
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "Hf");
      MockThread mockThread2 = new MockThread(mockThread1);
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2);
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "iV8s", class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("sJH>");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Instant instant0 = MockInstant.now();
      Timestamp.from(instant0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(instant0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 2014-02-14T20:21:21.320Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "exponentSeparator", fieldArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("exponentSeparator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : exponentSeparator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("1");
      mockIllegalStateException0.getCause();
      Instant instant0 = MockInstant.ofEpochSecond(1159L);
      MockInstant.minusNanos(instant0, 1159L);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("J");
      TypeUtils.loadClass("H]UF8t/+lC");
      MockThread mockThread0 = new MockThread("country");
      MockThread mockThread1 = new MockThread(mockThread0, "H]UF8t/+lC");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setClassAssertionStatus("H]UF8t/+lC", true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = "nextException";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nextException");
      TypeUtils.getGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      int int0 = 20;
      TypeUtils.getRawClass(class0);
      Class<TimeUnit> class1 = TimeUnit.class;
      TypeUtils.getSerializeFeatures(class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InterruptedException interruptedException0 = new InterruptedException("e|:9])n");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "|u/Z3!(jI^0n20", (-1L));
      MockThread mockThread1 = new MockThread((ThreadGroup) null, "e|:9])n");
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte) (-78), (-3440));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Field[] fieldArray0 = new Field[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "exponentSeparator", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = "vc3_Mi5";
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Class<Point> class0 = Point.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getGenericParamType(class0);
      SQLDataException sQLDataException0 = new SQLDataException("fEltw{PzruVD");
      StackTraceElement[] stackTraceElementArray0 = sQLDataException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.getSuppressed();
      sQLDataException0.forEach(consumer0);
      sQLDataException0.spliterator();
      sQLDataException0.printStackTrace();
      sQLDataException0.printStackTrace();
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLDataException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLDataException: fEltw{PzruVD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("@CpnBmt6Yt}~G4").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException((String) null);
      MockIllegalStateException mockIllegalStateException1 = new MockIllegalStateException(mockIllegalStateException0);
      mockIllegalStateException1.getSuppressed();
      Class<StringCharacterIterator> class1 = null;
      Type[] typeArray0 = new Type[6];
      Class<Short> class2 = Short.TYPE;
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) null;
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      typeArray0[2] = type0;
      Class<NoSuchMethodException> class3 = NoSuchMethodException.class;
      String string0 = "IjflV*wfJ6";
      Class<NumberFormatException> class4 = NumberFormatException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "IjflV*wfJ6", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      String string0 = "sJHr";
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Type type0 = FieldInfo.getFieldType(class0, class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(")w");
      TypeUtils.isHibernateInitialized(mockIllegalStateException0);
      SQLDataException sQLDataException0 = new SQLDataException("Ljava.awt.Point", "Ljava.awt.Point", 512);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sQLDataException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.sql.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)2);
      TypeUtils.castToDate(short0);
      Short short1 = new Short((short) (-27405));
      assertEquals((short) (-27405), (short)short1);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<IllegalAccessException, SQLTimeoutException> weakHashMap1 = new WeakHashMap<IllegalAccessException, SQLTimeoutException>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("rDnh_?", "rDnh_?");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      TypeUtils.loadClass((String) null);
      Class<?> class1 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertEquals("class java.text.RuleBasedCollator", class1.toString());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      TypeUtils.isNumber("1");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("1", "5;Ll");
      JSONObject jSONObject0 = new JSONObject();
      Class<NullPointerException> class0 = NullPointerException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      NullPointerException nullPointerException0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertEquals("java.lang.NullPointerException", nullPointerException0.toString());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Random.setNextRandom(2607);
      TypeUtils.loadClass("Y");
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("has");
      mockIllegalStateException0.getCause();
      mockIllegalStateException0.getSuppressed();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      negativeArraySizeException0.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(".>N%Mz}u+c9", "X{(4{Z$iGL-)[]+'", 44, negativeArraySizeException0);
      TypeUtils.castToTimestamp((Object) null);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertSame(type0, type1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "`MOm+(mD83FSY\"uC");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ParserConfig parserConfig0 = new ParserConfig();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("fastjson.parser.deny", classLoader0, false);
      StringCharacterIterator stringCharacterIterator0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(stringCharacterIterator0);
  }
}
