/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:54:02 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.execute.DeleteConstantAction;
import org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics;
import org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics;
import org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics;
import org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics;
import org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics;
import org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics;
import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
import org.apache.derby.impl.store.access.heap.HeapController;
import org.apache.derby.impl.store.access.heap.HeapCostController;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainerSupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBConnection;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.Database;
import org.h2.engine.SessionRemote;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLob;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.jdbc.jdbcPreparedStatement;
import org.hsqldb.jdbcDriver;
import org.junit.runner.RunWith;
import org.postgresql.Driver;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.util.PSQLException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("INSERT INTO INFORMATION_SCHEMA.LOBS(ID, BYTE_COUNT, TABLE) VALUES(?, ?, ?)", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: INSERT INTO INFORMATION_SCHEMA.LOBS(ID, BYTE_COUNT, TABLE) VALUES(?, ?, ?)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 connection(s), 1 result set(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      DBSchema dBSchema0 = new DBSchema("One-row database query returned multiple rows: ");
      dBSchema0.getTable("}");
      List<DBTable> list0 = new ColumnDescriptorList();
      dBSchema0.isIdentical((DBObject) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("One-row database query returned multiple rows: ", dBSchema0);
      dBSchema0.setDoc("--Cx#5}Gu$PFz.TI");
      DBUtil.dependencyOrderedTables(dBSchema0);
      FBArray fBArray0 = new FBArray();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)61;
      byteArray0[5] = (byte)5;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)14;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      fBArray0.getResultSet(0L, 803);
      // Undeclared exception!
      try { 
        DBUtil.format((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) proxy0, (String) null, false, (-1933114872), (-1933114872), (-2696));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUtil.assertAllDbResourcesClosed(false);
      String string0 = "Connecting ";
      Class<Driver> class0 = Driver.class;
      SessionRemote sessionRemote0 = new SessionRemote();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("Connecting ", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = ", new char[0]);";
      Connection connection0 = null;
      boolean boolean0 = false;
      ErrorHandler errorHandler0 = new ErrorHandler("Expected exactly one row, found more.");
      Level level0 = Level.warn;
      ErrorHandler.setDefaultLevel(level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript(", new char[0]);", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      StringReader stringReader0 = new StringReader("There are unclosed database resources");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "There are unclosed database resources";
      ResultSet resultSet0 = csv0.read((Reader) stringReader0, stringArray0);
      DBUtil.format(resultSet0);
      String string0 = "w9]%S6?R,p%DU";
      char char0 = '>';
      String string1 = "--J]yUxnYmaulX2%;O'-";
      HeapController heapController0 = new HeapController();
      HeapCostController heapCostController0 = new HeapCostController();
      // Undeclared exception!
      try { 
        heapCostController0.getInternalTablePropertySet((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.access.conglomerate.GenericController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      Connection connection0 = null;
      DBUtil.executeUpdate("", (Connection) null);
      Csv csv0 = Csv.getInstance();
      Reader reader0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      try { 
        csv0.read("", stringArray0, "");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // IOException reading 
         //
         verifyException("org.h2.tools.Csv", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "--S";
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      Level level0 = Level.info;
      ErrorHandler.setDefaultLevel(level0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--S");
      DBUtil.runScript("--S", (Connection) null, false, errorHandler0);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("--S", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      String string0 = "--";
      DBUtil.checkReadOnly("--", false);
      String string1 = "b;Pj#a;.\"g^b+";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Connection connection0 = null;
      boolean boolean0 = false;
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("~#>&", level0);
      Level level1 = Level.trace;
      // Undeclared exception!
      try { 
        errorHandler0.handleError("~#>&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ~#>&
         //
         verifyException("org.databene.commons.ErrorHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      String string1 = "org.apache.derby.iapi.types.DataValueFactory";
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, (String) null, (String) null, (String) null, "org.apache.derby.iapi.types.DataValueFactory", "org.apache.derby.iapi.types.DataValueFactory");
      String string2 = "5D.]`Q-sKA~[`AxrtVY";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5D.]`Q-sKA~[`AxrtVY");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      // Undeclared exception!
      try { 
        DBUtil.runScript("[Olc\"G^r0b4R0 ]", '`', (Connection) jdbcConnection0, true, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 result set(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statement statement0 = null;
      DBUtil.createLoggingStatementHandler((Statement) null, true);
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      tableContainerSupport0.getTable((String) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "S";
      stringArray0[7] = null;
      stringArray0[8] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, (String) null, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<jdbcPreparedStatement> class0 = jdbcPreparedStatement.class;
      Result result0 = Result.newRollbackToSavepointRequest(") or wrong URL format (");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryScalarArray("IM|L~oT)Hj/d", class0, (Connection) jdbcConnection0);
      DBUtil.assertAllDbResourcesClosed(false);
      ResultSet resultSet0 = null;
      GDSType.getType("Error getting statement from result set");
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("--6M$N.dD-NLi\"hCcl", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "S";
      Driver driver0 = new Driver();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("S", formatableProperties0);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("S", 'N', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      DBSchema dBSchema0 = new DBSchema("One-row database query returned multiple rows: ");
      dBSchema0.getTable("}");
      dBSchema0.getTables(false);
      dBSchema0.isIdentical((DBObject) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dBSchema0.getTable("One-row database query returned multiple rows: ");
      dBSchema0.setDoc("--Cx#5}Gu$PFz.TI");
      DBUtil.dependencyOrderedTables(dBSchema0);
      FBArray fBArray0 = new FBArray();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte) (-106);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      fBArray0.getResultSet(0L, 803);
      // Undeclared exception!
      try { 
        DBUtil.format((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("", '=', (Connection) null, true, errorHandler0);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "No JDBC URL specified", (boolean) dBExecutionResult0.changedStructure);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      int int0 = DBUtil.executeUpdate((String) null, (Connection) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      String string0 = "databene";
      Connection connection0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.query("databene", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      DBUtil.existsEnvironment((String) null);
      Random.setNextRandom(7);
      Connection connection0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.close((Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.proxy.PooledConnectionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~3e-dZ>T");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~3e-dZ>T";
      stringArray0[1] = "~3e-dZ>T";
      stringArray0[2] = "~3e-dZ>T";
      stringArray0[3] = "~3e-dZ>T";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string0 = "--S";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--S", false, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, dBPrimaryKeyConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "v&A/#=46ibB", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "#";
      DBUtil.available("", "#", "", "#");
      Connection connection0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<!--\n");
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        DBUtil.runScript("S", "|d(W", (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: S
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1960);
      Properties properties0 = new Properties();
      RealDistinctScanStatistics realDistinctScanStatistics0 = new RealDistinctScanStatistics(1524, 1524, 2458, (-242L), 3380L, (-1475L), (-1050L), (-64), "org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor", "2U 12_@~OR", false, (-176006325), intArray0, "2U 12_@~OR", "--", properties0, "Expected a row.", ".0oz?hu:nlDf{HAtK:", "", ")", 3037.13185, (-1050L));
      FormatableProperties formatableProperties0 = realDistinctScanStatistics0.scanProperties;
      jdbcDriver0.connect("l^", formatableProperties0);
      Level level0 = Level.trace;
      ErrorHandler errorHandler0 = new ErrorHandler("--", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("2U 12_@~OR", "l^", 'A', (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: 2U 12_@~OR
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBUtil.existsEnvironment("'B[u");
      DBUtil.available("[J{;_:2oj\"7O^v-j_", "'B[u", (String) null, (String) null);
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      String string0 = "--Cx#5}Gu$PFz.TI";
      Class<FBCallableStatement> class0 = FBCallableStatement.class;
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("--Cx#5}Gu$PFz.TI", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBUtil.escape("--S");
      Driver driver0 = new Driver();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-1206);
      intArray0[2] = 4;
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      deleteConstantAction0.getTargetProperties();
      ResultSetStatistics[] resultSetStatisticsArray0 = new ResultSetStatistics[5];
      RealNestedLoopJoinStatistics realNestedLoopJoinStatistics0 = new RealNestedLoopJoinStatistics(32664, 1, 4, 1709L, 1709L, 252, 3027L, 4, (-1206), 1024, (-1192), 1522L, false, 433, 4, "2+]A?", (ResultSetStatistics) null, (ResultSetStatistics) null);
      RealDeleteVTIResultSetStatistics realDeleteVTIResultSetStatistics0 = new RealDeleteVTIResultSetStatistics(252, 2, realNestedLoopJoinStatistics0);
      resultSetStatisticsArray0[0] = (ResultSetStatistics) realDeleteVTIResultSetStatistics0;
      RealScalarAggregateStatistics realScalarAggregateStatistics0 = new RealScalarAggregateStatistics(4, 433, 1109, 0L, (-530L), 1522L, 4L, 1, false, 4, 972.453726, 1055.0, resultSetStatisticsArray0[0]);
      resultSetStatisticsArray0[1] = (ResultSetStatistics) realScalarAggregateStatistics0;
      RealDistinctScalarAggregateStatistics realDistinctScalarAggregateStatistics0 = new RealDistinctScalarAggregateStatistics((-1175), 130, (-1206), (-1L), (-590L), 1522L, 3027L, 1711, (-1809), 0.0, (-1.0), resultSetStatisticsArray0[0]);
      resultSetStatisticsArray0[2] = (ResultSetStatistics) realDistinctScalarAggregateStatistics0;
      RealDistinctScalarAggregateStatistics realDistinctScalarAggregateStatistics1 = new RealDistinctScalarAggregateStatistics(0, 130, 32664, (-3272L), 1017778348664943622L, 744L, 0L, 110, 4, 838.804, 2707.278, resultSetStatisticsArray0[0]);
      resultSetStatisticsArray0[3] = (ResultSetStatistics) realDistinctScalarAggregateStatistics1;
      RealNestedLoopLeftOuterJoinStatistics realNestedLoopLeftOuterJoinStatistics0 = new RealNestedLoopLeftOuterJoinStatistics((-4284), 1314, (-1175), 240L, 1028L, 0L, (-1116L), (-2466), (-280), 2006, (-1206), 4, 1.0, 433, "", realNestedLoopJoinStatistics0, realNestedLoopJoinStatistics0, (-1809));
      resultSetStatisticsArray0[4] = (ResultSetStatistics) realNestedLoopLeftOuterJoinStatistics0;
      RealInsertResultSetStatistics realInsertResultSetStatistics0 = new RealInsertResultSetStatistics(1711, false, 4, false, true, false, (-2466), realDistinctScalarAggregateStatistics1);
      RealHashTableStatistics realHashTableStatistics0 = new RealHashTableStatistics((-1206), 433, 2, 433, 4, 2, 4, 1109, 4, intArray0, "\"c3{: zt?TsZ", (Properties) null, 433, 433, resultSetStatisticsArray0, realInsertResultSetStatistics0);
      FormatableProperties formatableProperties0 = realHashTableStatistics0.scanProperties;
      driver0.connect("--S", formatableProperties0);
      DBUtil.close((Connection) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.nextLine(simpleResultSet0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--S");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      String string0 = null;
      DBUtil.checkReadOnly((String) null, false);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "*'%lTCa$*L6", "*'%lTCa$*L6", "Empty SQL string in executeUpdate()");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBUtil.getOpenConnectionCount();
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.getStatement(simpleResultSet0);
      DBUtil.close((ResultSet) simpleResultSet0);
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("NULLABLE SMALLINT", "SET TRANSACTION ISOLATION", "SET TRANSACTION ISOLATION", "SET TRANSACTION ISOLATION");
      // Undeclared exception!
      try { 
        JDBCConnectData.parseSingleDbProperties((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dT!DqZ.:T5OkA(ZcuE";
      stringArray0[1] = "[[j*j";
      stringArray0[2] = "dT!DqZ.:T5OkA(ZcuE";
      stringArray0[3] = "dT!DqZ.:T5OkA(ZcuE";
      stringArray0[4] = "dT!DqZ.:T5OkA(ZcuE";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "dT!DqZ.:T5OkA(ZcuE", false, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBUniqueConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'dT!DqZ.:T5OkA(ZcuE' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DBA");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DBA");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBUtil.checkReadOnly("DBA", false);
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("DBA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'DBA.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KFr`-2o,$");
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      DBUtil.createLoggingResultSet(simpleResultSet0, (Statement) null);
      String string0 = "";
      String string1 = "!V$`}V$=Wy^l}n2'";
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBUtil.getOpenConnectionCount();
      String string0 = "No JDBC URL specified";
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUtil.available(" failed: ", "No JDBC URL specified", "No JDBC URL specified", " failed: ");
      DBUtil.available("No JDBC URL specified", " failed: ", "No environment definition '", " failed: ");
      try { 
        DBUtil.connect("No environment definition '", "No environment definition '", " failed: ", " failed: ", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting No environment definition ' failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBUtil.escape(" result set(s)");
      String string0 = "";
      String string1 = "";
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      try { 
        pGConnectionPoolDataSource0.getConnection("", " result set(s)");
        fail("Expecting exception: PSQLException");
      
      } catch(PSQLException e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("qM13#4(V", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DBUtil.resetMonitors();
          String string0 = "-- undo page ";
          ConnectionInfo connectionInfo0 = new ConnectionInfo("-- undo page ");
          Database database0 = null;
          try {
            database0 = new Database(connectionInfo0, "-- undo page ");
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // General error: \"java.lang.NullPointerException\" [50000-136]
             //
             verifyException("org.h2.message.DbException", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      org.h2.Driver driver0 = org.h2.Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      driver0.connect("KOI8_U", formatableProperties0);
      boolean boolean0 = true;
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      String string0 = "org.apache.derby.impl.io.vfmem.VirtualFile";
      // Undeclared exception!
      try { 
        DBUtil.countRows("org.apache.derby.impl.io.vfmem.VirtualFile", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      String string0 = "org.databene.JDBC";
      boolean boolean0 = false;
      try { 
        DBUtil.getMetaData((Connection) null, "org.databene.JDBC", "org.databene.JDBC", true, false, false, false, "org.databene.JDBC", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        DBUtil.connect("", "", "", ") or wrong URL format (", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting  failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      org.h2.Driver driver0 = new org.h2.Driver();
      String string0 = ")2)O-M6/zC|H@~LD1ho";
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      createIndexNode0.getProperties();
      driver0.connect(")2)O-M6/zC|H@~LD1ho", (Properties) null);
      String string1 = "$I\\rV2BJQL";
      boolean boolean0 = false;
      String string2 = null;
      try { 
        DBUtil.getMetaData((Connection) null, ")2)O-M6/zC|H@~LD1ho", "$I\rV2BJQL", true, true, false, true, (String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string0 = " with assignedTableMap = ";
      // Undeclared exception!
      try { 
        jdbcConnection0.prepareStatement(" with assignedTableMap = ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)125;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = "--S";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.getMetaData(",", false, true, false, false, "--S", false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition ',.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "No environment definition '";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DECIMAL_DIGITS");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)102;
      byte byte0 = (byte)50;
      byteArray0[4] = (byte)50;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      try { 
        DBUtil.connect("No environment definition '", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("opening connection to ", "opening connection to ", "", "opening connection to ");
      boolean boolean0 = true;
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting opening connection to  failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = false;
      DBUtil.assertAllDbResourcesClosed(false);
      String string0 = "ROW-COUNT";
      DBUtil.existsEnvironment("ROW-COUNT");
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-73);
      ValueLob valueLob0 = ValueLob.createSmallLob(3, byteArray0);
      Reader reader0 = valueLob0.getReader();
      String[] stringArray0 = new String[0];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      String string0 = DBUtil.format(resultSet0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Level level0 = Level.trace;
      ErrorHandler errorHandler0 = new ErrorHandler("S", level0);
      SQLException sQLException0 = new SQLException("S");
      errorHandler0.handleError("S", (Throwable) sQLException0);
      errorHandler0.handleError("^:W|;{J`");
      // Undeclared exception!
      try { 
        DBUtil.runScript("S", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DBUtil.close((Statement) null);
      String string0 = "rI[}~n`y";
      int int0 = 3;
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      createIndexNode0.getProperties();
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("rI[}~n`y", 3, "rI[}~n`y", "'", (Properties) null, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.postgresql.jdbc2.AbstractJdbc2Connection", e);
      }
  }
}
