/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:59:51 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.temporal.ChronoField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlPullParser;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "jSc)";
      ElExpression elExpression0 = new ElExpression("jSc)");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration((String) null);
      String string0 = "N>f`NhN";
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.enumeration("N>f`NhN");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.collection((String) null);
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.label("2x2X7W");
      dynamicSelectModel0.validate();
      dynamicSelectModel4.translator((String) null);
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel4.empty(dynamicSelectModel1);
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.dt((Object) dynamicSelectModel2);
      errorPage0.img((String) null, "c8 ]");
      // Undeclared exception!
      try { 
        dynamicSelectModel5.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression null evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("empty");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.label("empty");
      dynamicSelectModel0.collection("empty");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("");
      dynamicSelectModel1.collection("</");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getLabel(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression </ evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getComponent();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("['kWZU");
      dynamicSelectModel1.setComponent((Component) null);
      dynamicSelectModel0.empty((Object) null);
      dynamicSelectModel0.reset();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getValue(78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
      String string0 = "";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("expected namespace ");
      dynamicSelectModel0.empty("");
      dynamicSelectModel2.reset();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression expected namespace  to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "empty";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("empty");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.empty(dynamicSelectModel0);
      dynamicSelectModel2.collection("empty");
      dynamicSelectModel2.getTopLevelComponent();
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression empty evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.enumeration("{}empty");
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("{}empty");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getLabel((-2179));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2179
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("{}empty");
      dynamicSelectModel1.translateValue("AWhncT,S^zHYOClf5");
      dynamicSelectModel0.collection("{}empty");
      String string0 = XmlPullParser.FEATURE_PROCESS_DOCDECL;
      assertEquals("http://xmlpull.org/v1/doc/features.html#process-docdecl", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("{}epty");
      dynamicSelectModel0.value("{}epty");
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      dynamicSelectModel0.empty(chronoField0);
      dynamicSelectModel1.translateValue("Could not evaluate expression ");
      dynamicSelectModel1.translateValue("[Ljava.lang.Object;@0000000043");
      String string0 = XmlPullParser.FEATURE_PROCESS_DOCDECL;
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("Could not create DynamicSelection model. Label attribute was null or not an el-expression.");
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
  }
}
