/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:04:07 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      int int1 = 1571;
      MockRandom mockRandom0 = new MockRandom(1571);
      mockRandom0.longs();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(1571, 7, 0.0, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      mockRandom0.longs((long) 7, 639L, 938L);
      // Undeclared exception!
      try { 
        sparseMatrix0.eachInColumn(7, vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.minInColumn(5);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3362, 3362, 3362);
      int[] intArray0 = new int[2];
      intArray0[0] = 3362;
      intArray0[1] = 3362;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3362' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(9, 32, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.toMatrixMarket();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      denseMatrix0.toDenseMatrix();
      matrix0.maxInColumn((-332));
      int int0 = 32;
      // Undeclared exception!
      try { 
        matrix0.slice((-332), (-332), 32, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      int int0 = (-1890505114);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(2, (-1890505114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..2][0..-1890505114].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(2, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix(21, 21);
      assertEquals(21, cRSMatrix0.rows());
      
      Matrix matrix0 = cRSMatrix0.sliceBottomRight(21, 21);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.shuffle();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, 2729, 2083);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2729 rows and 2083 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(15, 15);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(16);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 0.0, (Random) mockRandom0);
      columnMajorSparseMatrix0.setAll((-2872.642731950735));
      mockRandom0.longs((long) 16);
      mockRandom0.doubles((long) 16, (-2872.642731950735), (double) 16);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      matrix0.setRow(0, (-165.165));
      matrix0.toMatrixMarket();
      Matrix matrix1 = columnMajorSparseMatrix0.divide(0.0);
      matrix1.blank();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.updateAt(8, 0, matrixFunction0);
      columnMajorSparseMatrix0.copyOfRows(0);
      columnMajorSparseMatrix0.iteratorOfRow(0);
      columnMajorSparseMatrix0.rotate();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix2 = columnMajorSparseMatrix0.transform(matrixFunction1);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        matrix2.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      int int0 = 16;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 16, 1202, 1202, 32, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1202, 32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int[] intArray0 = new int[3];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1943, 1943, 1943);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setRow(1943, (-357.0097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1944
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow(9, vectorFunction0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2, 2);
      assertEquals(2, basic2DMatrix0.rows());
      
      int int0 = basic2DMatrix0.rank();
      assertEquals(0, int0);
      
      double double0 = basic2DMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      denseVector0.shuffle();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      int int0 = matrix0.rank();
      assertEquals(0, matrix0.columns());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1853.3589637;
      doubleArray1[3] = 623.0245380618;
      doubleArray1[4] = 584.846296605;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 1853.3589637;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 623.0245380618;
      doubleArray2[5] = 584.846296605;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = 1853.3589637;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 1853.3589637;
      doubleArray3[2] = 623.0245380618;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 1853.3589637;
      doubleArray3[7] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 584.846296605;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = 584.846296605;
      doubleArray4[7] = 584.846296605;
      doubleArray4[8] = (-1229.7103557);
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(4, rowMajorSparseMatrix0.rows());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      
      int int0 = rowMajorSparseMatrix0.rank();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1303;
      doubleArray0[1] = (double) 1303;
      doubleArray0[2] = (double) 1303;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 1303;
      Matrix matrix0 = Matrix.from1DArray(1303, 48, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.rank();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      MockRandom mockRandom0 = new MockRandom(0L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.multiply((double) 0);
      DenseVector denseVector0 = DenseVector.zero(552);
      // Undeclared exception!
      try { 
        matrix1.insertColumn(8, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(15, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn((-2491), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..14
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      double double0 = cRSMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      rowMajorSparseMatrix0.multiplyByItsTranspose();
      rowMajorSparseMatrix0.iteratorOfColumn(1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.offerLast(integer0);
      linkedList0.add(integer0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(1, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      rowMajorSparseMatrix0.manhattanNorm();
      SparseMatrix sparseMatrix0 = rowMajorSparseMatrix0.toSparseMatrix();
      rowMajorSparseMatrix0.iteratorOfColumn(0);
      sparseMatrix0.infinityNorm();
      rowMajorSparseMatrix0.toCSV();
      rowMajorSparseMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.toMatrixMarket((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3, 3);
      String string0 = basic2DMatrix0.toString();
      assertEquals("1.000 1.000 1.000\n1.000 1.000 1.000\n1.000 1.000 1.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(0, matrix0.columns());
      
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      
      String string0 = cRSMatrix0.toCSV();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(16);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 0.0, (Random) mockRandom0);
      columnMajorSparseMatrix0.setAll((-2872.642731950735));
      mockRandom0.longs((long) 16);
      mockRandom0.doubles((long) 16, (-2872.642731950735), (double) 16);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      matrix0.setRow(0, (-165.165));
      Matrix matrix1 = columnMajorSparseMatrix0.divide(0.0);
      Matrix matrix2 = matrix0.transpose();
      matrix0.multiply(matrix1);
      String string0 = null;
      // Undeclared exception!
      try { 
        matrix2.slice((-280), (-1522), (-1522), 3329);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-280..-1522][-1522..3329].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      int int0 = (-332);
      matrix0.maxInColumn((-332));
      int int1 = (-1374);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRow((-1374), vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      denseMatrix1.foldRow((-2793), vectorAccumulator1);
      int int2 = (-2895);
      // Undeclared exception!
      try { 
        denseMatrix0.blankOfShape((-2793), 1674);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      double double0 = matrix0.maxInRow(0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix.unit(0, 0);
      MockRandom mockRandom0 = new MockRandom(0L);
      int int0 = 6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 3918);
      columnMajorSparseMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(3918, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3918x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero((-539), (-539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -539x-539
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3339;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3339);
      int int1 = (-332);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft((-332), 3339);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-332][0..3339].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.shuffle();
      denseMatrix0.toDenseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(937);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(937, 937);
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(937, 937);
      sparseMatrix0.blankOfColumns(937);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom(1L);
      long long0 = 0L;
      mockRandom0.longs(1L, 0L, (long) 5);
      mockRandom0.nextLong();
      Matrix matrix0 = Matrix.randomSymmetric(5, mockRandom0);
      Matrix matrix1 = matrix0.copy();
      // Undeclared exception!
      try { 
        matrix1.swapColumns(5, 2146436005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3336);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3336);
      denseMatrix0.equals((Object) vectorAccumulator0);
      // Undeclared exception!
      denseMatrix0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.norm();
      basic2DMatrix0.toMatrixMarket();
      double double0 = basic2DMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(937);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(937, 937);
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix matrix1 = denseMatrix0.divide(937);
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(0, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      double double0 = new Integer(0);
      matrix0.slice(0, 0, 0, 0);
      denseMatrix1.power(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3336);
      assertFalse(integer0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      matrix0.maxInColumn(0);
      denseMatrix0.power(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3336);
      assertEquals(3336, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2425, 2425);
      // Undeclared exception!
      cCSMatrix0.power(2115);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-1102764978));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1102764978.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 427);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(427);
      assertTrue(matrix0.equals((Object)rowMajorSparseMatrix0));
      
      rowMajorSparseMatrix0.norm();
      assertTrue(rowMajorSparseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 0);
      Matrix matrix1 = Matrix.random(0, 0, (Random) null);
      double double0 = matrix0.min();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      matrix0.columnMajorIterator();
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      matrix0.mkString(numberFormat0);
      assertTrue(matrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(10, 10);
      Matrix matrix0 = denseMatrix0.power(10);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldColumn(4, vectorAccumulator0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 13);
      // Undeclared exception!
      try { 
        cRSMatrix0.power(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 13.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(17, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 17;
      intArray0[2] = 17;
      intArray0[3] = 17;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = rowMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Matrix matrix0 = rowMajorSparseMatrix0.copy();
      assertTrue(matrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      matrix0.slice(32, 32, 1320, 32);
      denseMatrix0.power(2834);
      Integer integer0 = new Integer(1320);
      assertEquals(1320, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3362, 3362);
      denseMatrix0.blankOfColumns(3362);
      // Undeclared exception!
      rowMajorSparseMatrix0.setColumn(7, (double) 7);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1110L));
      Matrix matrix0 = Matrix.random(32, 32, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.setColumn(424, 9.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      rowMajorSparseMatrix0.manhattanNorm();
      rowMajorSparseMatrix0.toSparseMatrix();
      int int0 = 0;
      rowMajorSparseMatrix0.iteratorOfColumn(0);
      RowMajorSparseMatrix.zero(6, 32);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(1294);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumn((-407), vectorAccumulator0);
      int int1 = 2906;
      matrix0.copyOfRows(int1);
      int int2 = (-190);
      rowMajorSparseMatrix0.setColumn(int2, (double) int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.shuffle();
      int int0 = 949;
      denseMatrix0.setColumn(949, 649.98496407333);
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("cYd\"-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      Matrix matrix0 = cRSMatrix0.transpose();
      matrix0.toDenseMatrix();
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = 3488.5764976586124;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 37;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 3488.5764976586124;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (-3297.995);
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 37;
      doubleArray2[7] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 3488.5764976586124;
      doubleArray3[1] = (-3297.995);
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = 691.0505002326254;
      doubleArray3[4] = (double) 37;
      doubleArray3[5] = (-3297.995);
      doubleArray3[6] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-3297.995);
      doubleArray5[1] = (-3297.995);
      doubleArray5[2] = (double) 2;
      doubleArray5[3] = 1.797014475674582E-10;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 3488.5764976586124;
      doubleArray7[1] = (double) 2;
      doubleArray7[2] = 691.0505002326254;
      doubleArray7[3] = (double) 2;
      doubleArray7[4] = (double) 2;
      doubleArray7[5] = 1.797014475674582E-10;
      doubleArray7[6] = (-3297.995);
      doubleArray7[7] = (double) 2;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 1.0;
      doubleArray0[7] = doubleArray8;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, 37, 37, 2, 2, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 37, 37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix0, 6, 3728);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 3728 cols at 0, 0 in a 6x6 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 15;
      CRSMatrix cRSMatrix0 = new CRSMatrix(15, 15);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(16, 423);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeColumn((-836));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 2147483232;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 2147483232;
      intArray0[1] = 2147483232;
      intArray0[2] = 2147483232;
      intArray0[3] = 2147483232;
      CRSMatrix cRSMatrix0 = new CRSMatrix(127, 2147483232, 2147483232, doubleArray0, intArray0, intArray0);
      int int1 = 1655;
      Matrix matrix0 = cRSMatrix0.removeColumn(1655);
      Matrix matrix1 = cRSMatrix0.subtract(matrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int2 = 4141;
      int int3 = 0;
      int int4 = 1;
      SparseMatrix.zero(int2, int3, int4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix1.non(matrixPredicate0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix2 = Matrix.randomSymmetric(int2, mockRandom0);
      matrix0.forEach(consumer0);
      matrix1.updateColumn(intArray0[2], vectorFunction0);
      int int5 = 32;
      matrix1.get(int5, int1);
      Matrix matrix3 = cRSMatrix0.blank();
      matrix1.ensureDimensionsAreCorrect(intArray0[1], int0);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.is(matrixPredicate1);
      matrix1.product();
      Matrix matrix4 = Matrix.block(matrix0, matrix1, matrix0, matrix3);
      matrix4.removeLastRow();
      Matrix matrix5 = cRSMatrix0.shuffle();
      matrix5.iteratorOfColumn(intArray0[3]);
      double double0 = 2.0;
      matrix2.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(1229);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1229
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertNotNull(matrix0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      MatrixInverter matrixInverter0 = matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertNotNull(matrixInverter0);
      
      MatrixMatrixOperation<SparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<SparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixByItsTransposeMultiplication0.apply((ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 1511;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1511, 0);
      assertEquals(1511, sparseMatrix0.cardinality());
      assertEquals(1511, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1511, sparseMatrix0.rows());
      assertEquals(6.618133686300463E-4, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      double double0 = sparseMatrix0.maxInRow(0);
      assertEquals(1511, sparseMatrix0.cardinality());
      assertEquals(1511, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1511, sparseMatrix0.rows());
      assertEquals(6.618133686300463E-4, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1511 rows and 1511 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 561.2195751;
      doubleArray1[1] = 913.472472;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 561.2195751;
      doubleArray2[1] = 0.9994602208113572;
      doubleArray2[2] = 913.472472;
      doubleArray2[3] = 561.2195751;
      doubleArray2[5] = 561.2195751;
      doubleArray2[6] = 913.472472;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(913.472472, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = rowMajorSparseMatrix0.rank();
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(913.472472, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(2, int0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.removeLastRow();
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(913.472472, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(913.472472, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.getColumn(39);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(913.472472, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1098.165381);
      doubleArray2[2] = (-3984.270111939862);
      doubleArray2[3] = 342.15803351413376;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastRow();
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 638, 638);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 638 rows and 638 cols at 0, 0 in a 2x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(11, 1);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(11, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      DenseVector denseVector0 = DenseVector.zero(1);
      assertEquals(1, denseVector0.length());
      assertNotNull(denseVector0);
      
      cRSMatrix0.setRow(1, (Vector) denseVector0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(11, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, denseVector0.length());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 2738;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2738);
      assertEquals(2738, cRSMatrix0.cardinality());
      assertEquals(2738, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2738, cRSMatrix0.columns());
      assertEquals(3.652300949598247E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow(2738);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2737
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(13, 13);
      assertEquals(13, basic2DMatrix0.rows());
      assertEquals(13, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.shuffle();
      assertEquals(13, basic2DMatrix0.rows());
      assertEquals(13, basic2DMatrix0.columns());
      assertEquals(13, matrix0.columns());
      assertEquals(13, matrix0.rows());
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        Matrix.diagonal((-2073432486), 13);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1254;
      doubleArray1[1] = (-1212.4460792150749);
      doubleArray1[2] = (-1212.4460792150749);
      doubleArray1[3] = (-1212.4460792150749);
      doubleArray1[4] = (double) 1254;
      doubleArray1[5] = (double) 1254;
      doubleArray1[6] = (-1212.4460792150749);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) 1254;
      doubleArray0[0] = doubleArray1;
      MockRandom mockRandom0 = new MockRandom(36L);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(53, mockRandom0);
      assertEquals(53, denseMatrix0.rows());
      assertEquals(53, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, denseMatrix0);
      Matrix matrix1 = matrix0.insertColumn((-1511671004), vector0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      matrix1.toMatrixMarket(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(7, 53);
      assertEquals(53, matrix0.columns());
      assertEquals(7, matrix0.rows());
      assertNotNull(matrix0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.forEach(consumer0);
      assertEquals(53, matrix0.columns());
      assertEquals(7, matrix0.rows());
      
      Matrix matrix1 = Matrix.constant(7, 7, 7);
      assertEquals(7, matrix1.columns());
      assertEquals(7, matrix1.rows());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
      
      // Undeclared exception!
      try { 
        Matrix.fromCSV("pN~%3owKhX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(145, 145);
      matrix0.product();
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      int int0 = 60;
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(6, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(638, 638);
      assertEquals(638, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(638, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(638, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      BasicVector basicVector0 = (BasicVector)compressedVector0.add(1.0);
      assertEquals(638, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(638, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(638, basicVector0.length());
      assertNotNull(basicVector0);
      
      BasicVector basicVector1 = (BasicVector)basicVector0.subtract((-1713.74092425976));
      assertEquals(638, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(638, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(638, basicVector0.length());
      assertEquals(638, basicVector1.length());
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(638, basicVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..637
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      String string0 = cRSMatrix0.apply(matrixOperation0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNull(string0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      int int0 = cRSMatrix1.rank();
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.diagonalProduct();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("       ");
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "Cannot";
      int int0 = (-1582);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(999, 37);
      assertEquals(999, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(37, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.getColumn(37);
      assertEquals(999, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(37, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(999, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply((Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 999 does not equal to 37.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 32;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3336);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3336, (int)integer0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3336);
      assertEquals(3336, denseMatrix0.columns());
      assertEquals(3336, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      boolean boolean0 = denseMatrix0.equals((Object) vectorAccumulator0);
      assertEquals(3336, denseMatrix0.columns());
      assertEquals(3336, denseMatrix0.rows());
      assertFalse(boolean0);
      
      // Undeclared exception!
      denseMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.125, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.125, cRSMatrix0.density(), 0.01);
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 390;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 390;
      doubleArray0[4] = (double) 390;
      doubleArray0[5] = (double) 390;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(390, 8, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(30);
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(30, 30, 30);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix1, 1, 1);
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(30, cRSMatrix2.rows());
      assertEquals(0.03222222222222222, cRSMatrix2.density(), 0.01);
      assertEquals(30, cRSMatrix2.columns());
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(29, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotNull(cRSMatrix2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1308);
      assertEquals(1308, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1308, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1308, cRSMatrix0.cardinality());
      assertEquals(7.645259938837921E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 1308, 1308);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 1308 rows and 1308 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1609);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1609, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6.215040397762585E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1609, cRSMatrix0.columns());
      assertEquals(1609, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0, 0, 0);
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(15, 15);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      DenseVector denseVector0 = DenseVector.constant(15, 15);
      assertEquals(15, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(15, denseVector0.length());
      assertEquals(15, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 15, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 15 rows and 15 cols at 0, 0 from a 15x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 10, 10);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(10, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-767.05210125);
      doubleArray1[1] = (-4617.262086262355);
      doubleArray1[2] = 723.36;
      doubleArray1[3] = 2697.6779076758116;
      doubleArray1[4] = 1125.368982917314;
      doubleArray1[5] = (-1603.0);
      doubleArray1[6] = 2107.372531344608;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 723.36;
      doubleArray2[1] = (-767.05210125);
      doubleArray2[2] = (-4617.262086262355);
      doubleArray2[3] = 2107.372531344608;
      doubleArray2[4] = (-1603.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1125.368982917314;
      doubleArray3[1] = 1125.368982917314;
      doubleArray3[2] = 2107.372531344608;
      doubleArray3[3] = (-4617.262086262355);
      doubleArray3[4] = 2697.6779076758116;
      doubleArray3[5] = 2107.372531344608;
      doubleArray3[6] = (-1603.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-767.05210125);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 1125.368982917314;
      doubleArray5[1] = (-1100.0);
      doubleArray5[2] = (-1603.0);
      doubleArray5[3] = 723.36;
      doubleArray5[4] = (-4617.262086262355);
      doubleArray5[5] = (-767.05210125);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-767.05210125);
      doubleArray6[1] = (-4617.262086262355);
      doubleArray6[2] = 2697.6779076758116;
      doubleArray6[3] = (-767.05210125);
      doubleArray6[4] = 723.36;
      doubleArray6[5] = 1125.368982917314;
      doubleArray6[6] = 1.0;
      doubleArray6[7] = (-1100.0);
      doubleArray6[8] = (-1603.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 589.1668426433007;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(7, matrix0.columns());
      assertEquals(7, matrix0.rows());
      assertNotNull(matrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        matrix0.update(matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(638, 638);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(638, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(17, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(638, 638);
      assertEquals(638, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(638, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.columns());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(638, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(1.0);
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.subtract((Matrix) cRSMatrix1);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix2, 638, 638);
      int int0 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRow(int0, vectorAccumulator0);
      cRSMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      Object object0 = cRSMatrix0.apply(matrixOperation0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNull(object0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(0.0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cRSMatrix0.add(0.0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceBottomRight(4182, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [4182..0][14..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 3);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 1.0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      double double0 = matrix0.determinant();
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(4.0, double0, 0.01);
      
      Matrix matrix1 = matrix0.transpose();
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix1.columns());
      assertEquals(3, matrix1.rows());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 3, (double[]) null);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      Matrix matrix0 = columnMajorSparseMatrix0.add(1376.375367460183);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.transpose();
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
      
      int int2 = 0;
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = matrix1.columnMajorIterator();
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotNull(columnMajorMatrixIterator0);
      
      // Undeclared exception!
      try { 
        matrix1.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = new Integer(15);
      assertEquals(15, double0, 0.01);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cRSMatrix0.non(advancedMatrixPredicate0);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(10, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(10, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      assertEquals(10, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(10, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfRows((-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -899x10
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 3);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 1.0);
      assertEquals(3, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      Matrix matrix1 = denseMatrix0.copyOfColumns(3899);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, matrix1.rows());
      assertEquals(3899, matrix1.columns());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.shuffle();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)denseMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertTrue(denseMatrix0.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertSame(denseMatrix0, basic2DMatrix1);
      assertSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.identity(937);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(937, cRSMatrix0.cardinality());
      assertEquals(0.0010672358591248667, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(937, cRSMatrix0.columns());
      assertEquals(937, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      MatrixOperation<Matrix> matrixOperation0 = ooPlaceMatricesMultiplication0.partiallyApply((DenseMatrix) basic2DMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertTrue(denseMatrix0.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertSame(denseMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotNull(matrixOperation0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.zero(937, 937);
      assertEquals(937, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(937, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(937, cRSMatrix0.cardinality());
      assertEquals(0.0010672358591248667, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(937, cRSMatrix0.columns());
      assertEquals(937, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(937, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(937, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(937, cRSMatrix1.columns());
      assertEquals(937, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)SparseMatrix.fromCSV("");
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotNull(cRSMatrix2);
      
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)cRSMatrix2.subtract((double) 937);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(0, basic2DMatrix2.rows());
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)denseMatrix0));
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(basic2DMatrix2, denseMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      
      String string0 = cRSMatrix2.toString();
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.add((-606.0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(50, 2086, 4325);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2086, rowMajorSparseMatrix0.columns());
      assertEquals(50, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 3);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotNull(denseMatrix1);
      
      Matrix matrix1 = denseMatrix1.insert(matrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)denseMatrix1));
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, denseMatrix1);
      assertNotNull(matrix1);
      
      double double0 = matrix1.maxInRow(1970);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertTrue(denseMatrix0.equals((Object)matrix1));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)denseMatrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(denseMatrix1.equals((Object)matrix1));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)denseMatrix1));
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, denseMatrix1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      Matrix matrix2 = denseMatrix1.power(32);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, matrix2.rows());
      assertEquals(0, matrix2.columns());
      assertTrue(denseMatrix0.equals((Object)matrix1));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)matrix1));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)denseMatrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)denseMatrix1));
      assertNotSame(denseMatrix0, matrix2);
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix1, matrix2);
      assertNotSame(denseMatrix1, matrix0);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix1);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, denseMatrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, denseMatrix0);
      assertNotNull(matrix2);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix2.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 561.2195751;
      doubleArray1[1] = 913.472472;
      doubleArray0[1] = doubleArray0[0];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = rowMajorSparseMatrix0.rank();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, int0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.removeLastRow();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)Matrix.identity(0);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.getColumn(39);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 39, 0, 0, 2560, 39, 2560);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 2560
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(638, 638);
      assertEquals(638, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(638, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(638, 638, 638);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(638, cRSMatrix1.columns());
      assertEquals(638, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      
      double double0 = new Integer(638);
      cRSMatrix1.mkString("      ", "      ");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(19);
      assertEquals(19, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.05263157894736842, cRSMatrix0.density(), 0.01);
      assertEquals(19, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(19, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix0, 19, 19);
      assertEquals(19, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.05263157894736842, cRSMatrix0.density(), 0.01);
      assertEquals(19, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(19, cRSMatrix0.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(19, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.05263157894736842, cRSMatrix1.density(), 0.01);
      assertEquals(19, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(19, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      int int0 = (-2147443169);
      int int1 = 2647;
      int int2 = 696;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, (-2147443169), 2647, 696, (-771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 696x-771
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 48;
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      BasicVector basicVector0 = (BasicVector)compressedVector0.add((double) 48);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertEquals(48, basicVector0.length());
      assertNotNull(basicVector0);
      
      BasicVector basicVector1 = (BasicVector)basicVector0.subtract(2697.6779076758116);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertEquals(48, basicVector0.length());
      assertEquals(48, basicVector1.length());
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      
      int int1 = (-708);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow((-708), basicVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..47
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(34, 34);
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(34, 43.36197301336258);
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertEquals(34, cRSMatrix0.cardinality());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      LinearSystemSolver linearSystemSolver0 = cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertEquals(34, cRSMatrix0.cardinality());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(34, linearSystemSolver0.equations());
      assertEquals(34, linearSystemSolver0.unknowns());
      assertNotNull(linearSystemSolver0);
      
      double double0 = denseMatrix0.euclideanNorm();
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, denseMatrix0.columns());
      assertEquals(34.0, double0, 0.01);
      
      double double1 = denseMatrix0.sum();
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, denseMatrix0.columns());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1156.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      int int0 = 1943;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1943, 1943, 1943);
      assertEquals(1943, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1943, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1943);
      assertEquals(1943, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5.14668039114771E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1943, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1943, cRSMatrix0.rows());
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      rowMajorSparseMatrix0.swapColumns(1943, 1943);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int1 = (-2034458191);
      double double0 = 190.1557663886794;
      cRSMatrix0.set(int0, int1, double0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      MockRandom mockRandom0 = new MockRandom((-61L));
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 13, mockRandom0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(13, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new InPlaceCopyMatrixToMatrix();
      assertFalse(inPlaceCopyMatrixToMatrix1.equals((Object)inPlaceCopyMatrixToMatrix0));
      assertNotNull(inPlaceCopyMatrixToMatrix1);
      
      Matrix matrix0 = inPlaceCopyMatrixToMatrix1.apply(denseMatrix0, denseMatrix0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(13, denseMatrix0.columns());
      assertEquals(9, matrix0.rows());
      assertEquals(13, matrix0.columns());
      assertFalse(inPlaceCopyMatrixToMatrix1.equals((Object)inPlaceCopyMatrixToMatrix0));
      assertSame(denseMatrix0, matrix0);
      assertNotSame(inPlaceCopyMatrixToMatrix1, inPlaceCopyMatrixToMatrix0);
      assertSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      Matrix matrix1 = matrix0.select(intArray0, intArray0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(13, denseMatrix0.columns());
      assertEquals(9, matrix0.rows());
      assertEquals(13, matrix0.columns());
      assertEquals(1, matrix1.columns());
      assertEquals(1, matrix1.rows());
      assertFalse(inPlaceCopyMatrixToMatrix1.equals((Object)inPlaceCopyMatrixToMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(inPlaceCopyMatrixToMatrix1, inPlaceCopyMatrixToMatrix0);
      assertSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotNull(matrix1);
      assertArrayEquals(new int[] {3}, intArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(3);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastColumn();
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(3, cRSMatrix1.rows());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(203, 1958);
      matrix0.columnMajorIterator();
      matrix0.toBinary();
      matrix0.swapRows(1195, 2426);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 48;
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      BasicVector basicVector0 = (BasicVector)compressedVector0.add((double) 48);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertEquals(48, basicVector0.length());
      assertNotNull(basicVector0);
      
      BasicVector basicVector1 = (BasicVector)basicVector0.subtract(2698.402892729533);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertEquals(48, basicVector0.length());
      assertEquals(48, basicVector1.length());
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insertRow(7, compressedVector0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(49, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(48, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = new CRSMatrix((-708), 2, (-708));
      double double0 = new Integer(int0);
      cRSMatrix2.blank();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 4);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(34, 34);
      assertEquals(34, denseMatrix0.columns());
      assertEquals(34, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(34, 43.36197301336258);
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(34, cRSMatrix0.cardinality());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      assertEquals(34, denseMatrix0.columns());
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(34, cRSMatrix0.cardinality());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      boolean boolean0 = matrix0.equals((Matrix) cRSMatrix0, 3271.1069204494097);
      assertEquals(34, denseMatrix0.columns());
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(34, cRSMatrix0.cardinality());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertTrue(boolean0);
      
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(9, 9);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = new Integer(9);
      assertEquals(9, double0, 0.01);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(9, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Matrix) cCSMatrix0, 9);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(9, cCSMatrix0.columns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(5, 5, 5);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfRows(5);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(5, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(5, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      double double0 = cRSMatrix0.diagonalProduct();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = cRSMatrix1.equals((Matrix) cRSMatrix0, 3031.1454);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(5, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(5, cRSMatrix1.columns());
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix0, (-468), (-468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -468x-468
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3230, 1336, 2);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3230, cRSMatrix0.rows());
      assertEquals(1336, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = denseMatrix0.equals((Matrix) cRSMatrix0, (double) 3230);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, denseMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3230, cRSMatrix0.rows());
      assertEquals(1336, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(487, 4, 102);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(487, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      double double0 = 112.0737;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, (double)487, (double)4, (double)487, 112.0737).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(487, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(48, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      cRSMatrix0.insert(matrix0, (-1217), 1214);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      double[][] doubleArray0 = new double[0][2];
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertNotSame(denseMatrix1, matrix0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertNotNull(denseMatrix1);
      
      int int0 = 32;
      int int1 = 42;
      int int2 = (-1);
      int int3 = 40;
      int int4 = 33;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 42, (-1), (-1), 40, 33, 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1, 40
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5097.4210696;
      doubleArray0[2] = (-1635.0);
      doubleArray0[3] = 146.6;
      doubleArray0[4] = (-294.91616464799);
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(5, vector0.length());
      assertNotNull(vector0);
      assertArrayEquals(new double[] {0.0, 5097.4210696, (-1635.0), 146.6, (-294.91616464799)}, doubleArray0, 0.01);
      
      Matrix matrix0 = vector0.toDiagonalMatrix();
      assertEquals(5, vector0.length());
      assertEquals(5, matrix0.rows());
      assertEquals(5, matrix0.columns());
      assertNotNull(matrix0);
      assertArrayEquals(new double[] {0.0, 5097.4210696, (-1635.0), 146.6, (-294.91616464799)}, doubleArray0, 0.01);
      
      String string0 = matrix0.mkString("1~yK5>E/&[<Y%9W", "kDgP)!>^D{w\"");
      assertEquals(5, vector0.length());
      assertEquals(5, matrix0.rows());
      assertEquals(5, matrix0.columns());
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0, 5097.4210696, (-1635.0), 146.6, (-294.91616464799)}, doubleArray0, 0.01);
      assertEquals("0.000kDgP)!>^D{w\"   0.000kDgP)!>^D{w\"    0.000kDgP)!>^D{w\"  0.000kDgP)!>^D{w\"   0.0001~yK5>E/&[<Y%9W0.000kDgP)!>^D{w\"5097.421kDgP)!>^D{w\"    0.000kDgP)!>^D{w\"  0.000kDgP)!>^D{w\"   0.0001~yK5>E/&[<Y%9W0.000kDgP)!>^D{w\"   0.000kDgP)!>^D{w\"-1635.000kDgP)!>^D{w\"  0.000kDgP)!>^D{w\"   0.0001~yK5>E/&[<Y%9W0.000kDgP)!>^D{w\"   0.000kDgP)!>^D{w\"    0.000kDgP)!>^D{w\"146.600kDgP)!>^D{w\"   0.0001~yK5>E/&[<Y%9W0.000kDgP)!>^D{w\"   0.000kDgP)!>^D{w\"    0.000kDgP)!>^D{w\"  0.000kDgP)!>^D{w\"-294.9161~yK5>E/&[<Y%9W", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(62, 62, 62);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(62, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(62, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertNotNull(sparseMatrix0);
      
      sparseMatrix0.setRow(4, (-3013.408750250394));
      assertEquals(0.016129032258064516, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(62, sparseMatrix0.rows());
      assertEquals((-3013.408750250394), sparseMatrix0.min(), 0.01);
      assertEquals(62, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(62, sparseMatrix0.cardinality());
      
      sparseMatrix0.toCSV();
      Matrix matrix0 = Matrix.fromMatrixMarket("HEmT ZuR/_o{");
      matrix0.toMatrixMarket();
      sparseMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(11, 11);
      assertEquals(11, denseMatrix0.rows());
      assertEquals(11, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(11, 1082);
      assertEquals(0.09090909090909091, cRSMatrix0.density(), 0.01);
      assertEquals(11, cRSMatrix0.rows());
      assertEquals(1082.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(11, cRSMatrix0.columns());
      assertEquals(11, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(13, 1082);
      assertEquals(1082, basic2DMatrix0.columns());
      assertEquals(13, basic2DMatrix0.rows());
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotNull(basic2DMatrix0);
      
      ooPlaceMatricesAddition0.applySymmetric((DenseMatrix) basic2DMatrix0, (SparseMatrix) cRSMatrix0);
      basic2DMatrix0.equals((Matrix) denseMatrix0, Double.NEGATIVE_INFINITY);
      denseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1082, 9);
      assertEquals(1082, basic2DMatrix0.rows());
      assertEquals(9, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 43.36197301336258);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((DenseMatrix) basic2DMatrix0, (SparseMatrix) cRSMatrix0);
      basic2DMatrix0.equals(matrix0, (double) 9);
      String string0 = "array";
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket(string0);
      cRSMatrix1.determinant();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(34, 34);
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(34, 43.36197301336258);
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertEquals(34, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, denseMatrix0.columns());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertEquals(34, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      Matrix matrix1 = cRSMatrix0.add(2376.8385937094167);
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertEquals(34, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(34, matrix1.columns());
      assertEquals(34, matrix1.rows());
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
      
      boolean boolean0 = denseMatrix0.equals((Object) matrix0);
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, denseMatrix0.columns());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertEquals(34, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)matrix1));
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertFalse(boolean0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(34, denseMatrix0.rows());
      assertEquals(34, denseMatrix0.columns());
      assertEquals(43.36197301336258, cRSMatrix0.max(), 0.01);
      assertEquals(0.029411764705882353, cRSMatrix0.density(), 0.01);
      assertEquals(34, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(34, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(34, cRSMatrix0.rows());
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)matrix1));
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotNull(matrixInverter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(53, mockRandom0);
      assertEquals(53, denseMatrix0.columns());
      assertEquals(53, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      denseMatrix0.shuffle();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, denseMatrix0);
      denseMatrix0.insertColumn(10, vector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("org.la4j.LinearAlgebra$SolverFactory$3");
      rowMajorSparseMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 207;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(207, 1.0);
      assertEquals(0.004830917874396135, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(207, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(207, cRSMatrix0.cardinality());
      assertEquals(207, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      int int1 = 4;
      SparseVector sparseVector0 = SparseVector.zero(4);
      assertEquals(4, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(4, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 4. Should be: 207.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(53, mockRandom0);
      assertEquals(53, denseMatrix0.columns());
      assertEquals(53, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      denseMatrix0.shuffle();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, denseMatrix0);
      denseMatrix0.insertColumn(10, vector0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 10);
      cRSMatrix0.manhattanNorm();
      cRSMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(9, 235);
      assertEquals(9, basic2DMatrix0.rows());
      assertEquals(235, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.divide(9);
      assertEquals(9, basic2DMatrix0.rows());
      assertEquals(235, basic2DMatrix0.columns());
      assertEquals(9, matrix0.rows());
      assertEquals(235, matrix0.columns());
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(14, 14);
      assertEquals(14, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(14, 14);
      assertEquals(14, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(14.0, cRSMatrix0.max(), 0.01);
      assertEquals(14, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(14, cRSMatrix0.cardinality());
      assertEquals(0.07142857142857142, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = denseMatrix0.foldRows(vectorAccumulator0);
      assertEquals(14, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      assertNotNull(doubleArray0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      assertEquals(14, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      assertEquals(14, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(14.0, cRSMatrix0.max(), 0.01);
      assertEquals(14, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(14, cRSMatrix0.cardinality());
      assertEquals(0.07142857142857142, cRSMatrix0.density(), 0.01);
      assertEquals(14, matrix0.rows());
      assertEquals(14, matrix0.columns());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      double double0 = denseMatrix0.determinant();
      assertEquals(14, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(0.0, double0, 0.01);
      
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<RowMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      // Undeclared exception!
      try { 
        denseMatrix0.apply(matrixMatrixOperation0, (Matrix) cRSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1254;
      doubleArray1[1] = (double) 1254;
      doubleArray1[3] = (double) 1254;
      doubleArray1[4] = (double) 1254;
      doubleArray1[5] = (double) 1254;
      doubleArray1[6] = (double) 1254;
      doubleArray1[8] = (double) 1254;
      doubleArray0[0] = doubleArray1;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      String string0 = basic2DMatrix0.toMatrixMarket();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(string0);
      assertEquals("%%MatrixMarket matrix array real general\n0 0\n", string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1254;
      intArray0[1] = 1254;
      intArray0[2] = 1254;
      intArray0[3] = (-3000);
      CRSMatrix cRSMatrix0 = new CRSMatrix(1254, 1254, 1254, doubleArray1, intArray0, intArray0);
      assertEquals(1254, cRSMatrix0.rows());
      assertEquals(7.974481658692185E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1254, cRSMatrix0.cardinality());
      assertEquals(1254, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {1254.0, 1254.0, 0.0, 1254.0, 1254.0, 1254.0, 1254.0, 0.0, 1254.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {1254, 1254, 1254, (-3000)}, intArray0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.add((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 1254x1254.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(25, 25);
      assertEquals(25, denseMatrix0.rows());
      assertEquals(25, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(25, 25);
      assertEquals(25, cRSMatrix0.rows());
      assertEquals(25, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(25, cRSMatrix0.columns());
      assertEquals(0.04, cRSMatrix0.density(), 0.01);
      assertEquals(25.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      assertEquals(25, denseMatrix0.rows());
      assertEquals(25, denseMatrix0.columns());
      assertEquals(25, matrix0.rows());
      assertEquals(25, matrix0.columns());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(5, 5);
      // Undeclared exception!
      try { 
        cRSMatrix1.getOrElse((-632), (-632), 112.66522788837);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-632' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new OoPlaceMatricesAddition();
      assertFalse(ooPlaceMatricesAddition1.equals((Object)ooPlaceMatricesAddition0));
      assertNotNull(ooPlaceMatricesAddition1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformColumn((-3692), vectorFunction0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = basic2DMatrix0.rowMajorIterator();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(rowMajorMatrixIterator0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateColumn(6, vectorFunction0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(30);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.03333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(30, cCSMatrix0.cardinality());
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(30, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cCSMatrix0.non(matrixPredicate0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.03333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(30, cCSMatrix0.cardinality());
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(30, cCSMatrix0.rows());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 15;
      CRSMatrix cRSMatrix0 = new CRSMatrix(15, 15);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix0.add((double) 15);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, matrix0.rows());
      assertEquals(15, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      matrix0.kroneckerProduct(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(37, mockRandom0);
      assertEquals(37, denseMatrix0.columns());
      assertEquals(37, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.shuffle();
      assertEquals(37, denseMatrix0.columns());
      assertEquals(37, denseMatrix0.rows());
      assertEquals(37, basic2DMatrix0.rows());
      assertEquals(37, basic2DMatrix0.columns());
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotNull(basic2DMatrix0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      doubleArray0[2] = (double) 37;
      doubleArray0[3] = (double) 37;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(37, 53);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(53, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      basic2DMatrix0.updateColumn(3, vectorFunction0);
      assertEquals(37, denseMatrix0.columns());
      assertEquals(37, denseMatrix0.rows());
      assertEquals(37, basic2DMatrix0.rows());
      assertEquals(37, basic2DMatrix0.columns());
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesAddition0.applySymmetric((DenseMatrix) basic2DMatrix0, (SparseMatrix) cRSMatrix0);
      denseMatrix0.determinant();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix1.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(14, 14);
      assertEquals(14, basic2DMatrix0.rows());
      assertEquals(14, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = basic2DMatrix0.max();
      assertEquals(14, basic2DMatrix0.rows());
      assertEquals(14, basic2DMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn((-3231), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.rotate();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, linkedList0.size());
      assertNotNull(objectArray0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.rotate();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
      
      Integer integer0 = new Integer((-1743));
      assertNotNull(integer0);
      assertEquals((-1743), (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      MatrixFactory<SparseMatrix> matrixFactory0 = (MatrixFactory<SparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.non(matrixPredicate0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertFalse(boolean0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.transpose();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cCSMatrix0, 0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(15, 399, (-1459.8794));
      assertEquals(399, basic2DMatrix0.columns());
      assertEquals(15, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      basic2DMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      basic2DMatrix0.hashCode();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.transpose();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.swapRows(1792, 1792);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      int int0 = cCSMatrix1.columns();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, int0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 0);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      CCSMatrix cCSMatrix2 = new CCSMatrix(0, 0);
      assertEquals(0, cCSMatrix2.columns());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.rows());
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 356;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(356, 356);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(356, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(356, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 356;
      doubleArray1[1] = (double) 356;
      doubleArray1[2] = (double) 356;
      doubleArray1[3] = (double) 356;
      doubleArray1[4] = (double) 356;
      doubleArray1[5] = (double) 356;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(6, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInRow(356);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
