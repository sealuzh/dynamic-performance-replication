/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:40:40 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.toString();
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.valueOf("VERTICAL_BAR");
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op regexp_Op2 = Regexp.Op.valueOf("VERTICAL_BAR");
      regexp0.toString();
      regexp0.name = "Bc";
      Regexp.Op.values();
      regexp0.toString();
      Regexp.Op.valueOf("ALTERNATE");
      Regexp.Op.valueOf("VERTICAL_BAR");
      regexp0.toString();
      regexp_Op1.isPseudo();
      regexp_Op1.isPseudo();
      regexp0.toString();
      regexp_Op2.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Carian");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Carian
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      regexp0.min = (-12);
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      regexp0.maxCap();
      regexp0.maxCap();
      regexp0.toString();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp.Op.values();
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.min = 5;
      regexp0.equals(regexp1);
      Object object0 = new Object();
      regexp1.equals(object0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("p':<~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.p':<~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp0.flags = (-188);
      regexp0.equals(",?y}");
      regexp_Op0.isPseudo();
      regexp1.reinit();
      regexp1.maxCap();
      regexp1.maxCap();
      regexp1.equals(regexp_Op0);
      regexp1.max = 0;
      regexp0.equals("");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(" x-$m:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op. x-$m:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp2;
      regexpArray0[7] = regexp0;
      regexp2.subs = regexpArray0;
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.reinit();
      // Undeclared exception!
      try { 
        regexp2.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.toString();
      regexp0.name = "";
      regexp1.cap = (-1036);
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.reinit();
      regexp2.cap = 1114111;
      regexp2.max = 0;
      regexp2.equals(regexp0);
      regexp2.maxCap();
      Regexp.Op.values();
      regexp0.toString();
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp3.equals("(?s:.)");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "Samaritan";
      regexp0.name = "";
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 0;
      regexp0.equals(regexp1);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      int int0 = 11;
      regexp1.min = 11;
      regexp1.op = regexp_Op0;
      regexp1.toString();
      regexp0.name = "";
      regexp0.min = 11;
      regexp1.equals(regexp_Op0);
      regexp1.toString();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp3.flags = (-2020);
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      regexpArray0[7].min = 2093;
      regexp0.min = 2234;
      regexp0.flags = 67840;
      regexp0.toString();
      regexp0.reinit();
      regexp1.equals(regexp0);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "Runic";
      regexp1.toString();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 19;
      regexp0.max = 19;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 13;
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Pattern_White_Space");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Pattern_White_Space
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      int int0 = 2976;
      regexp0.min = 2976;
      Regexp.Op.values();
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.toString();
      regexp1.toString();
      regexp1.toString();
      regexp0.equals(regexp1);
      regexp0.reinit();
      String string0 = "_ev5d(9s*0/";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("_ev5d(9s*0/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op._ev5d(9s*0/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-518);
      int[] intArray0 = new int[2];
      intArray0[0] = (-518);
      intArray0[1] = (-518);
      regexp0.runes = intArray0;
      regexp0.runes = intArray0;
      regexp0.maxCap();
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.name = "";
      regexp0.reinit();
      regexp0.maxCap();
      regexp0.reinit();
      regexp0.min = 0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp0.equals("");
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      Regexp.Op.values();
      regexp1.name = "";
      Regexp.Op.values();
      regexp0.equals(regexp1);
      regexp1.equals("");
      regexp1.equals("");
      regexp0.equals("");
      String string0 = "";
      regexp1.equals("");
      Regexp.Op.values();
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[6] = regexp3;
      regexp0.subs = regexpArray0;
      regexp1.name = "=q";
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.maxCap();
      regexp1.maxCap();
      regexp0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      regexp0.equals(object1);
      regexp0.toString();
      Object object2 = new Object();
      regexp1.equals((Object) null);
      regexp1.maxCap();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      boolean boolean0 = regexp0.equals(object0);
      regexp1.equals("$");
      Object object3 = new Object();
      regexp1.equals(object1);
      Regexp.Op.values();
      regexp1.toString();
      Object object4 = new Object();
      boolean boolean1 = regexp1.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = (-528);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 4134;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2757);
      intArray0[6] = 6;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.reinit();
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.maxCap();
      regexp1.maxCap();
      regexp0.reinit();
      Object object1 = new Object();
      regexp1.equals(object1);
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.maxCap();
      regexp1.maxCap();
      regexp0.reinit();
      regexp1.equals(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp_Op1.isPseudo();
      regexp0.equals(regexp1);
      regexp0.toString();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 322;
      regexp1.toString();
      regexp1.toString();
      Regexp.Op.values();
      regexp0.toString();
      regexp1.maxCap();
      Regexp.Op.values();
      regexp0.toString();
      regexp0.toString();
      boolean boolean0 = regexp1.equals("(?:)");
      regexp0.op = regexp_Op0;
      regexp1.equals((Object) null);
      String string0 = regexp0.toString();
      assertEquals("(?:)", string0);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      regexp1.equals((Object) null);
      boolean boolean1 = regexp0.equals(regexp1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      regexp0.toString();
      regexp0.reinit();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.toString();
      String string0 = "";
      Regexp regexp3 = new Regexp(regexp0);
      regexp2.reinit();
      regexp1.equals(regexp0);
      Object object0 = new Object();
      Regexp regexp4 = new Regexp(regexp0);
      regexp1.equals(regexp4);
      Object object1 = new Object();
      Object object2 = new Object();
      regexp4.equals(object2);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.min = 11;
      regexp1.op = regexp_Op0;
      regexp1.toString();
      regexp0.equals("");
      Object object0 = new Object();
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp1.op = regexp_Op1;
      regexp0.maxCap();
      Regexp regexp2 = new Regexp(regexp1);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      regexp2.runes = intArray0;
      Regexp regexp3 = new Regexp(regexp2);
      regexp3.equals(regexp0);
      regexp3.equals(regexp1);
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp.Op.values();
      Regexp.Op regexp_Op2 = Regexp.Op.LEFT_PAREN;
      Regexp regexp4 = new Regexp(regexp_Op2);
      assertFalse(regexp4.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-1124);
      int int0 = 4180;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.name = "G=8spWQ_";
      regexp0.equals(regexp1);
      regexp0.min = 65629;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.name = "DGP2?[Er@m^";
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals("Variation_Selector");
      regexp0.flags = 19;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op.values();
      regexp0.cap = 4;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 498;
      regexp0.cap = 11;
      regexp0.reinit();
      regexp0.reinit();
      regexp1.max = (-567);
      regexp1.equals(regexp0);
      regexp1.op = regexp_Op0;
      regexp1.maxCap();
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 4134;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2757);
      intArray0[6] = 6;
      intArray0[7] = 6;
      intArray0[8] = 0;
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 2811;
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      regexp0.flags = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 4134;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2757);
      intArray0[6] = 6;
      intArray0[7] = 6;
      intArray0[8] = 0;
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp_Op1.isPseudo();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 125;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.max = 125;
      regexp1.min = 435;
      regexp1.flags = 392;
      regexp0.equals(regexp1);
      Regexp.Op.values();
      regexp0.maxCap();
      regexp1.maxCap();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("HO;3Ndb76kL(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.HO;3Ndb76kL(
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      regexp1.maxCap();
      regexp1.maxCap();
      regexp0.reinit();
      regexp1.equals(regexp_Op0);
      regexp_Op0.isPseudo();
      String string1 = regexp1.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      boolean boolean0 = regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean1 = regexp1.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      
      regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp0.op = regexp_Op2;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.maxCap();
      String string0 = regexp0.toString();
      assertEquals("(?-s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-340);
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 19;
      regexp0.max = 19;
      regexp0.reinit();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 19;
      intArray0[2] = 0;
      intArray0[3] = 19;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      intArray0[4] = 19;
      intArray0[5] = 0;
      regexp0.min = 19;
      regexp0.equals((Object) null);
      intArray0[6] = 0;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op.values();
      regexp0.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 2147483645;
      String string0 = regexp0.toString();
      assertEquals("(?-m:$)", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp_Op0.isPseudo();
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.reinit();
      int int0 = regexp2.maxCap();
      assertEquals(0, int0);
      
      boolean boolean1 = regexp0.equals(regexp1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 1737;
      regexp0.name = null;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      int[] intArray0 = new int[5];
      intArray0[0] = 2047;
      intArray0[1] = 2975;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 16;
      regexp1.runes = intArray0;
      Regexp.Op.values();
      regexp1.toString();
      regexp1.reinit();
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp0.equals(regexp_Op0);
      int[] intArray1 = new int[0];
      regexp0.toString();
      regexp0.runes = intArray1;
      regexp0.toString();
      regexp0.op = regexp_Op0;
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp0.reinit();
      regexp0.maxCap();
      regexp0.maxCap();
      regexp0.reinit();
      regexp0.equals("[^x00-x{10FFFF}]");
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      regexp0.flags = 0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 14;
      boolean boolean0 = regexp0.equals(regexp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp regexp3 = new Regexp(regexp2);
      Object object0 = new Object();
      boolean boolean0 = regexp1.equals(object0);
      Regexp.Op.values();
      boolean boolean1 = regexp1.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.toString();
      regexp0.name = "";
      regexp1.cap = (-1036);
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.reinit();
      regexp2.cap = 1114111;
      regexp2.max = 0;
      regexp2.name = "";
      regexp2.equals(regexp1);
      Object object0 = new Object();
      regexp0.equals(object0);
      Object object1 = new Object();
      regexp2.equals(object1);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-3280);
      intArray0[4] = 0;
      regexp1.runes = intArray0;
      intArray0[5] = 0;
      intArray0[6] = 2608;
      regexp2.runes = intArray0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      regexp0.reinit();
      Regexp.Op.values();
      regexp0.toString();
      regexp0.maxCap();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      boolean boolean1 = regexp_Op1.isPseudo();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.cap = (-868);
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      int[] intArray0 = new int[8];
      intArray0[0] = (-868);
      intArray0[1] = (-868);
      intArray0[2] = (-868);
      intArray0[3] = (-868);
      intArray0[4] = (-868);
      intArray0[5] = (-868);
      intArray0[6] = (-868);
      intArray0[7] = (-868);
      regexp1.runes = intArray0;
      regexp1.min = 65936;
      Regexp.Op.values();
      regexp1.cap = 12;
      regexp1.toString();
      regexp1.toString();
      boolean boolean0 = regexp_Op0.isPseudo();
      regexp1.reinit();
      regexp1.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp1.op = regexp_Op1;
      regexp1.maxCap();
      regexp0.reinit();
      regexp0.reinit();
      regexp0.reinit();
      regexp_Op0.isPseudo();
      regexp1.toString();
      boolean boolean1 = regexp0.equals("Gt6HB.JjU5@{91yO2");
      assertTrue(boolean1 == boolean0);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp1.equals(regexp3);
      assertTrue(boolean0);
      
      Regexp.Op.values();
      int int0 = regexp3.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      assertEquals("\\B", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = null;
      regexp1.name = "";
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp0.equals("");
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 19;
      Regexp.Op.values();
      regexp1.name = "";
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      regexp0.equals(regexp1);
      regexp1.equals("");
      regexp1.equals("");
      regexp0.equals("");
      regexp1.toString();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int[] intArray0 = new int[1];
      regexp1.runes = intArray0;
      intArray0[0] = 7;
      regexp1.runes = intArray0;
      regexp0.equals(regexp1);
      regexp1.toString();
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
      
      regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.flags = 0;
      regexp0.name = "(?i:";
      regexp0.max = (-1302);
      regexp0.runes = null;
      regexp0.reinit();
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = "";
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp3.reinit();
      Object object0 = new Object();
      regexp1.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      regexp1.equals(object2);
      Object object3 = new Object();
      Regexp regexp4 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp3.equals(regexp4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
