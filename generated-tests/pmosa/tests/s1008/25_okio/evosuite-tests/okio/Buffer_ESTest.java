/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:35:21 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readByteString(19L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=19
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      assertFalse(buffer0.exhausted());
      
      buffer0.readUtf8();
      buffer1.snapshot(0);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      buffer0.writableSegment((byte)17);
      buffer0.require((-1537L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)112;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.hmacSha256(byteString0);
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe((byte)70);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-430L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(3005L);
      buffer0.indexOf((byte)17, 255L);
      int int0 = buffer0.readInt();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1123352576), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1381L);
      buffer0.indexOf((byte)0, (long) (byte)0);
      byte byte0 = (byte) (-64);
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-64), (-1511L), (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=8 fromIndex=-1511 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-546L));
      Buffer buffer1 = buffer0.buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      HashingSource.md5(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.emit();
      // Undeclared exception!
      try { 
        buffer1.readByteArray((long) (byte) (-109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-109
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 1031L;
      Pipe pipe0 = new Pipe(1031L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(0L);
      buffer1.readLongLe();
      Object object0 = new Object();
      buffer1.equals(object0);
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(1031L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(0L);
      buffer1.readLongLe();
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals(1000000000000000L, byteString0, (-1), (-1));
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-87);
      inflater0.setInput(byteArray0);
      BufferedSink bufferedSink0 = buffer0.write((Source) inflaterSource0, 0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.inputStream();
      buffer1.indexOf((byte)76);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      boolean boolean0 = buffer0.rangeEquals(8L, byteString0, 8, 496);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) buffer0, 37L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 5357L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(8);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      Buffer buffer1 = buffer0.writeByte(0);
      assertEquals(1L, buffer0.size());
      
      buffer0.readUtf8();
      long long0 = buffer1.writeAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      gzipSource0.close();
      String string0 = "";
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(70);
      assertFalse(buffer0.exhausted());
      
      buffer0.clear();
      long long0 = buffer0.indexOf((byte)70, 999999918096377L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("");
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("xxaGk!A 1CngP^5.qm", (-2906), 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2906
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8(",<[ei", 1083, 1083);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1083 > 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      deflaterSink0.flush();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      deflater0.setLevel((-1));
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      buffer0.write(byteArray0);
      Buffer buffer1 = buffer0.writeIntLe(580);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xfffffffd
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0, 8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 8192L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-48);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      buffer0.readFrom((InputStream) bufferedInputStream0);
      buffer0.readLongLe();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.readByte();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 10;
      Buffer buffer1 = buffer0.writeInt(10);
      buffer0.readByte();
      buffer0.clear();
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.exhausted();
      // Undeclared exception!
      try { 
        buffer0.write(buffer_UnsafeCursor1.buffer, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)15;
      realBufferedSink0.buffer.write(byteArray0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.hmacSha1(byteString0);
      assertEquals(9L, buffer2.size());
      
      buffer0.writeUtf8("2Af#.CdO~", 0, 0);
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.toString();
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      String string0 = buffer1.readUtf8Line();
      assertNull(string0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.hmacSha1(byteString0);
      Buffer buffer3 = buffer0.writeUtf8("2Af#.CdO~", 0, 0);
      buffer3.sha512();
      assertTrue(buffer3.exhausted());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Pipe pipe0 = new Pipe(1031L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong(0L);
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-1);
      inflater0.setInput(byteArray0);
      buffer0.indexOf((byte)13);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 2553L;
      Pipe pipe0 = new Pipe(2553L);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readByteString(839L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=839
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      BufferedSink bufferedSink0 = buffer0.write((Source) inflaterSource0, (-2089L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(10L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      long long0 = (-422L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-422L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer2.writeLong(944L);
      buffer3.readAndWriteUnsafe();
      assertFalse(buffer2.equals((Object)buffer0));
      
      realBufferedSink0.writeUtf8CodePoint(378);
      realBufferedSink0.buffer.equals((Object) null);
      int int0 = realBufferedSink0.buffer.readIntLe();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.head;
      Buffer buffer1 = buffer0.buffer();
      buffer1.clear();
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("offset=%s > size=%s", charset0);
      assertEquals(19L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(999999999999993L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource1.buffer;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = null;
      realBufferedSource0.buffer.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(329L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer0.hmacSha512(byteString1);
      pipe0.sinkClosed = false;
      // Undeclared exception!
      try { 
        buffer0.snapshot(4416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4416
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(8L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-3447L));
      buffer0.indexOf((byte) (-26), 255L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(8193);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 57343;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57343);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
      
      buffer0.segmentSizes();
      long long0 = buffer0.indexOf((byte) (-38), 6L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(70);
      buffer0.clear();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("V7*'AwV6)", charset0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(23);
      assertFalse(buffer0.exhausted());
      
      SegmentPool.byteCount = 82L;
      buffer0.readByteString();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      buffer0.writeUtf8CodePoint((byte) (-13));
      byteArray0[1] = (byte) (-107);
      buffer0.indexOf((byte) (-107));
      byteArray0[2] = (byte) (-84);
      buffer0.read(byteArray0);
      buffer0.sha1();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeUtf8CodePoint((-1652));
      realBufferedSource0.buffer.indexOf((byte) (-107));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      realBufferedSink0.buffer.indexOfElement(byteString0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-84);
      realBufferedSink0.buffer.read(byteArray0);
      buffer2.sha1();
      assertEquals(1L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((-1783));
      buffer0.sha512();
      assertFalse(buffer0.exhausted());
      
      short short0 = buffer0.readShort();
      assertEquals((short)2553, short0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4L);
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(773L);
      assertEquals(3L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pipe pipe0 = new Pipe(1031L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeLong(0L);
      Object object0 = new Object();
      buffer1.equals(object0);
      buffer1.readIntLe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer2 = buffer0.copyTo(outputStream0);
      buffer2.require((-1089L));
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1875L);
      MockFile mockFile0 = new MockFile("sb2]ttlz rlr)95/;");
      MockFile mockFile1 = new MockFile(mockFile0, "newSize < 0: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      buffer1.copyTo((OutputStream) mockFileOutputStream0);
      assertEquals(4L, buffer0.size());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(6261L, long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(289);
      Buffer buffer1 = buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(2119951806);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7e5be5be
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.writeAll(buffer1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer2 = buffer0.writeTo(outputStream0);
      assertTrue(buffer2.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1393L));
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"?Lb6nAXLjqgpj)");
      buffer1.writeTo((OutputStream) mockPrintStream0, 0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      long long0 = 8L;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-859L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSink0.buffer.indexOf(byteString0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.writeAll(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAll(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.sha512();
      buffer1.inputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(77L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      buffer0.rangeEquals(77L, byteString1, (-1145), 2145520683);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      buffer0.writeAll(realBufferedSink1.buffer);
      ByteString byteString2 = buffer0.snapshot();
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      // Undeclared exception!
      try { 
        buffer1.readByteString(10L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-1454L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1454
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.readUtf8Line();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(4);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertEquals(1L, buffer1.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      buffer0.hmacSha256(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(2147483519);
      long long0 = buffer0.readAll(bufferedSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(765L);
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = true;
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.clear();
      pipe0.sinkClosed = false;
      buffer0.writeIntLe(2147481500);
      buffer0.request(242L);
      ByteString byteString0 = null;
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        buffer0.snapshot((-2147483646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-2147483646
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(49L);
      buffer0.readAll(bufferedSink0);
      Buffer buffer1 = buffer0.writeIntLe(92);
      buffer1.readByteString();
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("^'4W'");
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((-1783));
      buffer0.writeUtf8("KbN");
      buffer0.sha512();
      buffer0.readShort();
      boolean boolean0 = buffer1.exhausted();
      assertEquals(3L, buffer1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      buffer0.hmacSha256(byteString0);
      buffer0.clear();
      buffer0.writeShort(2);
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = buffer0.rangeEquals((long) (byte) (-103), byteString0);
      assertFalse(boolean0);
      
      long long0 = buffer0.indexOf((byte) (-103), 1000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(10);
      buffer1.readUtf8LineStrict((long) 10);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(1031L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(0L);
      Object object0 = new Object();
      buffer1.equals(object0);
      buffer1.readIntLe();
      buffer1.readUtf8CodePoint();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-497));
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((long) (-497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -497
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(88);
      try { 
        buffer1.readUtf8LineStrict((long) 88);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=58\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeInt(64);
      buffer2.copyTo(buffer_UnsafeCursor0.buffer, (long) 0, (long) 0);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict(100000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)1;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      HashingSource hashingSource2 = HashingSource.hmacSha256(hashingSource1, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeUtf8("T4nz");
      ByteString byteString1 = realBufferedSource0.buffer.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor1.close();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(580);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) 580);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=580
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.readUnsafe();
      realBufferedSink0.writeByte(3225);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer2 = realBufferedSink0.buffer.writeTo(outputStream0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-541));
      MockPrintStream mockPrintStream0 = new MockPrintStream("icp");
      buffer1.writeTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) mockPrintStream0, 278L, 1000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=278 byteCount=1000000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.size = (long) 1551;
      boolean boolean0 = buffer1.rangeEquals(1541L, byteString0, 1551, 3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(38);
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1031L);
      buffer0.writeShortLe((-1638));
      ByteString byteString0 = buffer0.sha512();
      buffer0.hmacSha256(byteString0);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      buffer0.writeIntLe(580);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(4L, buffer0.size());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(580);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      buffer1.rangeEquals((long) 580, byteString1, 580, (-284));
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-2013L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-2013
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      try { 
        buffer0.readFully(buffer1, 1000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeUtf8CodePoint(104);
      ByteString byteString0 = buffer0.sha256();
      buffer0.indexOfElement(byteString0);
      Buffer buffer1 = buffer0.writeShortLe(1114136);
      buffer1.clear();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-92), (long) (byte) (-92));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-92 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(613);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      long long0 = buffer1.indexOfElement(byteString1);
      assertEquals((-1L), long0);
      
      buffer_UnsafeCursor0.buffer.snapshot();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.readUtf8Line();
      int int0 = 4;
      Buffer buffer2 = buffer1.writeUtf8CodePoint(4);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      long long0 = 255L;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      try { 
        realBufferedSource0.readByteString(3058L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(38);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 4280L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      buffer0.hashCode();
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      buffer0.hashCode();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(4);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.segmentSizes();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VZ+Oas_y7}ma3");
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-75);
      buffer0.write(byteArray0);
      buffer0.indexOf((byte)36, 32L);
      buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)32, 32L);
      buffer0.writeDecimalLong(10L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1L));
      buffer_UnsafeCursor0.buffer.timeout();
      assertEquals(2L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(2147221407);
      buffer0.clone();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      Buffer buffer1 = new Buffer();
      buffer0.indexOf((byte) (-49), 99999999918473216L);
      buffer0.writeDecimalLong((-34L));
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(1L, long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(71776119061217280L);
      buffer1.hashCode();
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-99999999999999998L));
      buffer0.writeUtf8CodePoint(13);
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-769L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -769
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha1();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeIntLe(597);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) buffer2, 9999999L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      long long0 = 1000000000000L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)38;
      HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        buffer0.readUtf8LineStrict(15L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=13 content=31303030303030303030303030\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeUtf8CodePoint(85);
      ByteString byteString0 = buffer0.sha256();
      buffer0.indexOfElement(byteString0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1518);
      buffer1.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x55
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      Buffer buffer1 = buffer0.writeIntLe(1084);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x3c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(85);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x55
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)69;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)57;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      buffer0.hmacSha512(byteString0);
      buffer0.indexOf((byte)34, 73L);
      Buffer buffer1 = buffer0.writeDecimalLong(99999999918178304L);
      buffer1.readFully(byteArray0);
      buffer0.readAndWriteUnsafe();
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = buffer1.writeDecimalLong(1000000000000L);
      buffer2.readIntLe();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer3.indexOf(byteString0);
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1L);
      ByteString byteString0 = buffer0.snapshot();
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeDecimalLong(999999999986L);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(99999999999L);
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(224);
      assertFalse(buffer0.exhausted());
      
      buffer0.readUtf8CodePoint();
      buffer1.snapshot();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      Buffer buffer1 = buffer0.writeByte(422);
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(0L, buffer1.size());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8200);
      buffer0.readUnsafe();
      buffer0.readUtf8CodePoint();
      buffer0.request((-1));
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-99);
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      buffer0.indexOf((byte) (-99), (long) (byte)57);
      buffer0.writeDecimalLong(9223372036854775806L);
      assertEquals(19L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeUtf8CodePoint((-2854));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffda
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 38;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      ByteString byteString1 = new ByteString((byte[]) null);
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      buffer1.writeShortLe(48);
      buffer0.rangeEquals(2L, byteString0);
      // Undeclared exception!
      try { 
        buffer0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(53);
      ByteString[] byteStringArray0 = new ByteString[2];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1L);
      assertEquals(1L, buffer0.size());
      
      buffer0.readHexadecimalUnsignedLong();
      buffer1.hashCode();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.readUtf8Line();
      buffer0.writeDecimalLong(1000000000000L);
      assertEquals(13L, buffer0.size());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = new Buffer();
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(281474976710656L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(3);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(1L, buffer0.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      try { 
        buffer0.readUtf8Line((long) 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(3);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer1.readDecimalLong();
      buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-156L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -156
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      long long0 = buffer1.readDecimalLong();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.readUtf8Line();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      buffer1.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10000L);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 29;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(29);
      buffer1.sha256();
      buffer0.writeDecimalLong(57343);
      Buffer buffer2 = buffer1.writeUtf8CodePoint((-1842));
      buffer2.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      buffer0.hashCode();
      buffer0.writeDecimalLong(639L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0);
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(38);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeDecimalLong(1000000000L);
      byte byte0 = (byte)19;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "2^(An&0s+Ve{hc2%T8=");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeDecimalLong((-1));
      assertEquals(2L, buffer1.size());
      
      long long0 = buffer0.readDecimalLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      ByteString byteString0 = buffer1.snapshot();
      buffer0.indexOf(byteString0);
      buffer1.outputStream();
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      Buffer buffer1 = buffer0.writeIntLe(1084);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x3c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = buffer1.writeDecimalLong(8192L);
      pipe0.sourceClosed = true;
      buffer2.sha512();
      pipe0.sinkClosed = true;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer2.readUtf8Line((long) 1);
      // Undeclared exception!
      try { 
        buffer2.indexOfElement((ByteString) null, 10000000000000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(573);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, 10000L);
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertEquals("=\u0002\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      buffer0.hashCode();
      buffer0.writeDecimalLong(639L);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(1605);
      // Undeclared exception!
      try { 
        buffer1.read(buffer2, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      buffer0.readUtf8Line();
      Buffer buffer1 = buffer0.writeDecimalLong((-1810L));
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.write(byteString0);
      realBufferedSource0.readByteString();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(4);
      // Undeclared exception!
      try { 
        buffer0.read(buffer2, (-1810L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1810
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1479);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0, (long) 1479);
      buffer0.completeSegmentByteCount();
      buffer0.flush();
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeDecimalLong(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer1.indexOf(byteString0);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString1 = options0.get(3);
      buffer_UnsafeCursor0.buffer.indexOf(byteString1, 255L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.writeDecimalLong(100000L);
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer3.indexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 57343;
      buffer0.writeUtf8CodePoint(57343);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = (-1085L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-1085 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      buffer1.snapshot();
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57358);
      buffer1.hashCode();
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(2924);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)113;
      Segment segment0 = new Segment(byteArray0, 2147221535, (byte)113, true, true);
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.buffer.equals(buffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      boolean boolean0 = buffer1.equals(buffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(88);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        buffer1.readFrom(inputStream0, 2L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeUtf8CodePoint(70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)101;
      realBufferedSink0.buffer.write(byteArray0);
      try { 
        buffer1.readUtf8LineStrict(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=460865\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-3933L));
      buffer0.completeSegmentByteCount();
      try { 
        buffer1.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=2d33393333\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeUtf8CodePoint(70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1817));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.indexOfElement(byteString0);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2967));
      buffer1.sha512();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x69
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      buffer0.writeUtf8("}$Shi<%0D");
      buffer1.readHexadecimalUnsignedLong();
      buffer0.readUtf8Line();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000021L);
      buffer1.writeByte(13);
      Buffer buffer2 = buffer0.writeDecimalLong(1000000000021L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      try { 
        buffer2.readUtf8LineStrict((long) 13);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=13 content=313030303030303030303032310d31303030303030303030303231\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      buffer1.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      Buffer buffer1 = buffer0.writeUtf8("N~?f&l3)O");
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.write(byteString0);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeByte(0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      int int0 = buffer1.selectPrefix(options0);
      assertEquals(0, int0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "in == null");
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2256);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeLong((-1398L));
      assertEquals(3L, buffer0.size());
      
      Segment segment0 = new Segment();
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.writeDecimalLong(16711680L);
      long long0 = buffer2.readDecimalLong();
      assertEquals(16711680L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-3028L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.writeDecimalLong(10000000000000000L);
      buffer0.exhausted();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: -30281000000000000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1000000000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      buffer0.exhausted();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000001000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      buffer1.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(99999918129152L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeDecimalLong(1000000000000L);
      buffer0.exhausted();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 28037546508288010000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1777L);
      Buffer buffer2 = buffer1.writeDecimalLong((-2057L));
      buffer2.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = 830L;
      realBufferedSink0.emit();
      realBufferedSink0.writeShortLe(978);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("unit == null", charset0);
      realBufferedSink0.outputStream();
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeByte(2859);
      buffer2.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)50, (long) (byte)50, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=50 toIndex=2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-2147208540));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-6);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.indexOfElement(byteString0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer3.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1095L));
      buffer1.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.writeIntLe(106);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, (long) (-1), (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2195L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeLong((-2195L));
      int int0 = 1898;
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1898);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ((RealBufferedSink) bufferedSink0).buffer.write(byteString0);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink1 = realBufferedSink0.writeString("%s: actual 0x%08x != expected 0x%08x", charset0);
      byte byte0 = (byte) (-119);
      BufferedSink bufferedSink2 = bufferedSink1.writeLongLe((byte) (-119));
      HashingSource hashingSource1 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource1.hash();
      Buffer buffer2 = realBufferedSink0.buffer.write(byteString1);
      realBufferedSink0.outputStream();
      Buffer buffer3 = buffer2.writeByte((-419));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink3 = bufferedSink1.writeHexadecimalUnsignedLong((byte) (-119));
      InputStream inputStream0 = ((RealBufferedSink) bufferedSink3).buffer.inputStream();
      String string0 = buffer1.readUtf8Line();
      ((RealBufferedSink) bufferedSink3).buffer.readFrom(inputStream0);
      ((RealBufferedSink) bufferedSink2).buffer.writeString(string0, (int) byte0, int0, charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      long long0 = (-587L);
      buffer_UnsafeCursor0.resizeBuffer(long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2195L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeLong((-2195L));
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1898);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ((RealBufferedSink) bufferedSink0).buffer.write(byteString0);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink1 = realBufferedSink0.writeString("%s: actual 0x%08x != expected 0x%08x", charset0);
      bufferedSink1.writeLongLe((byte) (-119));
      HashingSource hashingSource1 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource1.hash();
      Buffer buffer2 = realBufferedSink0.buffer.write(byteString1);
      realBufferedSink0.outputStream();
      Buffer buffer3 = buffer2.writeByte((-419));
      realBufferedSink0.writeHexadecimalUnsignedLong((byte) (-119));
      BufferedSink bufferedSink2 = bufferedSink1.writeHexadecimalUnsignedLong((byte) (-119));
      ((RealBufferedSink) bufferedSink1).buffer.toString();
      ((RealBufferedSink) bufferedSink2).buffer.inputStream();
      buffer1.readUtf8Line();
      ((RealBufferedSink) bufferedSink1).buffer.writeShort((byte) (-119));
      buffer3.readFully(buffer0, 1L);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2195L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((-2195L));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.substring(2);
      realBufferedSink1.buffer.write(byteString0);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink1 = realBufferedSink0.writeString("%s: actual 0x%08x != expected 0x%08x", charset0);
      BufferedSink bufferedSink2 = bufferedSink1.writeLongLe((byte)114);
      HashingSource hashingSource1 = HashingSource.sha256(buffer0);
      hashingSource1.hash();
      realBufferedSink0.outputStream();
      ((RealBufferedSink) bufferedSink2).buffer.writeByte((-419));
      realBufferedSink0.writeHexadecimalUnsignedLong((byte)114);
      bufferedSink1.writeHexadecimalUnsignedLong((byte)114);
      ((RealBufferedSink) bufferedSink1).buffer.toString();
      buffer1.readUtf8Line();
      ((RealBufferedSink) bufferedSink1).buffer.writeShort((byte)114);
      ((RealBufferedSink) bufferedSink2).buffer.write((Source) realBufferedSink1.buffer, (long) 2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.delegate();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.writeAll(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Buffer buffer3 = realBufferedSink0.buffer.write(byteString0);
      realBufferedSink0.outputStream();
      Buffer buffer4 = buffer3.writeByte(266);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-2001L));
      realBufferedSink0.writeHexadecimalUnsignedLong((-419));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.writeUtf8CodePoint((-568));
      realBufferedSink1.buffer.inputStream();
      buffer4.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2195L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeLong((-2195L));
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1898);
      realBufferedSink0.writeHexadecimalUnsignedLong(1898);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.write(byteString0);
      Charset.defaultCharset();
      buffer2.writeByte(10);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10);
  }
}
