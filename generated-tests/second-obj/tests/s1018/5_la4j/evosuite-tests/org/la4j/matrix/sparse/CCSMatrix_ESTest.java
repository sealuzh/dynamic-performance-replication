/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:30:05 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(205, 205, 205);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      assertEquals(0, cCSMatrix0.rows());
      
      cCSMatrix0.product();
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(7, (-1754), (double) 0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CCSMatrix.from1DArray(0, 0, doubleArray0);
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 7, 302.2654, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1324;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 1324, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 16;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(1279, 1279);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1279, cCSMatrix0.rows());
      assertEquals(1279, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      assertNotNull(cCSMatrix1);
      assertArrayEquals(new int[] {16}, intArray0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1279, cCSMatrix0.rows());
      assertEquals(1279, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-121), 2.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -121x-121
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      assertNotNull(cCSMatrix0);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      double double0 = 0.8;
      boolean boolean0 = cCSMatrix0.isColumnMajor();
      assertTrue(boolean0);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MatrixOperation<CCSMatrix> matrixOperation0 = (MatrixOperation<CCSMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(0.8);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.8, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZeroInRow((-562), (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      assertNotNull(sparseMatrix0);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(2.0, sparseMatrix0.max(), 0.01);
      assertEquals(2, sparseMatrix0.cardinality());
      assertEquals(0.5, sparseMatrix0.density(), 0.01);
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(2, sparseMatrix0.rows());
      
      double double0 = cCSMatrix0.determinant();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfColumns(2);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.nonZeroColumnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.shuffle();
      assertNotNull(cCSMatrix1);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("J_b~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1324;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 1324, doubleArray0);
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {1324.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1324, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(0, 0);
      assertNotNull(cCSMatrix1);
      assertArrayEquals(new double[] {1324.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1324, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix1.nonZeroColumnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertArrayEquals(new double[] {1324.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1324, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      assertArrayEquals(new double[] {1324.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1324, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-191.8135507108);
      doubleArray0[3] = (-191.8135507108);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2011);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2011).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(10, 10, matrixFunction0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.isColumnMajor();
      CCSMatrix.fromBinary((byte[]) null);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[7] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertNotNull(sparseVector0);
      assertEquals(12, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      cCSMatrix1.setAll(0.0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-1681));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertNotNull(sparseVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1, sparseVector0.length());
      
      CompressedVector compressedVector0 = (CompressedVector)sparseVector0.divide((-1828.9824320805708));
      assertNotNull(compressedVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1, sparseVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(compressedVector0, sparseVector0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1, sparseVector0.length());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertNotSame(sparseVector0, compressedVector0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1, sparseVector0.length());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(4, cCSMatrix1.cardinality());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(2, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      
      String string0 = cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n1 1 1\n1 1 1\n", string0);
      assertNotNull(string0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1, sparseVector0.length());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      double double0 = (-2182.1437);
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(667, 667, doubleArray0);
      assertNotNull(matrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(667, matrix0.rows());
      assertEquals(667, matrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      double double1 = cCSMatrix0.min();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(3, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.columns());
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(1323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1323
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      assertNotNull(denseMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      double double0 = new Integer(205);
      assertEquals(205, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      int[] intArray0 = new int[1];
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-3925));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3924
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 17;
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 13);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(13, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(17, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(13, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(17, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1674, 4, matrixFunction0);
      assertEquals(17.0, cCSMatrix0.max(), 0.01);
      assertEquals(13, cCSMatrix0.columns());
      assertEquals(0.004524886877828055, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(17, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(13, 4, (double) 13, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      double double0 = cCSMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(48, 0.0, (Random) mockRandom0);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(48, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(48, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      cCSMatrix1.product();
      CCSMatrix.fromMatrixMarket((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Matrix matrix0 = null;
      int int0 = 468;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(468, 468, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      int int1 = 0;
      cCSMatrix0.insert(matrix0, int1, intArray0[0]);
      int int2 = 37;
      intArray0[1] = int2;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1281;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1281, 1281);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1281, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1281, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      
      cCSMatrix0.product();
      byte[] byteArray0 = new byte[0];
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.divide((-1832.53));
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      int int1 = (-3925);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        matrix0.getColumn(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom((-364L));
      // Undeclared exception!
      try { 
        CCSMatrix.random(3511, (-1249), (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-537.531);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.copyOfShape(0, 0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = (-191.8135507108);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 302.2654;
      doubleArray1[4] = 3267.7;
      doubleArray1[5] = (-675.23);
      doubleArray1[6] = (-493.212866306);
      doubleArray1[7] = (-1998.6591772);
      doubleArray1[8] = (-3212.354346379516);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) columnMajorSparseMatrix0, 241, 241, 1292, 682);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 241, 241
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1906L);
      mockRandom0.nextLong();
      CCSMatrix.random(4, 4, 0.8, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2371, 2371, 2371);
      cCSMatrix0.isColumnMajor();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(6);
      cCSMatrix1.isColumnMajor();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(6, 1291);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(1250);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.6186099456011863);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      float float0 = new Integer(4);
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 13);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      mockRandom0.nextInt();
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1674, 4, matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(13, 4, (double) 13, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.setAll(0.8);
      cCSMatrix0.iteratorOrNonZeroColumns();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(1, vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator1).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.transpose();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1345, 1345);
      cCSMatrix0.minInColumn(1285);
      int[] intArray0 = new int[1];
      intArray0[0] = 1285;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      int int0 = 151;
      int int1 = 7;
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-2116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2116.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2371;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2371, 2371, 2371);
      Matrix matrix0 = cCSMatrix0.add((double) 2371);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.isColumnMajor();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2);
      cCSMatrix1.isColumnMajor();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2371, (double)2, (double)2, (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.toRowVector();
      cCSMatrix1.update(matrixFunction0);
      int int1 = 175;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix1, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1062);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.minInColumn((-4052));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 27;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = (double) 27;
      doubleArray0[3] = (double) 27;
      doubleArray0[4] = (-2942.4125543364);
      doubleArray0[5] = (double) 27;
      doubleArray0[6] = (double) 27;
      doubleArray0[7] = (double) 27;
      doubleArray0[8] = (double) 27;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(27, 27, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(13, 13, 13);
      cCSMatrix0.sum();
      int int1 = 3533;
      Matrix.unit(13, 3533);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.nextFloat();
      mockRandom0.longs(9974L);
      mockRandom0.nextBoolean();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)14;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1269, Double.POSITIVE_INFINITY);
      cCSMatrix0.set(13, 479, 2022.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-191.8135507108);
      doubleArray0[3] = (-191.8135507108);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2011);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(10, 16, matrixFunction0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.isColumnMajor();
      byte[] byteArray0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary((byte[]) null);
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix1.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1324, 1324);
      cCSMatrix0.minInColumn(1287);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1287);
      cCSMatrix1.euclideanNorm();
      int int0 = 1548;
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.divide((-1828.9824320805708));
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      Locale locale0 = Locale.ENGLISH;
      Matrix matrix1 = cCSMatrix0.copyOfShape(369, 1);
      UnaryOperator.identity();
      matrix1.max();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          NumberFormat.getNumberInstance();
          CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(5, 0.9, (Random) mockRandom0);
          cCSMatrix0.setAll(Double.POSITIVE_INFINITY);
          // Undeclared exception!
          try { 
            cCSMatrix0.minInColumn((-1815));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // -1815
             //
             verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.divide((-1828.9824320805708));
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      Locale locale0 = Locale.ENGLISH;
      Matrix matrix1 = cCSMatrix0.copyOfShape(369, 1);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix1.to(matrixFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte byte0 = (byte)50;
      int int0 = 1131;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1131, 3328.0);
      cCSMatrix0.minInColumn((byte)50);
      int[] intArray0 = new int[0];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      VectorAccumulator vectorAccumulator0 = null;
      cCSMatrix0.foldNonZeroInRow(int0, vectorAccumulator0);
      double double0 = 0.0;
      cCSMatrix0.setAll(double0);
      CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, matrix0);
      cCSMatrix0.copyOfColumns(int0);
      byte byte1 = (byte) (-23);
      byte byte2 = (byte)19;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      byteArray0[3] = byte2;
      cCSMatrix0.nonZeroColumnMajorIterator();
      double double1 = 1280.0;
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric((int) byteArray0[3], double1, (Random) mockRandom0);
      cCSMatrix1.nonZeroAt(byte2, byteArray0[2]);
      int int1 = 172;
      CCSMatrix.zero(int0, int1);
      int int2 = 186;
      CCSMatrix.zero(int0, int2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1864;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1864, (-514.2511));
      double double0 = cCSMatrix0.max();
      int int1 = 941;
      double[] doubleArray0 = new double[2];
      cCSMatrix0.setColumn(966, (Vector) null);
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = double0;
      CCSMatrix.from1DArray(int0, int1, doubleArray0);
      String string0 = null;
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.iteratorOrNonZeroColumns();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(1, vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator1).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator1);
      byte[] byteArray0 = new byte[1];
      org.evosuite.runtime.Random.setNextRandom(1);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-191.8135507108);
      doubleArray0[3] = 313.64157749328473;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.copyOfShape(1042, 1042);
      cCSMatrix0.nonZeroColumnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      MockRandom mockRandom0 = new MockRandom(0);
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = new CCSMatrix(2, (-1432));
      MatrixFactory<Matrix> matrixFactory0 = null;
      cCSMatrix1.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 1844;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1844, 302.2654);
      double double0 = cCSMatrix0.max();
      int int1 = 941;
      double[] doubleArray0 = new double[2];
      cCSMatrix0.toRowMajorSparseMatrix();
      int int2 = 966;
      Vector vector0 = null;
      int int3 = 37;
      int int4 = 1840;
      CCSMatrix.zero(int3, int4);
      cCSMatrix0.setColumn(int2, vector0);
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = double0;
      CCSMatrix.from1DArray(int0, int1, doubleArray0);
      String string0 = null;
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.setAll(0.8);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-827), 1807, (double) (-827), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1324;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1324, 1324);
      cCSMatrix0.minInColumn(1287);
      int[] intArray0 = new int[1];
      intArray0[0] = 1287;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      matrix0.setAll(1287);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, matrix0, matrix0, matrix0);
      int int1 = 188;
      cCSMatrix1.copyOfColumns(int1);
      cCSMatrix0.toCSV();
      byte byte0 = (byte) (-23);
      byte byte1 = (byte)108;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      int int2 = 1;
      int int3 = 1134;
      cCSMatrix2.nonZeroAt(int2, int3);
      int int4 = 169;
      CCSMatrix.zero(int4, int0);
      cCSMatrix0.getRow(intArray0[0]);
      CCSMatrix.identity(byteArray0[1]);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1324);
      int int0 = 1287;
      cCSMatrix0.minInColumn(1287);
      int[] intArray0 = new int[1];
      intArray0[0] = 1287;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 100.0;
      doubleArray0[2] = (double) 623;
      matrix0.min();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      linkedList0.remove((-5756));
      Matrix matrix1 = Matrix.diagonal(int0, intArray0[0]);
      int int1 = (-1118);
      int int2 = (-2811);
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int1, int2, doubleArray0);
      int int3 = 1;
      Matrix matrix2 = matrix0.power(int3);
      SparseMatrix.block(denseMatrix0, matrix2, cCSMatrix0, matrix0);
      CCSMatrix.block(matrix0, matrix1, matrix1, matrix1);
      String string0 = "*";
      RowMajorSparseMatrix.fromCSV(string0);
      int int4 = (-3832);
      cCSMatrix0.nonZeroIteratorOfColumn(int4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(205, 205);
      cCSMatrix0.maxInColumn(6);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.setAll(0.8);
      cCSMatrix0.iteratorOrNonZeroColumns();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      cCSMatrix0.setAll(1);
      double[] doubleArray0 = cCSMatrix0.foldColumns(vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(100.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.transpose();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)7;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      RowMajorSparseMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((byte)18, (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(41, 41);
      int int0 = 0;
      Matrix.from1DArray(1181, 3319, (double[]) null);
      cCSMatrix0.setAll(205.0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        cCSMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1);
      cCSMatrix1.nonZeroIteratorOfRow(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.power(1);
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix1.foldNonZeroInRow(1380, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1321);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.minInColumn(1277);
      CCSMatrix.zero(1321, 1277, 1277);
      CCSMatrix.fromCSV("=|sn9R=Q-4d1Zkz7");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(41, 41);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.setAll((-1543.55162146441));
      cCSMatrix0.iteratorOrNonZeroColumns();
      double double0 = 1536.5574;
      double double1 = 3117.169142262758;
      cCSMatrix0.shuffle();
      double double2 = (-3034.154532);
      double double3 = 613.062;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, double0, double2, double3).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      byte byte0 = (byte)8;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = byte0;
      int int0 = 8;
      cCSMatrix0.nonZeroAt(int0, int0);
      int int1 = 0;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, (int) byteArray0[0]);
      cCSMatrix1.infinityNorm();
      cCSMatrix1.maxInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3612.6004213);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 16);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cCSMatrix0.mkString(numberFormat0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, Double.POSITIVE_INFINITY, (-779.508000316475), (double)16, Double.POSITIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.transpose();
      MockRandom mockRandom1 = new MockRandom(16);
      cCSMatrix0.maxInColumn(1);
      CCSMatrix.fromCSV("");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          Integer integer0 = new Integer(4);
          CCSMatrix cCSMatrix0 = new CCSMatrix(17, 13);
          CCSMatrix cCSMatrix1 = CCSMatrix.identity(17);
          cCSMatrix1.nonZeroColumnMajorIterator();
          cCSMatrix1.isColumnMajor();
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          cCSMatrix0.update(matrixFunction0);
          int[] intArray0 = new int[2];
          VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
          cCSMatrix1.transformColumn(13, vectorFunction0);
          intArray0[0] = 4;
          intArray0[1] = 4;
          Matrix matrix0 = cCSMatrix1.select(intArray0, intArray0);
          double[] doubleArray0 = new double[0];
          Matrix.from1DArray(4, 1293, doubleArray0);
          // Undeclared exception!
          try { 
            CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix1);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Sides of blocks are incompatible!
             //
             verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(4);
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 13);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(17);
      cCSMatrix1.nonZeroColumnMajorIterator();
      cCSMatrix1.isColumnMajor();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1244.1632230756, (double)4, 1820.0242895623396, 1244.1632230756, (-7.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17, (double)4, Double.POSITIVE_INFINITY, (double)13, 1244.1632230756).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.transformColumn(13, vectorFunction0);
      CCSMatrix.zero(30, 17);
      cCSMatrix2.nonZeroAt(8, 21);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixOperation<CCSMatrix> matrixOperation0 = (MatrixOperation<CCSMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1, 1, 1);
      cCSMatrix0.setAll(0.8);
      cCSMatrix0.iteratorOrNonZeroColumns();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      NumberFormat.getCurrencyInstance();
      cCSMatrix1.mkString(numberFormat0);
      cCSMatrix0.toDenseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3284.3659).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      cCSMatrix1.transpose();
      int[] intArray0 = new int[1];
      intArray0[0] = (-785);
      cCSMatrix0.max();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        SparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.isColumnMajor();
      MatrixOperation<CCSMatrix> matrixOperation0 = (MatrixOperation<CCSMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1536.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
      cCSMatrix0.getRow(1);
      cCSMatrix0.setAll(0.8);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.setAll(2305.600000023842);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      // Undeclared exception!
      try { 
        cCSMatrix0.add((Matrix) cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1x1 does not equal to 2x2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.isColumnMajor();
      MatrixOperation<CCSMatrix> matrixOperation0 = (MatrixOperation<CCSMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1536.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 1;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2011;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2011);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1, 165, matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.isColumnMajor();
      byte byte0 = (byte) (-42);
      double[][] doubleArray0 = new double[0][8];
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix.identity(int0);
      int int1 = 686;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int1, (int) byte0);
      cCSMatrix1.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      int int0 = 2011;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2011);
      cCSMatrix0.foldNonZeroInRow(3, (VectorAccumulator) null);
      int int1 = 59;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int1, int0, doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      String string0 = "2)Ri`z";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromCSV(string0);
      double double0 = (-3722.726388);
      cCSMatrix2.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.divide((-1828.9824320805708));
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      Locale locale0 = Locale.ENGLISH;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(1, 1);
      // Undeclared exception!
      try { 
        cCSMatrix1.getOrElse(2004, 1474, 2004);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2004' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
