/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 11:53:30 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("kP", (Object) "kP", (Object) "kP");
      Map<Object, Object> map0 = doubleKeyMap0.remove("kP");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>(class0);
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap0 = doubleKeyMap0.remove(integer0, (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class0);
      Integer integer0 = doubleKeyMap0.remove((Object) null, "VS2Z7tP,R`");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer>();
      Map<HashMap<Object, Object>, Integer> map0 = doubleKeyMap0.remove((Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap1.put((Object) null, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>(class0);
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer1 = doubleKeyMap1.put((String) null, (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null);
      String string0 = doubleKeyMap0.put((Object) null, (Object) null, "M2g'H&w$0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.put(object0, (Object) hashMap0, "%twI4 i2");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(map0);
      String string0 = doubleKeyMap2.get("", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
      Integer integer0 = doubleKeyMap0.get((Object) null, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>((Map<Object, Map<String, Object>>) null);
      Map<String, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Map<Object, Object>>, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Map<Object, Object>>, String, Object>((Map<Map<Integer, Map<Object, Object>>, Map<String, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Map<Object, Object>, Map<Object, Object>>> hashMap0 = new HashMap<String, Map<Map<Object, Object>, Map<Object, Object>>>();
      DoubleKeyMap<String, Map<Object, Object>, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, Map<Object, Object>>(hashMap0);
      Map<Object, Map<HashMap<String, Integer>, HashMap<Object, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<String, Integer>, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Integer>, HashMap<Object, Object>>(map0, class0);
      Object object0 = new Object();
      Map<HashMap<String, Integer>, HashMap<Object, Object>> map1 = doubleKeyMap1.get(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2560));
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0);
      doubleKeyMap0.put("U^Hs>RVCdJnrk}+w", integer1, "`gV,BLS~g");
      doubleKeyMap0.remove("U^Hs>RVCdJnrk}+w", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>(class0);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, integer0, (HashMap<Integer, String>) null);
      HashMap<Integer, String> hashMap0 = doubleKeyMap0.put(integer0, (Integer) null, (HashMap<Integer, String>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer((-204));
      DoubleKeyMap<HashMap<Object, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, String>(class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put(hashMap0, (Object) null, "7Ivjoqs&@676\"`");
      String string0 = doubleKeyMap0.get(hashMap0, (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<Integer, Object>, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Object>, HashMap<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, Integer>((Map<String, Map<HashMap<Object, String>, Integer>>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put("", hashMap0, (Integer) null);
      Integer integer0 = doubleKeyMap0.remove("", hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "", (Object) "");
      Object object0 = doubleKeyMap0.remove("", (Object) "");
      assertEquals("", object0);
  }
}
