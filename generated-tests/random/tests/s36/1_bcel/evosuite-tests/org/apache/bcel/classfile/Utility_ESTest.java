/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:48:33 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.EOFException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("30 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"Pfa5yPtGe", "\"Pfa5yPtGe", "\"Pfa5yPtGe", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"Pfa5yPtGe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-71);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.compactClassName("interface", "interface", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = Utility.setBit((byte) (-122), 0);
      assertEquals((-121), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = Utility.setBit((byte)0, (-1271));
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = Utility.setBit(60, 194);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$1", stringArray0);
      assertEquals("()Lorg/apache/bcel/classfile/Utility$1;", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte)91, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = Utility.isSet(1966, (-741));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.format((byte)7, (byte)7, true, '6');
      assertEquals("7666666", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Utility.format(77, (-2212), false, '.');
      assertEquals("77", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.format((byte)0, (byte)0, true, 'I');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.fillup("dcmpl", (byte)90, false, '\"');
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.fillup("getstatic", 90, false, '4');
      assertEquals("444444444444444444444444444444444444444444444444444444444444444444444444444444444getstatic", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.compactClassName(".8^FY%=@~E_|QWeUzY", true);
      assertEquals(".8^FY%=@~E_|QWeUzY", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = Utility.clearBit((-406), (-406));
      assertEquals((-1430), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.accessToString(92);
      assertEquals("protected static final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "-GhhrOY_'z-`v={;", "i2b", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "{S4, S4, java.lang.Object@4a236e48, S4, S4, S4, S4}", "{S4, S4, java.lang.Object@4a236e48, S4, S4, S4, S4}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-1262), true, 'L');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.fillup("74{b}8", (-2495), true, 'S');
      assertEquals("74{b}8", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";kd\"uC\"uIgv.giWOug");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;kd\"uC\"uIgv.giWOug
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(", reference_index = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, reference_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.compactClassName("?K!$bU>'<2]bg9/8ihW", "?K!$bU>'<2]bg9/8ihW", true);
      assertEquals("?K!$bU>'<2]bg9.8ihW", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Utility.compactClassName("L\"dcI5RR(=(DyV;V", "\"dcI5RR(=(DyV", false);
      assertEquals("L\"dcI5RR(=(DyV;V", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.accessToString((-285849207), false);
      assertEquals("public static transient native strictfp enum", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null, null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.convertString("Kj7/");
      assertEquals("Kj7/", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.convertString("bq&jT:rt<P8mOR'GH");
      assertEquals("bq&jT:rt<P8mOR\\'GH", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.convertString("\"dcI5RR(=(DyV");
      assertEquals("\\\"dcI5RR(=(DyV", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("d$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        Utility.decode("(^%z(5_e_QGt5$ 1TMu", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("?K!$bU>'<2]bg9.8ihW", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "5NAaOCGsw))KvW";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"5NAaOCGsw))KvW\"}", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("null, null", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("monitorexit", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byte[] byteArray1 = new byte[6];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[8];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1", false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(50, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.fillup("0:    dcmpl\n", (byte) (-105), false, 'a');
      assertEquals("0:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("c2", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short short0 = Utility.searchOpcode("if_acmpeq");
      assertEquals((short)165, short0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("r4H6aA['a# ==u?S;B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r4H6aA['a# ==u?S;B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("![wV");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZSC{t/");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Yrri~Fa ~(~Qa+zVhK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yrri~Fa ~(~Qa+zVhK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XfP^Pp$N-_D7|6:B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XfP^Pp$N-_D7|6:B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+WS%CxEVf_qy@3W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WS%CxEVf_qy@3W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Vp^k!: F");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U$Up`6;SV}7cG7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U$Up`6;SV}7cG7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Tu>");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S4");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RX_l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RX_l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qb5_IdUX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qb5_IdUX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O*/MS2A>!5Ja'b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O*_/MS2A>!5Ja'b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NeavBV/V7k%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NeavBV/V7k%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MzEe:|tk?|k,u)6(f9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MzEe:|tk?|k,u)6(f9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K!8j0V!2f5$f]Vic387");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K!8j0V!2f5$f]Vic387
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J!l");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H>!uM']J[j1VI6B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H>!uM']J[j1VI6B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GLu8?M33/uL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GLu8?M33/uL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D!`dT");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CxBd=*c}~p7@!\"f6");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BlZrjeMk !xk}^|Z");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A%H_o8bFGQV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A%H_o8bFGQV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?p`#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?p`#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">-Ai{qaS0 %");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >-Ai{qaS0 %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=6bA68)g`b%lfWWl};");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =6bA68)g`b%lfWWl};
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":o+Qtwu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :o+Qtwu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9q{b}!d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9q{b}!d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8j;{\"Ie1vT:B|cC0:PD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8j;{\"Ie1vT:B|cC0:PD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.typeOfSignature("74{b}8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 74{b}8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6[,d|-o)\"D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6[,d|-o)\"D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5iVsOLm<Ct");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5iVsOLm<Ct
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4e 3e 66 5a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4e 3e 66 5a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3$oN qV&cs%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3$oN qV&cs%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2|e1~Ecmz(X:TJ^}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2|e1~Ecmz(X:TJ^}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1AS`)m?kx#KokJ7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1AS`)m?kx#KokJ7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("00 3e 66 5a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 3e 66 5a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".8^FY%=@~E_|QWeUzY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .8^FY%=@~E_|QWeUzY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-ilB-d5\"1#BgF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -ilB-d5\"1#BgF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+@E=)F,1o_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @E=)F,1o_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("*F#8c_W^ID!s");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("()Lorg/apache/bcel/classfile/Utility$1;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Lorg/apache/bcel/classfile/Utility$1;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'9f-7;]I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '9f-7;]I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&-K1lj+G_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &-K1lj+G_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%ZUZ\"L^N4B2VXD_m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %ZUZ\"L^N4B2VXD_m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#syeY{e/iP8z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #syeY{e/iP8z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = Utility.typeOfMethodSignature("(LW;LW;LW;LW;)LW;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "6Yt2vmDUX\"j|4[UA0";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("6Yt2vmDUX\"j|4[UA0", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[UA0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("UmL1AS%%[[gRQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[gRQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a2p2P9(RN7DQ0[V]}I4";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("a2p2P9(RN7DQ0[V]}I4", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "public private static final synchronized transient";
      stringArray0[1] = "public private static final synchronized transient";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\r";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(".2raINA<_9", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "java.lang.strictfp";
      stringArray0[5] = "\n     Method Arguments:";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("boolean", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ly=!5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ly=!5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L%pb+'<}WjG>J;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}WjG>J;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("0:    dcmpl\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dcmpl
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Zf", false);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y]_}qQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y]_}qQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XKv8zuzk{fS|4.T5&v,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XKv8zuzk{fS|4.T5&v,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(W],7Fkl'Y{5ENid");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W],7Fkl'Y{5ENid'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Uz4F8Yk ./;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uz4F8Yk ./;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The wildcard must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Utility.signatureToString("Sensitive", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ro$#l@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ro$#l@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QJ.~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QJ.~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P3ZY>#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P3ZY>#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Object", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Object'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("N@~u!Ptfn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N@~u!Ptfn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(MlvBwhRechI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MlvBwhRechI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Utility.format(170, 1630, false, 'K');
      try { 
        Utility.methodSignatureReturnType(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("vT(7)Hy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hy'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gq,eqGLjPy&y+]~A '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gq,eqGLjPy&y+]~A ''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FH.V\u0000[:R];{1Z", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exceptions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("D!`dT");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CB6is8#^,-K+Y'(X", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("B[1 >=i's1UE<j", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.replace("b6 f5 67 07 22 e8 5b 01 00", "b6 f5 67 07 22 e8 5b 01 00", "float");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.replace("8(O2B%Z!fLY=)D`", "areturn", "8(O2B%Z!fLY=)D`");
      assertEquals("8(O2B%Z!fLY=)D`", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.methodSignatureToString("(L@,%z};)L@,%z};", "(L@,%z};)L@,%z};", "@,%z}", false);
      assertEquals("@,%z} @,%z} (L@,%z};)L@,%z};(@,%z} arg1)", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putfield", "9c<", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("(LQUh%EQtLS>5^,?eQ;LQUh%EQtLS>5^,?eQ;)LQUh%EQtLS>5^,?eQ;", false);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ifnonnull";
      stringArray0[1] = "ifnonnull";
      stringArray0[2] = "ifnonnull";
      stringArray0[3] = "ifnonnull";
      stringArray0[4] = "ifnonnull";
      stringArray0[5] = "void";
      try { 
        Utility.methodTypeToSignature("ifnonnull", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("? extends ", (String[]) null);
      assertEquals("()L?;", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1941), 2433);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = Utility.clearBit(1123, 685);
      assertEquals(1123, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.Object@59260938, java.lang.Object@129bde8e, java.lang.Object@72ea8e94, java.lang.Object@3062b9cb, java.lang.Object@59640936");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Utility.compactClassName("double", "", true);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1325, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1325, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-56);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-57);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)117, (int) (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-58);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, 2160, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, (int) (byte)110, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-60), true);
      assertEquals("0:    nop\n1:    wide\t(wide)\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1122), (int) (byte) (-98));
      assertEquals("0:    monitorexit\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1654), (int) (byte) (-62), false);
      assertEquals("0:    monitorenter\n", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1465, 202, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-64);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 100, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)13, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-66);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-66), 3990, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    arraylength\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-72);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), 598, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 869, 63, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-692), (int) (byte) (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3854, (int) (byte)107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-76);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, (int) (byte)61, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-77);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, 598, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (-944));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (-944));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-80);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte)94, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    areturn\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-81);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte)120);
      assertEquals("0:    nop\n1:    nop\n2:    dreturn\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-82);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-60), true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    freturn\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-60), true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    lreturn\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-87);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-89);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, (-1249));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-90);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2138, 198, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-92);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-66), 3990, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-41), (-24), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-94);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 739, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, 214, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-98);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1122), (int) (byte) (-98));
      assertEquals("0:    nop\n1:    nop\n2:    ifle\t\t#2\n", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-99);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), 963);
      assertEquals("0:    nop\n1:    ifgt\t\t#1\n", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)13, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), (int) (byte) (-9), false);
      assertEquals("0:    ifne\t\t#0\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte) (-57));
      assertEquals("0:    ifeq\t\t#0\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-104);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 138, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 89, false);
      assertEquals("0:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), false);
      assertEquals("0:    nop\n1:    nop\n2:    fcmpl\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-109);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-1501), false);
      assertEquals("1:    nop\n2:    nop\n3:    nop\n4:    i2s\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (int) (byte)82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), (int) (byte) (-30));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    d2f\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-113);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, 171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 2593, false);
      assertEquals("0:    f2d\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 129, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-118);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4065, 1334);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 278);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 278);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-123);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-60), true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    i2l\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%0\t0", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), 598, true);
      assertEquals("0:    lxor\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, (int) (byte) (-13), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (int) (byte)126, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)123;
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1073), 12, true);
      assertEquals("0:    nop\n1:    lshr\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)120;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, 573);
      assertEquals("1:    nop\n2:    ishl\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, 573);
      assertEquals("1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)117;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 52, (int) (byte)86, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)116;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, (int) (byte)61, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)115;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, 241, true);
      assertEquals("8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)113;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 138, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)112;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), (int) (byte) (-9), false);
      assertEquals("0:    nop\n1:    nop\n2:    irem\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)111;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-705), true);
      assertEquals("1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    ddiv\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)110;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 52, (int) (byte)86, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)108;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (-1480), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, (int) (byte)105, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)104;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-60), true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    imul\n", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (int) (byte)82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 2593, false);
      assertEquals("0:    nop\n1:    fsub\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 129, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, 13, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 129, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)94;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte)94, false);
      assertEquals("0:    nop\n1:    dup2_x2\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)92;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte) (-57));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    dup2\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)91;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, 2575, true);
      assertEquals("3:    nop\n4:    nop\n5:    dup_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, 214, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)84;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)82;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-705), true);
      assertEquals("1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    dastore\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 3496);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-41), (-24), false);
      assertEquals("0:    iastore\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)78;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, (-1249));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (-944));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1325, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 739, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), (int) (byte) (-30));
      assertEquals("0:    nop\n1:    dstore_2\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-692), (int) (byte) (-63));
      assertEquals("0:    dstore_1\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)71;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), (int) (byte) (-30));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    dstore_0\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)70;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (-1480), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, (int) (byte)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)68;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), 598, true);
      assertEquals("0:    nop\n1:    nop\n2:    fstore_1\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 129, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)66;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)62;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-1501), false);
      assertEquals("1:    istore_3\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)61;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 138, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, 573);
      assertEquals("1:    istore_1\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)58;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), (int) (byte) (-30));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    astore\t\t%0\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)57;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 129, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, 171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, 1767);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)50;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)50, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 100, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, 598, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)47;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("`d@SwY.|8qzA", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1232), (-1232));
      assertEquals("0:    iadd\n1:    isub\n2:    lstore_1\n3:    aastore\n4:    dneg\n5:    dup\n6:    iaload\n7:    iushr\n8:    fstore\t\t%113\n10:   ishr\n11:   lstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2520, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 129, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)42;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-66), 3990, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    aload_0\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 730, 730);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, 214, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)39;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), false);
      assertEquals("0:    nop\n1:    dload_1\n2:    nop\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)38;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\t\t#", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-535), (-1980), true);
      assertEquals("0:    lconst_0\n1:    lconst_0\n2:    fload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)33;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-1501), false);
      assertEquals("1:    nop\n2:    lload_3\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-1501), false);
      assertEquals("1:    nop\n2:    nop\n3:    lload_2\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 739, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)29;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, (-1249));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)27;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)27);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)26;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-705), true);
      assertEquals("1:    iload_0\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-328), (-328), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)24;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), 91);
      assertEquals("0:    nop\n1:    nop\n2:    dload\t\t%0\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)21;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 111, (int) (byte)68, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)20;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (-1292));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte)127, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-36);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), 598, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte)94, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2056));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = Utility.classOrInterface(8);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = Utility.accessToString(4351, true);
      assertEquals("public private protected static final volatile transient synthetic", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = Utility.accessToString((-447), true);
      assertEquals("public volatile abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals(50, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("[La2p2P9(RN7DQ0;V");
      assertEquals("a2p2P9(RN7DQ0[]", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = Utility.methodSignatureToString("()Lxczz{\"-;", "org.apache.commons.io.filefilter.CanWriteFileFilter", "xczz{\"- JxE8j");
      assertEquals("xczz{\"- JxE8j xczz{\"- org.apache.commons.io.filefilter.CanWriteFileFilter()", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = Utility.signatureToString("VB?B{Zx@_YQ");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = Utility.format((-2029), 49, true, 'K');
      assertEquals("-2029KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = Utility.compactClassName("I", false);
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = Utility.accessToString((-447));
      assertEquals("public volatile interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Jlk(fX6%[w*-N:\"7{Y");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k~u4R&");
      Object[] objectArray0 = new Object[5];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(5, objectArray0.length);
  }
}
