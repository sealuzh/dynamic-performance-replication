/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:02:19 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.store.access.heap.HeapCostController;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "into";
      stringArray0[1] = "into";
      stringArray0[2] = "into";
      stringArray0[3] = "into";
      stringArray0[4] = "into";
      stringArray0[5] = "into";
      String string0 = SQLUtil.innerJoin("into", stringArray0, "IG ", "into", stringArray0);
      assertEquals("IG  as into on into.into = into.into and into.into = into.into and into.into = into.into and into.into = into.into and into.into = into.into and into.into = into.into", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("rI5THsd");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rI5THsd";
      SQLUtil.leftJoin("rI5THsd", stringArray0, "rI5THsd", "rI5THsd", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.normalize(" REFERENCES ", true);
      DBSequence dBSequence0 = new DBSequence(" REFERENCES ", " REFERENCES ", "6,:7%cI./} Y~IG8)");
      SQLUtil.typeAndName(dBSequence0);
      System.setCurrentTimeMillis(899L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("commit(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = " WHERE ";
      SQLUtil.parseColumnTypeAndSize(" WHERE ");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = null;
      String string2 = "SYSTEM_COMBINE_BLOB(";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SYSTEM_COMBINE_BLOB(", compositeDBObject0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.removeComments("drop tabbe");
      DBSchema dBSchema0 = new DBSchema("create unique index");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("drop tabbe");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"q+T^*-7yzUT", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("(~W}h(~", false);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("kf7A{~O~Jv6aiIhYj1", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("OvtUS63Z}qMboY*4B", (DBCatalog) null);
      dBSchema0.setOwner((CompositeDBObject<?>) null);
      SQLUtil.ownerDotComponent(dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{n^6lDI_");
      DBDataType dBDataType0 = DBDataType.getInstance(748, "alter session");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{n^6lDI_", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter session";
      stringArray0[1] = "{n^6lDI_";
      stringArray0[2] = "alter session";
      stringArray0[3] = "PFt][$";
      stringArray0[4] = "alter session";
      stringArray0[5] = "{n^6lDI_ ALTER SESSION(0) NULL";
      stringArray0[6] = "alter session";
      stringArray0[7] = "{n^6lDI_ ALTER SESSION(0) NULL";
      stringArray0[8] = "alter session";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "{n^6lDI_ ALTER SESSION(0) NULL", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.equals("alter session");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("1F2[SCA,;P", stringBuilder0);
      assertEquals("1F2[SCA,;P", stringBuilder0.toString());
      
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (alter session, {n^6lDI_, alter session, PFt][$, alter session, {n^6lDI_ ALTER SESSION(0) NULL, alter session, {n^6lDI_ ALTER SESSION(0) NULL, alter session)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance(10, "org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tabletruncate", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.CATALOG.SYSCONSTRAINTSROWFACTORY", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Ebel", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Ebel UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory = 'org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory'", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-26), "Z?22j`5q`r");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*#u_Ra[`?|zm.M.U", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("*#u_Ra[`?|zm.M.U Z?22J`5Q`R NULL", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3), " wAND ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SQRT(-1)", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SQRT(-1)  WAND (0,3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Ebel", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RawStoreFactory.PAGE_CACHE_SIZE_PARAMETER;
      StringBuilder stringBuilder0 = new StringBuilder("select");
      SQLUtil.addRequiredCondition("}*?+I/Pls7?+R{", stringBuilder0);
      assertEquals("select and }*?+I/Pls7?+R{", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Constraint");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "EXECUTE PROCEDURE";
      stringArray0[2] = "0J/s~~{K\"ybhT{Fx";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "Constraint";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JE.(=)aX!}");
      SQLUtil.removeComments("\"5-sUi=Cc63z");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"5-sUi=Cc63z";
      stringArray0[1] = "alter materialized view<pc";
      stringArray0[2] = "\"5-sUi=Cc63z";
      stringArray0[3] = "JE.(=)aX!}";
      stringArray0[4] = "\"5-sUi=Cc63z";
      stringArray0[5] = "JE.(=)aX!}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\"5-sUi=Cc63z", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"5-sUi=Cc63z ", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "_X>y~W\nHl^`r", (String[]) null, "", "4J_1<_dSROhF){qL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("truncate");
      DBSchema dBSchema0 = new DBSchema("jId");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "R(/;d!du@sD2X";
      stringArray0[3] = " ADD ";
      stringArray0[4] = "5wvRAzfAhH$<";
      stringArray0[5] = "6d.YhG:w(-'`s";
      stringArray0[6] = "";
      stringArray0[7] = " DEFAULT ";
      stringArray0[8] = "- ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure(",tA|?B_W?}nb4(f*");
      SQLUtil.mutatesDataOrStructure("aD=;7^f^g;~FQ=S?ra");
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, (-277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("drop materialized viewdelete");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("renamej3z]8a4r&\"d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("PRIMARY KEY (, )", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.null", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SchemaDescriptor.SA_USER_NAME;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "R<@=2\"$r%ZG __";
      SQLUtil.substituteMarkers("R<@=2\"$r%ZG __", "R<@=2\"$r%ZG __", "R<@=2\"$r%ZG __");
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("'R<@=2\"$r%ZG __'", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.removeComments(".HO3O");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("4,Vl}FY<d", "+D;q|HlN):", (VersionNumber) null);
      DBSchema dBSchema0 = new DBSchema(".HO3O");
      dBSchema0.getTable(".HO3O");
      DBDataType dBDataType0 = DBDataType.getInstance(1197, ".HO3O");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".HO3O", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals(".HO3O : .HO3O", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "xSbwHSu%@SrW";
      stringArray0[1] = "xSbwHSu%@SrW";
      stringArray0[2] = "xSbwHSu%@SrW";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "xSbwHSu%@SrW", true, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT xSbwHSu%@SrW PRIMARY KEY (xSbwHSu%@SrW, xSbwHSu%@SrW, xSbwHSu%@SrW)", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
      
      String string2 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint xSbwHSu%@SrW", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Eyb*l", false, (String[]) null);
      String string0 = SQLUtil.normalize("Eyb*l", true);
      assertEquals("Eyb * l", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("R<@=2\"$r%ZG __", "R<@=2\"$r%ZG __", "R<@=2\"$r%ZG __");
      assertEquals("'R<@=2\"$r%ZG __'", string0);
      
      boolean boolean0 = SQLUtil.isDDL("R<@=2\"$r%ZG __");
      assertFalse(boolean0);
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select into.ho3o", "select into.ho3o", (VersionNumber) null);
      String string1 = SQLUtil.normalize("R<@=2\"$r%ZG __", false);
      assertEquals("R < @ = 2 \"$r%ZG __\"", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xSbwHSu%@SrW");
      String[] stringArray0 = new String[3];
      stringArray0[2] = "xSbwHSu%@SrW";
      VersionNumber versionNumber0 = VersionNumber.valueOf("poGTzk@Q8w-%");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(")G7h}HERuqwu4=S", "Og1&_PDLB(Cl%[lEYk@", versionNumber0);
      defaultDatabase0.getCatalog("execcovnstaintname");
      DBSchema dBSchema0 = new DBSchema("xSbwHSu%@SrW", (DBCatalog) null);
      dBSchema0.getPackages();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("xSbwHSu%@SrW", string0);
      
      String string1 = SQLUtil.normalize("'", false);
      assertEquals("''", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Of0US63Z}qMboY*4B", (DBCatalog) null);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("KB d/'+x*_)RfhR8");
      SQLUtil.mutatesDataOrStructure("KB d/'+x*_)RfhR8");
      StringReader stringReader0 = new StringReader("*@$TFZH<");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 172);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1597);
      byteArrayOutputStream0.flush();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1597);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT  PRIMARY KEY ()", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xSbwHSu%@SrW");
      boolean boolean0 = FBBlob.SEGMENTED;
      StringBuilder stringBuilder0 = new StringBuilder("JE.(=)aX!}");
      SQLUtil.addOptionalCondition("inner", stringBuilder0);
      assertEquals("JE.(=)aX!} or inner", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "--";
      String[] stringArray0 = new String[3];
      stringArray0[2] = "--";
      stringArray0[1] = "--";
      stringArray0[2] = "--";
      SQLUtil.renderColumnListWithTableName("--", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, --, --)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xSbwHSu%@SrW");
      String[] stringArray0 = new String[3];
      stringArray0[2] = "xSbwHSu%@SrW";
      stringArray0[1] = "JE.(=)aX!}";
      stringArray0[2] = "xSbwHSu%@SrW";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("JE.(=)aX!}", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, JE.(=)aX!}, xSbwHSu%@SrW) REFERENCES xSbwHSu%@SrW(, JE.(=)aX!}, xSbwHSu%@SrW)", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder(90119);
      stringBuilder0.codePoints();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JE.(=)aX!}");
      mockPrintWriter0.append((CharSequence) stringBuilder0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      String string1 = SQLUtil.normalize("org.h2.value.ValueString", true);
      assertEquals("org.h2.value.ValueString", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{n^6lDI_");
      DBDataType dBDataType0 = DBDataType.getInstance(748, "alter session");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{n^6lDI_", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "S?B5";
      stringArray0[1] = "{n^6lDI_";
      stringArray0[2] = "{n^6lDI_";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("S?B5", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder(90119);
      stringBuilder0.codePoints();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CONSTRAINT S?B5 FOREIGN KEY (S?B5, {n^6lDI_, {n^6lDI_) REFERENCES {n^6lDI_(S?B5, {n^6lDI_, {n^6lDI_)");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "CONSTRAINT S?B5 FOREIGN KEY (S?B5, {n^6lDI_, {n^6lDI_) REFERENCES {n^6lDI_(S?B5, {n^6lDI_, {n^6lDI_)");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT S?B5 ", stringBuilder0.toString());
      
      Integer integer1 = RawTransaction.ABORT;
      String string0 = SQLUtil.normalize("{n^6lDI_", false);
      assertEquals("{ n ^ 6lDI_", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xSbwHSu%@SrW");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "xSbwHSu%@SrW";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "xSbwHSu%@SrW";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT \"create unique index\" PRIMARY KEY (xSbwHSu%@SrW, create unique index, xSbwHSu%@SrW)", string0);
      
      String string1 = SQLUtil.normalize("CONSTRAINT \"create unique index\" PRIMARY KEY (xSbwHSu%@SrW, create unique index, xSbwHSu%@SrW)", true);
      assertEquals("CONSTRAINT \"create unique index\" PRIMARY KEY (xSbwHSu % @ SrW, create unique index, xSbwHSu % @ SrW)", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isDDL(")N9Y7^:S");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("/75'", stringBuilder0);
      assertEquals("/75'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xml");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "B$ =ChLEit\u0000O).5@", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("xml", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("xml", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("B$ =ChLEit\u0000O).5@", " and ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("=-jO'GjJ0><BO", false);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      CompositeDBObject<TableContainer> compositeDBObject0 = (CompositeDBObject<TableContainer>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("7Nfl^", compositeDBObject0);
      tableContainer0.getTable("&");
      DBDataType dBDataType0 = DBDataType.getInstance(15, "=-jO'GjJ0><BO");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("=-jO'GjJ0><BO", (DBTable) null, 1681, "=AO=-&D7ka_7wjQjkP3");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBDataType dBDataType1 = DBDataType.getInstance(15, "calltruncate");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("B<z7=0H+r&:t", (DBTable) null, dBDataType1, (Integer) null, (Integer) null);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("&", (DBTable) null, 15, "= - jO 'GjJ0><BO'");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      tableContainer0.getTable("Og;={/K");
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("Og;={/K", (DBTable) null, 1681, "&");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBCatalog dBCatalog0 = new DBCatalog("7Nfl^");
      dBCatalog0.getSchema("= - jO 'GjJ0><BO'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("calltruncate", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance(10, "org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory");
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setOwner(dBCatalog0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory ORG.APACHE.DERBY.IMPL.SQL.CATALOG.SYSCONSTRAINTSROWFACTORY(0) NULL", string0);
      
      SQLUtil.parseColumnTypeAndSize("create materialized viewqg#3ro*5 +3w4");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory, org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory, org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory, org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory, org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xSbwHSu%@SrW");
      String[] stringArray0 = new String[3];
      stringArray0[2] = "xSbwHSu%@SrW";
      stringArray0[1] = "JE.(=)aX!}";
      stringArray0[2] = "xSbwHSu%@SrW";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("JE.(=)aX!}", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(1331);
      stringBuilder0.codePoints();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execdate");
      mockPrintWriter0.append((CharSequence) "execdate");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("5gp");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SQRT(-1)");
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "QwAND ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.divideUnsigned((-1807), 126);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SQRT(-1)", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.normalize("selectdatafilecache.close () : flags", true);
      assertEquals("selectdatafilecache.close () : flags", string0);
      
      boolean boolean0 = SQLUtil.isQuery("selectdatafilecache.close () : flags");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("<Xtd/6:>[PON", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}om";
      stringArray0[1] = "<Xtd/6:>[PON";
      stringArray0[2] = "E/-vUU/h";
      stringArray0[3] = "< Xtd / 6 : > [ PON";
      stringArray0[4] = "< Xtd / 6 : > [ PON";
      stringArray0[5] = "< Xtd / 6 : > [ PON";
      stringArray0[6] = "< Xtd / 6 : > [ PON";
      stringArray0[7] = "~nG[p#l`";
      SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("j#3&leA O{", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType.getInstance(10, "org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory");
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("'");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(";k:p-X7R}#1N2<y>x(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ;k:p-X7R}#1N2<y>x(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("5$kxl;#;#CDo");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(";k:p-X7R}#1N2<y>x(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ;k:p-X7R}#1N2<y>x(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getObjectImpl(int,Map)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JE.(=)aX!}");
      DBDataType dBDataType0 = DBDataType.getInstance(467, "JE.(=)aX!}");
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("JE.(=)aX!}", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setOwner((CompositeDBObject<?>) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("JE.(=)aX!}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = SQLUtil.normalize("S/*QRT(-1)", false);
      assertEquals("S /* QRT (- 1)", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xSbwHSu%@SrW");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "xSbwHSu%@SrW";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "xSbwHSu%@SrW";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      defaultDBTable0.getComponents();
      dBPrimaryKeyConstraint0.toString();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT \"create unique index\" PRIMARY KEY (xSbwHSu%@SrW, create unique index, xSbwHSu%@SrW)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xSbwHSu%@SrW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(11, "j\"XD`xvh~2:`S@>ac\"");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("j\"XD`xvh~2:`S@>ac\"", (DBTable) null, dBDataType0, integer0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("j\"XD`xvh~2:`S@>ac\"", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3), " wAND ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null DATE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S/*QRT(-1)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1393.326038041;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1393.326038041", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
  }
}
