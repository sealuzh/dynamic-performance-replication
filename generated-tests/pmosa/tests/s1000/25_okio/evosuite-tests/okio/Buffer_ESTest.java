/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:32:24 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.List;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(2L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=2 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte)0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      buffer0.inputStream();
      buffer0.writeShort(272);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 48;
      buffer0.writableSegment(48);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)97, (-1L), (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=-1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertEquals(32, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(843L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.sha256();
      buffer1.hmacSha512(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("O");
      assertFalse(buffer0.exhausted());
      
      buffer0.readUtf8Line();
      buffer0.hashCode();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S");
      assertEquals(1L, buffer0.size());
      
      buffer1.readUtf8Line();
      long long0 = buffer0.writeAll(buffer1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer();
      long long0 = buffer1.read(buffer2, 1L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-1260L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1260
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.clone();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(255L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      buffer1.write(byteArray0);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2486));
      buffer1.writeIntLe((-2486));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x4a
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = 0;
      buffer0.indexOf((byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8Line();
      assertNull(string0);
      
      buffer_UnsafeCursor0.close();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1038L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("+!6?'J+(AAM", 1746, (-685), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -685 < 1746
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.toString();
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readByteString();
      buffer0.outputStream();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 45, 1896, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1896 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      buffer0.writeUtf8CodePoint(12);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2771);
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2147112496);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7ffa5630
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeIntLe((-2107715431));
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(57343);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte byte0 = (byte)60;
      realBufferedSource0.indexOf((byte)60);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(10);
      assertFalse(buffer0.exhausted());
      
      buffer0.readUtf8LineStrict();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict(10000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-508L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -508
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.rangeEquals((-138L), (ByteString) null, 2115431653, 1045);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      
      boolean boolean0 = buffer0.rangeEquals(31L, (ByteString) null, 246, (-2530));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 167L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8(")");
      long long0 = (-1412L);
      buffer0.skip((-1412L));
      Buffer buffer1 = buffer0.clone();
      // Undeclared exception!
      try { 
        buffer1.readUtf8((-1412L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-1412
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.close();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2486));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.readWrite = false;
      buffer_UnsafeCursor0.buffer.clone();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1038L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1038
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.toString();
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readByteString();
      buffer0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(3463L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(843L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.sha256();
      buffer1.hmacSha512(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      buffer1.read(realBufferedSource0.buffer, 877L);
      ByteString byteString1 = realBufferedSink0.buffer.snapshot();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource.md5(hashingSource0);
      Inflater inflater0 = new Inflater(true);
      Pipe pipe0 = new Pipe((byte)66);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink2.buffer();
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.read(realBufferedSink1.buffer, (long) (byte)66);
      buffer3.clear();
      Buffer buffer5 = buffer1.buffer();
      assertTrue(buffer5.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      Inflater inflater0 = new Inflater(true);
      buffer0.indexOf((byte)66, 0L);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString0 = hashingSource1.hash();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)66;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.rangeEquals(0L, byteString1);
      HashingSource.hmacSha1(inflaterSource0, byteString0);
      realBufferedSource0.buffer();
      long long0 = 0L;
      try { 
        realBufferedSource0.readByteString((long) (byte)66);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-74);
      buffer0.read(byteArray0);
      BufferedSink bufferedSink0 = buffer0.emit();
      assertSame(bufferedSink0, buffer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-2486));
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".outputStream()", true);
      buffer0.writeTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.md5();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(10000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.indexOf((byte)0, 8192L);
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.writeLongLe((-2477L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.inputStream();
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOfElement(byteString0, 10000000000000000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S");
      boolean boolean0 = buffer1.equals("S");
      assertFalse(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.indexOf((byte)110, 9L);
      buffer_UnsafeCursor0.buffer.writeShortLe(223);
      boolean boolean0 = buffer0.equals("closed");
      assertFalse(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57343);
      boolean boolean0 = buffer1.equals(buffer0);
      assertFalse(buffer0.exhausted());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.seek((-1));
      buffer_UnsafeCursor0.buffer.request(0L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(192);
      try { 
        buffer0.require(192);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer1 = pipe0.buffer;
      buffer0.read(buffer1, 1000000L);
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)60;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, 1897L);
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)122, (long) (byte)122);
      Buffer buffer1 = buffer0.writeShortLe(3057);
      buffer1.equals("closed");
      buffer1.emitCompleteSegments();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("4.");
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      buffer0.writeUtf8("size=%s offset=%s byteCount=%s");
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.snapshot(55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=30 offset=0 byteCount=55296
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-1014L);
      buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.readAll(buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.md5();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      
      buffer1.readAll(buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.sha256();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeHexadecimalUnsignedLong(301L);
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (-1490L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=-1490
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("^");
      buffer0.indexOf((byte) (-30), 824L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^");
      buffer0.hashCode();
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-54L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-54 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writableSegment((-2146773969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size();
      buffer0.writeLong(0L);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(8L);
      buffer0.outputStream();
      buffer1.clear();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(4565L);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("socket == null", 321, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 0 < 321
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(31L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer0.indexOf((byte) (-21), 780L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(4573L);
      buffer0.readUtf8CodePoint();
      buffer0.sha512();
      assertEquals(7L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0011\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-2146630455));
      long long0 = new Integer((-2146630455));
      buffer0.md5();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-336L));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-106);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      long long0 = buffer0.indexOfElement(byteString1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(231L);
      Buffer buffer0 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[0];
      buffer0.toString();
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rPibiTCL cG6+k$");
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) mockPrintStream0, 255L, 60L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=255 byteCount=60
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[3];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte)46;
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[2] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString[] byteStringArray0 = new ByteString[6];
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
      
      int int1 = buffer0.select(options0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      int int0 = buffer_UnsafeCursor0.next();
      assertFalse(buffer0.exhausted());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      int int0 = buffer_UnsafeCursor0.next();
      assertFalse(buffer0.exhausted());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.writeDecimalLong((-1L));
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-695));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x49
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10L);
      assertEquals(2L, buffer0.size());
      
      String string0 = buffer0.readUtf8();
      assertEquals("10", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("x5c,*Z/SJ&(F");
      buffer0.writeDecimalLong((-1969L));
      assertEquals(18L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)97;
      buffer0.writeHexadecimalUnsignedLong((byte)97);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)58;
      buffer0.read(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1095216660480L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1095216660479 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer1 = pipe0.buffer;
      try { 
        buffer0.readFully(buffer1, 10000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = null;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      ByteString byteString0 = buffer0.sha1();
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeLongLe(100000000L);
      buffer_UnsafeCursor0.next();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(8L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(824L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      boolean boolean0 = buffer0.equals(buffer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSink0.writeDecimalLong(9223372036854775807L);
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = (-402L);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-402L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=0 byteCount=-402
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(1095216660480L);
      assertEquals(13L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(1000000000000000000L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(9223372036854775L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      assertFalse(buffer0.exhausted());
      
      buffer1.readInt();
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.equals(byteString0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      buffer1.readInt();
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(542);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(57343);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffd0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 5774L;
      buffer0.flush();
      // Undeclared exception!
      try { 
        buffer0.snapshot(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      buffer1.copyTo((OutputStream) mockPrintStream0);
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) null, (long) (-2107715431), (long) (-2107715431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("x5c,*Z/SJ&(F");
      MockFile mockFile0 = new MockFile("x5c,*Z/SJ&(F", "[5U4DNW}L9T/_");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      buffer0.copyTo((OutputStream) mockFileOutputStream0);
      assertEquals(13L, mockFile0.length());
      assertEquals(13L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      Buffer buffer1 = buffer0.copyTo((OutputStream) bufferedOutputStream0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-2107715417));
      buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOf(byteString0, 100L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffff99
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2486));
      // Undeclared exception!
      try { 
        buffer1.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((byte)6);
      buffer0.readShortLe();
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      Object object0 = new Object();
      buffer0.equals(object0);
      int int0 = buffer0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-47);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals(4L, byteString0, (int) (byte) (-82), (int) (byte) (-72));
      long long0 = 32L;
      // Undeclared exception!
      try { 
        Charset.forName("elFV@%C");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // elFV@%C
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readByteString();
      buffer_UnsafeCursor0.resizeBuffer(92233720368L);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSink0.writeDecimalLong((byte)102);
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = (-402L);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((long) (byte) (-91));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=-91
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(285L);
      long long0 = 1000000000L;
      // Undeclared exception!
      try { 
        buffer0.readByteArray(1000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=1000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte(3463);
      buffer1.outputStream();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 5, 329);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 329 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2486));
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer2 = pipe0.buffer;
      try { 
        buffer1.readFully(buffer2, 10000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-2486);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2486));
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4a
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(100000000000000L);
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(100000000000000L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(53);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = new Integer(53);
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[3];
      hashingSource0.hash();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      buffer1.rangeEquals(53, byteString2);
      long long1 = buffer0.readDecimalLong();
      assertTrue(buffer0.exhausted());
      assertEquals(5L, long1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(100000000000000L);
      boolean boolean0 = realBufferedSink0.buffer.exhausted();
      assertTrue(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      HashingSink.md5(buffer1);
      ByteString[] byteStringArray0 = new ByteString[3];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      realBufferedSource0.buffer.require((-2107715431));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      buffer1.hmacSha1(byteString0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[2] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((-2107715431));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2107715431
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(101);
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 74L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSink0.writeDecimalLong((byte) (-32));
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = (-402L);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((long) (byte) (-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=-32
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1025));
      buffer1.write((Source) buffer0, (-1L));
      int int0 = buffer1.readUtf8CodePoint();
      assertTrue(buffer1.exhausted());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-5L));
      buffer1.readUtf8CodePoint();
      buffer1.sha512();
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong((-7L));
      assertTrue(buffer0.exhausted());
      
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals((-7L), long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      GzipSource gzipSource0 = new GzipSource(buffer1);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString2 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString2;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(53);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.readHexadecimalUnsignedLong();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-20);
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715432));
      buffer1.readByte();
      try { 
        buffer1.readUtf8Line(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-2107715431);
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(1121L);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.readAndWriteUnsafe();
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(9223372036854775L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=31313231\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=ff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Pipe pipe0 = new Pipe(4294967295L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(4294967295L);
      long long0 = buffer0.readLongLe();
      assertEquals(2L, buffer0.size());
      assertEquals(3618420444932682292L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-2107715431);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong((-2107715431));
      Buffer buffer2 = realBufferedSink0.buffer;
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(9223372036854775L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=11 content=2d32313037373135343331\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2107715431));
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      buffer1.writeUtf8("}zR50=#OkZ|>");
      buffer1.hashCode();
      assertEquals(16L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeByte((-1));
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-49);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)37, (byte) (-101));
      byteArrayInputStream0.mark((byte) (-49));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      realBufferedSink0.writeDecimalLong(9223372036854775807L);
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(9223372036854775807L, long0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeShortLe((byte)37);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)37, (byte) (-87));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(9223372036854775807L);
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(9223372036854775807L, long0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeShortLe((byte)37);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.end = 5795;
      buffer_UnsafeCursor0.resizeBuffer(181L);
      long long0 = buffer_UnsafeCursor0.resizeBuffer(13L);
      assertEquals(5795, buffer_UnsafeCursor0.end);
      assertEquals(181L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readUtf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(202L);
      realBufferedSink0.buffer.hashCode();
      buffer_UnsafeCursor0.resizeBuffer(3L);
      buffer0.writeHexadecimalUnsignedLong(1051L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.write(byteString0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      buffer0.flush();
      boolean boolean0 = buffer0.exhausted();
      assertEquals(32L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)37, 1114111);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      Buffer buffer2 = realBufferedSource0.buffer;
      int int0 = realBufferedSink0.buffer.selectPrefix(options0);
      assertEquals((-1), int0);
      
      Options.of(byteStringArray0);
      Buffer buffer3 = realBufferedSink0.buffer;
      int int1 = buffer3.select(options0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString0;
      Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      long long0 = buffer1.readLongLe();
      assertEquals(24L, buffer0.size());
      assertEquals(1449310910991872227L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("}zR50=#OkZ|>");
      buffer1.readLongLe();
      buffer1.hashCode();
      assertEquals(4L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-2107715431));
      bufferedSink0.writeLongLe((-2107715431));
      realBufferedSink0.buffer.writeAll(buffer1);
      long long0 = ((RealBufferedSink) bufferedSink0).buffer.readDecimalLong();
      assertEquals((-2107715431L), long0);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeIntLe(47);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-1061));
      buffer0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-1152921504606846976L));
      ((RealBufferedSink) bufferedSink0).close();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ((RealBufferedSink) bufferedSink0).buffer.rangeEquals(360L, byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(65536L);
      buffer0.readUtf8Line();
      try { 
        buffer0.write((Source) buffer1, 100L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Integer integer0 = new Integer((-694));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.resizeBuffer(10L);
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8LineStrict(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=00000000000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      buffer0.readInt();
      HashingSink.sha1(buffer1);
      buffer0.writeIntLe((-474954686));
      assertEquals(32L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2486));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer1.writeTo(outputStream0, (long) 4);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2486));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      try { 
        buffer2.write((Source) buffer1, 646L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      ByteString byteString2 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      HashingSource.hmacSha1(hashingSource1, byteString1);
      buffer1.selectPrefix(options0);
      assertFalse(buffer0.exhausted());
      
      Options options1 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2675);
      buffer0.readFrom((InputStream) bufferedInputStream0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-1061));
      buffer0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(115292150L);
      realBufferedSink0.buffer.hashCode();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null, 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(2112278994);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      realBufferedSink0.flush();
      // Undeclared exception!
      try { 
        buffer1.indexOfElement((ByteString) null, (long) 2112278994);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer0.writeDecimalLong(766L);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      hashingSource0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertFalse(buffer0.exhausted());
      assertEquals(1894L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer_UnsafeCursor0.buffer.hmacSha512(byteString0);
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = hashingSink0.hash();
      buffer0.writeUtf8CodePoint((-1912));
      byteString0.indexOf(byteString1, (-1912));
      buffer0.hmacSha512(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffff88
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(1152921504606846L);
      realBufferedSink0.buffer.writeAll(buffer0);
      realBufferedSink0.writeDecimalLong((-436L));
      realBufferedSink0.buffer.readDecimalLong();
      realBufferedSink0.buffer.readByteString();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.writeInt(56);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-653);
      buffer0.writeUtf8CodePoint((-653));
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x73
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-4268L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -4268
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer0.writeDecimalLong(10000000000L);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 203L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer0.writeDecimalLong(10000000000L);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[2] = byteString0;
      buffer0.rangeEquals(10000000000L, byteString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer0, 193L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(1000000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(11529215L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeDecimalLong(10000L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      hashingSource0.hash();
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      buffer0.toString();
      Buffer buffer2 = buffer1.write(byteString0);
      hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer2.select(options0);
      assertEquals(21L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(1152921504606846L);
      buffer0.writeAll(realBufferedSink0.buffer);
      realBufferedSink0.writeDecimalLong(1460);
      assertFalse(buffer0.exhausted());
      
      buffer0.readHexadecimalUnsignedLong();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.writeDecimalLong(10000000000000000L);
      Buffer buffer1 = realBufferedSink1.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      realBufferedSink0.writeShortLe(5381);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeLongLe(100000000L);
      buffer1.rangeEquals((long) (byte)0, byteString0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(5795);
      long long0 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals(5795L, long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer1.readFrom(inputStream0, 12L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong((-1014L));
      realBufferedSink0.writeDecimalLong(1152921504606846L);
      realBufferedSink0.writeDecimalLong(1460);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: -10141152921504606846
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(520);
      buffer0.readUtf8CodePoint();
      String string0 = buffer1.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(57368);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffee
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("}zR50=#OkZ|>");
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer3);
      HashingSource.md5(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0);
      assertEquals(12L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      buffer0.writeByte((-1));
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = new Integer((-1));
      buffer0.indexOf(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer0.writeDecimalLong(10000000000L);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.write(byteString0);
      hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(100000000000L);
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(43L, buffer0.size());
      assertEquals(100000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[0] = (byte)0;
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(5381);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeLongLe(100000000L);
      buffer1.rangeEquals((long) (byte)0, byteString0);
      assertEquals(10L, buffer1.size());
      
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      ByteString byteString2 = hashingSink1.hash();
      byteStringArray0[5] = byteString2;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      realBufferedSink0.buffer.flush();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)120;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(100000000L);
      buffer1.rangeEquals((long) (byte)0, byteString0);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readAll(realBufferedSink0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)120;
      realBufferedSink0.writeShortLe(5381);
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer1, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      int int0 = 1071;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1071);
      buffer0.readUtf8CodePoint();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.rangeEquals(0L, byteString0);
      String string0 = "m*$UT|YE!D.bl";
      int int1 = 155;
      // Undeclared exception!
      try { 
        Charset.forName("m*$UT|YE!D.bl");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // m*$UT|YE!D.bl
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-667));
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      assertEquals(1L, buffer0.size());
      
      buffer0.readHexadecimalUnsignedLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = realBufferedSink0.buffer.indexOf(byteString0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2486));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0);
      buffer1.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeHexadecimalUnsignedLong((-1));
      buffer0.writeByte((-1));
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      buffer0.indexOf(byteString0);
      long long0 = buffer0.size();
      assertEquals(17L, long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(100000L);
      realBufferedSink0.buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        realBufferedSink0.buffer.readFrom((InputStream) mockFileInputStream0, 100000L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-8);
      Buffer buffer1 = realBufferedSink0.buffer.writeShortLe(10);
      byteArray0[7] = (byte) (-1);
      byteArray0[4] = (byte) (-103);
      realBufferedSink0.write(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.inputStream();
      buffer1.readUtf8Line();
      assertEquals(10L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-2486));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.clone();
      buffer_UnsafeCursor1.next();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor1.data);
      boolean boolean0 = buffer_UnsafeCursor1.buffer.equals(buffer1);
      assertFalse(buffer0.exhausted());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-2486));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor1.seek(0);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor1.data);
      boolean boolean0 = buffer_UnsafeCursor1.buffer.equals(buffer0);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeUtf8("endIndex < beginIndex");
      buffer1.copyTo(buffer0, 6L, 6L);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(106);
      try { 
        buffer2.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=28 content=656e64496e646578203c20626567696e496e6465786578203c20626a\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Buffer buffer1 = buffer0.write(byteString0);
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-465), (byte)48);
      Buffer buffer2 = buffer0.readFrom((InputStream) byteArrayInputStream0, 0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer2.rangeEquals(662L, byteString0);
      buffer0.request(3053L);
      buffer1.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = null;
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeByte((-1));
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)42);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte)2;
      realBufferedSink0.write(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.inputStream();
      realBufferedSink0.writeDecimalLong((byte)2);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSink0.buffer.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("}zR50=#OkZ|>");
      buffer1.readUtf8(4L);
      buffer0.hashCode();
      try { 
        buffer0.readUtf8LineStrict(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=303d234f6b5a7c3e\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)42;
      byteArray0[4] = (byte) (-103);
      byteArray0[6] = (byte) (-103);
      realBufferedSink0.buffer.writeShortLe((-3));
      byteArray0[4] = (byte) (-103);
      realBufferedSink0.write(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.inputStream();
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-9223372036854775794L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":cR)A'N1HCDK>", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      Buffer buffer1 = ((RealBufferedSink) bufferedSink0).buffer.writeTo((OutputStream) mockPrintStream0, (long) (byte)2);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)121;
      byteArray0[6] = (byte)121;
      realBufferedSink0.buffer.writeShortLe((byte)121);
      byteArray0[4] = (byte)0;
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ((RealBufferedSink) bufferedSink0).buffer.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Integer integer0 = new Integer(560);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.resizeBuffer(667L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.write((Source) buffer_UnsafeCursor1.buffer, 663L);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      Buffer buffer1 = realBufferedSink0.buffer.writeShortLe(1850);
      realBufferedSink0.write(byteArray0);
      buffer0.write((Source) buffer1, (long) (byte)2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeIntLe((-2486));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.clone();
      buffer_UnsafeCursor1.start = (-1);
      buffer_UnsafeCursor1.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.write(buffer_UnsafeCursor1.data);
      realBufferedSink0.writeDecimalLong(9L);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      Buffer buffer1 = realBufferedSink0.buffer.writeShortLe(1850);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("\u2026]", charset0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.write(byteArray0);
      buffer0.write((Source) buffer1, (long) (byte)2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("\u2026]", charset0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.write(byteArray0);
      buffer0.write((Source) realBufferedSink0.buffer, (long) (byte)2);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong((-100000000L));
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1375));
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }
}
