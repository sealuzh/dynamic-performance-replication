/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:23:10 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1090.072673126005));
      float float0 = rationalNumber0.floatValue();
      assertEquals((-1090.0726F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.036149714285784285);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(424, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1883.7));
      long long0 = rationalNumber0.longValue();
      assertEquals((-1883.7), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1883L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(268.72384937238496);
      assertEquals(64225, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.7638189743325369);
      assertEquals(152, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      String string0 = rationalNumber0.toString();
      assertEquals("1/100000000 (0)", string0);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(100000000, rationalNumber0.divisor);
      assertEquals("0", string0);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(388.11148191234);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(9589, 2147483673L);
      assertEquals(4.464760372809019E-6, rationalNumber1.doubleValue(), 0.01);
      
      rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-3721601));
      assertEquals((byte)127, rationalNumber2.byteValue());
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("388.111", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836335928097E9);
      assertEquals(2147483634, rationalNumber0.numerator);
      assertEquals(2.147483634E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483651L), (-2147483651L));
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2147483651L));
      assertEquals((-2.147483647E9), rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 1);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0E-8F, float0, 0.01F);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(338L, (-2147483651L));
      String string0 = rationalNumber2.toDisplayString();
      assertEquals("-0", string0);
      assertEquals((-1.573935148168476E-7), rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-1), rationalNumber3.numerator);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483651L), 1257L);
      assertEquals((-1709779.9777070063), rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483651L), 1L);
      assertEquals(2147483645, rationalNumber1.numerator);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483651L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483651, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1618.9983));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1619", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483651L));
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1174L, 1);
      assertEquals(1, rationalNumber2.divisor);
      
      String string1 = rationalNumber0.toString();
      assertEquals("-1,619", string1);
      
      float float0 = rationalNumber1.floatValue();
      assertEquals(4.656613E-10F, float0, 0.01F);
      assertEquals(2147483645, rationalNumber1.divisor);
      
      RationalNumber rationalNumber3 = new RationalNumber(1174, 1);
      assertEquals(1174.0, rationalNumber3.doubleValue(), 0.01);
  }
}
