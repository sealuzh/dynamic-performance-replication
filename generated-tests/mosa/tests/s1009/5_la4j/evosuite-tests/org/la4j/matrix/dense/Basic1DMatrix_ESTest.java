/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:31:46 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("z0,\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(86, 86, (double[]) null);
      assertEquals(86, basic1DMatrix0.rows());
      assertEquals(86, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1, 1);
      SparseMatrix sparseMatrix0 = basic1DMatrix0.toSparseMatrix();
      assertEquals(1, sparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(12, 12);
      Matrix matrix0 = basic1DMatrix0.rotate();
      assertEquals(12, basic1DMatrix0.columns());
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(12, matrix0.columns());
      assertEquals(12, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("org.la4j.iterator.CursorIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.setAll(901.71719266);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.copyOfRows(1612);
      assertEquals(0, matrix0.columns());
      assertEquals(1612, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Vector vector0 = basic1DMatrix0.toRowVector();
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, 1);
      Matrix matrix0 = basic1DMatrix0.copyOfRows(1);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapRows(1392, 37);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns(2329, 1702);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric((-734), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -734x-734
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(7, basic1DMatrix0.rows());
      assertEquals(5, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(437, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      SparseMatrix sparseMatrix0 = basic1DMatrix0.toSparseMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(12, 12, mockRandom0);
      assertEquals(12, basic1DMatrix0.columns());
      assertEquals(12, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(1, 1, 1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.rows());
      assertEquals(2, basic1DMatrix1.columns());
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapColumns(9, 9);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1, 1);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertNotNull(byteArray0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1, basic1DMatrix1.rows());
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(18, 18, 18);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(18, basic1DMatrix1.rows());
      assertEquals(18, basic1DMatrix1.columns());
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapRows(1392, 1392);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(10, 10);
      assertEquals(10, basic1DMatrix0.columns());
      assertEquals(10, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(10, 430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 430
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(504, 504);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(504, matrix0.rows());
      assertEquals(504, matrix0.columns());
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1, 1);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(594, 594);
      assertEquals(594, basic1DMatrix0.columns());
      assertEquals(594, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows((-2413), 594);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1433322
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix(201, 201);
      assertEquals(201, basic1DMatrix1.columns());
      assertEquals(201, basic1DMatrix1.rows());
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix1, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.blankOfRows(49);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(49, matrix0.rows());
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, matrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.rows());
      assertEquals(2, basic1DMatrix1.columns());
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
      
      Matrix matrix0 = basic1DMatrix1.copyOfShape(1, 1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.rows());
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(12);
      assertEquals(12, basic1DMatrix0.rows());
      assertEquals(12, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1, 1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.removeLastColumn();
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(1, 1, 1);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix(1715, 1);
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1715, basic1DMatrix1.rows());
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix1, basic1DMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3432
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
