/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:26:56 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 440;
      CharClass charClass1 = charClass0.appendFoldedRange(440, 440);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = new int[7];
      intArray1[0] = 440;
      intArray1[1] = 440;
      intArray1[2] = 440;
      intArray1[3] = 440;
      intArray1[4] = 440;
      intArray1[5] = 440;
      intArray1[6] = 440;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 440;
      intArray2[1] = 440;
      intArray2[2] = 440;
      intArray2[3] = 440;
      intArray2[4] = 440;
      intArray2[5] = 440;
      intArray2[6] = 440;
      intArray2[7] = 440;
      intArray2[8] = 440;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 440;
      intArray3[1] = 440;
      intArray3[2] = 440;
      intArray3[3] = (-1519);
      intArray3[4] = (-180);
      intArray3[5] = 440;
      intArray3[6] = 440;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 440;
      intArray5[1] = 440;
      intArray5[2] = (-180);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = 440;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 412;
      intArray0[1] = 0;
      int int0 = 66640;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(263, 471);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange(2373, 471);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[][] intArray0 = new int[9][3];
      int[] intArray1 = new int[4];
      intArray1[0] = 2373;
      intArray1[1] = 263;
      intArray1[2] = 2373;
      intArray1[3] = 471;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2373;
      intArray2[1] = 471;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 2373;
      intArray3[1] = (-1);
      intArray3[2] = 471;
      intArray3[3] = 471;
      intArray3[4] = 263;
      intArray3[5] = 263;
      intArray3[6] = 64;
      intArray3[7] = 2373;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 64;
      intArray5[1] = (-1323);
      intArray5[2] = 263;
      intArray5[3] = 64;
      intArray5[4] = (-3424);
      intArray5[5] = 455;
      intArray5[6] = (-1);
      intArray5[7] = 263;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = (-3424);
      intArray6[1] = 64;
      intArray6[2] = 2373;
      intArray6[3] = 455;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray7[0] = 64;
      intArray7[1] = (-3424);
      intArray7[2] = 263;
      intArray7[3] = 64;
      intArray7[4] = 2373;
      intArray7[5] = 64;
      intArray7[6] = 465;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[7];
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = 465;
      intArray8[1] = 64;
      intArray8[2] = 455;
      intArray8[3] = (-1);
      intArray8[4] = 263;
      intArray8[5] = (-1546);
      intArray8[6] = (-1323);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray7));
      
      intArray9[0] = (-1);
      intArray9[1] = (-1546);
      intArray9[2] = 455;
      intArray9[3] = (-3424);
      intArray9[4] = (-1323);
      intArray9[5] = 263;
      intArray9[6] = 2373;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray0, (-293));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(64, 419);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 419;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1094);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      String string0 = charClass1.toString();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      int int0 = (-954);
      CharClass charClass6 = charClass5.appendClassWithSign(intArray0, (-954));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      
      String string1 = charClass5.toString();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertEquals("[0x0-0x10ffff]", string1);
      assertNotNull(string1);
      
      CharClass charClass7 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertNotNull(charClass7);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass6.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2003;
      intArray0[1] = (-2234);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {2003, (-2234)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange((-3443), (-2234));
      assertArrayEquals(new int[] {2003, (-2234)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(0, 32);
      assertArrayEquals(new int[] {2003, (-2234)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 287;
      intArray0[1] = 2065;
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      intArray0[2] = 66640;
      intArray0[3] = (-2128);
      intArray0[4] = (-4095904);
      intArray0[5] = (-4096719);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {287, 2065, 66640, (-2128), (-4095904), (-4096719)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertArrayEquals(new int[] {287, 2065, 66640, (-2128), (-4095904), (-4096719)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 492;
      intArray0[1] = 152;
      intArray0[2] = (-108);
      intArray0[3] = 3189;
      intArray0[4] = 1518;
      intArray0[5] = (-413);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {492, 152, (-108), 3189, 1518, (-413)}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {492, 152, (-108), 3189, 1518, (-413)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 1887);
      assertArrayEquals(new int[] {492, 152, (-108), 3189, 1518, (-413)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(3189, (-108));
      assertArrayEquals(new int[] {492, 152, (-108), 3189, 1518, (-413)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {492, 152, (-108), 3189, 1518, (-413)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertArrayEquals(new int[] {492, 152, (-108), 3189, 1518, (-413)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotNull(charClass5);
      
      int[] intArray2 = charClass5.toArray();
      assertArrayEquals(new int[] {492, 152, (-108), 3189, 1518, (-413)}, intArray0);
      assertArrayEquals(new int[] {(-108), 1114111}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = 58;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 58);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 58}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 58}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 65;
      intArray0[1] = 65;
      intArray0[2] = 65;
      intArray0[3] = 65;
      intArray0[4] = 65;
      intArray0[5] = 65;
      intArray0[6] = 65;
      intArray0[7] = 65;
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 66640);
      assertArrayEquals(new int[] {65, 65, 65, 65, 65, 65, 65, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendFoldedRange(65, 66640);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2374);
      int int0 = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2374), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {(-2374), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign(intArray2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-239);
      intArray0[3] = 2;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2, (-239), 2, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(395, 2);
      assertArrayEquals(new int[] {0, 2, (-239), 2, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 2, (-239), 2, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 2, (-239), 2, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3063);
      intArray1[1] = 6;
      intArray1[2] = 2;
      intArray1[3] = (-3063);
      intArray1[4] = 2;
      intArray1[5] = 66639;
      intArray1[6] = 395;
      intArray1[7] = 2;
      intArray1[8] = (-3063);
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-460), (-460));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(660, 3686);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[4];
      intArray1[0] = (-3831);
      intArray1[1] = (-460);
      intArray1[2] = 660;
      intArray1[3] = 660;
      intArray0[0] = intArray1;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.negateClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1114112;
      intArray0[2] = (-827);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 1114112, (-827)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(2, (-912));
      assertArrayEquals(new int[] {2, 1114112, (-827)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {2, 1114112, (-827)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange((-148), (-827));
      assertArrayEquals(new int[] {2, 1114112, (-827)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[0][4];
      int int0 = (-1456);
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, (-1456));
      assertArrayEquals(new int[] {2, 1114112, (-827)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass4.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-1329), 65);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1562;
      int int0 = (-3306);
      intArray0[1] = (-3306);
      intArray0[2] = 284;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = 2;
      intArray0[1] = 2;
      intArray0[2] = (-239);
      intArray0[3] = (-239);
      intArray0[4] = (-3063);
      intArray0[5] = 6;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2, (-239), (-239), (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {7, 1114111, (-239), (-239), (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {7, 1114111, (-3063), 6, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {7, 1114111, (-3063), 1114111, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign((int[][]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1088;
      intArray0[2] = 1135;
      intArray0[3] = 0;
      intArray0[4] = 65345;
      intArray0[5] = (-83);
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(65345, (-83));
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.negateClass();
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.negateClass();
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass7);
      
      String string1 = charClass0.toString();
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertEquals("[0x2-0x440 0xff21]", string1);
      assertNotNull(string1);
      
      int[] intArray2 = charClass1.toArray();
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertArrayEquals(new int[] {2, 1088, 65313, 65313}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertNotNull(intArray2);
      
      CharClass charClass8 = charClass1.appendTableWithSign(intArray1, (-83));
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass4.appendTableWithSign(intArray1, 1088);
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass10);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass10);
      
      CharClass charClass11 = charClass2.appendTableWithSign(intArray1, 0);
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass10);
      assertNotNull(charClass11);
      
      CharClass charClass12 = charClass8.negateClass();
      assertArrayEquals(new int[] {2, 1088, 1135, 0, 65345, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass12);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 831;
      intArray0[1] = (-377);
      intArray0[2] = 66640;
      intArray0[3] = 862;
      intArray0[4] = 805;
      intArray0[5] = 657;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {831, (-377), 66640, 862, 805, 657}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3453);
      intArray0[1] = (-1158);
      intArray0[2] = 1055;
      intArray0[3] = (-364);
      intArray0[4] = (-277);
      intArray0[5] = 20;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-3453), (-1158), 1055, (-364), (-277), 20}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {(-1157), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {(-1157), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 8308;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 4, 8308, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertArrayEquals(new int[] {0, 4, 8308, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, 4);
      assertArrayEquals(new int[] {0, 4, 8308, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 4, 8308, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertArrayEquals(new int[] {0, 4, 8308, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 4, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertArrayEquals(new int[] {0, 4, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass6);
      
      String string0 = charClass5.toString();
      assertArrayEquals(new int[] {0, 4, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[] intArray2 = charClass3.toArray();
      assertArrayEquals(new int[] {0, 4, 1, 1114111}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      CharClass charClass7 = charClass1.appendTableWithSign(intArray1, 1114111);
      assertArrayEquals(new int[] {0, 4, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass5.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.appendTableWithSign(intArray1, (-1636));
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass2.appendTableWithSign(intArray1, 0);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertNotNull(charClass10);
      
      CharClass charClass11 = charClass6.negateClass();
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass11);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2347;
      intArray0[2] = 1849;
      intArray0[3] = 3219;
      intArray0[4] = (-1150);
      intArray0[5] = 0;
      intArray0[6] = 721;
      intArray0[7] = (-897);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2347, 1849, 3219, (-1150), 0, 721, (-897)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertArrayEquals(new int[] {0, 2347, 1849, 3219, (-1150), 0, 721, (-897)}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 721;
      intArray2[2] = 3219;
      intArray2[3] = 3219;
      intArray2[4] = 721;
      intArray2[5] = 2288;
      intArray2[6] = 1849;
      intArray2[7] = (-1150);
      intArray1[6] = intArray2;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 2347, 1849, 3219, (-1150), 1114111, 721, (-897)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 659;
      intArray0[0] = 659;
      intArray0[1] = 2;
      intArray0[2] = (-100);
      intArray0[3] = (-3288);
      int int1 = 627;
      intArray0[4] = 627;
      int int2 = 354;
      intArray0[5] = 354;
      int int3 = (-59);
      intArray0[6] = (-59);
      intArray0[7] = 3536;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {659, 2, (-100), (-3288), 627, 354, (-59), 3536}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(419, (-100));
      assertArrayEquals(new int[] {659, 2, (-100), (-3288), 627, 354, (-59), 3536}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-2999), 3133);
      assertArrayEquals(new int[] {659, 2, (-100), (-3288), 627, 354, (-59), 3536}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(4, 65);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 65;
      intArray0[1] = 65;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 3262;
      intArray0[5] = 65;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-239);
      intArray0[3] = 2;
      intArray0[4] = (-3063);
      intArray0[5] = 6;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2, (-239), 2, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-3002), 2);
      assertArrayEquals(new int[] {0, 2, (-239), 2, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {7, 1114111, (-239), 2, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111, (-239), 2, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-3063), 1114111, (-239), 2, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertArrayEquals(new int[] {(-3063), 1114111, (-239), 2, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendRange(1169, 2);
      assertArrayEquals(new int[] {(-3063), 1114111, (-239), 2, (-3063), 6}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2428936);
      intArray0[1] = 2083;
      intArray0[2] = (-2429910);
      intArray0[3] = 3843;
      intArray0[4] = (-1396);
      intArray0[5] = 865;
      intArray0[6] = 3104;
      intArray0[7] = 1843;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2428936), 2083, (-2429910), 3843, (-1396), 865, 3104, 1843}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-2429910), 3843, (-2428936), 2083, (-1396), 865, 3104, 1843}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-1222), (-1222));
      assertArrayEquals(new int[] {(-2429910), 3843, (-2428936), 2083, (-1396), 865, 3104, 1843}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string0 = charClass1.toString();
      assertArrayEquals(new int[] {(-2429910), 3843, (-2428936), 2083, (-1396), 865, 3104, 1843}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals("[0xffdaec2a-0xf03]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-2844), (-268));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[8];
      intArray1[0] = (-2844);
      intArray1[1] = (-268);
      intArray1[2] = (-2844);
      intArray1[3] = (-268);
      intArray1[4] = (-2844);
      intArray1[5] = (-2844);
      intArray1[6] = (-2844);
      intArray1[7] = 856;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 856;
      intArray2[1] = 856;
      intArray2[2] = (-2844);
      intArray2[3] = 856;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2844);
      intArray3[1] = (-2844);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 895;
      intArray4[1] = 856;
      intArray4[2] = (-2844);
      intArray0[3] = intArray4;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4297;
      intArray0[1] = 1114111;
      intArray0[2] = 651;
      intArray0[3] = (-1099);
      intArray0[4] = 6529;
      intArray0[5] = (-2787);
      intArray0[6] = 618;
      intArray0[7] = 42894;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {4297, 1114111, 651, (-1099), 6529, (-2787), 618, 42894}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {(-2786), 6528, 42895, 1114111}, intArray1);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1679), (-1679));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][2];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[0];
      CharClass charClass4 = charClass3.appendClassWithSign(intArray1, (-1));
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = 58;
      CharClass charClass1 = charClass0.appendFoldedRange(93, 58);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(68111, 453);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, 0);
      int int0 = 32;
      CharClass charClass2 = charClass1.appendFoldedRange(32, (-2538));
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      intArray0[6] = 32;
      intArray0[7] = (-2538);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(66639, 66639);
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1187;
      intArray0[1] = (-480);
      intArray0[2] = 350;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1187);
      CharClass charClass2 = charClass1.appendLiteral(0, 350);
      charClass2.cleanClass();
      assertArrayEquals(new int[] {1187, (-480), 350}, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      int int0 = (-9976);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, (-9976));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1088;
      intArray0[2] = 1135;
      intArray0[3] = 0;
      intArray0[4] = 65345;
      intArray0[5] = (-83);
      CharClass.charClassToString(intArray0, 0);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendLiteral(65345, (-83));
      CharClass charClass3 = charClass2.appendFoldedRange(21, (-1112));
      int[][] intArray1 = new int[3][0];
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, (-83));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 4294;
      intArray0[1] = 110592;
      int int0 = (-1413);
      intArray0[2] = (-1413);
      intArray0[3] = 43711;
      intArray0[4] = 1601;
      intArray0[5] = 2105;
      intArray0[6] = (-99);
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = (-1413);
      intArray1[1] = (-99);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray1, 2105);
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-1679), (-1679));
      int[][] intArray0 = new int[0][2];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {(-1679), (-1679), 0, 1114111}, intArray1);
      
      CharClass charClass3 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 3590;
      intArray0[0] = 3590;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 3306;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[] intArray0 = new int[5];
      int int0 = (-1532);
      intArray0[0] = (-1532);
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 0;
      intArray0[2] = 0;
      int int3 = 2631;
      intArray0[3] = 2631;
      int int4 = 64324;
      intArray0[4] = 64324;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 64324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(2, 0);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 2;
      intArray3[1] = 2;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 2;
      intArray3[5] = 829;
      intArray3[6] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 829;
      intArray5[1] = 829;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 829;
      intArray5[5] = 0;
      intArray5[6] = 2;
      intArray5[7] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 0;
      intArray6[1] = 2;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 829;
      intArray6[5] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 0;
      intArray7[1] = 829;
      intArray7[2] = 829;
      intArray7[3] = 2;
      intArray7[4] = 0;
      intArray7[5] = 0;
      int int0 = 1132;
      intArray7[6] = 1132;
      intArray7[7] = 0;
      intArray7[8] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 829;
      intArray8[1] = 1132;
      intArray8[2] = (-2273);
      intArray8[3] = 1132;
      intArray8[4] = (-54);
      intArray8[5] = 829;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, 0);
      int int0 = 32;
      CharClass charClass2 = charClass1.appendFoldedRange(32, (-2538));
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass3 = new CharClass(intArray0);
      CharClass charClass4 = charClass3.appendLiteral(1069, 65);
      charClass4.appendFoldedRange((-2246), (-3063));
      charClass2.negateClass();
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString(intArray0, (-2410));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2488;
      intArray0[1] = (-177);
      intArray0[2] = 0;
      intArray0[3] = 1505;
      intArray0[4] = (-2553);
      intArray0[5] = 0;
      intArray0[6] = 356;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(356, 11670);
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      charClass1.appendTable(intArray1);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 1987;
      intArray1[1] = 1585;
      intArray1[2] = (-410);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1585;
      intArray2[1] = 1585;
      intArray2[2] = 1585;
      intArray2[3] = (-410);
      intArray2[4] = 1585;
      intArray2[5] = 1987;
      intArray2[6] = 1987;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1114111;
      intArray0[3] = 771;
      intArray0[4] = 1522;
      intArray0[5] = 0;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 54;
      intArray0[1] = 11551;
      intArray0[2] = 66377;
      intArray0[3] = (-764);
      intArray0[4] = 2535;
      intArray0[5] = 65;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      charClass1.appendClassWithSign(intArray0, 168);
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass2, charClass0);
  }
}
