/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:00:41 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix.diagonal(0, (-1054.261418164));
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(842, 0);
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(4, 32);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      singularValueDecompositor1.decompose();
      String string0 = "oXG_zEZ6'+5Y6";
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        singularValueDecompositor2.fail("oXG_zEZ6'+5Y6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oXG_zEZ6'+5Y6
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      singularValueDecompositor1.decompose();
      String string0 = "oXG_zEZ6'+5Y6";
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        singularValueDecompositor2.fail("oXG_zEZ6'+5Y6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oXG_zEZ6'+5Y6
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      singularValueDecompositor1.decompose();
      assertEquals(0.1, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RowMajorSparseMatrix.zero(3, 3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(9);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      doubleArray0[1] = 489.16;
      doubleArray0[2] = (-1697.1555280549);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.from1DArray(3, 3, doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RowMajorSparseMatrix.zero(3, 3);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom((-2605L));
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      DenseMatrix.diagonal(3, (-2605L));
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RowMajorSparseMatrix.zero(3, 3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 491.37546009365917;
      doubleArray0[2] = 491.37546009365917;
      doubleArray0[3] = (double) 3;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 3);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RowMajorSparseMatrix.zero(3, 3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 491.37546009365917;
      doubleArray0[2] = (-1697.1555280549);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(3, 3, doubleArray0);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RowMajorSparseMatrix.zero(3, 3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(9);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      doubleArray0[1] = 489.16;
      doubleArray0[2] = (-1697.1555280549);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.from1DArray(3, 5, doubleArray0);
      columnMajorSparseMatrix1.diagonalProduct();
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix1);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      org.evosuite.runtime.Random.setNextRandom(4);
      org.evosuite.runtime.Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[16];
      ColumnMajorSparseMatrix.identity(3);
      doubleArray0[1] = 489.16;
      doubleArray0[2] = (-1697.1555280549);
      doubleArray0[3] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[14] = (double) 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(3, 5, doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RowMajorSparseMatrix.zero(3, 3);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2296.71485);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) (-2605L);
      doubleArray0[4] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(3, 1, doubleArray0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }
}
