/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:00:45 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      Utility.compactClassName("?>...", false);
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.signatureToString("V!cx`6xcQEI{g?f", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)45;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 11, (-1153), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "native";
      Utility.format(40, (-2624), false, 'B');
      Utility.isJavaIdentifierPart('*');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "native";
      Utility.printArray(objectArray0, false);
      Utility.methodSignatureReturnType("CONSTANT_Integer");
      String string1 = "iflt";
      try { 
        Utility.methodSignatureReturnType("iflt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iflt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Utility.decode(")'&6", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lstore_3", "V", "?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      Utility.encode(byteArray0, true);
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "S", "$l$8b$I$A$A$A$A$A$A$A");
      Utility.replace("S", "Illegally nested brackets:", "$l$8b$I$A$A$A$A$A$A$A");
      Utility.clearBit((byte)0, (-1154));
      // Undeclared exception!
      try { 
        Utility.replace("filename\t\t", (String) null, "LocalVariableTypeTable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'F4(]&#+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'F4(]&#+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.compactClassName("C7Q8W8/(", false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-1327);
      Utility.classOrInterface((-1327));
      Utility.compactClassName("?f`C Y7DGpmdJ7;P");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      try { 
        Utility.typeOfSignature(",_-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,_-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte) (-1);
      Constant[] constantArray1 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Mc");
      constantArray1[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (byte)40);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray1[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      Utility.codeToString(byteArray1, constantPool2, (int) (byte) (-1), (int) (byte) (-1), false);
      char char0 = 'v';
      Utility.format(68, 351, false, 'v');
      try { 
        Utility.typeOfMethodSignature("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv68
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.convertString("L\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L\n";
      stringArray0[1] = "L\n";
      stringArray0[2] = "L\n";
      stringArray0[3] = "L\n";
      stringArray0[4] = "L\n";
      stringArray0[5] = "L\n";
      stringArray0[6] = "L\n";
      stringArray0[7] = "L\n";
      Utility.methodTypeToSignature("L\n", stringArray0);
      Utility.methodTypeToSignature("L\n", stringArray0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byte byte1 = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Q,");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "()Lclass;";
      String string1 = "V}%[AD(Y[GB+y7E~";
      boolean boolean0 = true;
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.convertString("]{ld");
      assertEquals("]{ld", string0);
      
      String string1 = Utility.compactClassName("java.lang.V!cx`6xcQEI{g?f", false);
      assertEquals("java.lang.V!cx`6xcQEI{g?f", string1);
      
      byte byte0 = Utility.typeOfSignature("FiNoi\"~r{w>f@Y");
      assertEquals((byte)6, byte0);
      
      String string2 = Utility.accessToString((int) (byte) (-100));
      assertEquals("protected static final transient native interface abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.signatureToString("FiNoi\"~r{w>f@Y", false);
      assertEquals("float", string3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^-");
      byte[] byteArray0 = Utility.decode("static", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 240, 240, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.replace("s_D{n>b&[$^", "s_D{n>b&[$^", "s_D{n>b&[$^");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 894, 225, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[CMTNgoh- 'KuS+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [CMTNgoh- 'KuS+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("UGf{zyL[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      assertEquals(33, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 30, 47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "\t\t<";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "{v, null}";
      stringArray0[5] = "\t\t<";
      Utility.methodTypeToSignature("v", stringArray0);
      Utility.methodTypeToSignature("v", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Lv;L<;Lv;Lv;L{v,;L<;)Lv;", "v", "v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lv;L<;Lv;Lv;L{v,;L<;)Lv;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.convertString("yd=2W^]\"\"zng");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)66;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-46);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, (int) (byte)66, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UGf{zyL[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UGf{zyL['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ZT_w ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?{mG$.={0:}");
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      byte byte1 = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)21;
      try { 
        byteSequence0.readUnsignedShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(551);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.searchOpcode("6w~:");
      Utility.format((short) (-1), (short) (-1), false, 'd');
      Utility.isJavaIdentifierPart('8');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "-1";
      objectArray0[1] = (Object) "6w~:";
      objectArray0[2] = (Object) "6w~:";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "6w~:";
      objectArray0[5] = (Object) "-1";
      Object object1 = new Object();
      objectArray0[6] = object1;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("@*.rBAmrKUG%hmvCf-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@*.rBAmrKUG%hmvCf-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\t\t#", false);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)35}, byteArray0);
      
      Utility.typeOfSignature("Z7U2%v*Z!JubR(VNf/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureArgumentTypes("\t\t#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      String string0 = "Wl=JFX)Zrbu5";
      try { 
        Utility.typeOfSignature("Wl=JFX)Zrbu5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wl=JFX)Zrbu5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-60);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(1, (-2707), byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      String string0 = Utility.signatureToString("D%#&_SSU*\"UC'-", true);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.signatureToString("L;V", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.getSignature(">\t");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.compactClassName("<swMiP}E7LK}", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-83), (-748), true);
      String string0 = Utility.signatureToString("V_?Qk:tvQ )wD");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("> s<60{K~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: > s<60{K~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.typeOfSignature("Ljava/lang/Ob;ect@603222963V");
      byte[] byteArray0 = Utility.decode("Ljava/lang/Ob;ect@603222963V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 85, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("S@+lO$3]@>5CZs", (String[]) null);
      assertEquals("()LS@+lO$3]@>5CZs;", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      Utility.encode(byteArray0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("M`3h'>\"- yTFgf", "$l$8b$I$A$A$A$A$A$A$A", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string0);
      
      Utility.signatureToString("L#;", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = " _P>";
      stringArray0[2] = "v";
      stringArray0[3] = "{v, java.lang.Object@72256a07}";
      stringArray0[4] = "{v, java.lang.Object@72256a07}";
      stringArray0[5] = " _P>";
      Utility.methodTypeToSignature("v", stringArray0);
      Utility.methodTypeToSignature("v", stringArray0);
      Utility.methodSignatureToString("(Lv;L_P>;Lv;L{v,;L{v,;L_P>;)Lv;", "v", "v");
      Utility.convertString("v");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)28;
      byteSequence0.readFully(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("nop", false);
      assertEquals("nop", string0);
      
      boolean boolean0 = Utility.isSet((byte)0, (byte)28);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.isSet(2086, 2086);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-103);
      try { 
        Utility.decode("@*x$o1Wz!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)83;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)110;
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("'tKf?]9b!($", (byte) (-6), false, '{');
      Utility.clearBit((byte)83, 7);
      Utility.decode("'tKf?]9b!($", false);
      String string0 = "{";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{", "9AW`W)'x", "cc3t10E-vqjq?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.compactClassName("<swMiP}E72K}", false);
      Utility.decode("compiler version\t", false);
      Utility.classOrInterface(34);
      String string0 = Utility.compactClassName("class");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "null";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "<swMiP}E72K}";
      String string1 = Utility.printArray(objectArray0, true, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.accessToString(32);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "synchronized";
      objectArray0[1] = (Object) "synchronized";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "synchronized";
      objectArray0[4] = (Object) "synchronized";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "synchronized";
      objectArray0[7] = (Object) "synchronized";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)53, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)89;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("59 59 00 8b 59", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readFloat();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.compactClassName("i2f", true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.compactClassName("cIOd>gcg", "%cqdV`,KsofMO?Pz", false);
      Utility.accessToString((-226909725), true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)34;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("f1 50 22 50 22");
      try { 
        Utility.methodSignatureArgumentTypes("f1 50 22 50 22", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f1 50 22 50 22
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-2456);
      boolean boolean0 = true;
      Utility.format((-1188), (-2456), true, '_');
      String string0 = "3=e=8EGJ5oNR?$<6";
      String string1 = "org.apache.bcel.classfile.BootstrapMethod";
      String string2 = "}Kh!-N%(D?FC";
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.signatureToString("V!cx`6xcQEI{g?f", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("1]qJLJT5Fj", "1]qJLJT5Fj", "-HT67R2}]-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1]qJLJT5Fj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        Utility.typeOfSignature("47~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 47~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)8;
      Constant[] constantArray1 = new Constant[3];
      String string0 = "Mc";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Mc");
      constantPool0.toString();
      constantArray1[0] = (Constant) constantUtf8_0;
      constantUtf8_0.toString();
      ConstantLong constantLong0 = new ConstantLong((byte)8);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)8, (byte)8);
      constantArray1[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray1, constantPool1, (int) (byte)0, (int) (byte) (-1), false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Mc", ">r7");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >r7
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short short0 = Utility.searchOpcode(", low = ");
      assertEquals((short) (-1), short0);
      
      File file0 = MockFile.createTempFile(", low = ", ", low = ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.signatureToString("C+4N", true);
      Utility.signatureToString("C+4N");
      Utility.accessToString(241, true);
      Utility.accessToString(241);
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)35, (byte) (-124));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(797, (byte)67);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(624, (byte) (-69));
      constantArray0[3] = (Constant) constantFieldref0;
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -124
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The suffix must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.accessToString((int) (byte) (-110), false);
      assertEquals("private final transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ps)iU%yM", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2929, (-930), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), true);
      Utility.clearBit((byte) (-81), (-186));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "if_acmpne";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      ConstantLong constantLong0 = new ConstantLong((byte)73);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(290001325, (byte)10);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-83), 4, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)125);
      constantArray0[1] = (Constant) constantMethodType0;
      String string0 = Utility.accessToString(0);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString((-2707), true);
      assertEquals("public protected static volatile native abstract synthetic annotation enum", string1);
      
      String string2 = Utility.convertString("h");
      assertEquals("h", string2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2037), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      Utility.compactClassName("");
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      int int0 = 103;
      Utility.format(103, 257, true, 'R');
      Utility.isJavaIdentifierPart('N');
      Utility.printArray(objectArray0, true);
      Utility.methodSignatureReturnType("BootstrapMethods");
      try { 
        Utility.methodSignatureReturnType("@\rr(d14'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@\rr(d14''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      try { 
        Utility.typeOfSignature("/L/l|',P[#7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /L/l|',P[#7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-80);
      String string0 = Utility.accessToString((int) (byte)0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103), true);
      assertEquals("0:    ifeq\t\t#0\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)63;
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte)16, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1612, 37, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.signatureToString("C+4N", true);
      String string0 = Utility.signatureToString("C+4N");
      assertEquals("char", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray((Object[]) null, true, true);
      String string1 = Utility.getSignature("fOzwX (akx@#m");
      assertEquals("LfOzwX;", string1);
      
      int int0 = Utility.clearBit((-1147), 784);
      assertEquals((-66683), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "1T,[l]iRACy `}hEY~p";
      Utility.methodTypeToSignature("1T,[l]iRACy `}hEY~p", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 34, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ACb}Yx(\"(|#+vJ<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("ACb$5c$7dYx$u$o$u$7c$p$xvJ$3c", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-70);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fsub", string0);
      
      Utility.getSignature(";[K76mCFzKx]S)");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-70), 797);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eE");
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("\"", (String[]) null);
      try { 
        Utility.typeOfSignature("()L\";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()L\";
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      String string0 = "%cqdV`,KsofMO?Pz";
      Utility.getSignature("%cqdV`,KsofMO?Pz");
      try { 
        Utility.typeOfMethodSignature("%cqdV`,KsofMO?Pz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %cqdV`,KsofMO?Pz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("The arra0 of names $ust not be null", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, 7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-39);
      byte byte0 = Utility.typeOfSignature("Tfpd");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      Utility.setBit((-2368), (-2368));
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, 123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = Utility.setBit(14, 14);
      assertEquals(16398, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (int) (byte)18, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "boolean";
      Utility.classOrInterface(2953);
      String string1 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#-24416", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ACb}Yx(\"(|#+vJ<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
      assertEquals(15, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(15, byteArray0.length);
      assertEquals("fstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.searchOpcode("lshr");
      String string0 = "d2f";
      Utility.methodTypeToSignature("d2f", (String[]) null);
      String string1 = "if_icmple";
      Utility.compactClassName("()Ld2f;", "if_icmple", true);
      // Undeclared exception!
      Utility.format(16384, 16384, false, 'Q');
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("yLFGr");
      assertEquals("yLFGr", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)49, (int) (byte) (-110), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.isSet(2112, 2112);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)30;
      boolean boolean1 = Utility.equals(byteArray1, byteArray2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L{v,;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.searchOpcode("6w~:");
      Utility.format((short) (-1), (short) (-1), false, 'h');
      Utility.isJavaIdentifierPart('J');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "6w~:";
      Utility.printArray(objectArray0, false);
      Utility.methodSignatureReturnType("CONSTANT_Integer");
      try { 
        Utility.methodSignatureReturnType("aload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "astore_2";
      String string0 = Utility.methodTypeToSignature("astore_2", stringArray0);
      assertEquals("(Lastore_2;)Lastore_2;", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[CMTNgoh- 'KuS+", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(10);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("pA<m*;C?sd");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)95;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 194, false);
      assertEquals("0:    nop\n1:    swap\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.isSet(2121, 2121);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 536, 2121, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CloFe Not Supportd");
      assertEquals("char", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "char";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"char\"}", string1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-94);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("=~#4?]1a74bnL%m!?{", stringArray0);
      assertEquals("()L=~#4?]1a74bnL%m!?{;", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.clearBit(1777, 1777);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@77b886dd";
      stringArray0[1] = "java.lang.Object@77b886dd";
      stringArray0[2] = "java.lang.Object@77b886dd";
      stringArray0[3] = "java.lang.Object@77b886dd";
      String string0 = "double";
      Utility.fillup("double", 3038, true, ' ');
      String string1 = "-+@";
      Utility.decode("-+@", false);
      Utility.convertString("java.lang.Object@77b886dd");
      String string2 = "\"]d''!\"}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\"]d''!\"}", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("<swMiP}E7LK}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <swMiP}E7LK}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%#QrlVS'7aeM`}yN");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "U<eZid+4@;.";
      Utility.compactClassName("U<eZid+4@;.");
      String string1 = "yj1|V7#r':vP";
      Utility.convertString("U<eZid+4@;.");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-715), true, '/');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "v";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("", "double", "double", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = Utility.clearBit((-673), (-673));
      assertEquals(2147482975, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isSet(5067, 2147482975);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.getSignature("\t\t#");
      Utility.classOrInterface(649);
      Utility.convertString("putstatic");
      Utility.isJavaIdentifierPart(':');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hk1(Ks9&z", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hk1(Ks9&z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pj'Y^e`}B6JQif9*1c:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pj'Y^e`}B6JQif9*1c:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      String string0 = "UOuPp9Y;'%@P002Ys(";
      try { 
        Utility.typeOfSignature("UOuPp9Y;'%@P002Ys(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UOuPp9Y;'%@P002Ys(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte) (-12), true, 'c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("(LA^_e+U|X%?\"8;LL>;L;)L;", true);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 3307, 3307, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ezb6*", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ezb6*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_3
         // 1:    pop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s_D{n>b&[$^", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("s_D$7bn$3eb$s$5b$A", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-81);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2843, (int) (byte) (-126), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44800. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("J&14$@}#*h$HIr", false);
      Utility.accessToString((-269));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("O", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.convertString("interface");
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("astore_2", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.compactClassName("V", "V", false);
      int int0 = 83;
      Utility.accessToString(83, true);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)80;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("<illegal opcode>");
      try { 
        Utility.methodSignatureArgumentTypes("V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      Utility.setBit(48, 0);
      Utility.classOrInterface((-801));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      Constant[] constantArray0 = new Constant[3];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("class", "address");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"address\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = " _P>";
      stringArray0[2] = "V";
      stringArray0[3] = "{V, java.lang.Object@2e7edfd1}";
      stringArray0[4] = "R9'-:Q)#XW";
      stringArray0[5] = " _P>";
      Utility.methodTypeToSignature("V", stringArray0);
      String string0 = Utility.methodTypeToSignature("V", stringArray0);
      assertEquals("(LV;L_P>;LV;L{V,;LR9'-:Q)#XW;L_P>;)LV;", string0);
      
      String string1 = Utility.methodSignatureToString("(LV;L_P>;LV;L{V,;LR9'-:Q)#XW;L_P>;)LV;", "V", "V");
      assertEquals("V V V(V arg1, _P> arg2, V arg3, {V, arg4, R9'-:Q)#XW arg5, _P> arg6)", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("~WVM>+@o,@13rRxRA[1", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.isSet(1612, 1612);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.signatureToString("Invalid type: ", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Synthetic attribute with length > 0", "Liconst_5;V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@3d5b2965";
      stringArray0[2] = "java.lang.Object@3d5b2965";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&<ZIjl)].7u59avDD1(", stringArray0[1], "5FFoG\"cKk}C/Je=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &<ZIjl)].7u59avDD1(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, true);
      try { 
        Utility.typeOfSignature(".U'S#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .U'S#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      Utility.convertString("jz1>");
      try { 
        Utility.typeOfSignature("8r~\"s^y +wAp?qWSN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8r~\"s^y +wAp?qWSN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 1830;
      Utility.clearBit(74, 1830);
      Utility.classOrInterface(74);
      int int1 = 771;
      Utility.accessToString(771);
      Utility.classOrInterface(0);
      Utility.setBit(1830, 1830);
      boolean boolean0 = true;
      Utility.accessToString(1894, true);
      Utility.isSet(966, 74);
      Utility.setBit(0, 1460);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-62);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-114), 86);
      constantMethodHandle0.copy();
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((-3731), 46);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.classOrInterface(1795);
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 94, 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "jz1>";
      Utility.compactClassName("\":}h'LS", "Xq:s\"_0G:`9LYUo)WXJ", false);
      Utility.convertString("");
      String string0 = null;
      Utility.compactClassName("oF7%j=L:d*", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t#", ".Z@?3=n%$", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)81;
      byteArray0[3] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.clearBit(1777, 1777);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@391d2ca3";
      Utility.compactClassName("\t\t<");
      Utility.accessToString(107, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("1T1l1t+io/d6cM", "iadd", "public private static volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1T1l1t+io/d6cM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[17];
      stringArray0[1] = " _P>";
      try { 
        Utility.typeOfSignature(":a6^5$i,Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :a6^5$i,Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        Utility.typeOfSignature("org.apache.bcel.classfile.Utility$JavaReader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(10);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-250), 177);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "Ezb6*";
      stringArray0[2] = "Ezb6*";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("6QDFgT,:rk(6]s/+6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6QDFgT,:rk(6]s/+6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.signatureToString("C+4N", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, constantPool0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "char";
      stringArray0[1] = "if_acmpeq\t\t#-23127";
      stringArray0[2] = "char";
      stringArray0[3] = "ll6ZzVy&Oz3";
      Utility.methodTypeToSignature("C+4N", stringArray0);
      Utility.methodTypeToSignature("C+4N", stringArray0);
      Utility.getSignature("if_acmpeq\t\t#-23127");
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(CLif_acmpeq;CLll6ZzVy&Oz3;)LC+4N;");
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null, null", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-74);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte)91, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Pattern is missing");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pattern is missing'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("W>6 ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W>6 '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.typeOfSignature("Ljava/lang/Ob;ect@603222963V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1), 159, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), (-635), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("The suffix must not be null", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "H+$TrP>m-7yUa23(";
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (-452), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte)10;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((-5369));
      byteSequence1.available();
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("lstore_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteSequence1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte)10;
      objectArray0[3] = (Object) (byte)10;
      objectArray0[4] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.signatureToString("C+4N", true);
      Utility.signatureToString("C+4N");
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray((Object[]) null, true, true);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ">rM$YY)3_JUptSY", "00");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.fillup("", (byte)69, true, 'v');
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("]{ld");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]{ld'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.searchOpcode("");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.clearBit(1777, 1777);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@5c703d5e";
      stringArray0[1] = "java.lang.Object@5c703d5e";
      stringArray0[2] = "java.lang.Object@5c703d5e";
      int int0 = new Integer((-1179534449));
      Utility.getSignature("byte");
      Utility.replace("multianewarray", "java.lang.Object@5c703d5e", "Z");
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UGf{zy)[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UGf{zy)[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.fillup("$Zx7?a06P(i%-", 597, false, 'l');
      Utility.decode("#x\\]/,r1uTo},KhB", false);
      Utility.methodTypeToSignature("llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll$Zx7?a06P(i%-", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$Zx7?a06P(i%-", "llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll$Zx7?a06P(i%-", "llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll$Zx7?a06P(i%-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Zx7?a06P(i%-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)46;
      Utility.encode(byteArray0, false);
      Utility.clearBit((byte)46, (-646));
      try { 
        Utility.typeOfSignature("$$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      Utility.methodTypeToSignature("OBVdLsQ", (String[]) null);
      Utility.methodTypeToSignature("()LOBVdLsQ;", (String[]) null);
      Utility.methodSignatureToString("()L()LOBVdLsQ;;", "()LOBVdLsQ;", "()L()LOBVdLsQ;;");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = 0;
      Utility.format(0, (-399), true, '+');
      int int1 = 97;
      Utility.setBit(97, 0);
      byte[] byteArray0 = new byte[0];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type array can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.searchOpcode("lshr");
      boolean boolean0 = false;
      Utility.compactClassName("org.apache.commons.io.filefilter.CanWriteFileFilter", false);
      try { 
        Utility.typeOfSignature("N%ZJyGe3I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N%ZJyGe3I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      Utility.convertString("short");
      try { 
        Utility.typeOfSignature("Q57");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q57
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.getSignature("jz1>");
      // Undeclared exception!
      try { 
        Utility.getSignature("|lZplb^}JA[SO{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[SO{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ACb}Yx(\"(|#+vJ<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
      assertEquals(15, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup", string1);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.replace("!To[/22^J8:v", "!To[/22^J8:v", "!To[/22^J8:v");
      assertEquals("!To[/22^J8:v", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object object2 = new Object();
      Utility.typeOfSignature("Ljava/lang/Object@60322296;V");
      byte[] byteArray0 = Utility.decode("Ljava/lang/Object@60322296;V", false);
      Utility.methodSignatureReturnType("L\b;V", false);
      Utility.isSet((-314), 1248);
      Utility.methodSignatureReturnType("L\b;V", false);
      Utility.classOrInterface((byte)14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 97
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      try { 
        Utility.typeOfSignature("%OTKo^f&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %OTKo^f&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.convertString("NB");
      Utility.convertString("transient");
      Utility.methodTypeToSignature("~}$sVRcJCo!Mw", (String[]) null);
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.format((byte) (-119), 93, false, '3');
      assertEquals("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333-119", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-103);
      String string0 = Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName("byte", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.replace(";", "JYfnup SIUoZ", ";");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)108;
      byte byte0 = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3083), (int) (byte)108);
      int int0 = 5437;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 5437, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "Xq:s\"_0G:`9LYUo)WXJ";
      boolean boolean0 = true;
      Utility.format((-2624), 2555, true, '`');
      Utility.isJavaIdentifierPart('a');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Xq:s\"_0G:`9LYUo)WXJ";
      objectArray0[1] = (Object) "native";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureReturnType("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `checkcast'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.searchOpcode("6w~:");
      Utility.format((short) (-1), (short) (-1), false, 'd');
      Utility.isJavaIdentifierPart('J');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "6w~:";
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("2Jg\"N<0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2Jg\"N<0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-22);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), 11, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3995), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YLHE19D3Let", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YLHE19D3Let'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{v, null}", string0);
      
      String string1 = Utility.getSignature("v");
      assertEquals("Lv;", string1);
      
      byte byte0 = Utility.typeOfSignature("DR7Hja?r2>,I{z4?");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ACb}Yx(\"(|#+vJ<", false);
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(10);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-250), 177);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(15, byteArray0.length);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.convertString("invokestatic");
      Object object0 = new Object();
      Utility.convertString("java.lang.");
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8TSyWWgC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8TSyWWgC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.decode("g{j\"#L]h6m:0$dGy|M", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "=wU#QApk,2(lV,?T$";
      try { 
        Utility.typeOfSignature("=wU#QApk,2(lV,?T$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =wU#QApk,2(lV,?T$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ACb}Yx(\"(|#+vJ<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_2", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-96), true);
      assertEquals("0:    fsub\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Z$a0$M$s$t", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byte byte0 = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-127));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.convertString("&<ZIjl)].7u59avDD1(");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      try { 
        Utility.typeOfSignature("ACve7Iq_PFC|0bekI>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ACve7Iq_PFC|0bekI>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "R~#4?]1a74bnL%m,]X";
      try { 
        Utility.methodSignatureReturnType("R~#4?]1a74bnL%m,]X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R~#4?]1a74bnL%m,]X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I|");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xo+(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xo+('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("J)");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<;nAKh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <;nAKh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ACb}Yx(\"(|#+vJ<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 37, 37, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Utility.accessToString(1371);
      assertEquals("public private static final volatile native abstract", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("monitorexit", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = "UCS;YS&<$^kdb4i%n";
      String string1 = "LocalVariableTypeTable";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTypeTable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Aq");
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      String string0 = Utility.methodTypeToSignature("jz1>", stringArray0);
      assertEquals("(Ljz1>;L;Ljz1>;Ljz1>;L;Ljz1>;Ljz1>;Ljz1>;)Ljz1>;", string0);
      
      String string1 = Utility.compactClassName("MhB.", "", true);
      assertEquals("MhB.", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)13;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("MQ2MJ+Chc5n^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MQ2MJ+Chc5n^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("$Zx7?a06P(i%-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Zx7?a06P(i%-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.signatureToString("L{null,;V");
      assertEquals("{null,", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S?`VJLz>m:cI/:Y");
      assertEquals((byte)9, byte0);
      
      Object object0 = new Object();
      boolean boolean0 = Utility.isSet((byte)9, (byte)9);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      Utility.searchOpcode("lookupswitch");
      Utility.format((-603), 2755, false, 'u');
      Utility.classOrInterface((short)171);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)117;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_acmpne", "", "if_acmpne", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)121, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "57,(Z1w";
      stringArray0[1] = "57,(Z1w";
      stringArray0[2] = ">";
      String string0 = Utility.methodTypeToSignature(">", stringArray0);
      assertEquals("(L57,(Z1w;L57,(Z1w;L>;)L>;", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("(L57,(Z1w;L57,(Z1w;L>;)L>;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(127);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(97, 18);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong(97);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantLong0.toString();
      Utility.codeToString(byteArray0, constantPool1, (-3850), 40, false);
      Utility.searchOpcode("wWwu^");
      Utility.isJavaIdentifierPart('P');
      Utility.setBit(127, 4712);
      Utility.printArray((Object[]) constantArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 98, (int) (byte)74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte) (-124);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("iastore", false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2119, 1244, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = 8192;
      int int1 = (-1193);
      Utility.setBit(8192, (-1193));
      String string0 = "#,5p]1@";
      try { 
        Utility.methodSignatureArgumentTypes("#,5p]1@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #,5p]1@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.convertString("L\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L\n";
      stringArray0[1] = "L\n";
      stringArray0[2] = "L\n";
      stringArray0[3] = "L\n";
      stringArray0[4] = "L\n";
      stringArray0[5] = "L\n";
      stringArray0[6] = "L\n";
      stringArray0[7] = "L\n";
      Utility.methodTypeToSignature("L\n", stringArray0);
      Utility.methodTypeToSignature("L\n", stringArray0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("UCS;YS&<$^kdb4i%n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UCS;YS&<$^kdb4i%n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j_Fs-X";
      stringArray0[1] = "j_Fs-X";
      stringArray0[2] = "j_Fs-X";
      stringArray0[3] = "j_Fs-X";
      Utility.methodTypeToSignature("j_Fs-X", stringArray0);
      String string0 = Utility.methodTypeToSignature("lcmp", stringArray0);
      assertEquals("(Lj_Fs-X;Lj_Fs-X;Lj_Fs-X;Lj_Fs-X;)Llcmp;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lj_Fs-X;Lj_Fs-X;Lj_Fs-X;Lj_Fs-X;)Llcmp;", "j_Fs-X", "b5");
      assertEquals("b5 lcmp j_Fs-X(j_Fs-X arg1, j_Fs-X arg2, j_Fs-X arg3, j_Fs-X arg4)", string1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.compactClassName("7U:*xO~K", "", true);
      Utility.methodTypeToSignature("", stringArray0);
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Integer integer0 = new Integer(1777);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, (int) (byte)30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "";
      String string1 = "bKB!Xe;W";
      // Undeclared exception!
      Utility.replace("", "", "bKB!Xe;W");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.getSignature("Ezb6*");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-17), (byte)72);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("ifgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto_w\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("cWvHx OLO[pJ;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[pJ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "boolean";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      Utility.methodTypeToSignature("boolean", stringArray0);
      try { 
        Utility.typeOfMethodSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.getSignature("jz1>");
      Utility.compactClassName("7U:*xO~K", "", true);
      Utility.convertString("' at index ");
      Utility.methodTypeToSignature("OD6Em7/pehu>7!4", stringArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "jz1>";
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      Utility.methodSignatureToString("(Ljz1>;L;Ljz1>;Ljz1>;L;Ljz1>;Ljz1>;Ljz1>;)Ljz1>;", "' at index ", "jz1>", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("jz1>", "jz1>", "jz1>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jz1>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, 93, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-70);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (-1515), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, (int) (byte) (-114));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.signatureToString("GHP2ws:>8Q|G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GHP2ws:>8Q|G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-91);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8192, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-zk~7v*=9@vhiUP7.oS");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(65536);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence1);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("%<);D36Xj1S#qu$", false);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, (int) (byte)53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)100, (-110));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)95, (byte)20);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{v, null}", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "{v, null}";
      stringArray0[5] = "\t\t<";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.compactClassName("Dont call getValueBoolean() on a non BOOLEAN ElementValue", "\t\t<", true);
      assertEquals("Dont call getValueBoolean() on a non BOOLEAN ElementValue", string1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "B8pg=~h/83{RV}a", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Only element values of type array can be built with this ctor - type specified: ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "QqtR~>P@QYDRf]mu!p";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QqtR~>P@QYDRf]mu!p", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QqtR~>P@QYDRf]mu!p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.compactClassName(".", ".", false);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", ".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "*X?BbL";
      Utility.compactClassName("*X?BbL");
      try { 
        Utility.typeOfSignature("*X?BbL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X?BbL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      Utility.convertString("B`n}E1nb_CH:");
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.searchOpcode("if_acmpne");
      Utility.convertString("if_acmpne");
      Utility.convertString("ldc");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "ldc";
      objectArray0[3] = (Object) null;
      objectArray0[6] = (Object) "if_acmpne";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      Utility.printArray(objectArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (-30));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("P_BMo]Q'?=?woQj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P_BMo]Q'?=?woQj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      short short0 = Utility.searchOpcode("lookupswitch");
      assertEquals((short)171, short0);
      
      short short1 = Utility.searchOpcode("if_acmpne");
      assertEquals((short)166, short1);
      
      Utility.format((-603), 2755, false, 'u');
      String string0 = Utility.classOrInterface((short)166);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)117;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = Utility.isSet(89, 89);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      byteArray0[0] = (byte) (-116);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      String string0 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("(SSSSSS)S", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)87;
      Object object0 = new Object();
      boolean boolean0 = Utility.isSet((-4271), (-161));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("aa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Utility.convertString("Ezb6G");
      Utility.compactClassName("Ezb6G", true);
      Utility.convertString("transient");
      Utility.compactClassName("\r", true);
      try { 
        Utility.methodSignatureReturnType("Ezb6G", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ezb6G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Utility.decode("The arra0 of names $ust not be null", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[zn<-+>79?{r");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readFully(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lh&7}7%1\u0000yL)<0,QHp;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lh&7}7%1\u0000yL)<0,QHp;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "static");
      byte[] byteArray0 = Utility.decode("2INuhWL(j", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1244, (-4360), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*X?BbL";
      stringArray0[1] = "*X?BbL";
      stringArray0[2] = "*X?BbL";
      stringArray0[3] = "*X?BbL";
      stringArray0[4] = "*X?BbL";
      stringArray0[5] = "*X?BbL";
      stringArray0[6] = "Zx\"@+3UvWrlb'xzSxxV";
      stringArray0[7] = "*X?BbL";
      stringArray0[8] = "*X?BbL";
      Utility.methodTypeToSignature("*X?BbL", stringArray0);
      Utility.typeOfSignature("V");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60), true);
      assertEquals("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      
      int int0 = Utility.clearBit((byte) (-60), (byte) (-60));
      assertEquals((-60), int0);
      
      Utility.compactClassName("L#;V", true);
      String string1 = Utility.getSignature("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The suffix must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The suffix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      // Undeclared exception!
      Utility.replace("", "", "short");
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = 0;
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-60);
      boolean boolean0 = true;
      Utility.accessToString((int) (byte) (-114));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[16];
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(1, (-2707), byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte byte0 = Utility.typeOfSignature("S?`VJLz>m:cI/:Y");
      assertEquals((byte)9, byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      Utility.signatureToString("S?`VJLz>m:cI/:Y");
      Utility.printArray(objectArray0, true);
      Utility.replace("LBIVKU`tMd{", "{null, java.lang.Object@61a76bd3}", "{null, java.lang.Object@61a76bd3}");
      String string0 = Utility.compactClassName("Byte code error: ", "Invalid signature: `", false);
      assertEquals("Byte code error: ", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[9];
      int int0 = 123;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(123);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char char0 = 'l';
      Utility.fillup("$Zx7?a06P(i%-", 36, true, 'l');
      Utility.decode("$Zx7?a06P(i%-", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", "[c", "native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Signature$MyByteArrayInputStream
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 256, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = Utility.convertString("L\n");
      assertEquals("L\\n", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L\n";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ret\t\t%127", string1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, 102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "false";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("false", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `false'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = Utility.accessToString((-1280), true);
      assertEquals("native strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Hso0C";
      stringArray0[1] = "Hso0C";
      stringArray0[2] = "rG.F;}Nlb'3S,-KWpz.";
      stringArray0[3] = "Hso0C";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[10] = (byte)10;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.convertString("InnerClasses(");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "InnerClasses(";
      stringArray0[1] = "InnerClasses(";
      Utility.methodTypeToSignature("InnerClasses(", stringArray0);
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0, false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("InnerClasses(", "InnerClasses(", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      PrintWriter printWriter0 = null;
      String string0 = "\t\t#";
      try { 
        Utility.decode("\t\t#", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "@=%6I Pl)x_i'";
      try { 
        Utility.typeOfSignature("@=%6I Pl)x_i'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @=%6I Pl)x_i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60), true);
      assertEquals("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      
      int int0 = Utility.clearBit((byte) (-60), (-186));
      assertEquals((-124), int0);
      
      Utility.compactClassName("L#;V", true);
      String string1 = Utility.getSignature("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.convertString("L\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L\n";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("org.apache.commons.io.filefilter.FalseFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.FalseFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.searchOpcode("6w~:");
      Utility.isJavaIdentifierPart('J');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "6w~:";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6w~:");
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) "6w~:";
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[1] = (Object) "6w~:";
      objectArray1[4] = (Object) "6w~:";
      objectArray1[4] = (Object) "6w~:";
      objectArray1[7] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4464, 4464, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.compactClassName("invokestatic", "-'zq8u:#lzjll]t[", true);
      Utility.accessToString(239, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)30;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("invokestatic");
      Utility.convertString("1x9vr&LxERq!");
      Utility.fillup("22 22 22 1e 00 00", (byte)34, false, 'a');
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokestatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = null;
      String string1 = "? extends ";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "? extends ", "? extends ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Utility.clearBit(1814, 2635);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 102
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The suffix must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The suffix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, (int) (byte)106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-114);
      byte byte0 = Utility.typeOfSignature("[brUVUx0{?Lbo^fam");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-12);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte)30, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.typeOfSignature("BsqU");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("x?b'E)!+MVOo@", "Invalid signature: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yuw");
      mockPrintWriter0.print((-1.0));
      mockPrintWriter0.println();
      mockPrintWriter0.println(0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "yuw";
      objectArray0[1] = (Object) "x?b'E)!+MVOo@";
      mockPrintWriter0.format("yuw", objectArray0);
      mockPrintWriter0.print('6');
      mockPrintWriter0.println('G');
      mockPrintWriter0.print("x?b'E)!+MVOo@");
      Object[] objectArray1 = null;
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      try { 
        Utility.methodSignatureArgumentTypes("x?b'E)!+MVOo@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x?b'E)!+MVOo@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String[] stringArray0 = new String[5];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "E4&";
      stringArray0[1] = "E4&";
      stringArray0[2] = "E4&";
      stringArray0[3] = "E4&";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[4] = "E4&";
      Utility.methodTypeToSignature("E4&", stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("E4&");
      Utility.fillup("E4&", 2316, false, '8');
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = Utility.compactClassName("kG|Toj9:So%%g", "Cache0hit ", true);
      assertEquals("kG|Toj9:So%%g", string0);
      
      String string1 = Utility.format((byte)2, (byte)2, true, 'Q');
      assertEquals("2Q", string1);
      
      Utility.methodSignatureReturnType("Cache0hit ", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte)2);
      assertEquals("0:    iconst_m1\n1:    iconst_m1\n", string2);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (int) (byte) (-42), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, (int) (byte)45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      Utility.classOrInterface((byte)123);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.methodTypeToSignature("()Lclass;", stringArray0);
      Utility.getSignature("class");
      Utility.methodSignatureArgumentTypes("()Lclass;");
      Utility.isJavaIdentifierPart('$');
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte)91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JUwC");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("QBp$U8Aw69u<MX", "QBp$U8Aw69u<MX", ";", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QBp$U8Aw69u<MX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = Utility.clearBit(1777, 1777);
      assertEquals(1777, int0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@580103a5";
      stringArray0[1] = "java.lang.Object@580103a5";
      stringArray0[2] = "java.lang.Object@580103a5";
      stringArray0[3] = "java.lang.Object@580103a5";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.printArray(objectArray0, false, true);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.accessToString(882, true);
      assertEquals("private final volatile native", string3);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-93), false);
      assertEquals("0:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = "jz1>";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      boolean boolean0 = true;
      Utility.printArray((Object[]) stringArray0, true);
      // Undeclared exception!
      try { 
        Utility.replace("athrow", (String) null, "jz1>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only element values of type array can be built with this ctor - type specified: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[CMTNgoh- 'KuS+", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("land", string0);
      
      String string1 = Utility.methodSignatureReturnType("[CMTNgoh- 'KuS+", true);
      assertEquals("char[]", string1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-85);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("5f ab 00 00 00", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte) (-85);
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = Utility.compactClassName("U<eZid+4@;.", true);
      assertEquals("U<eZid+4@;.", string0);
      
      boolean boolean0 = Utility.isSet((-1891), (-1983461419));
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("U<eZid+4@;.", stringArray0);
      assertEquals("()LU<eZid+4@;/;", string1);
      
      int int0 = Utility.setBit(1742, 561);
      assertEquals(132814, int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), false);
      assertEquals("0:    dreturn\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Utility.compactClassName(">i24.-)f!", false);
      try { 
        Utility.typeOfSignature(">i24.-)f!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >i24.-)f!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte byte0 = (byte) (-59);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")UiX@^=C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )UiX@^=C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("lstore\t\t%55");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lstore\t\t%55'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-85);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, (int) (byte)11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("[CMTNgoh- 'KuS+");
      assertEquals("char[]", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)66;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? extends ");
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)64;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("`-LlAo`|>_I", true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R~#4?]1a74bnL%m,]X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R~#4?]1a74bnL%m,]X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[8^(7~&og?3b{LI)u[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8^(7~&og?3b{LI)u['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "jz1>";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.getSignature("jz1>");
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.getSignature("jz1>");
      Utility.compactClassName("jz1>", "u[&*J00eW.", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = Utility.clearBit(1777, 1777);
      assertEquals(1777, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = Utility.isSet(14, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = Utility.getSignature("Byte code error: ");
      assertEquals("LByte;", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = Utility.compactClassName("V!cx`6xcQEI{g?f");
      assertEquals("V!cx`6xcQEI{g?f", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#0", string0);
      
      int int0 = Utility.setBit((byte) (-103), (byte) (-103));
      assertEquals((-103), int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.L\n", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("monitorexit", (String) null, "dreturn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      String string0 = Utility.compactClassName("w", true);
      assertEquals("w", string0);
      
      int int0 = Utility.clearBit(9, 1297);
      assertEquals(9, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iflt\t\t#7589", string1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      constantArray0[1] = (Constant) constantDouble0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(10);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Utility.methodTypeToSignature("*X?BbL", (String[]) null);
      try { 
        Utility.typeOfSignature("P_BMo]Q'?=?woQj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P_BMo]Q'?=?woQj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = "5.R>GR";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Constant[] constantArray0 = new Constant[4];
      String string1 = "&&`FVB4xFqU";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("&&`FVB4xFqU");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence1);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-48), (-1185));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((-540));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.typeOfSignature("5.R>GR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5.R>GR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.isSet(2145, 2145);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GNqZ@~?KL'Y)O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GNqZ@~?KL'Y)O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-77);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(177);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger(10);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-250), 177);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = Utility.convertString("astore_2");
      assertEquals("astore_2", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("goto\t\t#-9168", string1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)83;
      Utility.replace(">\t", ">\t", "![%T8 l");
      Utility.typeOfSignature("![%T8 l");
      try { 
        Utility.methodSignatureReturnType("![%T8 l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `![%T8 l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      String string1 = Utility.convertString("gA ");
      assertEquals("gA ", string1);
      
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-103);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("a9 e9 99 e9 e9 c7 a9 99", string2);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte) (-57);
      byteArray1[3] = (byte) (-23);
      byteArray1[4] = (byte) (-103);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      Utility.typeOfSignature("Ljava/lang/Object@60322296;V");
      Utility.classOrInterface((-1933357062));
      String string0 = ", npairs = ";
      try { 
        Utility.methodSignatureArgumentTypes("8CU2xEwDl@_QUR2\"tA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8CU2xEwDl@_QUR2\"tA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      Utility.convertString("B`n}E1nb_CH:");
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.searchOpcode("6w~:");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      Utility.printArray(objectArray0);
      String string0 = "%cqdV`,KsofMO?Pz";
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00", string0);
      
      try { 
        Utility.typeOfSignature("00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      int int0 = Utility.setBit(1959, 0);
      assertEquals(1959, int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.replace("s_D{n>b&[$^", "s_D{n>b&[$^", "s_D{n>b&[$^");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1354), 188, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("Q:dy&!Uua]L]}cXp", true);
      assertEquals("Q:dy&!Uua]L]}cXp", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Q:dy&!Uua]L]}cXp");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)22, 1589);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-119));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      byte byte0 = Utility.typeOfSignature("J=Sa`lA/t'Z5");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.getSignature("jz1>");
      String string0 = Utility.compactClassName("7U:*xO~K", "", true);
      assertEquals("7U:*xO~K", string0);
      
      String string1 = Utility.convertString("' at index ");
      assertEquals("\\' at index ", string1);
      
      String string2 = Utility.methodTypeToSignature("OD6Em7/pehu>7!4", stringArray0);
      assertEquals("(Ljz1>;L;Ljz1>;Ljz1>;L;Ljz1>;Ljz1>;Ljz1>;)LOD6Em7/pehu>7!4;", string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "jz1>";
      Utility.printArray(objectArray0, true);
      String string3 = Utility.methodSignatureReturnType("(Ljz1>;L;Ljz1>;Ljz1>;L;Ljz1>;Ljz1>;Ljz1>;)LOD6Em7/pehu>7!4;");
      assertEquals("OD6Em7.pehu>7!4", string3);
      
      byte[] byteArray0 = new byte[0];
      String string4 = Utility.toHexString(byteArray0);
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@)~g*Ai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @)~g*Ai
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.signatureToString("C+4N", true);
      String string0 = Utility.signatureToString("C+4N");
      assertEquals("char", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = Utility.isSet(1038, (-1623));
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(1038, (-1433));
      assertEquals(1038, int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = "Ljava/lang/Ob;ect@603222963V";
      Utility.typeOfSignature("Ljava/lang/Ob;ect@603222963V");
      byte[] byteArray0 = Utility.decode("Ljava/lang/Ob;ect@603222963V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("QexnsDX,mYY'2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QexnsDX,mYY'2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("qm6m8n,\"C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qm6m8n,\"C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("false", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `false'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("The array of names must not be null", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[0] = (byte)8;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-35);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(LA^_e+U|X%?\"8;LL;;L;)L;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;L;)L;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = "lookupswitch";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      Utility.searchOpcode("lookupswitch");
      Utility.searchOpcode("if_acmpne");
      Utility.compactClassName("", false);
      Utility.convertString("if_acmpne");
      Utility.convertString("ldc");
      try { 
        Utility.methodSignatureReturnType("OP>' _$Z`\"-p", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OP>' _$Z`\"-p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V";
      ConstantInteger constantInteger0 = new ConstantInteger(199);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("pA<m*;C?sd");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantInteger0;
      constantArray0[7] = (Constant) constantInteger0;
      constantArray0[8] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName(", low = ", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = "getfield";
      // Undeclared exception!
      try { 
        Utility.signatureToString("getfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `getfield'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), (int) (byte) (-102), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      Utility.printArray(objectArray0);
      Utility.getSignature("{java.lang.Object@15651952, java.lang.Object@631e8e66, java.lang.Object@10484ffc, null}");
      try { 
        Utility.typeOfMethodSignature("{java.lang.Object@15651952, java.lang.Object@631e8e66, java.lang.Object@10484ffc, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@15651952, java.lang.Object@631e8e66, java.lang.Object@10484ffc, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int int0 = 1777;
      Utility.clearBit(1777, 1777);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@4ff8b7f6", "yj1|V7#r':vP", false);
      Utility.convertString("java.lang.Object@4ff8b7f6");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      int int0 = (-1062);
      Utility.setBit((-392), (-1062));
      Utility.classOrInterface((-4288));
      String string0 = "]VNVoqE3vciZ";
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8";
      objectArray0[0] = (Object) "8";
      stringArray0[2] = "V";
      stringArray0[4] = "V";
      stringArray0[5] = "8";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifle\t\t#1612", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5h(^H?[YaQhbcn).");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5h(^H?[YaQhbcn).
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1498, (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = "UCS;YS&<$^kdb4i%n";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, (int) (byte) (-93), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.convertString("Ezb6*");
      Utility.compactClassName("Ezb6*", true);
      try { 
        Utility.typeOfSignature("OBVdLsQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OBVdLsQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifgt\t\t#-25187", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.convertString("yd=2W^]\"\"zng");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = "X\\u";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X\\u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.accessToString((-2740), true);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(2273);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-2740), (-636), (-2740), (-532), (-532), constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2740), (-532), localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("protected static volatile native abstract synthetic annotation enum", "v$", "AM5:!vX", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected static volatile native abstract synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte)17;
      Utility.decode("zf", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("zf");
      Utility.isJavaIdentifierPart('P');
      Utility.setBit(4712, (byte) (-85));
      Utility.printArray((Object[]) null);
      try { 
        Utility.typeOfSignature("pO\"(8?A$vr}:cAw?=v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pO\"(8?A$vr}:cAw?=v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.signatureToString("BC|TL5i.%", false);
      Utility.replace("x,y!8", "byte", "x,y!8");
      Utility.isJavaIdentifierPart('y');
      Utility.classOrInterface(12);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -1
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("void", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("$Zx7?a06P(i%-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Zx7?a06P(i%-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1T,[l]iRAC `}hEY~p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1T,[l]iRAC `}hEY~p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-39);
      byteArray0[1] = (byte) (-128);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)42, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 237, 2091);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Utility.getSignature("float");
      Utility.typeOfSignature("F");
      String string0 = "L{v,;V";
      try { 
        Utility.methodSignatureArgumentTypes("L{v,;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L{v,;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-61);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = "N1(jM5T {|";
      try { 
        Utility.methodSignatureReturnType("N1(jM5T {|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N1(jM5T {|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      int int0 = Utility.clearBit((-3110), (-1618435666));
      assertEquals((-19494), int0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.signatureToString("FJe6~1d", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      short short0 = Utility.searchOpcode("lshr");
      assertEquals((short)123, short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)106;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), 85, false);
      assertEquals("0:    wide\t(wide)\n1:    nop\n2:    faload\n3:    <illegal opcode>\n4:    fsub\n5:    fmul\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G#v~gfh4,T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G#v~gfh4,T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      Utility.compactClassName("Q:dy&!Uua]L]}cXp", true);
      Utility.clearBit((-304053907), (-304053907));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[5] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.typeOfSignature("BsqU");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-707));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)40;
      Constant[] constantArray1 = new Constant[3];
      String string0 = "Mc";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Mc");
      constantArray1[0] = (Constant) constantUtf8_0;
      constantUtf8_0.toString();
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (byte)40);
      constantArray1[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      Utility.codeToString(byteArray1, constantPool2, (int) (byte)0, (int) (byte) (-1), false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Mc", ">r7");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >r7
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      Utility.methodTypeToSignature("+k9`ol2J:EasL`B", (String[]) null);
      try { 
        Utility.typeOfSignature("+k9`ol2J:EasL`B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k9`ol2J:EasL`B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-78);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), 39, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?{mG$.={0:}");
      byte[] byteArray0 = Utility.decode("?{mG$.={0:}", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-1), false);
      assertEquals("0:    lstore_0\n1:    lshr\n2:    ldiv\n3:    dstore_0\n4:    nop\n5:    istore_2\n6:    lshr\n7:    faload\n8:    astore\t\t%125\n", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P_BMo]Q'?=?woQj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P_BMo]Q'?=?woQj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-68);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (-889275714), false);
      assertEquals("0:    newarray\t\t<<illegal type>>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      char char0 = '\'';
      String string0 = Utility.format(59, 1262, true, '\'');
      Utility.classOrInterface(3111);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)67;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, "$l$8b$I$A$A$A$A$A$A$A", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = Utility.signatureToString("VVg?2:d*8|D");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 688, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-92);
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte)60;
      byteArray1[6] = (byte)60;
      byteArray1[7] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = Utility.replace("[;T_|1LZep]KK<b", "zF", "zF");
      assertEquals("[;T_|1LZep]KK<b", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte) (-124);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readFully(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("saload", false);
      assertEquals("saload", string0);
      
      boolean boolean0 = Utility.isSet(176, (byte)79);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.convertString("Ezb6*");
      try { 
        Utility.methodSignatureReturnType("Xq:s\"_0G:`9LYUo)WXJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WXJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60), true);
      assertEquals("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      
      int int0 = Utility.clearBit((byte) (-60), (-186));
      assertEquals((-124), int0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string1);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      short short0 = Utility.searchOpcode("6w~:");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.format((short) (-1), (short) (-1), false, 'd');
      assertEquals("-1", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "-1";
      objectArray0[1] = (Object) "6w~:";
      objectArray0[2] = (Object) "6w~:";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "6w~:";
      objectArray0[5] = (Object) "-1";
      Object object1 = new Object();
      objectArray0[6] = object1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)24;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("A$$$eb$93z$Y", string1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(105, 3020);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3020, 200);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.convertString("L\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L\n";
      stringArray0[1] = "L\n";
      stringArray0[2] = "L\n";
      stringArray0[4] = "L\n";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.clearBit(1777, 1777);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@2440d1c8";
      stringArray0[1] = "java.lang.Object@2440d1c8";
      stringArray0[2] = "java.lang.Object@2440d1c8";
      stringArray0[3] = "java.lang.Object@2440d1c8";
      stringArray0[4] = "java.lang.Object@2440d1c8";
      Utility.methodTypeToSignature("Z", stringArray0);
      Utility.methodTypeToSignature("invokedynamic", stringArray0);
      Utility.getSignature(" _P>");
      // Undeclared exception!
      try { 
        Utility.compactClassName("L_P>;", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      int int0 = (-1891);
      Utility.compactClassName("U<eZid+4@;.");
      String string0 = "jsr";
      Utility.convertString("U<eZid+4@;.");
      Utility.compactClassName("&<ZIjl)].7u59avDD1(", true);
      try { 
        Utility.methodSignatureReturnType("&<ZIjl)].7u59avDD1(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `].7u59avDD1('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = Utility.signatureToString("B\"(FT2+T4Z", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.isSet((-2647), (byte)38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "%<);D XjrS#qu$";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "%<);D XjrS#qu$";
      objectArray0[1] = (Object) "%<);D XjrS#qu$";
      objectArray0[2] = (Object) "%<);D XjrS#qu$";
      objectArray0[3] = (Object) "%<);D XjrS#qu$";
      objectArray0[4] = (Object) "%<);D XjrS#qu$";
      objectArray0[5] = (Object) "%<);D XjrS#qu$";
      objectArray0[6] = (Object) "%<);D XjrS#qu$";
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("%<);D XjrS#qu$", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, 6, 486, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{%<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$}", "{%<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$}", "{%<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {%<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$, %<);D XjrS#qu$}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Utility.typeOfSignature("Cache hit ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[0] = (byte) (-111);
      byteArray0[2] = (byte)5;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte) (-111);
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)5;
      byteArray1[8] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = Utility.accessToString(229, true);
      assertEquals("public protected volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
      
      String string0 = Utility.replace("invokestatic", "invokestatic", "invokestatic");
      assertEquals("invokestatic", string0);
      
      Utility.convertString("jz1>");
      Utility.convertString("");
      Object object0 = new Object();
      String string1 = Utility.convertString("java.lang.");
      assertEquals("java.lang.", string1);
      
      String string2 = Utility.compactClassName("");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      // Undeclared exception!
      try { 
        Utility.signatureToString("E.&DmHLZ`o1ph", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E.&DmHLZ`o1ph'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(551);
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.typeOfSignature("BsqU");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-48);
      byteArray0[1] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 56, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.signatureToString("V!cx`6xcQEI{g?f", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "void";
      stringArray0[1] = "V!cx`6xcQEI{g?f";
      stringArray0[2] = "void";
      stringArray0[3] = "V!cx`6xcQEI{g?f";
      stringArray0[4] = "void";
      stringArray0[5] = "V!cx`6xcQEI{g?f";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Utility.convertString("]{ld");
      try { 
        Utility.typeOfSignature("YZl^a2:#@ip4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YZl^a2:#@ip4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      try { 
        Utility.typeOfSignature("-b+pf_U6'RkYl&bLh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -b+pf_U6'RkYl&bLh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte)42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      try { 
        Utility.decode("Mj[CKjY5Q>t^{7y$(L", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("short", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-385), (-385), false);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte byte0 = (byte)64;
      Utility.setBit((byte)64, (byte)64);
      Utility.methodTypeToSignature("Xq:s\"_0G:`9LYUo)WXJ", (String[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xq:s\"_0G:`9LYUo)WXJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xq:s\"_0G:`9LYUo)WXJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      String string0 = Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = "P";
      stringArray0[2] = "V";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("M|\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M|
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 194, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    swap
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Utility.signatureToString("ZZ#FeqS8>[ZX<", true);
      try { 
        Utility.typeOfSignature("Hw|YbSx`DrL@bh1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hw|YbSx`DrL@bh1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.compactClassName("");
      Utility.convertString("");
      String string0 = "cyYh1~*k? *wF`b,";
      Utility.compactClassName("cyYh1~*k? *wF`b,", false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2694, (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 214, (int) (byte) (-124), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)40;
      Constant[] constantArray1 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (byte)40);
      constantArray1[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      String string0 = Utility.codeToString(byteArray1, constantPool1, (int) (byte)0, (int) (byte) (-1), false);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("", "java.lang.Object", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)122;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte)122);
      assertEquals("0:    i2s\n1:    ishr\n2:    ishr\n3:    ishr\n4:    ishr\n5:    dload\t\t%122\n", string0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("i:j'id0qqek", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertEquals(39, constantMethodHandle0.getReferenceKind());
      
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantMethodHandle0.setReferenceKind(1261);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.replace("D!<6[ek3|;", "lmul", "lmul");
      assertEquals("D!<6[ek3|;", string0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      int int0 = (-4023);
      Utility.accessToString((-4023), false);
      Utility.compactClassName("public static volatile synthetic annotation enum", false);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("public static volatile synthetic annotation enum", "public static volatile synthetic annotation enum");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"public static volatile synthetic annotation enum\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-93), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.convertString("Ezb6G");
      Utility.convertString("transient");
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-38), 75, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Ezb6G", "Invalid signature: ", "transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ezb6G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "char");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("char", "*P", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      try { 
        Utility.typeOfSignature("=9(X/zK*Dd\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =9(X/zK*Dd\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "%<);D XjrS#qu$";
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("%<);D XjrS#qu$", "", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %<);D XjrS#qu$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      Utility.methodTypeToSignature("{}", stringArray0);
      Utility.methodTypeToSignature("{}", stringArray0);
      Utility.getSignature("{}");
      Utility.compactClassName("DwjTIf_S~^", "{}", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, 250, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("?3hn<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?3hn<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Utility.isSet(1612, 1612);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = "Invalid type: ";
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1008, 1612);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 1008, 1612, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Utility.searchOpcode("U1NX");
      boolean boolean0 = true;
      boolean boolean1 = false;
      char char0 = '\"';
      Utility.fillup("U1NX", (short) (-1), false, '\"');
      try { 
        Utility.decode(", low = ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Utility.isSet(2119, 2119);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, (-837), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), 2657, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      String string0 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("jz1>, , null, null, null, null, null, null", string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Illegally nested brackets:", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      Utility.classOrInterface((byte)123);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.methodTypeToSignature("()Lclass;", stringArray0);
      Utility.getSignature("class");
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()Lclass;");
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(61);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)46;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, 229, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-84);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("jsr_w\t\t#-1616794624", string0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Utility.convertString("' at index ");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte) (-124), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Utility.compactClassName("UGf{zyL[", false);
      Utility.clearBit((-304053907), (-304053907));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)125;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "%<);D XjrS#qu$";
      objectArray0[1] = (Object) "%<);D XjrS#qu$";
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("%<);D XjrS#qu$", "Nh'l-cm(H`a", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %<);D XjrS#qu$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("(LA^_e+U|X%?\"8;LL>;L;)L;", false);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Utility.compactClassName("CONSTANT_Long", true);
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteSequence0, (byte) (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte)17;
      Utility.decode("zf", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2139, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      Utility.convertString("{V, java.lang.Object@1c6831d4}");
      String string0 = "#aa.ang";
      try { 
        Utility.typeOfSignature("#aa.ang");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #aa.ang
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-128);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte) (-39);
      byteArray1[5] = (byte) (-128);
      byteArray1[6] = (byte) (-128);
      byteArray1[7] = (byte) (-128);
      byteArray1[8] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45746. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = Utility.getSignature("java.lang.");
      assertEquals("Ljava/lang/;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2564), (int) (byte)38);
      assertEquals("0:    bipush\t\t38\n", string1);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2037), (int) (byte)45, false);
      assertEquals("0:    aload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String string0 = "V";
      String string1 = "#aa.ang";
      try { 
        Utility.typeOfSignature("#aa.ang");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #aa.ang
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Mkmo|n,j}<e!?", "Invalid signature: ");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a8", string0);
      
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2119, 14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = Utility.compactClassName("OHbc1:", "OHbc1:", true);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("OHbc1:", stringArray0);
      assertEquals("()LOHbc1:;", string1);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "()LOHbc1:;";
      objectArray0[6] = object0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      String string2 = Utility.printArray(objectArray0, true);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit((byte) (-56), (byte) (-58));
      assertEquals((-56), int0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.classfile.ConstantLong");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Cache hit ");
      assertEquals((byte)5, byte0);
      
      short short0 = Utility.searchOpcode("Cache hit ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("):\n");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1872), (-93));
      assertFalse(boolean0);
      
      Utility.signatureToString("Z$byF-u|aG]", false);
      String string0 = Utility.compactClassName("Z$byF-u|aG]", "Adew Z.Vc/[KrWI`", true);
      assertEquals("Z$byF-u|aG]", string0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = "vbIP[[=x`U";
      int int0 = 242;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vbIP[[=x`U");
      Utility.fillup("vbIP[[=x`U", 242, false, '4');
      try { 
        Utility.typeOfSignature("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444vbIP[[=x`U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444vbIP[[=x`U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      PrintWriter printWriter0 = null;
      String string0 = "\t\t#";
      Utility.decode("\t\t#", false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Utility.methodTypeToSignature("astore_2", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)57;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 115, 152, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = " _P>";
      stringArray0[2] = "V";
      stringArray0[3] = "{V, java.lang.Object@35f84337}";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, 86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-b+pf_U6'RkYl&bLh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -b+pf_U6'RkYl&bLh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-40);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)61;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d8 10 3d", string0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Utility.methodTypeToSignature("*X?BbL", (String[]) null);
      try { 
        Utility.typeOfSignature("\"\")&OBiV7>MGag:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"\")&OBiV7>MGag:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[CMTNgoh- 'KuS+");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("|=<x?T", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence1);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantClass constantClass0 = new ConstantClass((-1099173672));
      constantArray0[2] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1099173672));
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.compactClassName("rG.F", "", true);
      assertEquals("rG.F", string0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.decode("k!:<2liP&pD$a.~", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Utility.compactClassName("iushr");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static", "iushr", "static", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String string0 = Utility.format((-2668), (-2668), false, '-');
      assertEquals("-2668", string0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte byte0 = Utility.typeOfSignature("Ljava/lang/Ob;ect@603222963V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = Utility.decode("Ljava/lang/Ob;ect@603222963V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, 40, false);
      assertEquals("14:   lsub\n15:   dadd\n16:   ineg\n17:   lstore_1\n18:   istore\t\t%48\n20:   baload\n21:   aaload\n22:   aaload\n23:   aaload\n24:   dstore\t\t%54\n26:   baload\n27:   sastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{v, null}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "{v, null}";
      byte[] byteArray0 = Utility.decode("kNE}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dmul", string1);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("monitorexit", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[5];
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Utility.compactClassName("<swMiP}E72K}", false);
      String string0 = Utility.format(70, (-247), false, '6');
      assertEquals("70", string0);
      
      String string1 = Utility.classOrInterface(1);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)90;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$40B$J$e2Z", string2);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?{mG$.={0:}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-116);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte) (-61), false);
      assertEquals("0:    dcmpg\n1:    nop\n2:    dstore_1\n3:    <illegal opcode>\n4:    dup_x1\n5:    l2d\n6:    iconst_0\n7:    f2l\n", string0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-116);
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)27;
      byteArray1[6] = (byte) (-104);
      byteArray1[7] = (byte)72;
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = "InnerClasses";
      Utility.replace("InnerClasses", "wide", (String) null);
      String string1 = "~$j55O";
      try { 
        Utility.methodSignatureArgumentTypes("~$j55O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~$j55O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = Utility.classOrInterface(190);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Utility.compactClassName("Visiting non-standard PMGClass object", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String[] stringArray0 = new String[10];
      // Undeclared exception!
      try { 
        Utility.signatureToString("OP>' _$Z`\"-p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OP>' _$Z`\"-p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "{v, null}";
      stringArray0[5] = "\t\t<";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Cache hit ");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[0] = (byte) (-111);
      byteArray0[2] = (byte)5;
      ConstantInteger constantInteger0 = new ConstantInteger(1297);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (int) (byte) (-111), false);
      assertEquals("0:    i2b\n1:    nop\n2:    iconst_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)78, (byte) (-57));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-83);
      byteArray0[2] = (byte)17;
      Object object0 = new Object();
      String string0 = "JM;i\\gVz";
      Utility.signatureToString("JM;igVz", false);
      String string1 = "java.lang.Throwable";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.Throwable", "java.lang.Throwable", "Y$'M6k&#l:u`&He");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Throwable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Utility.convertString("asto\re_2");
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("02 02", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iconst_m1";
      stringArray0[1] = "02 02";
      stringArray0[2] = "02 02";
      stringArray0[3] = "02 02";
      stringArray0[4] = "k!WgIDM.M,LwDJBw5";
      stringArray0[5] = "MdYdd!Ry";
      String string1 = Utility.methodTypeToSignature("k!WgIDM.M,LwDJBw5", stringArray0);
      assertEquals("(Liconst_m1;L02;L02;L02;Lk!WgIDM/M,LwDJBw5;LMdYdd!Ry;)Lk!WgIDM/M,LwDJBw5;", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, (-2166));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("if_acmpne\t\t#-17667", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_acmpne\t\t#-17667'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Utility.compactClassName("<swMiP}E72K}", false);
      Utility.convertString("compiler version\t");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "'", "se%n#!\"nR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Object object0 = new Object();
      ConstantDouble constantDouble0 = new ConstantDouble((-2472.45));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2096, 2096, 2096, 2096, 2096, constantPool0);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2981, 2096, localVariableArray0, constantPool0);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Illegally nested brackets:", (String) null, true, localVariableTable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[3] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.fillup("#DMz=$dsck%+}>9U$9#", (byte)17, false, 'T');
      assertEquals("#DMz=$dsck%+}>9U$9#", string0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[5];
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-38), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      ConstantPool constantPool0 = null;
      int int0 = 167;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (int) (byte)82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("new", "new", false);
      Utility.format((byte) (-57), (byte) (-57), false, 'z');
      // Undeclared exception!
      try { 
        Utility.replace("new", (String) null, "new");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte) (-68), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.typeOfSignature("BsqU");
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-48);
      byteArray1[1] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 56, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".J/fy>7QEa??6To");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .J/fy>7QEa??6To
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?{mG$.={0:}");
      byte[] byteArray0 = Utility.decode("?{mG$.={0:}", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?{mG$.={0:}");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(10, byteArray0.length);
      assertEquals("lstore_0", string0);
      assertArrayEquals(new byte[] {(byte)63, (byte)123, (byte)109, (byte)71, (byte)0, (byte)61, (byte)123, (byte)48, (byte)58, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("P4PR4;T*", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Utility.clearBit(549, 0);
      String string0 = "knDp;RpYg]<J";
      Utility.searchOpcode("knDp;RpYg]<J");
      try { 
        Utility.typeOfMethodSignature("t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      int int0 = (-1891);
      Utility.isSet(1612, (-1891));
      String string0 = "U<eZid+4@;.";
      try { 
        Utility.methodSignatureArgumentTypes("U<eZid+4@;.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U<eZid+4@;.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = Utility.compactClassName("The suffix must not be null", "The suffix must not be null", true);
      String string1 = Utility.fillup("", 0, true, 'n');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Utility.accessToString(1775, true);
      ConstantInteger constantInteger0 = new ConstantInteger(2273);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-636), (-532), 2273, (-532), 174, constantPool0);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(3092, 2311, localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("AM5:!vX", "B}.uk?3", "public private protected static volatile transient abstract", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AM5:!vX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = "native";
      Utility.fillup("$Zx7?a06P(i%-", 36, true, 'l');
      Utility.classOrInterface((-2221));
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("8w\"u", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 175, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = Utility.fillup("yQbMwOwO6/|rWO3eA", 93, false, '%');
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%yQbMwOwO6/|rWO3eA", string0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Utility.setBit(2285, 2285);
      String string0 = ">zl,";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">zl,", ">zl,", ">zl,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >zl,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*X?BbL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X?BbL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = "6w~:";
      Utility.searchOpcode("6w~:");
      Utility.format((short) (-1), (short) (-1), false, 'd');
      try { 
        Utility.typeOfMethodSignature("Sk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Sk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("f", (String[]) null);
      Utility.typeOfMethodSignature("()Lf;");
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.typeOfSignature("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",>[C/[";
      stringArray0[1] = "astore_2";
      stringArray0[2] = "astore_2";
      stringArray0[3] = "astore_2";
      stringArray0[4] = "astore_2";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("astore_2", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[C/[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("f&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, 3307, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = Utility.convertString("HKk1(<\"iK9&P");
      assertEquals("HKk1(<\\\"iK9&P", string0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Utility.searchOpcode("ifnull");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string0);
      
      boolean boolean0 = Utility.isSet((-4142), (-4142));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = "YZl^a2:#@ip4";
      try { 
        Utility.typeOfSignature("YZl^a2:#@ip4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YZl^a2:#@ip4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("{java.lang.Object@4319094a, java.lang.Object@4319094a, java.lang.Object@2718be21, java.lang.Object@78f600ac, java.lang.Object@3bdf8438, null}", false);
      ConstantPool constantPool0 = null;
      int int0 = 48;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2131), 48, false);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte)17;
      Utility.decode("zf", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2139, (int) (byte)123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.accessToString((-2344));
      Utility.isSet(88, 123);
      Utility.isSet(88, 88);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "static final volatile transient interface abstract synthetic annotation enum";
      stringArray0[1] = "static final volatile transient interface abstract synthetic annotation enum";
      stringArray0[2] = "static final volatile transient interface abstract synthetic annotation enum";
      stringArray0[3] = "static final volatile transient interface abstract synthetic annotation enum";
      Utility.methodTypeToSignature("", stringArray0);
      int int0 = 78;
      Utility.format(78, 78, false, 'Z');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-73);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("");
      Utility.fillup("", (-168), false, 'Z');
      String string0 = "q+sR(VO\\uu";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, "37 b7", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{V, null}", string1);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (int) (byte)22, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2Y8*Oiz1G<gd`-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Y8*Oiz1G<gd`-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)59;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte)126;
      byteArray1[5] = (byte)59;
      byteArray1[6] = (byte)95;
      byteArray1[7] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readFloat();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = "d5t0;eW!";
      Utility.convertString("d5t0;eW!");
      int int0 = (-3000);
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.isSet((-3000), (-3000));
      Utility.getSignature("d5t0;eW!");
      Utility.methodSignatureReturnType("Illegal type: ");
      Utility.methodSignatureReturnType("Ld5t0;eW!;");
      Utility.getSignature("~db2z6eSK<uW&atmdP");
      int int1 = 3;
      Utility.isSet(3, 3);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("d5t0");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.getSignature("jz1>");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "m_naF+4] ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = "boolean";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      Utility.methodTypeToSignature("boolean", stringArray0);
      try { 
        Utility.typeOfSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Utility.classOrInterface(1948);
      String string0 = Utility.classOrInterface(1948);
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)6;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2201), (-1057));
      assertEquals("0:    d2l\n1:    lastore\n2:    ireturn\n3:    goto\t\t#-15415\n6:    ldiv\n7:    dload_2\n8:    iconst_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte byte0 = Utility.typeOfSignature("Ljava/lang/Ob;ect@603222963V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = Utility.decode("Ljava/lang/Ob;ect@603222963V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, 40, true);
      assertEquals("14:   lsub\n15:   dadd\n16:   ineg\n17:   lstore_1\n18:   istore\t\t%48\n20:   baload\n21:   aaload\n22:   aaload\n23:   aaload\n24:   dstore\t\t%54\n26:   baload\n27:   sastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, (int) (byte)25, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)66;
      String string0 = "2oY6*Ouiz1\"<g0$`-'";
      try { 
        Utility.typeOfSignature("2oY6*Ouiz1\"<g0$`-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2oY6*Ouiz1\"<g0$`-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Utility.getSignature("]{ld");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)54;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (int) (byte)54, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-62);
      Utility.encode(byteArray0, true);
      Utility.methodSignatureToString("(Ljz1>;L;Ljz1>;Ljz1>;L;Ljz1>;Ljz1>;Ljz1>;)Ljz1>;", "lookupswitch", "double", false, (LocalVariableTable) null);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("Z;L:2z_#X=Um/", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
      
      String string0 = Utility.replace("s_D{n>b&[$^", "s_D{n>b&[$^", "s_D{n>b&[$^");
      assertEquals("s_D{n>b&[$^", string0);
      
      byte[] byteArray1 = Utility.decode("s_D{n>b&[$^", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)95, (byte)68, (byte)123, (byte)110, (byte)62, (byte)98, (byte)38, (byte)91, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      short short0 = Utility.searchOpcode("invokeinterface");
      assertEquals((short)185, short0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      Utility.setBit((byte)64, (byte)64);
      String string0 = "JO1?w]";
      Utility.signatureToString("JO1?w]", true);
      try { 
        Utility.decode("void", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("|=<x?T", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("|=<x?T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |=<x?T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-63), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Utility.convertString("L\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L\n";
      stringArray0[1] = "L\n";
      stringArray0[2] = "L\n";
      stringArray0[3] = "L\n";
      stringArray0[4] = "L\n";
      stringArray0[5] = "L\n";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UGf{zy)[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UGf{zy)['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.searchOpcode("y_kINlNO$");
      String string0 = "u516k]";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("u516k]", "", "u516k]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u516k]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      String string0 = Utility.convertString(")'&6");
      assertEquals(")\\'&6", string0);
      
      String string1 = Utility.getSignature(")'&6");
      assertEquals("L)'&6;", string1);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      Constant[] constantArray0 = new Constant[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45746. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      String string0 = Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "{v, null}";
      stringArray0[5] = "\t\t<";
      Utility.methodTypeToSignature("v", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2198, (int) (byte) (-63), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      String string0 = Utility.convertString("L\n");
      assertEquals("L\\n", string0);
      
      byte byte0 = Utility.typeOfSignature("L\n");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("YNAk_ocYISY?bf0Nr\"x", false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-30);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)79;
      Utility.equals(byteArray0, byteArray1);
      String string0 = "Dont call getValueLong() on a non LONG ElementValue";
      int int0 = 27;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)79);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[9];
      try { 
        Constant.readConstant(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("HKk1(K9&P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HKk1(K9&P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("BTf{[e~X1[S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[e~X1[S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)2;
      String string0 = Utility.format(78, (byte)2, false, 'u');
      assertEquals("78", string0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)123, (byte) (-85));
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, 84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5~a6gR4dX3h~[_7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5~a6gR4dX3h~[_7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2119, 2119);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("goto_w\t\t#-1248360930", string0);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Attribute", "byte", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      short short0 = Utility.searchOpcode("6w~:");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.getSignature(">\t");
      assertEquals("L>;", string0);
      
      String string1 = "1\\u3U]";
      String string2 = Utility.convertString(string1);
      assertEquals("1\\\\u3U]", string2);
      
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-57);
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("5b c7 e9 99 a9 c7", string3);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-62);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), 248, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2e 2e 2e 2e", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iaload", string1);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("]{ld");
      assertEquals("]{ld", string0);
      
      String string1 = Utility.compactClassName("java.lang.V!cx`6xcQEI{g?f", false);
      assertEquals("java.lang.V!cx`6xcQEI{g?f", string1);
      
      byte byte0 = Utility.typeOfSignature("FiNoi\"~r{w>f@Y");
      assertEquals((byte)6, byte0);
      
      String string2 = Utility.accessToString((int) (byte) (-99));
      assertEquals("public protected static final transient native interface abstract strictfp synthetic annotation enum", string2);
      
      Utility.compactClassName("&=$", false);
      String string3 = Utility.classOrInterface(36);
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = object0;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantValue";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      String string0 = "static";
      stringArray0[4] = "static";
      Utility.methodTypeToSignature("V", stringArray0);
      Utility.getSignature("V");
      boolean boolean0 = true;
      Utility.compactClassName("t|} (3_*K&jfmr", "static", true);
      Utility.methodTypeToSignature("7U:*xO~K", stringArray0);
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "static", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V";
      Utility.typeOfSignature("Cache hit ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureArgumentTypes("h&/ppha/-(68r/pr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: h&/ppha/-(68r/pr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      int int0 = Utility.clearBit(1777, 1777);
      assertEquals(1777, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isSet(1777, 1777);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-2801), (-2801));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Utility.signatureToString("S?`VJLz>m:cI/:Y", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureArgumentTypes("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Utility.convertString("&s)aJlU@pP)`");
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)122;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      String string0 = "$Zx7?a06P(i%-";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$I", "", false);
      Utility.decode("", false);
      String string1 = "l2d";
      Utility.decode("l2d", false);
      try { 
        Utility.typeOfSignature("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String string0 = Utility.compactClassName("V", false);
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (-29));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String[] stringArray0 = new String[18];
      stringArray0[0] = "1T,[l]iRAC `}hEY~p";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (int) (byte) (-62), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)40;
      Constant[] constantArray1 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (byte)40);
      constantArray1[2] = (Constant) constantInvokeDynamic0;
      constantPool0.copy();
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)40, 190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("HKk1(K9&P", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HKk1(K9&P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "{, java.lang.Object@641fa3f1}";
      stringArray0[4] = "{, java.lang.Object@641fa3f1}";
      stringArray0[5] = "";
      Utility.methodTypeToSignature("", stringArray0);
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;L;L{,;L{,;L;)L;", string0);
      
      String string1 = Utility.methodSignatureToString("(L;L;L;L{,;L{,;L;)L;", "", "");
      assertEquals(" ( arg1,  arg2,  arg3, {, arg4, {, arg5,  arg6)", string1);
      
      String string2 = Utility.accessToString(1401);
      assertEquals("public static final synchronized volatile native abstract", string2);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "";
      stringArray0[4] = "jz1>";
      Utility.compactClassName("\":}h'LS", "Xq:s\"_0G:`9LYUo)WXJ", false);
      Utility.convertString("");
      String string0 = null;
      Utility.compactClassName("oF7%j=L:d*", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      Utility.typeOfSignature("S?`VJLz>m:cI/:Y");
      byte byte0 = Utility.typeOfSignature("S?`VJLz>m:cI/:Y");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%<);D XjrS#qu$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %<);D XjrS#qu$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 123, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      int int0 = 1777;
      Utility.clearBit(1777, 1777);
      Utility.methodTypeToSignature("FR'ePynAYA3+a1{;LF|", (String[]) null);
      String string0 = "org.apache.commons.io.filefilter.FileFileFilter";
      try { 
        Utility.typeOfMethodSignature("org.apache.commons.io.filefilter.FileFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.FileFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, 181, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      String string0 = Utility.compactClassName("boolean", "boolean", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Utility.signatureToString("ZZ#FeqS8>[ZXY<", true);
      Utility.typeOfSignature("ZZ#FeqS8>[ZXY<");
      try { 
        Utility.typeOfSignature("Unknown constant type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unknown constant type 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      Utility.getSignature("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A^_e+U|X%?\"8";
      stringArray0[1] = "L;";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("jar:file:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jar:file:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60), false);
      try { 
        Utility.typeOfSignature("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    wide\t(wide)
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
      
      String string1 = Utility.compactClassName("'", false);
      assertEquals("'", string1);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nop";
      String string2 = Utility.methodTypeToSignature("P\"V 8|v-P]9w;%lH`FL", stringArray0);
      assertEquals("(Lnop;)LP\"V;", string2);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0, true);
      Utility.compactClassName("yj1|V7#r':vP", "jsr", true);
      Utility.convertString("M,{[GR1|\"\u0004^yMaf'O");
      String string0 = null;
      Utility.compactClassName("jsr", true);
      try { 
        Utility.methodSignatureReturnType("boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, 131, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      String string0 = Utility.compactClassName("", false);
      String string1 = Utility.replace("", "/IRE^S", "GZb");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte) (-1);
      Constant[] constantArray1 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Mc");
      constantArray1[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (byte)40);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iconst_5";
      Utility.methodTypeToSignature("invokeinterface", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      int int0 = 36;
      char char0 = '}';
      Utility.isJavaIdentifierPart('}');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "<swMiP}E72K}";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "<swMiP}E72K}";
      objectArray0[4] = (Object) "<swMiP}E72K}";
      objectArray0[5] = (Object) "<swMiP}E72K}";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "<swMiP}E72K}";
      Utility.printArray(objectArray0, false);
      String string0 = "~,,\\5gK.'";
      try { 
        Utility.methodSignatureReturnType(">.M[|/QS^M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>.M[|/QS^M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2040, 85);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("monitorexit", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (-2753), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6M3p.n.ve8!y;<\"=`%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6M3p.n.ve8!y;<\"=`%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[+^TtYqAUle.Ce>`q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+^TtYqAUle.Ce>`q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      int int0 = 0;
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-60);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = "Z[Qx|56\"Sn=";
      String string1 = "";
      String string2 = "";
      boolean boolean1 = true;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)2, (byte)91, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("monitorexit", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      Utility.encode(byteArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureToString("()Lmonitorexit;", "z7%b_> bI_0>QkT/z7%b_> bI_0>QkT.", "98pG!fV3", false, (LocalVariableTable) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -108
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("void", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      try { 
        Utility.decode("@*x$o1Wz!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)25;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      String string0 = "atAre_2";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = true;
      Method method0 = null;
      try {
        method0 = new Method(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Utility.signatureToString("N3txghI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N3txghI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-24);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1), (int) (byte) (-75), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Utility.convertString("monitorenter");
      Utility.compactClassName("short", false);
      Utility.typeOfSignature("I1}T9(6qq=peyiOy]");
      Utility.accessToString((-1148));
      // Undeclared exception!
      try { 
        Utility.signatureToString("KD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byte[] byteArray1 = Utility.decode("The array of names must not be null", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[zn<-+>79?{r");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readFully(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lh&7}7%1\u0000yL)<0,QHp;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lh&7}7%1\u0000yL)<0,QHp;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2134), (int) (byte) (-128), false);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    ior\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jz1>";
      stringArray0[1] = "";
      stringArray0[2] = "jz1>";
      stringArray0[3] = "jz1>";
      stringArray0[4] = "jz1>";
      stringArray0[5] = "jz1>";
      stringArray0[6] = "jz1>";
      stringArray0[7] = "jz1>";
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.methodTypeToSignature("jz1>", stringArray0);
      Utility.getSignature("jz1>");
      // Undeclared exception!
      try { 
        Utility.compactClassName("7U:*xO~K", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41757. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      String string0 = Utility.compactClassName("w", false);
      assertEquals("w", string0);
      
      int int0 = Utility.clearBit((byte)82, 9);
      assertEquals(82, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dastore", string1);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("L\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("bool>an", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("62 6f 6f 6c 3e 61 6e", string0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(551);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Utility.replace("iconst_4", "freturn", "areturn");
      try { 
        Utility.decode("Mj[CKjY5Q>t^{7y$(L", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Utility.methodTypeToSignature("*X?BbL", (String[]) null);
      try { 
        Utility.typeOfSignature("\"\")&OBiV7>MGag:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"\")&OBiV7>MGag:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      Utility.format(83, 1602, false, '~');
      String string0 = Utility.classOrInterface(83);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      byte byte0 = (byte) (-74);
      String string0 = "LUe";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LUe", (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-70);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)102);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)39;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1409), (int) (byte)39, false);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    dload_1\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      String string1 = Utility.accessToString(183);
      assertEquals("public private protected final synchronized transient", string1);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      Utility.compactClassName("ZZ#FeqS>[ZX<");
      Utility.replace("ZZ#FeqS>[ZX<", "o[)n", "ZZ#FeqS>[ZX<");
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22040. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(";n:9h#bf1  3oC-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;n:9h#bf1  3oC-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)102;
      byteArray1[4] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("monitorexit", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String string0 = Utility.convertString("L\n");
      assertEquals("L\\n", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("L\n", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_1", string1);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v";
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "{v, null}";
      stringArray0[5] = "\t\t<";
      Utility.methodTypeToSignature("v", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("!LfQG!B7v!~", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (-1438), true);
      assertEquals("0:    lload_3\n1:    astore_1\n2:    fsub\n3:    fastore\n4:    dstore_0\n5:    lload_3\n6:    lstore_3\n7:    lstore\t\t%118\n9:    lload_3\n10:   iand\n", string0);
      
      int int0 = Utility.setBit((byte) (-103), (-788));
      assertEquals((-103), int0);
      
      String string1 = Utility.compactClassName("!LfQG!B7v!~");
      assertEquals("!LfQG!B7v!~", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "0:    lload_3\n1:    astore_1\n2:    fsub\n3:    fastore\n4:    dstore_0\n5:    lload_3\n6:    lstore_3\n7:    lstore\t\t%118\n9:    lload_3\n10:   iand\n";
      objectArray0[1] = (Object) "!LfQG!B7v!~";
      objectArray0[2] = (Object) "!LfQG!B7v!~";
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"0:    lload_3\n1:    astore_1\n2:    fsub\n3:    fastore\n4:    dstore_0\n5:    lload_3\n6:    lstore_3\n7:    lstore\t\t%118\n9:    lload_3\n10:   iand\n\", \"!LfQG!B7v!~\", \"!LfQG!B7v!~\"", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "gD]";
      stringArray0[1] = "!LfQG!B7v!~";
      stringArray0[2] = "Lior;V";
      stringArray0[3] = "i2f";
      String string3 = Utility.methodTypeToSignature("N}y'WAj>fJea.j", stringArray0);
      assertEquals("(LgD];L!LfQG!B7v!~;LLior;V;Li2f;)LN}y'WAj>fJea/j;", string3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_3", string4);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String string0 = "S?`VJLz>m:cI/:Y\\";
      Utility.typeOfSignature("S?`VJLz>m:cI/:Y");
      Object object0 = new Object();
      boolean boolean0 = false;
      Utility.signatureToString("S?`VJLz>m:cI/:Y", false);
      String string1 = " k5\">6sBW\"%]CwS/Vm";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" k5\">6sBW\"%]CwS/Vm", (String) null, "coolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  k5\">6sBW\"%]CwS/Vm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      Utility.searchOpcode("6w~:");
      Utility.format(171, (short) (-1), false, 'd');
      Utility.isJavaIdentifierPart('A');
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "6w~:";
      objectArray0[2] = (Object) "171";
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("java.lang.Object@c9b3af3, 6w~:, 171");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@c9b3af3, 6w~:, 171'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZvN3#<a=.3jUsw$7;]");
      assertEquals((byte)4, byte0);
      
      short short0 = Utility.searchOpcode("ZvN3#<a=.3jUsw$7;]");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-76), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      String string0 = Utility.replace("s_D{n>b&[$^", "s_D{n>b&[$^", "s_D{n>b&[$^");
      assertEquals("s_D{n>b&[$^", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-12);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), 4, false);
      assertEquals("0:    dup_x1\n1:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      Utility.isSet(2119, 2119);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LBq");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = Utility.decode(">fITE{(4Ib35K)<)nC]", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = byteSequence0.readUnsignedShort();
      assertEquals(15974, int0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2319), (-2319), true);
      assertEquals("0:    istore_3\n1:    fsub\n2:    dstore_2\n3:    bastore\n4:    fstore_2\n5:    lshr\n6:    dload_2\n7:    caload\n8:    dstore_2\n9:    fadd\n10:   baload\n11:   saload\n12:   astore_0\n13:   dload_3\n14:   istore_1\n15:   dload_3\n16:   fdiv\n17:   fstore_0\n18:   dup2_x1\n", string0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte) (-1);
      Constant[] constantArray1 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Mc");
      constantArray1[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (byte)40);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iconst_5";
      Utility.methodTypeToSignature("2Vn-.TQ(", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("J*3?[N", "J*3?[N", "J*3?[N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J*3?[N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      String string0 = Utility.compactClassName("impdep1", false);
      assertEquals("impdep1", string0);
      
      Utility.convertString("org.apache.bcel.classfile.JavaClass");
      String string1 = Utility.convertString("u)qw~");
      assertEquals("u)qw~", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)43;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)86;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String string0 = "Xq:s\"_0G:`9LYUo)WXJ";
      try { 
        Utility.typeOfSignature("7@e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7@e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.isSet((byte)38, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)13;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("14 0d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 14 0d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      Utility.convertString("Ezb6*");
      try { 
        Utility.typeOfSignature("Ezb6*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ezb6*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("The arra0 of names $ust not be null", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
      assertEquals(34, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-62);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-114), 86);
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2i", string0);
      
      boolean boolean0 = Utility.isSet((-3731), 46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid StackMap frame_type");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      String string0 = "FwcK}/LIqQw";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("FwcK}/LIqQw", "FwcK}/LIqQw", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("void", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte) (-76);
      byteArray1[4] = (byte)22;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(4, byteArray0.length);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      Object object0 = new Object();
      Utility.isSet(89, 89);
      try { 
        Utility.typeOfSignature("Aj3U r bK`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Aj3U r bK`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N=|*<'.zEg%n' M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N=|*<'.zEg%n' M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      String[] stringArray0 = new String[18];
      stringArray0[0] = "1T,[l]iRAC `}hEY~p";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("1T,[l]iRAC `}hEY~p", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
