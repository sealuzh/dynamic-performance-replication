/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:36:46 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("w;:TnV~pn|P{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.min();
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      int int1 = 3;
      compressedVector0.norm();
      SparseVector.zero(37, (-2017));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.pollLast();
      SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        compressedVector0.set(3, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.add((double) (-2500));
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = locale0.stripExtensions();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale1);
      locale1.getDisplayLanguage(locale0);
      locale1.stripExtensions();
      NumberFormat.getPercentInstance(locale1);
      locale1.getDisplayName();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale1);
      locale1.getDisplayLanguage(locale0);
      compressedVector0.mkString(numberFormat0, "0.5.5");
      compressedVector0.swapElements((-2500), (-2500));
      compressedVector0.swapElements((-2500), (-2500));
      compressedVector0.nonZeroAt((-2500));
      compressedVector0.copyOfLength(0);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-2500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2500
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals("%%MatrixMarket vector coordinate real\n0 0\n", string0);
      
      compressedVector0.sum();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      compressedVector0.shuffle();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeFirstOccurrence(compressedVector0);
      Vector.fromCollection(linkedList0);
      compressedVector0.toCSV();
      compressedVector0.sum();
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        compressedVector0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(309, 309);
      compressedVector0.toDiagonalMatrix();
      compressedVector0.shuffle();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      CompressedVector compressedVector1 = CompressedVector.zero(849);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 309;
      doubleArray0[1] = (double) 849;
      doubleArray0[2] = (double) 849;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 849;
      CompressedVector.fromArray(doubleArray0);
      compressedVector1.blankOfLength(849);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(332, (-269.0564331));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '332' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3487, 3485);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3487, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3487, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1, 1);
      compressedVector0.setAll(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-78));
      linkedList0.add(byte0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      SparseVector sparseVector0 = SparseVector.zero(9);
      sparseVector0.toDenseVector();
      compressedVector0.equals((Object) sparseVector0);
      compressedVector0.copy();
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      linkedList0.clear();
      // Undeclared exception!
      try { 
        compressedVector0.select(intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.set(0, (-1221.28741));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(3539, (-2004.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      compressedVector0.copyOfLength(0);
      MockRandom mockRandom0 = new MockRandom(3);
      mockRandom0.setSeed((-2767L));
      CompressedVector.random(3, 0.0, (Random) mockRandom0);
      mockRandom0.nextFloat();
      int int1 = 5;
      // Undeclared exception!
      try { 
        CompressedVector.zero(2, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 5.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("5XUZ=I;}`Kx>\"5-q5OK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll((-1382.21));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Float float0 = new Float(0.0F);
      linkedList0.add(float0);
      linkedList0.add((Float) null);
      compressedVector0.setAll(100.0);
      assertEquals(0, compressedVector0.cardinality());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(8, (-1));
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1332.5601589;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      int[] intArray0 = new int[2];
      intArray0[1] = 2101;
      CompressedVector compressedVector0 = new CompressedVector(2101, 2, doubleArray0, intArray0);
      compressedVector0.nonZeroAt(2101);
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3548, 3548);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      locale0.getDisplayName();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayLanguage(locale1);
      compressedVector0.mkString(numberFormat0, "French (Canada)");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3548;
      doubleArray0[1] = (double) 3548;
      doubleArray0[2] = (double) 3548;
      doubleArray0[3] = (double) 3548;
      doubleArray0[4] = (double) 3548;
      doubleArray0[5] = (double) 3548;
      doubleArray0[6] = (-1161.8);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.swapElements((-801), (-801));
      // Undeclared exception!
      try { 
        compressedVector1.swapElements((-801), 973);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(17, vectorFunction0);
      compressedVector0.swapElements(1, 2874);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 17;
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(17, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(309, 309);
      compressedVector0.toDiagonalMatrix();
      Vector vector0 = compressedVector0.shuffle();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)309, 983.695917333, 0.0, 3023.90127, (-2118.8835486426196)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.transform(vectorFunction0);
      assertTrue(compressedVector0.equals((Object)vector0));
      assertEquals(0.9967637540453075, compressedVector1.density(), 0.01);
      
      CompressedVector.zero(849);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 309;
      doubleArray0[1] = (double) 849;
      doubleArray0[2] = (double) 309;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 849;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.8, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3548, 3548);
      compressedVector0.nonZeroIterator();
      compressedVector0.swapElements(0, 998);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(998, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3548;
      doubleArray0[1] = (double) 998;
      doubleArray0[2] = (double) 3548;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 998;
      doubleArray0[5] = (double) 998;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3548, 3548);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2558;
      doubleArray0[1] = (double) 3548;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3548;
      doubleArray0[4] = (double) 3;
      int[] intArray0 = new int[5];
      intArray0[0] = 3548;
      intArray0[1] = 2558;
      intArray0[2] = 3548;
      intArray0[3] = 3;
      intArray0[4] = 3;
      CompressedVector compressedVector1 = new CompressedVector(3, 2558, doubleArray0, intArray0);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      // Undeclared exception!
      try { 
        compressedVector1.toDenseVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3548
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1887);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1668);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1332.5601589;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2101;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2101;
      CompressedVector compressedVector0 = new CompressedVector(2101, 2, doubleArray0, intArray0);
      compressedVector0.nonZeroAt(2101);
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3562, 3562);
      compressedVector0.nonZeroIterator();
      compressedVector0.swapElements(0, 998);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(655.339528681).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(998, vectorFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3562;
      doubleArray0[1] = (double) 998;
      doubleArray0[2] = (double) 3562;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 17;
      CompressedVector compressedVector0 = new CompressedVector(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(17, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.non((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3548;
      CompressedVector compressedVector0 = new CompressedVector(3548, 3548);
      compressedVector0.nonZeroIterator();
      int int1 = 0;
      int int2 = 998;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 3548;
      intArray0[3] = 3548;
      intArray0[4] = 3548;
      intArray0[5] = 998;
      // Undeclared exception!
      try { 
        compressedVector0.select(intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3548' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      CompressedVector.zero(0);
      Integer integer0 = new Integer((-3229));
      byte byte0 = (byte)12;
      Byte byte1 = new Byte((byte)106);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Byte byte2 = new Byte((byte)126);
      hashMap0.put(integer0, byte2);
      int int1 = 144;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 8;
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 4096;
      intArray0[2] = 8;
      intArray0[3] = (-1);
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 8;
      intArray0[8] = 8;
      CompressedVector compressedVector0 = new CompressedVector(8, 2, doubleArray0, intArray0);
      compressedVector0.set(2, 1072.33612556);
      assertArrayEquals(new double[] {1072.33612556, 2.0, 8.0, 2.0, 8.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(17, vectorFunction0);
      compressedVector0.nonZeroAt(487);
      compressedVector0.set(8, 8);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-544), (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-544' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(17, vectorFunction0);
      compressedVector0.swapElements(2144957196, 17);
      assertEquals(0.058823529411764705, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      compressedVector0.updateAt(17, vectorFunction0);
      compressedVector0.nonZeroAt(487);
      compressedVector0.swapElements(17, 3465);
      assertEquals(0.058823529411764705, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(12);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(8);
      Long long0 = Long.valueOf((long) 8);
      hashMap0.put(integer0, long0);
      SparseVector.fromMap(hashMap0, 12);
      compressedVector0.sum();
      CompressedVector.zero(12);
      compressedVector0.toBinary();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(1, Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1332.5601589;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2101;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2101;
      CompressedVector compressedVector0 = new CompressedVector(2101, 2, doubleArray0, intArray0);
      compressedVector0.nonZeroAt(2101);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2101, vectorFunction0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1662;
      doubleArray0[1] = (double) 1662;
      doubleArray0[2] = (double) 1662;
      doubleArray0[3] = (double) 1662;
      doubleArray0[4] = (double) 1662;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-675);
      intArray0[3] = 1662;
      intArray0[4] = 2;
      CompressedVector compressedVector0 = new CompressedVector(1662, 2, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.random(147, 1730.27774, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-3229), (double) (-3229), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 12;
      CompressedVector compressedVector0 = CompressedVector.zero(12);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1922.949), 0.0, 0.0, (-1922.949), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.sum();
      CompressedVector compressedVector1 = CompressedVector.zero(12);
      compressedVector0.toBinary();
      compressedVector1.product();
      int int1 = 1678;
      // Undeclared exception!
      try { 
        compressedVector1.get(1678);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1678' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      compressedVector0.nonZeroAt(487);
      compressedVector0.set(8, 8);
      compressedVector0.nonZeroAt(8);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.toMatrixMarket();
      compressedVector0.each(vectorProcedure0);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      compressedVector1.setAll((-2071.61724678));
      compressedVector0.nonZeroAt(3);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(12);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)12, (-2118.8835486426196), (double)12, 2691.060035, 1478.149888600072).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.sum();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-661), vectorFunction1);
      CompressedVector compressedVector1 = new CompressedVector();
      compressedVector1.nonZeroAt((-1824));
      // Undeclared exception!
      try { 
        compressedVector0.set((-661), 12421.375595157957);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-661' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 17;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.swapElements((byte)0, 7);
      Vector vector0 = compressedVector1.copyOfLength((byte)0);
      assertEquals(0.5, compressedVector1.density(), 0.01);
      
      compressedVector0.iterator();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, (byte)0);
      assertTrue(compressedVector2.equals((Object)vector0));
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      compressedVector0.updateAt(17, vectorFunction0);
      compressedVector0.nonZeroAt(487);
      compressedVector0.swapElements(301, (-2432));
      assertEquals(0.058823529411764705, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-601.6);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(1.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1099);
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 2138.237;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 3;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = (-1099);
      CompressedVector compressedVector0 = new CompressedVector(3, 1, doubleArray0, intArray0);
      compressedVector0.toDenseVector();
      double double0 = compressedVector0.getOrElse(1, (-1099));
      assertEquals((-1099.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)65;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.set((byte)0, (byte)0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(292, vectorFunction0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (byte)1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft((byte)1);
      compressedVector0.swapElements((byte)1, (byte)1);
      compressedVector1.iterator();
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      int int0 = 1441;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1441, vectorFunction0);
      numberFormat0.setParseIntegerOnly(false);
      NumberFormat numberFormat1 = NumberFormat.getCurrencyInstance();
      numberFormat0.setMinimumFractionDigits(1441);
      int int1 = (-538);
      numberFormat0.setMaximumFractionDigits((-538));
      compressedVector0.copy();
      compressedVector0.toMatrixMarket(numberFormat0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      compressedVector1.add(1595.209665188);
      compressedVector1.toBinary();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(5);
      hashMap0.getOrDefault(numberFormat1, integer0);
      CompressedVector.fromMap(hashMap0, 4483);
      CompressedVector compressedVector2 = CompressedVector.zero(8);
      // Undeclared exception!
      try { 
        compressedVector2.getOrElse((-1), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      short short0 = (short)791;
      Short.toUnsignedLong((short)791);
      int int0 = Long.BYTES;
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = compressedVector0.toBinary();
      int int1 = 17;
      CompressedVector.fromBinary(byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 37;
      CompressedVector compressedVector0 = CompressedVector.zero(37, 37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)37, (double)37, (double)37, (-808.7078327082305), (-808.7078327082305)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(20, (-998));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)37, (double)37, (double)37, (double)37, (double)37).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2670), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(17, vectorFunction0);
      compressedVector0.swapElements((-257), 17);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 37;
      CompressedVector compressedVector0 = CompressedVector.zero(37, 37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-1.0), (-2473.39015), (-1.0), (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.sum();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-455.59), (-861.83399594), (-861.83399594), (-1.0), (-861.83399594)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction1);
      int int1 = (-1665);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1665
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(17, vectorFunction0);
      compressedVector0.slice(17, 17);
      compressedVector0.swapElements(17, (-252));
      // Undeclared exception!
      try { 
        CompressedVector.zero(642, (-1931));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1931.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 17;
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorVectorOperation<Integer> vectorVectorOperation0 = (VectorVectorOperation<Integer>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 9;
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 17;
      CompressedVector compressedVector1 = new CompressedVector(17, 9, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.subtract((Vector) compressedVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '17' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 17;
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector0 = compressedVector0.blank();
      compressedVector0.updateAt(17, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.subtract(vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '17' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
