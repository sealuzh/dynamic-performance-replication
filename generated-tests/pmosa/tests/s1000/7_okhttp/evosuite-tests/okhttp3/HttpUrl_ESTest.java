/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:42:34 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "q!O";
      try { 
        HttpUrl.getChecked("q!O");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for q!O
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        HttpUrl.getChecked("j|9:'JZ_{EX(");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for j|9:'JZ_{EX(
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", ".", "https:/www.somefakebutwellformedurl.org/fooexample");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(0, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("\n");
      boolean boolean0 = HttpUrl.percentEncoded("\n", 892, 892);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment((String) null);
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.decodeHexDigit('}');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("Xxt`<B[~<]");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-38420141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -38420141
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\n";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(17, "\n");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "F#");
      try { 
        MockURI.URI("L6)P%", "L6)P%", "L6)P%", "L6)P%", "L6)P%");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: L6)P%://L6)P%25L6)P%25?L6)P%25#L6)P%25
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1327), "\r");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('h');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        HttpUrl.getChecked("e=#<");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for e=#<
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("Pw:[&fcYN|:");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        HttpUrl.getChecked("LM/G]{;J&Xt_D\"5+");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for LM/G]{;J&Xt_D\"5+
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("MD5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("okhttp3.HttpUrl$1");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "g@@t'^M3pr\"O.]O";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 547;
      String string0 = "11ZcA;~4qW@<dX{$uVU";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(547, "11ZcA;~4qW@<dX{$uVU");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 547, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(57, ":");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(5, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      httpUrl_Builder0.encodedFragment = null;
      String string1 = "WLfrJ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("WLfrJ", "WLfrJ");
      String string2 = "}?z.{P(%aUhG";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("}?z.{P(%aUhG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: }?z.{P(%aUhG
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("0.0:", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".%Be");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%Be
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllEncodedQueryParameters("%7b%22i%3c%3f&qh*c%atk");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("2e%e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 2e%e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment = "http:x";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("[", (String) null);
      String string0 = "0.:d";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0.:d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0.:d
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "okhttp3.HttpUrl$Builder$ParseResult";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("okhttp3.HttpUrl$Builder$ParseResult");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("okhttp3.HttpUrl$Builder$ParseResult", "okhttp3.HttpUrl$Builder$ParseResult");
      String string1 = "M3ShvC)oyY";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("M3ShvC)oyY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: M3ShvC)oyY
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("6,`,mq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 6,`,mq
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("/:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query(":");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("kk|IRwatF$=>9=$2G<f");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "http:XojE8u:y3yc";
      String string1 = "\n";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("\n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-1581));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2B");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.parse("nV)A|t9,)!DTj}@3");
      boolean boolean0 = HttpUrl.percentEncoded("nV)A|t9,)!DTj}@3", 3, 55);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("WPxH3Lo");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("WPxH3Lo");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder1.host("WPxH3Lo");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("username == null", "username == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("username == null");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("^sp=(Ruq;D");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setEncodedPathSegment(0, "^sp=(Ruq;D");
      httpUrl_Builder4.addQueryParameter("username == null", "username == null");
      httpUrl_Builder6.username("username == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\n";
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("\r");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl((HttpUrl.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery((String) null);
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.percentEncoded("", 2911, 419);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1768), "9XZS]b0r8h5(b?cQ!4");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Hm";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("Hm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Hm
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Invalid host: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("Invalid host: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("Invalid host: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("Invalid host: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Invalid host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("%s: actual 0x%08x != expected 0x%08x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("%s: actual 0x%08x != expected 0x%08x");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("%2B");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("N4");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("vlKpU(jubelg=t:%,F");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("zRluimj_a(kXf3FlvQ", "zRluimj_a(kXf3FlvQ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("zRluimj_a(kXf3FlvQ");
      String string0 = "UNSUPPORTED_SCHEME";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("UNSUPPORTED_SCHEME");
      httpUrl_Builder3.addPathSegment("UNSUPPORTED_SCHEME");
      String string1 = null;
      String string2 = ",9j*QQO9;$?R#A)N";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1046), ",9j*QQO9;$?R#A)N");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("http");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: http
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment("+");
      String string0 = "v\r";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("v\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: v\r
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("/+I[:");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ")N";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(")N");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(3440);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters(")N");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("+7UVC7dVF");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      httpUrl_Builder1.addPathSegment("invalid%20host:%20");
      String string0 = null;
      httpUrl_Builder0.username("11ZcA;~4qW@%3CdX%7B$uVU");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = HttpUrl.defaultPort(",-/RU#J6+|q");
      assertEquals((-1), int0);
      
      String string0 = HttpUrl.percentDecode(",-/RU#J6+|q", true);
      assertEquals(",-/RU#J6 |q", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("+::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: +::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        HttpUrl.getChecked("NpR1hYK08u:Y3YUC");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for NpR1hYK08u:Y3YUC
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "NpR1hYK08u:Y3YUC";
      HttpUrl.parse("NpR1hYK08u:Y3YUC");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("&%dC\"", "wd4");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("dQo7l9X");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("NpR1hYK08u:Y3YUC");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("VtX0%20%7DtJ:");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment(2326, "&%dC\"");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2326, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URI uRI0 = MockURI.create("/...");
      HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("/...");
      String string0 = "byteCount > Integer.MAX_VALUE: ";
      httpUrl_Builder1.removeAllEncodedQueryParameters("/...");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("byteCount > Integer.MAX_VALUE: ");
      httpUrl_Builder2.addPathSegment("/...");
      int int0 = 70;
      httpUrl_Builder0.encodedQuery("fn~,{");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPath("/mk");
      String string0 = "VtX0 }t:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("VtX0 }t:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: VtX0 }t:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.redact();
      httpUrl0.encodedUsername();
      HttpUrl.defaultPort("http://www.somefakebutwellformedurl.org/...");
      httpUrl0.querySize();
      httpUrl0.encodedPassword();
      HttpUrl.percentDecode((Buffer) null, "lk-j.%7f:ghpr=d", 4673, 104, true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.parse("http:\"");
      try { 
        MockURI.URI("http:\"", "3C!v[3G\"Kpc{-|_UhN", "3C!v[3G\"Kpc{-|_UhN", 1124, "http:\"", "3C!v[3G\"Kpc{-|_UhN", "byteCount > Integer.MAX_VALUE: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: http:\"://3C%7F!v%5B3G%22Kpc%7B-%7C_UhN@3C!v[3G\"Kpc{-|_UhN:1124http:%22?3C%7F!v[3G%22Kpc%7B-%7C_UhN#byteCount%20%3E%20Integer.MAX_VALUE:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("d=");
      HttpUrl.parse("d=");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:Xojk08uoy3yuc");
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals("http://xojk08uoy3yuc/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, list0.size());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:X/k08u:m(3uc");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("F");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://x/k08u:m(3uc", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      httpUrl_Builder1.port(806);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:\"/k08u:1(3uc");
      int int0 = HttpUrl.decodeHexDigit('.');
      assertEquals((-1), int0);
      
      httpUrl0.encodedPassword();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://\"/k08u:1(3uc", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.querySize();
      boolean boolean0 = HttpUrl.percentEncoded("", 54, 50);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "http:";
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.decodeHexDigit('I');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("7D!ftdJrSiZDw");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("7D!ftdJrSiZDw");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("7D!ftdJrSiZDw", "pathSegment == null");
      httpUrl_Builder3.addQueryParameter("pathSegment == null", "7D!ftdJrSiZDw");
      httpUrl_Builder3.addQueryParameter("pathSegment == null", (String) null);
      try { 
        HttpUrl.getChecked("7D!ftdJrSiZDw");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 7D!ftdJrSiZDw
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.percentDecode("LM/G]{;J&Xt_D\"5+", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(49);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("LM/G]{;J&Xt_D\"5+");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("LM/G]{;J&Xt_D\"5+");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.encodedPath("https");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: https
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "okio.Buffer";
      httpUrl_Builder0.port(58);
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("Enk;");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("2H}||:7~2F,8s$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 2H}||:7~2F,8s$
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0Y:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0Y:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0Y:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("http:", "5QQ");
      httpUrl_Builder1.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", " hex=");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("http:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery(")MmQzz7,1Y!^&(R");
      httpUrl_Builder2.encodedUsername = "http:";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("li=3}", "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/http:");
      httpUrl_Builder4.removeAllQueryParameters("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/http:");
      try { 
        HttpUrl.getChecked("+7uvc7dvf%7f");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for +7uvc7dvf%7f
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.percentDecode("LM/G]{;J&Xt_D\"5+", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters(") and stream length (");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("LM/G]{;J&Xt_D\"5+");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("\"qyF:F3Go", " \"':;<=>@[]^`{}|/?#");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery(") and stream length (");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "%2e.";
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string2 = "\n";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addQueryParameter((String) null, "f5\fg]>Ylx[_z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("f");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("3$`(~6t6e]", "f");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("3$`(~6t6e]");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("2:}||:7~2F,8s$");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[]";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("[]");
      String string1 = "Me<_Mzs[!{";
      httpUrl_Builder1.addPathSegments("Me<_Mzs[!{");
      String string2 = "]g";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]g");
      String string3 = ":B-";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":B-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :B-
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.redact();
      httpUrl0.encodedUsername();
      HttpUrl.defaultPort("http://www.somefakebutwellformedurl.org/...");
      httpUrl0.encodedPassword();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.percentDecode((Buffer) null, "lk-j.%7f:ghpr=d", 4673, (-1), true);
      httpUrl0.queryParameterNames();
      httpUrl0.port();
      httpUrl0.password();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername(": ");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment((-1), ":p");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\n";
      httpUrl_Builder0.password("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("R]tv{} L");
      httpUrl_Builder0.encodedUsername("unexpected port: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment((String) null);
      httpUrl_Builder0.host("nTgT~v(d");
      HttpUrl.parse("nTgT~v(d");
      try { 
        HttpUrl.getChecked("cEGf&-V");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for cEGf&-V
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.host("xjL)Hx");
      HttpUrl.parse("http:yk08u:y3yuc");
      try { 
        HttpUrl.getChecked("wd%2fxhhqbteig%5e!%7frv1'");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for wd%2fxhhqbteig%5e!%7frv1'
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "\n";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "*";
      HttpUrl.percentDecode("*", false);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string1 = "!F5VaY*";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("!F5VaY*", "<g}H3Dg-a\"0&");
      String string2 = "6f]/EOb=6Dzp&P";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("6f]/EOb=6Dzp&P");
      String string3 = "6Iv.";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("6Iv.");
      int int0 = 48;
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment(48, "6Iv.");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".%2e";
      httpUrl_Builder0.addEncodedPathSegments(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "I5Q?";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("I5Q?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".%2e");
      String string1 = "mP{e[h";
      httpUrl_Builder1.addEncodedPathSegments(".%2e");
      try { 
        MockURI.URI(".%2e", ".%2e", "mP{e[h", "1].H47wd4W", "mP{e[h");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: .%2e://.%252emP%7Be%5Bh?1].H47wd4W#mP%7Be[h
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.redact();
      httpUrl0.encodedUsername();
      HttpUrl.defaultPort("http://www.somefakebutwellformedurl.org/...");
      httpUrl0.encodedPassword();
      String string0 = "lk-j.%7f:ghpr=d";
      int int0 = 4673;
      httpUrl0.queryParameterNames();
      httpUrl0.port();
      httpUrl0.password();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("lk-j.%7f:ghpr=d");
      httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder0.encodedUsername("lk-j.%7f:ghpr=d");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.parse("NpR1hYK08u:Y3YUC");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "NpR1hYK08u:Y3YUC");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w >oCBQ@`W\".aDT7");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("w >oCBQ@`W\".aDT7", "@Wk;iC9dt");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("@Wk;iC9dt");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("w >oCBQ@`W\".aDT7", "D6::ecF$]L,M");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("NpR1hYK08u:Y3YUC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: NpR1hYK08u:Y3YUC
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = HttpUrl.canonicalize("[n{=,IM*$%n:-y3<;", ") disagree", true, true, true, true);
      assertEquals("[n{=,IM*$%25n:-y3<;", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("encodedUsername == null", "*A1)");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("NpR1hYK08u:Y3YUC");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("*A1)", "encodedUsername == null");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("*A1)");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("encodedUsername == null", "encodedUsername == null");
      httpUrl_Builder5.addQueryParameter("<E&\"W,uD2j'8mI>O)S", "<E&\"W,uD2j'8mI>O)S");
      httpUrl_Builder4.reencodeForUri();
      httpUrl_Builder0.addPathSegment("NpR1hYK08u:Y3YUC");
      HttpUrl httpUrl0 = HttpUrl.parse("<E&\"W,uD2j'8mI>O)S");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.parse("NpR1hYK08u:Y3YUC");
      try { 
        HttpUrl.getChecked("http:yk08u:y3yuc");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http:yk08u:y3yuc
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.redact();
      httpUrl0.encodedUsername();
      HttpUrl.defaultPort("http://www.somefakebutwellformedurl.org/...");
      httpUrl0.encodedPassword();
      httpUrl0.queryParameterNames();
      httpUrl0.password();
      HttpUrl.parse("in == null");
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:oj8uy3yc");
      String string0 = httpUrl0.encodedFragment();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://oj8uy3yc/", httpUrl0.toString());
      assertNull(string0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:cyn|:");
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://cyn|/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("username == null", "username == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("username == null");
      httpUrl_Builder3.removePathSegment(0);
      boolean boolean0 = HttpUrl.percentEncoded("username == null", 4, 901);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("00", "f~y%3cs3");
      httpUrl_Builder1.addEncodedPathSegment("http://www.somefakebutwellformedurl.org/...");
      httpUrl_Builder1.addEncodedPathSegments(".%2e");
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("*A1)", "*A1)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NeK+qe*9i~");
      httpUrl_Builder1.addEncodedPathSegments("zA#[HI,");
      String string0 = HttpUrl.percentDecode("NeK+qe*9i~", false);
      assertEquals("NeK+qe*9i~", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedUsername();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("[C30,~VjBZA&");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("out == null");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("u-,Pq?h$");
      httpUrl_Builder5.removeAllEncodedQueryParameters("u-,Pq?h$");
      httpUrl_Builder1.setEncodedQueryParameter("u-,Pq?h$", "buffer(");
      httpUrl_Builder3.parse(httpUrl0, "buffer(");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.addEncodedPathSegments("0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.encodedPassword("out == null");
      httpUrl_Builder7.addEncodedPathSegments("u-,Pq?h$");
      String string0 = HttpUrl.percentDecode("~S%7C%2Fhw6Q", true);
      assertEquals("~S|/hw6Q", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockURL.getHttpExample();
      String string0 = "+";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(61);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("+");
      httpUrl_Builder2.query("+");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegment("Z;Jo|R,aO\u0007R72lYI{");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl httpUrl0 = HttpUrl.parse("http:fcyn|:");
      httpUrl0.fragment();
      // Undeclared exception!
      try { 
        httpUrl0.uri();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in authority at index 7: http://fcyn|/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("*A1)", (String) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter(" PvcD5RnLY.T", "size < 2: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("~S|/hw6Q");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("bytes is empty");
      httpUrl_Builder4.addEncodedQueryParameter("size < 2: ", " PvcD5RnLY.T");
      httpUrl_Builder4.query("y%60,yx");
      HttpUrl httpUrl0 = HttpUrl.parse("ZQ j;fJF/B9");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]g");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("encodedUsername == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("[|4R)] ", "[|4R)] ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(1858);
      String string0 = "-Fr|}bL/9F";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("-Fr|}bL/9F");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.username("%40");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("hGL2Q.mTl4nF%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: hGL2Q.mTl4nF%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "%2e.";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("1Z[F2,TYts}zMT");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("%2e.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: %2e.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "A.0:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("A.0:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: A.0:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0.:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "o+$n&\\c|$";
      try { 
        HttpUrl.getChecked("o+$n&c|$");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for o+$n&c|$
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("s%.$X#!|{aZez~c6T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: s%.$X#!|{aZez~c6T
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("https:ojk08u:y3yuc");
      assertNull(httpUrl1);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "http:x", "");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http://x/#", httpUrl0.toString());
      assertNotNull(httpUrl0);
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      URI uRI0 = MockURI.URI((String) null, "https:/www.somefakebutwellformedurl.org/fooexample", "https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      URI uRI1 = httpUrl0.uri();
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample#https:/www.somefakebutwellformedurl.org/fooexample", uRI1.toString());
      
      String string0 = httpUrl0.redact();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformedurl.org/...", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("Y@.Al{;,ma/");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("VtX0%20%7DtJ:", "gEUM[G8ODi]dp{!OD");
      String string0 = ">b!{";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments(">b!{");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.reencodeForUri();
      int int0 = 406;
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.port(406);
      List<String> list0 = httpUrl_Builder4.encodedQueryNamesAndValues;
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.host("hjA");
      httpUrl_Builder5.addQueryParameter("gEUM[G8ODi]dp{!OD", "gEUM[G8ODi]dp{!OD");
      httpUrl_Builder3.encodedUsername("VtX0%20%7DtJ:");
      try { 
        HttpUrl.getChecked(">b!{");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for >b!{
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.isHttps();
      try { 
        HttpUrl.getChecked("'NF4Zw9");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 'NF4Zw9
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.parse("http:fcyn|:");
      HttpUrl httpUrl1 = httpUrl0.resolve("feff");
      HttpUrl httpUrl2 = httpUrl1.resolve("http:fcyn|:");
      httpUrl2.newBuilder("http:fcyn|:");
      HttpUrl.percentDecode("http:fcyn|:", true);
      HttpUrl.getChecked("http:fcyn|:");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string0 = "*[:DQ{z,";
      httpUrl_Builder1.setQueryParameter("@nu+h%7f", "*[:DQ{z,");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("..");
      httpUrl_Builder2.query("%6}IycO+vCiyU");
      httpUrl_Builder1.addEncodedPathSegment("..");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegments("m~;JCjt>Ol]");
      String string1 = ":@cH5L5FRoQWBNtZp";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("m~;JCjt>Ol]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: m~;JCjt>Ol]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedUsername();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("[C30,~VjBZA&");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("");
      httpUrl_Builder3.addEncodedPathSegments("out == null");
      httpUrl_Builder2.removeAllEncodedQueryParameters("u-,Pq?h$");
      httpUrl_Builder1.setEncodedQueryParameter("u-,Pq?h$", "buffer(");
      httpUrl_Builder3.parse(httpUrl0, "buffer(");
      httpUrl_Builder3.addEncodedPathSegments("");
      HttpUrl.percentDecode("out == null", true);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      httpUrl1.queryParameterNames();
      httpUrl_Builder2.addQueryParameter("[C30,~VjBZA&", "&GxJb");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.queryParameterNames();
      HttpUrl.Builder.ParseResult.values();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "http:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("http:", "http:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("http:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("%6}IycO+vCiyU");
      httpUrl_Builder2.addEncodedPathSegments("%6}IycO+vCiyU");
      httpUrl_Builder2.reencodeForUri();
      int int0 = 406;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(406, "http:");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 406, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(61);
      httpUrl_Builder1.fragment((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.query("");
      httpUrl_Builder3.removeAllEncodedQueryParameters("kYcoSY$}");
      httpUrl_Builder2.addEncodedPathSegments("Un");
      try { 
        HttpUrl.getChecked("0");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 0
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("t.Hc]_$,?>GtMt");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("0000ffff", "1");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("1");
      httpUrl_Builder3.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.port(2844);
      List<String> list0 = httpUrl_Builder2.encodedQueryNamesAndValues;
      StringBuilder stringBuilder0 = new StringBuilder();
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("+");
      httpUrl_Builder0.setEncodedQueryParameter("%(2e.", "+");
      httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("+", 10, (-3841), "%(2e.", false, true, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("+");
      httpUrl0.uri();
      httpUrl0.scheme();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", "https:/www.somefakebutwellformedurl.org/fooexample", "", "", "https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(7580);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15160, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("+");
      httpUrl0.uri();
      httpUrl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve(".%252e");
      HttpUrl.Builder.ParseResult.values();
      httpUrl0.url();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter(".%252e", ".%252e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment(".%252e");
      String string0 = "unexpected path segment: ";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("unexpected path segment: ", "closed");
      int int0 = 102;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "Y5;?";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl1 = httpUrl0.resolve("Y5;?");
      httpUrl1.uri();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("Y5;?");
      httpUrl_Builder0.addEncodedPathSegment("Y5;?");
      try { 
        HttpUrl.getChecked("Y5;?");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Y5;?
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("./");
      try { 
        HttpUrl.getChecked("scheme%20==%20null");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for scheme%20==%20null
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("+");
      httpUrl0.uri();
      httpUrl0.encodedPath();
      httpUrl0.isHttps();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "http:X/k08u:m(3uc";
      HttpUrl httpUrl0 = HttpUrl.parse("http:X/k08u:m(3uc");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-3858));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/..");
      httpUrl0.queryParameterValues(".R,QF");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("Y5;?");
      httpUrl1.queryParameterValues("Y5;?");
      HttpUrl.parse("Y5;?");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.queryParameterValues("https:/www.somefakebutwellforte~url.org/foo?xample");
      MockURI.getRawPath(uRI0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("Y5;?");
      httpUrl0.equals("Y5;?");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockURL.getHttpExample();
      String string0 = "+";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[http:yk08u:y3yuc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [http:yk08u:y3yuc
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("%L_u'P |i]aZ) Nt", "T|h~Tm");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("T|h~Tm", "T|h~Tm");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("%L_u'P |i]aZ) Nt");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("5\"W");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedQuery("okhttp3.HttpUrl$1");
      httpUrl_Builder5.removePathSegment(0);
      httpUrl_Builder2.removeAllQueryParameters("vB;-,(}CC)\"7");
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.query();
      httpUrl0.port();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "gXpNUo7t4O-u,?/Z", 4, 4, true);
      HttpUrl httpUrl1 = httpUrl0.resolve("b");
      httpUrl1.host();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "|l!z!qkiSe:~";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("encodedPathSegments == null", "|l!z!qkiSe:~");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("|l!z!qkiSe:~");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("w_zkP ");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("getsockname failed");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("::?vVU7]KmOo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::?vVU7]KmOo
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "https:/www.somefakebutwellformedurl.org/fooexample";
      MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", ".", "https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.pathSize();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "sda;[jnP,@V";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("sda;[jnP,@V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: sda;[jnP,@V
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0.:d";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      List<String> list0 = httpUrl0.pathSegments();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      httpUrl_Builder0.encodedQueryNamesAndValues = list1;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0.:d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0.:d
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("http:", "\u2026]");
      httpUrl_Builder0.addPathSegments("\u2026]");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.username("\u2026");
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", "https:/www.somefakebutwellformedurl.org/fooexample", "https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.username();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("\r");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">antbL9f");
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:X/k08u:m(3uc");
      httpUrl0.queryParameter("http:X/k08u:m(3uc");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("1yx1Ry$G_@|>");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("TRF`%22$%237");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("0::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.query();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellformedurl.org/..", "https:/www.somefakebutwellformedurl.org/..", "https:/www.somefakebutwellformedurl.org/..");
      HttpUrl.get(uRI0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.queryStringToNamesAndValues("https:/www.somefakebutwellforte~url.org/foo?xample");
      httpUrl0.queryParameter("https:/www.somefakebutwellforte~url.org/foo?xample");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockURI.URI("https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellforte~url.org/foo?xample");
      HttpUrl httpUrl1 = httpUrl0.resolve("[size=");
      httpUrl1.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockURI.URI("https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample", "https:/www.somefakebutwellforte~url.org/foo?xample");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellforte~url.org/foo?xample");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 71, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0:0:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0:0:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      URI uRI0 = MockURI.URI("https:", "@/?#", "@/?#");
      HttpUrl.get(uRI0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockURL.getHttpExample();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      URI uRI0 = MockURI.URI("https", "o@XVw{:(t+:{", "b}j'Igk/,F?_");
      HttpUrl.get(uRI0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("}.WO>oK", "}.WO>oK");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("fffe:d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: fffe:d
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      URI uRI0 = MockURI.create("https:/www.somefakebutwellforte~url.orgVfoo?xample");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("w1VFr498/QN@");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("fffe::", ":");
      httpUrl_Builder2.password("w1VFr498/QN@");
      httpUrl0.encodedPath();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:Xoj08gu[y3c");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:Xoj08gu[y3c
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "http:Xoj08[u:y3yc";
      try { 
        HttpUrl.getChecked("http:Xoj08[u:y3yc");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:Xoj08[u:y3yc
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "https:/www.some-akebutwellforte~uAl.org/foo?xample";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      URI uRI0 = MockURI.URI("http:XojE8u:y3yc", "Q4@B2/ou3b 8Kuh", "http:XojE8u:y3yc");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.newBuilder();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0.60:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0.60:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0.60:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("https:oe8u:y3yc:4@b2%2fou3b8k%5eh%234@b%2fou3b8k%5eh");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:oe8u:y3yc:4@b2%2fou3b8k%5eh%234@b%2fou3b8k%5eh
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }
}
