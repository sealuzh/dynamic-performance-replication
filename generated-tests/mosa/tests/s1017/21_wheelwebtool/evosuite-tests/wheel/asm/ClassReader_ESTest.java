/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:42:32 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Frame;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, byteArrayInputStream0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      String string0 = classReader0.getClassName();
      assertEquals("java/lang/Object", string0);
      assertEquals(927, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      // Undeclared exception!
      try { 
        classReader0.readConst(8, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      // Undeclared exception!
      try { 
        classReader0.readConst(1, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(927, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 927);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      assertEquals(33, classReader0.getAccess());
      
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark(4);
      assertEquals(0, pipedInputStream0.available());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 8, 4);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(492, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1792, classReader1.getAccess());
      
      int int0 = classReader0.readByte(2);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotSame(classReader0, classReader1);
      assertEquals(186, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 8);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 14);
      assertEquals(927, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2, 927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46275
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 1178, 8);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(51213, classReader1.header);
      assertNotNull(classReader1);
      assertEquals(33, classReader0.getAccess());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[2] = 'C';
      charArray0[2] = 'E';
      charArray0[3] = '\u0000';
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1497
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassReader classReader1 = new ClassReader(classReader0.b, 1178, 8);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3866));
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter1 = new ClassWriter(classReader0, (-3866));
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      classReader1.accept((ClassVisitor) classWriter0, 2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getItem(2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1538);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 758, 1178);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1497
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3866));
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.accept((ClassVisitor) classWriter0, 2);
      classReader0.accept((ClassVisitor) classWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3866));
      String string0 = "wheel.asm.ClassWriter";
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.accept((ClassVisitor) classWriter0, 2);
      ClassReader classReader1 = new ClassReader(classReader0.b, 7316, (-3866));
      classReader0.getInterfaces();
      classReader1.accept((ClassVisitor) classWriter0, classReader0.SKIP_FRAMES);
      ClassWriter classWriter1 = new ClassWriter(classReader0.SKIP_CODE);
      Attribute[] attributeArray0 = new Attribute[2];
      Attribute attribute0 = new Attribute(string0);
      char[] charArray0 = new char[6];
      char char0 = 'R';
      charArray0[0] = char0;
      char char1 = ')';
      charArray0[1] = char1;
      char char2 = 'c';
      charArray0[2] = char2;
      char char3 = '7';
      charArray0[3] = char3;
      char char4 = 'B';
      charArray0[4] = char4;
      char char5 = '.';
      charArray0[5] = char5;
      Label[] labelArray0 = new Label[3];
      Frame frame0 = new Frame();
      Label label0 = frame0.owner;
      Label label1 = label0.getFirst();
      labelArray0[0] = label1;
      int int0 = 7312;
      Label label2 = classReader0.readLabel(int0, labelArray0);
      labelArray0[1] = label2;
      int int1 = 59;
      Label label3 = classReader1.readLabel(int1, labelArray0);
      labelArray0[2] = label3;
      Attribute attribute1 = attribute0.read(classReader0, classReader1.header, classReader1.SKIP_DEBUG, charArray0, classReader1.SKIP_CODE, labelArray0);
      attributeArray0[0] = attribute1;
      Attribute attribute2 = attribute0.next;
      attributeArray0[1] = attribute2;
      int int2 = (-833);
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, int2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1538);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      classReader0.accept((ClassVisitor) classWriter0, 248);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1538);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.accept((ClassVisitor) classWriter0, 103);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3866));
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      classReader1.accept((ClassVisitor) classWriter0, 7316);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassReader classReader1 = new ClassReader(classReader0.b, 1178, 8);
      char[] charArray0 = new char[5];
      classReader1.readConst(8, charArray0);
      charArray0[0] = 'C';
      charArray0[1] = '}';
      charArray0[2] = '5';
      charArray0[3] = '}';
      charArray0[1] = 'F';
      // Undeclared exception!
      try { 
        classReader1.readUTF8(927, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
